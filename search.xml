<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java进阶</title>
      <link href="2021/03/10/java-advance/"/>
      <url>2021/03/10/java-advance/</url>
      
        <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>将程序中的交叉业务逻辑（比如安全，日志，事务等），封装成一个切面，然后注入到目标对象（具体业务逻辑）中去。AOP可以对某个对象或某些对象的功能进行增强，比如对象中的方法进行增强，可以在执行某个方法之前或之后额外做一些事情。</p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h3><p>实际上就是个map（key，value），里面存各种对象（在xml里配置的bean节点、@Component、@Controller），在项目启动的时候会读取配置文件里面的bean节点，根据全限定类名使用反射创建对象放进map里、扫描到注解的类还是通过反射创建对象放到map。</p><p> 在代码需要用到里面对象时，再通过DI注入（autowired、resource等，xml里bean节点内的ref属性，项目启动时会读取xml节点ref属性根据id注入，也会扫描这些注解根据类型或id注入，id就是对象名）。</p><h3 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h3><p>当A运行到需要B时，IOC容器会主动创建一个B注入到对象A需要的地方。对象A获得依赖对象B的过程，由<strong>主动行为变为了被动行为</strong>。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><strong>实现IOC的方法</strong>，IOC容器在运行期间，动态地将某种依赖关系注入到对象中。</p><h2 id="BeanFactory和ApplicationContext"><a href="#BeanFactory和ApplicationContext" class="headerlink" title="BeanFactory和ApplicationContext"></a>BeanFactory和ApplicationContext</h2><p>ApplicationContext是BeanFactory的子接口，提供了更完整的功能：</p><ol><li>继承MessageSource，因此<strong>支持国际化</strong>，比如可以用MessageSource实现资源文件的读取（MessageSource接口中的getMessage方法）</li><li>统一的资源文件访问方式</li><li>提供在监听器中注册bean的事件（疑惑）</li><li>同时加载多个配置文件</li><li>载入多个（有继承关系）上下文，使得每一个上下文都专注于一个特定的层次，比如应用的web层</li></ol><p>不同点：</p><ol><li>BeanFactory延迟加载注入Bean，而ApplicationContext在容器启动时一次性创建所以的Bean，这样<strong>有利于检查所依赖属性是否注入</strong>，无需等待，不足是占用内存空间</li><li>BeanFactory通常以编程方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。</li><li>他们都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，区别：BeanFactory需要手动注册，而ApplicationContext则是自动注册</li></ol><blockquote><p>BeanFactoryPostProcessor在容器实例化任何其它bean之前读取配置元数据，并可以根据需要进行修改。</p><p>BeanPostProcessor是在spring容器加载了bean的定义文件并且实例化bean之后执行的。BeanPostProcessor的执行顺序是在BeanFactoryPostProcessor之后。</p></blockquote><h2 id="Spring-Bean生命周期"><a href="#Spring-Bean生命周期" class="headerlink" title="Spring Bean生命周期"></a>Spring Bean生命周期</h2><ol><li>解析类得到BeanDefinition</li><li>如果有多个构造方法，则推断构造方法</li><li>实例化得到一个对象</li><li>@Autowired注解属性填充</li><li>回调Aware方法，比如BeanNameAware（获取当前bean在IOC容器中的名字），BeanFactoryAware</li><li>调用BeanPostProcessor的初始化前的方法</li><li>调用初始化方法</li><li>调用BeanPostProcessor的初始化后的方法，在这里会进行AOP</li><li>如果当创建的bean是单例的则放入单例池</li><li>使用bean</li><li>容器关闭时调用DisposableBean中destory方法</li></ol><h2 id="Spring-Bean作用域"><a href="#Spring-Bean作用域" class="headerlink" title="Spring Bean作用域"></a>Spring Bean作用域</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-1.jpg" alt></p><h2 id="Spring框架中的设计模式"><a href="#Spring框架中的设计模式" class="headerlink" title="Spring框架中的设计模式"></a>Spring框架中的设计模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>由一个工厂类根据传入的参数，动态觉得应该创建哪一个产品类</p><p>BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建根据具体情况来定。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>实现了FactoryBean接口的bean，spring会在使用getBean（）调用获得该bean时，会自动调用该bean的getObject（）方法，所以返回的不是factory这个bean，而是这个bean.getObject（）方法的返回值。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><p>Spring提供了全局的访问点BeanFactory，但是没有从构造器级别时控制单例，这是因为spring管理的是任意的java对象。</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>Spring定义了一个适配接口，使每一种Controller有一种对应的适配器实现类（SpringMVC中HandlerAdapter），让适配器代替Controller执行相应的方法（Handler）。这样在扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展。</p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>动态地给一个对象添加一些额外的职责。增加功能比生成子类更加灵活。</p><p>Spring中用到的装饰器模式在类名上有两种表现：1、类名中含有wrapper；2、类名中含有Decorator</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>切面在应用运行的时候被织入。在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。</p><p>在一个方法上加了@Transactional（申明式事务）注解后，Spring会<strong>基于这个类生成一个代理对象</strong>，Autowired后getBean从AOP容器中取得代理对象，会将这个代理对象作为bean，当在使用这个代理对象的方法时，代理逻辑会先把事务的自动提交设置为false。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>Spring的事件驱动模型使用的是观察者模式，ApplicationContext事件机制是观察者模式的实现，通过ApplicationEvent类和ApplicationListener接口，可以实现ApplicationContext事件处理。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>Spring框架的资源访问Resource接口，该接口提供了更强的资源访问能力，Spring框架本身大量使用了Resource接口来访问底层资源。</p><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><h3 id="autowire属性五种装配方式"><a href="#autowire属性五种装配方式" class="headerlink" title="autowire属性五种装配方式"></a>autowire属性五种装配方式</h3><h4 id="no"><a href="#no" class="headerlink" title="no"></a>no</h4><p>缺省情况下，自动配置时通过“ref”属性手动设定。</p><p>手动装配：以value或ref的方式明确指定属性值</p><h4 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h4><p>根据bean的属性名称进行自动装配</p><p>Customer的属性名称为person，Spring会将bean id为person的bean通过setter方法进行自动装配</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Customer<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h4><p>根据bean的类型进行自动装配</p><p>Customer的属性person的类型为Person，Spring会将Person类型通过setter方法进行自动装配</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Customer<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>类似byType，不过是应用于构造器的参数。如果一个bean与构造器参数的类型相同，则进行自动装配，否则导致异常。</p><p>Customer构造函数的参数person的类型为Person，Spring会将Person类型通过构造方法进行自动装配</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Customer<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>constructor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="autodetect"><a href="#autodetect" class="headerlink" title="autodetect"></a>autodetect</h4><p>如果有默认的构造器，则通过constructor方式进行自动装配，否则使用byType方式进行自动装配</p><h4 id="Autowired自动装配bean"><a href="#Autowired自动装配bean" class="headerlink" title="@Autowired自动装配bean"></a>@Autowired自动装配bean</h4><p>可在<strong>字段，setter方法，构造函数</strong>上使用。</p><h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><ol><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。（Map&lt; url , handler &gt;，其中url可以是bean id、@RequestMapping、key）</li><li>处理器映射器找到具体的处理器（可以根据xml配置、注解进行查找），生成处理器及处理器拦截器（如果有则生成）一并返回给DispatcherServlet</li><li>DispatcherServlet调用HandlerAdapter处理器适配器（Controller接口定义整个类为一个Handler、@RequestMapping定义方法、Servlet三种方法都有各自的适配器，support方法遍历适配器，找到后执行handle调用真正的handler）</li><li>HandlerAdapter经过适配调用具体的处理器（Controller，也叫后端控制器）</li><li>Controller执行完成返回ModelAndView</li><li>HandlerAdapter将ModelAndView返回给DispatcherServlet</li><li>DispatcherServlet把ModelAndView传给ViewReslover视图解析器</li><li>ViewReslover解析后返回具体View</li><li>DispatcherServlet根据View进行渲染视图（将模型数据填充至视图中，比如JSP）</li><li>DispatcherServlet响应用户</li></ol><h2 id="SpringBoot自动装配"><a href="#SpringBoot自动装配" class="headerlink" title="SpringBoot自动装配"></a>SpringBoot自动装配</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-2.jpg" alt></p><h2 id="和"><a href="#和" class="headerlink" title="#{ }和${ }"></a>#{ }和${ }</h2><p>#{ }是预编译处理，是占位符，${ }是字符串替换，是拼接符</p><ol><li>Mybatis在处理#{ }时，会将sql中的#{ }替换为 ？号，调用PreparedStatement来赋值（会自动加单引号）；</li><li>在处理${ }时，就是替换成变量值，调用Statement来赋值；</li></ol><h2 id="绝大多数需求为单条记录查询时可以选择哈希索引"><a href="#绝大多数需求为单条记录查询时可以选择哈希索引" class="headerlink" title="绝大多数需求为单条记录查询时可以选择哈希索引"></a>绝大多数需求为单条记录查询时可以选择哈希索引</h2><h2 id="定义有外键的数据列一定要建立索引"><a href="#定义有外键的数据列一定要建立索引" class="headerlink" title="定义有外键的数据列一定要建立索引"></a>定义有外键的数据列一定要建立索引</h2><h2 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h2><ol><li>是否load了额外的数据</li><li>是否走索引</li><li>横向或纵向分表</li></ol><h2 id="ACID靠什么保证"><a href="#ACID靠什么保证" class="headerlink" title="ACID靠什么保证"></a>ACID靠什么保证</h2><ol><li><p>A由<strong>undo log</strong>日志保证，它记录了<strong>需要回滚的日志信息</strong>，事务回滚时撤销已经执行成功的sql</p></li><li><p>C由其他三大特性保证，<strong>程序代码</strong>要保证业务上的一致性</p></li><li><p>I由<strong>MVCC</strong>来保证</p></li><li><p>D由<strong>内存 + redo log</strong>来保证，mysql修改数据同时在内存和redo log记录这次操作，宕机的时候可以从redo log恢复。redo log记录了<strong>数据修改的状态</strong></p><blockquote><p>InnoDB redo log写盘，InnoDB 事务进入prepare 状态。</p><p>如果前面 prepare成功，binlog 写盘，再继续将事务日志持久化到binlog。如果持久化成功，那么InnoDB事务则进入commit状态（在 redo log里面写一个commit记录）</p><p>所以说如果redo log中由commit，说明binlog持久化成功</p></blockquote><p>redo log的刷盘会在系统空闲时进行。（Mysql的主从同步（复制）通过binlog来同步）</p></li></ol><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p><strong>多版本并发控制</strong>（Multi-Version Concurrency Control）：读取数据时通过一种类似快照的方式将数据保存下来，这样读锁就和写锁不冲突了，不同的事务session会看到自己特定版本的数据，版本链</p><p>MVCC只在 READ COMMITED 和REPEATABLE READ 下工作。因为READ UNCOMMITED 总是读取最新的数据行，而不是符合当前事务版本的数据行。而serializable则会对所有读取的行都加锁。</p><p>聚簇索引记录中有两个必要的隐藏列：</p><ol><li><strong>trx_id</strong>：用来存储每次对某条聚簇索引记录进行修改的时候的事务id</li><li><strong>roll_pointer</strong>：每次对聚簇索引修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了个<strong>指针</strong>，指向<strong>索引记录的上一个版本</strong>的位置。（注意插入操作的undo日志没有这个属性，因为它没有老版本）</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-3.jpg" alt></p><h2 id="mysql主从同步原理"><a href="#mysql主从同步原理" class="headerlink" title="mysql主从同步原理"></a>mysql主从同步原理</h2><p>主要由三个线程：master（binlog dump thread）、slave（I / O thread、SQL thread）</p><ol><li>主节点binlog，主从复制的基础是<strong>主库记录数据库的所有变更记录到binlog</strong>。binlog是数据库服务器启动的那一刻起，保存所有修改数据库结构或内容的一个文件。</li><li>主节点log dump线程，当binlog有变动时，log dump线程读取其内容并发送给从节点。</li><li>从节点I /O 线程接受binlog 内容，并将其写入到relay log 文件中。（relay log在从节点）</li><li>从节点的SQL线程读取 relay log 文件内容对数据更新进行重放，最终保证主从数据库一致性。</li></ol><p>注：主从节点使用 <strong>binlog文件 + position</strong> 偏移量来定位主从同步的位置，从节点会保存其已接收到的偏移量，如果从节点发生宕机重启，则会自动从position的位置同步。</p><p>mysql默认的复制方式是异步的，主库把日志发送给从库不关心从库是否已经处理。有一个问题就是假设主库挂了，从库处理失败，这时候从库升为主库，日志丢失了。</p><p><strong>全同步复制</strong>：主库写入binlog后强制同步日志到从库，<strong>所有</strong>从库执行完才返回客户端。</p><p><strong>半同步复制</strong>：从库写入日志成功后返回ACK确认给主库，主库<strong>收到至少一个</strong>从库的确认就认为完成。</p><h2 id="负载均衡类型"><a href="#负载均衡类型" class="headerlink" title="负载均衡类型"></a>负载均衡类型</h2><p>DNS方式实现负载均衡</p><p>硬件负载均衡：F5和A10</p><p>软件负载均衡：</p><ol><li><strong>Nginx</strong>：七层负载均衡，支持HTTP、E-mail协议，同时也支持4层负载均衡（解析url，与客户端和服务端都要保持长连接，性能损耗）</li><li><strong>HAproxy</strong>：支持七层规则，性能不错。OpenStack 默认使用</li><li><strong>LVS</strong>：运行在内核态，性能最高，严格说工作在第三层（ip——&gt;Server）</li></ol><h2 id="分布式下Session共享方案"><a href="#分布式下Session共享方案" class="headerlink" title="分布式下Session共享方案"></a>分布式下Session共享方案</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-4.jpg" alt></p><h2 id="分布式锁解决方案"><a href="#分布式锁解决方案" class="headerlink" title="分布式锁解决方案"></a>分布式锁解决方案</h2><p>需要这个锁独立于每一个服务之外，而不是在服务里面。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>利用<strong>主键冲突</strong>控制一次只有一个线程能获取锁，非阻塞（要自己写阻塞代码）、不可重入（递归不支持，要自己实现AQS）、单点、不支持失效时间（要自己写定时器）</p><p>比如在数据库中建张表，采用唯一约束，要获得锁就往数据库中插入同一个key的记录放到唯一键上面，如果放进去了就是拿到锁了。</p><h3 id="Zookeeper分布式锁"><a href="#Zookeeper分布式锁" class="headerlink" title="Zookeeper分布式锁"></a>Zookeeper分布式锁</h3><p>zk通过Znode解决<strong>死锁</strong>问题，一旦客户端获取锁后突然挂掉，这个临时节点会自动删除，其他客户端自动获取锁。</p><p>临时顺序节点解决<strong>惊群效应</strong>。</p><h3 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h3><p>setNX命令，<strong>单线程处理网络请求</strong>，不需要考虑并发安全性。</p><p>Redis是个第三方中间件，在集群中很方便地实现分布式锁，所有服务节点设置相同地key，返回0则获取锁失败，T1申请到key后T2肯定申请不到。</p><h4 id="setNX问题"><a href="#setNX问题" class="headerlink" title="setNX问题"></a>setNX问题</h4><ol><li>早期版本<strong>没有超时参数</strong>，需要单独设置，存在死锁问题（key不会超时）</li><li>后期版本提供加锁和设置时间原子操作（set（NX,，timeout）），但是存在任务超时，锁自动释放，导致<strong>并发问题</strong>，加锁和释放锁不是同一线程问题（假如T1获得锁要执行15s，锁失效时间为10s，在这5s内T2获得了锁，T1执行完了要把锁释放掉，结果把T2的锁释放了，解决方法可以在value中存上线程的唯一标识或者uuid）</li></ol><p>删除锁：<strong>判断线程唯一标识再删除</strong></p><p>可重入性及<strong>锁续期</strong>没有实现，通过redisson解决（类似AQS实现（count计数），看门狗监听机制（设置一个监听器监听任务，任务没有执行完就延长过期时间））</p><p><strong>redlock</strong>：以上的机制都只操作单节点，即使Redis通过Sentinel保证高可用，如果这个master节点由于某些发生了主从切换，那么就会出现锁丢失的情况（主从节点间是异步通信，Redis同步设置可能数据丢失）。redlock从多个节点申请锁，当一半以上节点获取成功才算成功，redisson有相应的实现</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es分布式一致性原理</title>
      <link href="2021/03/10/es-node/"/>
      <url>2021/03/10/es-node/</url>
      
        <content type="html"><![CDATA[<p>## </p><p>待完成</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的守护线程</title>
      <link href="2021/03/09/java/daemon-thread/"/>
      <url>2021/03/09/java/daemon-thread/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>用户线程</strong>即运行在前台的线程，而<strong>守护线程</strong>是运行在后台的线程。 守护线程作用是为其他前台线程的运行提供便利服务，比如垃圾回收线程就是一个守护线程。</p><p>其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没啥线程好服务的了，所以Daemon Thread也就退出了。</p><p>简单的讲就是<strong>JVM的退出不用考虑守护线程的退出，而必须考虑用户线程的退出</strong>。</p><p>用户也可以<strong>自行的设定守护线程</strong>，方法：<code>public final void setDaemon(boolean on)</code> ；但是有几点需要注意：</p><ol><li>thread.setDaemon（true）必须在thread.start（）之前设置，否则会跑出一个IllegalThreadStateException异常。<strong>你不能把正在运行的常规线程设置为守护线程</strong>。 （备注：这点与守护进程有着明显的区别，守护进程是创建后，让进程摆脱原会话的控制+让进程摆脱原进程组的控制+让进程摆脱原控制终端的控制；所以说寄托于虚拟机的语言机制跟系统级语言有着本质上面的区别）</li><li>在Daemon线程中产生的新线程也是Daemon的。 （这一点又是有着本质的区别了：守护进程fork（）出来的子进程不再是守护进程，尽管它把父进程的进程相关信息复制过去了，但是子进程的进程的父进程不是init进程，所谓的守护进程本质上说就是“父进程挂掉，init收养，然后文件0,1,2都是/dev/null，当前目录到/”）</li><li>守护线程<strong>不能用于去访问固有资源</strong>，比如读写操作或者计算逻辑。因为在Daemon Thread还没来的及进行操作时，虚拟机可能已经退出了</li><li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li></ol><p>转载：<a href="https://blog.csdn.net/lc1010078424/article/details/79613348" target="_blank" rel="noopener">https://blog.csdn.net/lc1010078424/article/details/79613348</a></p><h2 id="Daemon-Thread实际应用"><a href="#Daemon-Thread实际应用" class="headerlink" title="Daemon Thread实际应用"></a>Daemon Thread实际应用</h2><h3 id="web服务器中的Servlet"><a href="#web服务器中的Servlet" class="headerlink" title="web服务器中的Servlet"></a>web服务器中的Servlet</h3><p>web服务器中的Servlet，容器启动时后台初始化一个服务线程，即调度线程，负责处理http请求；</p><p>每个请求过来调度线程从线程池中取出一个工作者线程来处理该请求，从而实现并发控制的目的。</p><h3 id="Java的Timer"><a href="#Java的Timer" class="headerlink" title="Java的Timer"></a>Java的Timer</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Timer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerTaskRun</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统当前时间："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上写法任务虽然运行完了，但进程还未销毁，为什么会出现这种情况呢？</p><p>可以看一下Timer的源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"Timer-"</span> <span class="token operator">+</span> <span class="token function">serialNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Timer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出<strong>每创建一个Timer就是启动一个新的线程，那么启动的线程不是守护线程，所以一直运行</strong>。那我们该如何将 新创建的的Timer 改成守护线程呢？更改如上的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerTaskRun</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统当前时间："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置Timer为true</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果只想执行一次等待执行完之后调用timer.cancel（）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2021/03/08/java-basis/"/>
      <url>2021/03/08/java-basis/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>优点： 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p>缺点： 性能比面向过程低</p><h2 id="Java和C"><a href="#Java和C" class="headerlink" title="Java和C++"></a>Java和C++</h2><ol><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li></ol><h2 id="构造器Constructor"><a href="#构造器Constructor" class="headerlink" title="构造器Constructor"></a>构造器Constructor</h2><h3 id="构造器-Constructor-是否可被-override？"><a href="#构造器-Constructor-是否可被-override？" class="headerlink" title="构造器 Constructor 是否可被 override？"></a>构造器 Constructor 是否可被 override？</h3><p>父类的私有属性和构造方法并不能被继承，所以Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h2 id="overload和override"><a href="#overload和override" class="headerlink" title="overload和override"></a>overload和override</h2><p>重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。</p><p>重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法</p><blockquote><p>方法重载跟返回值类型和修饰符无关</p></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在<strong>程序运行期间</strong>才确定。</p><p>两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）</p><p>条件：1.要有继承 2.要有方法的重写 3.父类引用指向子类对象</p><h2 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h2><ol><li>操作少量的数据 = String</li><li>单线程操作字符串缓冲区下操作大量数据 = StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据 = StringBuffer</li></ol><h2 id="静态方法内调用一个非静态成员"><a href="#静态方法内调用一个非静态成员" class="headerlink" title="静态方法内调用一个非静态成员"></a>静态方法内调用一个非静态成员</h2><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>一、静态方法只能访问静态方法和静态成员。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//加入static关键字，变成静态方法</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态方法调用静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result="</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、非静态方法要被实例化才能被静态方法调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Test test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化类</span>        <span class="token keyword">int</span> result<span class="token operator">=</span>test<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用非静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result="</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无参构造的作用"><a href="#无参构造的作用" class="headerlink" title="无参构造的作用"></a>无参构造的作用</h2><p>Java 程序在执行子类的构造方法之前，如果没有用 super（）来调用父类特定的构造方法，则会调用父类中的无参构造。</p><p>在调用子类构造方法之前会先调用父类无参构造方法，是为了帮助子类做<strong>初始化工作</strong>。</p><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法</li><li>接口中的实例变量默认是 final 类型的，而抽象类中则不一定</li><li>一个类可以实现多个接口，但最多只能实现一个抽象类</li><li>一个类实现接口的话要实现接口的所有方法，而抽象类不一定</li><li>接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象 从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范</li></ol><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><ol><li>从语法形式上，看成员变量是属于类的，而局部变量是在方法中定义的<br>变量或是方法的参数</li><li>从变量在内存中的存储方式来看，成员变量是对象的一部分，而对象存在于堆内存，局部变量存在于栈内存</li><li>从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值，则会自动以类型的默认值而赋值（一种情况例外被 final 修饰的成员变量也必须显示地赋值）；而局部变量则不会自动赋值</li></ol><h2 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h2><ol><li>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，<strong>调用静态方法可以无需创建对象</strong>。</li><li>静态方法在访问本类的成员时，<strong>只允许访问静态成员</strong>（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制</li></ol><h2 id="equals-方法被覆盖过，则-hashCode-方法也必须被覆盖"><a href="#equals-方法被覆盖过，则-hashCode-方法也必须被覆盖" class="headerlink" title="equals 方法被覆盖过，则 hashCode 方法也必须被覆盖"></a>equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</h2><p>因为两个对象有相同的 hashcode 值，它们也不一定是相等的</p><blockquote><p>hashCode 的默认行为是对堆上的对象产生独特值。如果没有重写hashCode，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p></blockquote><h2 id="类中所有的-private-方法都隐式地指定为-final"><a href="#类中所有的-private-方法都隐式地指定为-final" class="headerlink" title="类中所有的 private 方法都隐式地指定为 final"></a>类中所有的 private 方法都隐式地指定为 final</h2><h2 id="处理不想序列化的字段"><a href="#处理不想序列化的字段" class="headerlink" title="处理不想序列化的字段"></a>处理不想序列化的字段</h2><p>使用 transient 关键字修饰。</p><p>作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。</p><p>transient 只能修饰变量，不能修饰类和方法。</p><h2 id="获取键盘输入"><a href="#获取键盘输入" class="headerlink" title="获取键盘输入"></a>获取键盘输入</h2><p>方法 1：通过 Scanner</p><pre class="line-numbers language-java"><code class="language-java">Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法 2：通过 BufferedReader</p><pre class="line-numbers language-java"><code class="language-java">BufferedReader input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Native方法"><a href="#Native方法" class="headerlink" title="Native方法"></a>Native方法</h2><p>Native Method就是一个java调用非java代码的接口。</p><p>被native关键字修饰的方法叫做本地方法，本地方法和其它方法不一样，本地方法意味着和平台有关，因此使用了native的程序可移植性都不太高。另外native方法在JVM中运行时数据区也和其它方法不一样，它有专门的<strong>本地方法栈</strong>。native方法主要用于加载文件和动态链接库，由于Java语言无法访问操作系统底层信息（比如：底层硬件设备等），这时候就需要借助C语言来完成了。被native修饰的方法可以被C语言重写。</p><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p><strong>堆</strong>是进程和线程共有的空间，唯一目的是<strong>存放对象实例</strong>，创建的对象和数组都保存在堆中。</p><p><strong>栈</strong>是每个线程独有的，每个线程的栈相互独立。每个方法在执行的同时都会创建一个栈帧用来存储<strong>局部变量表、操作数栈、动态链接、方法出口</strong>等信息。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>每条线程都还有<strong>私有的</strong>ThreadLocalMap容器，无需使用同步机制保证多线程访问容器的互斥性。（使用static，又不想考虑线程安全的时候用）</p><p>使用场景：</p><ol><li>在进行<strong>对象跨层传递</strong>的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束</li><li>线程间数据隔离</li><li>进行事务操作，用于存储线程事务信息（Spring框架在事务开始时会给当前线程绑定一个Jdbc Connection）</li><li>数据库连接，Session会话管理</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-1.png" alt></p><p>ThreadLocal内存泄漏的根源：<strong>由于ThreadLocalMap的生命周期跟Thread一样长</strong>，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。</p><p>正确用法：</p><ol><li>每次使用完ThreadLocal都<strong>调用它的remove（）方法</strong>清除数据</li><li>将ThreadLocal变量定义成<strong>private static</strong>，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能通过ThreadLocal的弱引用访问到Entry的value值，进而清除掉。</li></ol><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><h3 id="对象锁（monitor）"><a href="#对象锁（monitor）" class="headerlink" title="对象锁（monitor）"></a>对象锁（monitor）</h3><p>synchronized的具体底层实现，demo:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SynchronizedDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中有一个同步代码块，<strong>锁住的是类对象</strong>，并且还有一个同步静态方法，锁住的依然是该类的类对象。编译之后，切换到SynchronizedDemo.class的同级目录之后，然后用<code>javap -v SynchronizedDemo.class</code>查看字节码文件：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-2.png" alt></p><p>使用Synchronized进行同步，其关键就是必须要对对象的监视器monitor进行获取，当线程获取monitor后才能继续往下执行，否则就只能等待。而这个获取的过程是<strong>互斥</strong>的，即同一时刻只有一个线程能够获取到monitor。</p><p>从上图中就可以看出来，执行静态同步方法的时候就只有一条monitorexit指令，并没有monitorenter获取锁的指令。这就是<strong>锁的重入性</strong>，<strong>每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-3.png" alt></p><p>该图可以看出，任意线程对Object的访问，首先要获得Object的监视器，如果获取失败，该线程就进入同步状态，线程状态变为BLOCKED，当Object的监视器占有者释放后，在同步队列中得线程就会有机会重新获取该监视器。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>在J.U.C包中利用CAS实现类有很多，可以说是支撑起整个concurrency包的实现，在Lock实现中会有CAS改变state变量，在atomic包中的实现类也几乎都是用CAS实现</p><h3 id="CAS的问题"><a href="#CAS的问题" class="headerlink" title="CAS的问题"></a>CAS的问题</h3><h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>比如一个旧值A变为了成B，然后再变成A，刚好在做CAS时检查发现旧值并没有变化依然为A，但是实际上的确发生了变化。解决方案可以沿袭数据库中常用的乐观锁方式，添加一个版本号可以解决。原来的变化路径A-&gt;B-&gt;A就变成了1A-&gt;2B-&gt;3C。在java 1.5后的atomic包中提供了AtomicStampedReference来解决ABA问题，解决思路就是这样的。</p><h4 id="自旋时间过长"><a href="#自旋时间过长" class="headerlink" title="自旋时间过长"></a>自旋时间过长</h4><p>使用CAS时非阻塞同步，也就是说不会将线程挂起，会自旋（无非就是一个死循环）进行下一次尝试，如果这里自旋时间过长对性能是很大的消耗。如果JVM能支持处理器提供的pause指令，那么在效率上会有一定的提升。</p><h4 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h4><p>当对一个共享变量执行操作时CAS能保证其原子性，<strong>如果对多个共享变量进行操作，CAS就不能保证其原子性</strong>。有一个解决方案是利用对象整合多个共享变量，即一个类中的成员变量就是这几个共享变量。然后将这个对象做CAS操作就可以保证其原子性。atomic中提供了AtomicReference来保证引用对象之间的原子性。</p><h2 id="并发的三大特性"><a href="#并发的三大特性" class="headerlink" title="并发的三大特性"></a>并发的三大特性</h2><h4 id="总线lock"><a href="#总线lock" class="headerlink" title="总线lock"></a>总线lock</h4><p>在CPU1要操作共享变量的时候，其在总线上发出一个LOCK#信号，其他处理器就不能操作缓存了该共享变量内存地址的缓存。</p><h4 id="缓存一致性协议"><a href="#缓存一致性协议" class="headerlink" title="缓存一致性协议"></a>缓存一致性协议</h4><p>当某块CPU对缓存中的数据进行操作了之后，就通知其他CPU放弃储存在它们内部的缓存，或者从主内存中重新读取</p><p>MESI协议：在每个缓存行上维护两个状态位</p><ol><li><p>​    M：被修改的。处于这一状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且<strong>没有更新到内存</strong>中。</p></li><li><p>​    E：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其<strong>数据没有修改</strong>，即与内存中一致。</p></li><li><p>​    S：共享的。处于这一状态的数据在多个CPU中都有缓存，且<strong>与内存一致</strong>。</p></li><li><p>​    I：无效的。本CPU中的这份缓存已经无效。</p></li><li><p>M状态必须时刻<strong>监听所有试图读取该缓存行</strong>对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。</p></li><li><p>E状态必须时刻<strong>监听其他试图读取该缓存行</strong>对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。</p></li><li><p>S状态必须时刻<strong>监听使该缓存行无效或者独享该缓存行的请求</strong>，如果监听到，则必须把其缓存行状态设置为I。</p></li></ol><blockquote><p>当CPU需要读取数据时，如果其缓存行的状态是I的，则需要从内存中读取，并把自己状态变成S，如果不是I，则可以直接读取缓存中的值，但在此之前，必须要等待其他CPU的监听结果，如其他CPU也有该数据的缓存且状态是M，则需要等待其把缓存更新到内存之后，再读取。</p><p>当CPU需要写数据时，只有在其缓存行是M或者E的时候才能执行，否则需要发出特殊的RFO指令（Read Or Ownership，这是一种总线事务），通知其他CPU置缓存无效（I），这种情况下性能开销是相对较大的。在写入完成后，修改其缓存状态为M。</p></blockquote><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>AtomicInteger.incrementAndGet（用了CAS）</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>quartz实现高级定制化定时任务中用AtomicInteger标识程序执行过程中是否发生了异常</p></blockquote><p>把普通变量升级为原子变量：主要是<code>AtomicIntegerFieldUpdater&lt;T&gt;</code>类</p><p>在高并发情况下，LongAdder（累加器）比AtomicLong原子操作效率更高，LongAdder累加器是java8新加入的</p><p>在高度并发竞争情形下，AtomicLong每次进行add都需要flush和refresh（这一块涉及到java内存模型中的工作内存和主内存的，所有变量操作只能在工作内存中进行，然后写回主内存，其它线程再次读取新值），每次add都需要同步，在高并发时会有比较多冲突，比较耗时导致效率低；而LongAdder中每个线程会维护自己的一个计数器，在最后执行<code>LongAdder.sum()</code>方法时候才需要同步，把所有计数器全部加起来，不需要flush和refresh操作。</p><p>转载：<a href="https://blog.csdn.net/fanrenxiang/article/details/80623884" target="_blank" rel="noopener">https://blog.csdn.net/fanrenxiang/article/details/80623884</a></p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p><strong>final</strong>也保证可见性</p><p><strong>synchronized</strong>（阻塞同步）</p><ol><li>线程解锁前，必须把共享变量的最新值刷新到主内存中</li><li>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新获取最新的值（注意：加锁与解锁需要是同一把锁）</li></ol><p><strong>volatile</strong>（非阻塞同步）：在生成汇编代码时会在volatile修饰的共享变量进行写操作的时候会多出<strong>Lock前缀的指令</strong>（缓存一致性）</p><ol><li><strong>它先对总线和缓存加锁</strong>，然后执行后面的指令，在<strong>Lock锁住总线</strong>的时候，其他CPU的读写请求都会<strong>被阻塞</strong>，<strong>直到锁释放</strong>。</li><li>最后释放锁后会把高速缓存中的脏数据全部刷新回主内存，且这个写回内存的操作会使在其他CPU里缓存了该地址的数据无效。</li></ol><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p><strong>synchronized</strong>：对Java中的对象加锁，一种排他的、可重入的锁。通过排他锁的方式就保证了同一时间内，被synchronized修饰的代码是<strong>单线程</strong>执行的。满足了as-if-serial语义（单线程），单线程的有序性就天然存在了（<strong>不能禁止重排序</strong>）</p><blockquote><p>as-if-serial语义：不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。编译器和处理器不会对存在<strong>数据依赖关系</strong>的操作做重排序，因为这种重排序会改变执行结果。</p></blockquote><p><strong>volatile</strong>：禁止重排序，使用内存屏障，统一由jvm来生成内存屏障的指令，Lock是软件指令。</p><p>内存屏障的作用：</p><ol><li>屏障下面的代码不能跟屏障上面的代码交换执行顺序</li><li>线程修改完共享变量以后会马上把该变量从本地内存写回到主内存，并且让其他线程本地内存中该变量副本失效（使用MESI协议）</li></ol><p><strong>内存屏障</strong>是CPU指令。如果字段是volatile，Java内存模型将在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令：</p><ol><li>对于Load Barrier来说，在指令前插入Load Barrier，可以<strong>让高速缓存中的数据失效，强制从新从主内存加载新数据</strong></li><li>对于Store Barrier来说，在指令后插入Store Barrier，能<strong>让写入缓存中的最新数据更新写入主内存，让其他线程可见</strong></li></ol><p><strong>StoreLoad屏障：</strong>对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能。</p><blockquote><p>如果指令甲happens-before指令乙，那么指令甲必须排序在指令乙之前，并且指令甲的执行结果对指令乙可见。</p></blockquote><h2 id="线程池中为什么先入队列而不是先创建最大线程"><a href="#线程池中为什么先入队列而不是先创建最大线程" class="headerlink" title="线程池中为什么先入队列而不是先创建最大线程"></a>线程池中为什么先入队列而不是先创建最大线程</h2><p>在创建新线程时，要获取全局锁，这时其他都得阻塞，影响效率。</p><h2 id="线程池中线程复用原理"><a href="#线程池中线程复用原理" class="headerlink" title="线程池中线程复用原理"></a>线程池中线程复用原理</h2><p>线程池将线程和任务进行解耦，摆脱了之前通过Thread创建线程时一个线程必须对应一个任务的限制。</p><p>同一个线程可以从阻塞队列中不对获取新任务来执行，其核心原理在于线程池对Thread封装，并<strong>不是每次执行任务都调用Thread.start（）来创建新线程</strong>，而是让每个线程执行一个“循环任务”，不断检查是否有任务需要被执行，有就<strong>调用任务中的run方法</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm安装ingress</title>
      <link href="2021/03/06/project/helm-ingress/"/>
      <url>2021/03/06/project/helm-ingress/</url>
      
        <content type="html"><![CDATA[<h2 id="Helm介绍"><a href="#Helm介绍" class="headerlink" title="Helm介绍"></a>Helm介绍</h2><p>Helm是Kubernetes的包管理器，主要用来管理 Charts。Helm Chart是用来封装Kubernetes原生应用程序的一系列YAML文件。可以在你部署应用的时候自定义应用程序的一些Metadata，以便于应用程序的分发。</p><p>对于应用发布者而言，可以通过Helm打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。对于使用者而言，使用Helm后不用需要编写复杂的应用部署文件，可以以简单的方式在Kubernetes上查找、安装、升级、回滚、卸载应用程序。</p><p>Helm和Kubernetes之间的关系可以如下类比。</p><ul><li>Helm &lt;–&gt; Kubernetes</li><li>Yum &lt;–&gt; CentOS</li></ul><p>Kubernetes的应用编排存在着一些问题，Helm可以用来解决这些问题。</p><p>1：管理、编辑与更新大量的Kubernetes配置文件</p><p>2：部署一个含有大量配置文件的复杂Kubernetes应用</p><p>3：分享和复用Kubernetes配置和应用</p><p>4：参数化配置模板支持多个环境</p><p>5：管理应用的发布：回滚、diff 和查看发布历史</p><p>6：控制一个部署周期中的某一些环节</p><p>7：发布后的测试验证</p><h2 id="Helm原理"><a href="#Helm原理" class="headerlink" title="Helm原理"></a>Helm原理</h2><p>下面两张图描述了 Helm 的几个关键组件 Helm（客户端）、Tiller（服务器）、Repository（Chart 软件仓库）、Chart（软件包）之间的关系以及它们之间如何通信</p><p>helm 组件通信：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-1.png" alt></p><p>helm 架构</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-2.png" alt></p><p><strong>创建release</strong></p><ol><li>helm 客户端从指定的目录或本地tar文件或远程repo仓库解析出chart的结构信息</li><li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li><li>Tiller 服务端根据 chart 和 values 生成一个 release</li><li>Tiller 将install release请求直接传递给 kube-apiserver</li></ol><p><strong>删除release</strong></p><ol><li>helm 客户端从指定的目录或本地tar文件或远程repo仓库解析出chart的结构信息</li><li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li><li>Tiller 服务端根据 chart 和 values 生成一个 release</li><li>Tiller 将delete release请求直接传递给 kube-apiserver</li></ol><p><strong>更新release</strong></p><ol><li>helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller</li><li>Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history</li><li>Tiller 将新的 release 传递给 kube-apiserver 进行更新</li></ol><h3 id="chart基本结构"><a href="#chart基本结构" class="headerlink" title="chart基本结构"></a>chart基本结构</h3><p>Helm的打包格式叫做chart，所谓chart就是一系列文件, 它描述了一组相关的 k8s 集群资源。Chart中的文件安装特定的目录结构组织, 最简单的chart 目录如下所示：</p><pre class="line-numbers language-text"><code class="language-text">./├── charts├── Chart.yaml├── templates│   ├── deployment.yaml│   ├── _helpers.tpl│   ├── ingress.yaml│   ├── NOTES.txt│   ├── serviceaccount.yaml│   ├── service.yaml│   └── tests│       └── test-connection.yaml└── values.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>charts 目录存放依赖的chart</li><li>Chart.yaml 包含Chart的基本信息，包括chart版本，名称等</li><li>templates 目录下存放应用一系列 k8s 资源的 yaml 模板</li><li>_helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用</li><li>NOTES.txt 介绍chart 部署后的帮助信息，如何使用chart等</li><li>values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值</li></ol><h2 id="Helm安装"><a href="#Helm安装" class="headerlink" title="Helm安装"></a>Helm安装</h2><p>下载helm v3.0.2，地址 <a href="https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz" target="_blank" rel="noopener">https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz</a></p><p>上传并解压。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> zxvf helm-v3.0.2-linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将helm拷贝到系统path路径下，以下为 /usr/local/bin/helm</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> linux-amd64/helm /usr/local/bin/helm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看helm版本</p><pre class="line-numbers language-bash"><code class="language-bash">helm versionversion.BuildInfo<span class="token punctuation">{</span>Version:<span class="token string">"v3.0.0"</span>, GitCommit:<span class="token string">"e29ce2a54e96cd02ccfce88bee4f58bb6e2a28b6"</span>, GitTreeState:<span class="token string">"clean"</span>, GoVersion:<span class="token string">"go1.13.4"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>增加常用chart源。helm提供了常用的chart源，可以在helm的hub库：<a href="https://hub.helm.sh/charts" target="_blank" rel="noopener">https://hub.helm.sh/charts</a></p><p>查看提供的各种应用的chart库，左边是各种官方chart库，右边是chart库中的应用chart。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#除了阿里云应该都需要科学，stable是官方的，aliyuncs最快</span>helm repo add stable https://kubernetes-charts.storage.googleapis.comhelm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com helm repo add bitnami https://charts.bitnami.com/bitnamihelm repo add aliyuncs https://apphub.aliyuncs.comhelm repo add aliyun-stable https://acs-k8s-ingress.oss-cn-hangzhou.aliyuncs.com/charts<span class="token comment" spellcheck="true">#查看chart列表</span>helm repo listNAME            URLstable          https://kubernetes-charts.storage.googleapis.comincubator       https://kubernetes-charts-incubator.storage.googleapis.combitnami         https://charts.bitnami.com/bitnamialiyuncs        https://apphub.aliyuncs.comaliyun-stable   https://acs-k8s-ingress.oss-cn-hangzhou.aliyuncs.com/charts<span class="token comment" spellcheck="true">#更新依赖源</span>helm repo update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="采用Deployment-多Replica的部署形式安装ingress"><a href="#采用Deployment-多Replica的部署形式安装ingress" class="headerlink" title="采用Deployment+多Replica的部署形式安装ingress"></a>采用Deployment+多Replica的部署形式安装ingress</h4><p>下载<a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml</a></p><p>修改对应的镜像源：image:<a href="http://quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.31.1" target="_blank" rel="noopener">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.31.1</a></p><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f ingress.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看对应的ingress pod是否有启动成功</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get po -n ingress-nginxkubectl describe pod pod_id -n ingress-nginx<span class="token comment" spellcheck="true">#查看ingress服务是否正常</span>kubectl get svc -n ingress-nginx<span class="token comment" spellcheck="true">#删除辅助的POD</span>kubectl delete pod xxxxx -n ingress-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看对应的节点端口</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get svc -n ingress-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器用<code>物理节点IP:31434</code>访问，看是否正常</p><h2 id="用ingress对服务做路由"><a href="#用ingress对服务做路由" class="headerlink" title="用ingress对服务做路由"></a>用ingress对服务做路由</h2><h3 id="ingress概述"><a href="#ingress概述" class="headerlink" title="ingress概述"></a>ingress概述</h3><p>k8s 对外暴露服务（service）主要有两种方式：NotePort, LoadBalance， 此外externalIPs也可以使各类service对外提供服务</p><ol><li>但是当集群服务很多的时候，NodePort方式最大的缺点是会占用很多集群机器的端口；</li><li>LB方式最大的缺点则是每个service一个LB又有点浪费和麻烦，并且需要k8s之外的支持； </li><li>而ingress则<strong>只需要一个NodePort或者一个LB</strong>就可以满足所有service对外服务的需求。</li></ol><p>ingress工作机制大致可以用下图表示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-3.png" alt></p><p>实际上，ingress相当于一个<strong>7层的负载均衡器</strong>，是k8s对反向代理的一个抽象。大概的工作原理也确实类似于Nginx，可以理解成<strong>在 Ingress 里建立一个个映射规则 , ingress Controller 通过监听 Ingress这个api对象里的配置规则并转化成 Nginx 的配置</strong>（kubernetes声明式API和控制循环） , 然后<strong>对外部提供服务</strong>。ingress包括：ingress controller 和 ingress resources</p><p><strong>ingress controller</strong>：核心是一个deployment，实现方式有很多，比如nginx, Contour, Haproxy, trafik, Istio，需要编写的yaml有：Deployment, Service, ConfigMap, ServiceAccount（Auth），其中service的类型可以是NodePort或者LoadBalancer。</p><p><strong>ingress resources</strong>：这个就是一个类型为Ingress的k8s api对象了，这部分则是面向开发人员。</p><p>Kubernetes给出的方案就是Ingress，Ingress包含了两大主件Ingress Controller和Ingress。</p><p>Ingress解决的是新的服务加入后，域名和服务的对应问题，基本上是一个ingress的对象，通过yaml进行创建和更新进行加载。</p><p>Ingress Controller是将Ingress这种变化生成一段Nginx的配置，然后将这个配置通过Kubernetes API写到Nginx的Pod中，然后reload.（注意：写入 nginx.conf 的不是service的地址，而是service backend 的 pod 的地址，避免在 service 在增加一层负载均衡转发）</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-4.png" alt></p><p>从上图中可以很清晰的看到，实际上请求进来还是被<strong>负载均衡器</strong>拦截，比如 nginx，然后 Ingress Controller 通过跟 Ingress 交互得知某个域名对应哪个 service，再通过跟 kubernetes API 交互得知 service 地址等信息；综合以后生成配置文件实时写入负载均衡器，然后负载均衡器 reload 该规则便可实现服务发现，即动态映射</p><p>了解了以上内容以后，这也就很好的说明了我为什么喜欢把负载均衡器部署为 Daemon Set；因为无论如何请求首先是被负载均衡器拦截的，所以在每个 node 上都部署一下，同时 hostport 方式监听 80 端口；那么就解决了其他方式部署不确定 负载均衡器在哪的问题，同时访问每个 node 的 80 都能正确解析请求；如果前端再 放个 nginx 就又实现了一层负载均衡。<br>Ingress Controller 会根据你定义的 Ingress 对象，提供对应的代理能力。业界常用的各种反向代理项目，比如 Nginx、HAProxy、Envoy、Traefik 等，都已经为Kubernetes 专门维护了对应的 Ingress Controller。</p><p>Ingress Controller 会根据你定义的 Ingress 对象，提供对应的代理能力。业界常用的各种反向代理项目，比如 Nginx、HAProxy、Envoy、Traefik 等，都已经为Kubernetes 专门维护了对应的 Ingress Controller。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-5.png" alt></p><h3 id="ingress-nginx-部署"><a href="#ingress-nginx-部署" class="headerlink" title="ingress-nginx 部署"></a>ingress-nginx 部署</h3><p>ingress调度的是后端的service，而不是pod</p><p>ingress调度hello-service这个服务</p><p>创建对应的hello-ingress.yaml部署文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>ingress  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/service-upstream</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> hello.abc.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>service            <span class="token key atrule">port</span><span class="token punctuation">:</span>              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行部署</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f hello-ingress.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维开发 </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s部署栗子</title>
      <link href="2021/03/04/project/k8s-exp/"/>
      <url>2021/03/04/project/k8s-exp/</url>
      
        <content type="html"><![CDATA[<h2 id="1：mvn对应的项目的jar"><a href="#1：mvn对应的项目的jar" class="headerlink" title="1：mvn对应的项目的jar"></a>1：mvn对应的项目的jar</h2><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>以最简单的可以运行java的镜像举例</p><pre class="line-numbers language-shell"><code class="language-shell">FROM openjdk:8COPY study-0.0.1-SNAPSHOT.jar /study-0.0.1-SNAPSHOT.jarCMD ["java","-jar","/study-0.0.1-SNAPSHOT.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3：build出对应的image"><a href="#3：build出对应的image" class="headerlink" title="3：build出对应的image"></a>3：build出对应的image</h2><pre class="line-numbers language-shell"><code class="language-shell">docker build -t helloworld .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4：docker-push到指定的镜像中心"><a href="#4：docker-push到指定的镜像中心" class="headerlink" title="4：docker push到指定的镜像中心"></a>4：docker push到指定的镜像中心</h2><h2 id="5：编写deployment-yaml部署文件"><a href="#5：编写deployment-yaml部署文件" class="headerlink" title="5：编写deployment.yaml部署文件"></a>5：编写deployment.yaml部署文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true"># tells deployment to run 2 pods matching the template</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot        <span class="token key atrule">image</span><span class="token punctuation">:</span> helloworld        <span class="token comment" spellcheck="true">#本地拉取镜像</span>        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Never        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6：发布部署"><a href="#6：发布部署" class="headerlink" title="6：发布部署"></a>6：发布部署</h2><pre class="line-numbers language-shell"><code class="language-shell">kubectl apply -f helloworld-deployment.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看部署是否成功</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get pods<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7：编写service-yaml部署文件"><a href="#7：编写service-yaml部署文件" class="headerlink" title="7：编写service.yaml部署文件"></a>7：编写service.yaml部署文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看部署是否成功</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get services<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8：查看服务端口绑定到物理节点的端口"><a href="#8：查看服务端口绑定到物理节点的端口" class="headerlink" title="8：查看服务端口绑定到物理节点的端口"></a>8：查看服务端口绑定到物理节点的端口</h2><pre class="line-numbers language-shell"><code class="language-shell">kubectl get svc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务端口映射到物理主机的端口是32405</p><h2 id="9：验证是否可以使用访问"><a href="#9：验证是否可以使用访问" class="headerlink" title="9：验证是否可以使用访问"></a>9：验证是否可以使用访问</h2><p>那么一个最基本的boot服务从package到打入docker镜像，再到k8s集群去负责编排调度，到完成使用就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维开发 </tag>
            
            <tag> kubernetes </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注意要点和规范</title>
      <link href="2021/03/04/database/sql-standard/"/>
      <url>2021/03/04/database/sql-standard/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL语句书写规则"><a href="#SQL语句书写规则" class="headerlink" title="SQL语句书写规则"></a>SQL语句书写规则</h2><p>1：SQL语句中出现的所有表名、表别名、字段名、序列等数据库对象都应<strong>小写</strong>。</p><p>2：SQL 语句中出现的系统保留字、内置函数名、SQL保留字、绑定变量等都应<strong>大写</strong>。</p><p>3：SQL语句中出现的变量参数应遵循各语言编码规范的要求。</p><p>4：SQL语句中的表别名应简短明了，宜反映表名的实际意义。</p><p>5：应遵循各语言的编码规范的要求。</p><p>6：单引号应与所属的 SQL子句位于同一行。</p><p>7：SQL语句内的算术运算符、逻辑运算符（AND、OR、NOT）、 比较运算符（=、&lt;=、&gt;=、&gt;、&lt;、&lt;&gt;、BETWEEN AND）、IN、LIKE等运算符<strong>前后都应加一空格</strong>。</p><p>8：SQL语句中逗号后应加一空格。</p><p>9：<strong>不等于应统一使用符号“&lt;&gt;”</strong>。</p><p>10：应遵循各语言编码规范的代码注释要求。</p><p>11：对较为复杂的 SQL语句应注释，并说明算法和功能。</p><p>12：对重要的计算应说明其功能。</p><p>13：对常量及变量注释时，应注释被保存值的含义，宜包括合法取值的范围。</p><h2 id="SQL优化要点"><a href="#SQL优化要点" class="headerlink" title="SQL优化要点"></a>SQL优化要点</h2><h3 id="“inner-join”-和直接“-”等号的区别"><a href="#“inner-join”-和直接“-”等号的区别" class="headerlink" title="“inner join” 和直接“=”等号的区别"></a>“inner join” 和直接“=”等号的区别</h3><p>效果一样，但是实现原理不一样，join是基于hashtable连接比较，而=直接就是取笛卡尔集再过滤，所以后者效率低，是<code>O(N^2)</code>，前者是<code>O(LogN)</code></p><h3 id="Union-amp-Union-All"><a href="#Union-amp-Union-All" class="headerlink" title="Union &amp; Union All"></a>Union &amp; Union All</h3><ol><li>Union：对两个结果集进行并集操作，不包括重复行，同时进行<strong>默认规则的排序</strong>；</li><li>Union All：对两个结果集进行并集操作，包括重复行，<strong>不进行排序</strong>；</li></ol><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>（1）主键索引 （ PRIMARY ）</p><p>（2）唯一索引 （ UNIQUE ）</p><p>（3）普通索引 （ INDEX ）</p><p>（4）全文索引（FULLTEXT , MYISAM 及 mysql 5.6 以上的 Innodb ）</p><p>更多索引分类可以看：<a href="https://arthurjq.com/2020/12/17/database/mysql-index/">https://arthurjq.com/2020/12/17/database/mysql-index/</a></p><h3 id="慢SQL问题"><a href="#慢SQL问题" class="headerlink" title="慢SQL问题"></a>慢SQL问题</h3><p>（1）SQL编写问题，由于语句编写的问题导致的慢查询。</p><p>（2）锁，由于锁的问题导致表被锁无法进行正常的读取或写入。</p><p>（3）IO资源竞争，创建索引或者大量插入数据会占用大量的IO。</p><p>（4）服务器硬件问题</p><h3 id="SQL编写问题"><a href="#SQL编写问题" class="headerlink" title="SQL编写问题"></a>SQL编写问题</h3><p><strong>语句写完后，建议大家务必使用explain检查下自己写的语句是否有用到索引，是否导致了全表扫描</strong>。</p><p>关于explain的返回结果的字段意思可以看：<a href="https://arthurjq.com/2020/12/30/database/mysql-explain/">https://arthurjq.com/2020/12/30/database/mysql-explain/</a></p><p>我们在编写SQL的时候需要注意：</p><p>（1）<strong>字段类型转换导致不用索引</strong>，如字符串类型的不用引号，数字类型的用引号等，这有可能会用不到索引导致全表扫描；</p><p>（2）mysql <strong>不支持函数转换</strong>，所以字段前面不能加函数，否则这将用不到索引；</p><p>（3）不要在字段前面加减运算；</p><p>（4）字符串比较长的可以考虑索引一部分减少索引文件大小，提高写入效率；</p><p>（5）like % 在前面用不到索引；</p><p>（6）根据联合索引的第二个及以后的字段单独查询用不到索引；</p><p>（7）不要使用 select *；</p><p>（8）or 的查询尽量用 union 代替 （Innodb）；</p><p>（9）复合索引高选择性的字段排在前面；</p><p>（10）order by / group by 字段包括在索引当中减少排序，效率会更高。</p><p>（11）尽量规避大事务的 SQL，大事务的 SQL 会影响数据库的并发性能及主从同步；</p><p>（12）<strong>删除表所有记录请用 truncate</strong>，不要用 delete；</p><p>（13）<strong>不让 mysql 干多余的事情，如计算</strong>；</p><p>（14）<strong>输写 SQL 带字段</strong>，以防止后面表变更带来的问题，性能也是比较优的 ( 涉及到数据字典解析，请自行查询资料)；</p><p>（15）在 Innodb上用 <code>select count(*)</code>，因为 Innodb 会存储统计信息；</p><p>（16）慎用<code>Order by rand()</code>。</p><p>（17）索引列的数据长度满足业务的情况下能少则少。</p><p>（18）表中的<strong>索引并不是越多越好</strong>，冗余或者无用索引会占用磁盘空间并且会影响增删改的效率。</p><p>之前也发布过mysql数据库优化方法：<a href="https://arthurjq.com/2021/02/03/database/mysql-optimization/">https://arthurjq.com/2021/02/03/database/mysql-optimization/</a></p><h3 id="索引失效的条件"><a href="#索引失效的条件" class="headerlink" title="索引失效的条件"></a>索引失效的条件</h3><p>（1）不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p><p>（2）存储引擎不能使用索引</p><p>（3）联合索引右边的列</p><p>（4）尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</p><p>（5）mysql在使用不等于（！=或者&lt;&gt;）的时候无法使用索引会导致全表扫描</p><p>（6）like以通配符开头（’%abc…’）mysql索引失效会变成全表扫描的操作。</p><p>（7）WHERE条件中IN可以使用索引， NOT IN 无法使用索引。</p><p>更多索引失效的现象可以看：<a href="https://arthurjq.com/2020/12/26/database/index-missing/">https://arthurjq.com/2020/12/26/database/index-missing/</a></p><h3 id="联合索引注意要点"><a href="#联合索引注意要点" class="headerlink" title="联合索引注意要点"></a>联合索引注意要点</h3><p>索引是key index （a,b,c）。 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">5</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">----  abc顺序</span><span class="token number">abc</span>三个索引都在<span class="token keyword">where</span>条件里面用到了，而且都发挥了作用<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span>  <span class="token number">c</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">6</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">where</span>里面的条件顺序在查询之前会被mysql自动优化，效果跟上一句一样<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token number">a</span>用到索引，<span class="token number">b</span>没有用，所以<span class="token number">c</span>是没有用到索引效果的<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">></span><span class="token number">7</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">---- b范围值，断点，阻塞了c的索引</span><span class="token number">a</span>用到了，<span class="token number">b</span>也用到了，<span class="token number">c</span>没有用到，这个地方<span class="token number">b</span>是范围值，也算断点，只不过自身用到了索引<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--- 联合索引必须按照顺序使用，并且需要全部使用</span>因为<span class="token number">a</span>索引没有使用，所以这里 <span class="token number">bc</span>都没有用上索引效果<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">></span><span class="token number">4</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">7</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token number">a</span>用到了  <span class="token number">b</span>没有使用，<span class="token number">c</span>没有使用<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">;</span><span class="token number">a</span>用到了索引，<span class="token number">b</span>在结果排序中也用到了索引的效果，<span class="token number">a</span>下面任意一段的<span class="token number">b</span>是排好序的<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c</span><span class="token punctuation">;</span><span class="token number">a</span>用到了索引，但是这个地方<span class="token number">c</span>没有发挥排序效果，因为中间断点了，使用 <span class="token keyword">explain</span> 可以看到 filesort<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mytable <span class="token keyword">where</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token number">b</span>没有用到索引，排序中<span class="token number">a</span>也没有发挥索引效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> index </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>timestamp时间格式</title>
      <link href="2021/03/03/database/timestamp/"/>
      <url>2021/03/03/database/timestamp/</url>
      
        <content type="html"><![CDATA[<h2 id="timestamp和datetime"><a href="#timestamp和datetime" class="headerlink" title="timestamp和datetime"></a>timestamp和datetime</h2><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>timestamp</td><td>4个字节</td><td>支持默认值</td><td>支持自动更新</td><td>时间范围1970–</td></tr><tr><td>datetime</td><td>8个字节</td><td>不支持</td><td>不支持</td><td>时间范围1900 –</td></tr></tbody></table><p>以前的一些项目，所有表字段里都会有个update_time字段，设置为根据时间戳更新</p><p>以下timestamp介绍转载：<a href="https://www.cnblogs.com/csl0910/p/4956815.html" target="_blank" rel="noopener">https://www.cnblogs.com/csl0910/p/4956815.html</a></p><h2 id="TIMESTAMP的变体（用法）"><a href="#TIMESTAMP的变体（用法）" class="headerlink" title="TIMESTAMP的变体（用法）"></a>TIMESTAMP的变体（用法）</h2><p>TIMESTAMP时间戳在创建的时候可以有多重不同的特性，如：</p><p>1.在<strong>创建新记录和修改现有记录</strong>的时候都对这个数据列刷新：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.在创建新记录的时候把这个字段设置为当前时间，但<strong>以后修改时，不再刷新它</strong>：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.在创建新记录的时候<strong>把这个字段设置为0</strong>，以后修改时刷新它：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在创建新记录的时候<strong>把这个字段设置为给定值</strong>，以后修改时刷新它：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token string">'yyyy-mm-dd hh:mm:ss'</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>MySQL目前不支持列的Default 为函数的形式,如达到你某列的默认值为当前更新日期与时间的功能,你可以使用TIMESTAMP列类型</strong></p><h2 id="timestamp列类型"><a href="#timestamp列类型" class="headerlink" title="timestamp列类型"></a>timestamp列类型</h2><p>TIMESTAMP值可以从<strong>1970</strong>的某时的开始一直到<strong>2037</strong>年，精度为一秒，其值作为数字显示。<br>TIMESTAMP值显示尺寸的格式如下表所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+----------------+</span><span class="token operator">|</span> 列类型　　　　<span class="token operator">|</span> 显示格式　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">|</span> YYYYMMDDHHMMSS <span class="token operator">|</span>　<span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> YYMMDDHHMMSS　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> YYMMDDHHMM　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YYYYMMDD　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YYMMDD　　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YYMM　　　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YY　　　　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“完整”TIMESTAMP格式是14位，但TIMESTAMP列也可以用更短的显示尺寸，创造最常见的显示尺寸是6、8、12、和14。</p><p>你可以在创建表时指定一个任意的显示尺寸，但是定义列长为0或比14大均会被强制定义为列长14。<br><strong>列长在从1～13范围的奇数值尺寸均被强制为下一个更大的偶数</strong>：</p><pre class="line-numbers language-sql"><code class="language-sql">定义字段长度　　 强制字段长度<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的TIMESTAMP列都有同样的存储大小，使用被指定的时期时间值的完整精度（14位）存储合法的值不考虑显示尺寸。不合法的日期，将会被强制为0存储</p><h3 id="含意"><a href="#含意" class="headerlink" title="含意"></a>含意</h3><ol><li><p>虽然你建表时定义了列TIMESTAMP（8），但在你进行数据插入与更新时TIMESTAMP列<strong>实际上保存了14位的数据</strong>（包括年月日时分秒），只不过在你进行查询时MySQL返回给你的是8位的年月日数据。如果你使用ALTER TABLE拓宽一个狭窄的TIMESTAMP列，以前被“隐蔽”的信息将被显示。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span><span class="token string">'id'</span> <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token string">'date1'</span><span class="token keyword">TIMESTAMP</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token keyword">SET</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114</span>　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test CHANGE <span class="token string">'date1'</span> <span class="token string">'date1'</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以使用TIMESTAMP列类型自动地用当前的日期和时间标记INSERT或UPDATE的操作。</p></li><li><p>同样，<strong>缩小一个TIMESTAMP列不会导致信息失去</strong>，除了感觉上值在显示时，较少的信息被显示出。</p></li><li><p>尽管TIMESTAMP值被存储为完整精度，直接操作存储值的唯一函数是<code>UNIX_TIMESTAMP()</code>；由于MySQL返回 TIMESTAMP列的列值是进过格式化后的检索的值，这意味着你可能不能使用某些函数来操作TIMESTAMP列（例如<code>HOUR()或 SECOND()</code>），除非TIMESTAMP值的相关部分被包含在格式化的值中。<br>例如，一个TIMESTAMP列只有被定义为TIMESTAMP（10）以上时，TIMESTAMP列的HH部分才会被显示，因此在更短的TIMESTAMP值上使用<code>HOUR()</code>会产生一个不可预知的结果。</p></li><li><p>不合法TIMESTAMP值被变换到适当类型的“零”值（00000000000000）。（DATETIME,DATE亦然）</p></li></ol><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>如果你有多个TIMESTAMP列，只有第一个自动更新。自动更新第一个TIMESTAMP列在下列任何条件下发生：</p><ol><li>列值没有明确地在一个INSERT或LOAD DATA INFILE语句中指定。</li><li>列值没有明确地在一个UPDATE语句中指定且另外一些的列改变值。（注意一个UPDATE设置一个列为它已经有的值，这将不引起TIMESTAMP列被更新，因为如果你设置一个列为它当前的值，MySQL为了效率而忽略更改）</li><li>你明确地设定TIMESTAMP列为NULL</li><li>除第一个以外的TIMESTAMP列也可以设置到当前的日期和时间，只要将列设为NULL，或NOW（）。</li></ol><p>建两个timestamp字段后执行insert操作：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span> <span class="token string">'id'</span> <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token string">'date1'</span> <span class="token keyword">TIMESTAMP</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'date2'</span> <span class="token keyword">TIMESTAMP</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token punctuation">(</span>id<span class="token punctuation">,</span> date1<span class="token punctuation">,</span> date2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span> date2　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">20021114093724</span> <span class="token operator">|</span> <span class="token number">00000000000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一条指令因设date1、date2为NULL,所以date1、date2值均为当前时间第二条指令因没有设date1、date2列值，第一 个TIMESTAMP列date1为更新为当前时间，而二个TIMESTAMP列date2因日期不合法而变为“00000000000000”</p><p>然后进行update操作：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span> date2　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span>　<span class="token number">3</span> <span class="token operator">|</span> <span class="token number">20021114094009</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">20021114093724</span> <span class="token operator">|</span> <span class="token number">00000000000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条指令没有明确地设定date2的列值，所以第一个TIMESTAMP列date1将被更新为当前时间</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>date1<span class="token operator">=</span>date1<span class="token punctuation">,</span>date2<span class="token operator">=</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span> date2　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114094009</span> <span class="token operator">|</span> <span class="token number">20021114094320</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">20021114093724</span> <span class="token operator">|</span> <span class="token number">00000000000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条指令因设定date1=date1，所以在更新数据时date1列值并不会发生改变而因设定date2=NOW（），所以在更新数据时date2列值会被更新为当前时间此指令等效为：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>date1<span class="token operator">=</span>date1<span class="token punctuation">,</span>date2<span class="token operator">=</span><span class="token boolean">NULL</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因MySQL返回的 TIMESTAMP 列为数字显示形式，你可以用<code>DATE_FROMAT()</code>函数来格式化 TIMESTAMP 列，如下所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date1<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date1<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date2<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date2 <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　　　 <span class="token operator">|</span> date2　　　　　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+---------------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">09</span>:<span class="token number">40</span>:<span class="token number">09</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">09</span>:<span class="token number">43</span>:<span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">09</span>:<span class="token number">37</span>:<span class="token number">24</span> <span class="token operator">|</span> <span class="token number">0000</span><span class="token operator">-</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+---------------------+</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date1<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date1<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date2<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date2 <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　 <span class="token operator">|</span> date2　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span>　<span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span>　<span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span>　<span class="token operator">|</span> <span class="token number">0000</span><span class="token operator">-</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">00</span>　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在某种程度上，你可以把一种日期类型的值赋给一个不同的日期类型的对象。</p><p>然而，而尤其注意的是：值有可能发生一些改变或信息的损失：</p><ol><li>如果你将一个DATE值赋给一个DATETIME或TIMESTAMP对象，结果值的时间部分被设置为’00:00:00’，因为DATE值中不包含有时间信息。　</li><li>如果你将一个DATETIME或TIMESTAMP值赋给一个DATE对象，结果值的时间部分被删除，因为DATE类型不存储时间信息。</li><li>尽管DATETIME, DATE和TIMESTAMP值全都可以用同样的格式集来指定，但所有类型不都有同样的值范围。</li></ol><p>例如，<strong>TIMESTAMP值不能比1970早，也不能比2037晚，这意味着，一个日期例如’1968-01-01’，当作为一个 DATETIME或DATE值时它是合法的，但它不是一个正确TIMESTAMP值！并且如果将这样的一个对象赋值给TIMESTAMP列，它将被变换为 0</strong>。  </p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ol><li><p><strong>允许作为字符串指定值的宽松格式能被欺骗。</strong>例如，因为“:”分隔符的使用，值’10:11:12’可能看起来像时间值，但是如果在一个日期中使用，上下文将作为年份被解释成’2010-11-12’。值’10:45:15’将被变换到’0000-00-00’，因为’45’不是一个合法的月份。</p></li><li><p><strong>以2位数字指定的年值是模糊的，因为世纪是未知的。</strong>MySQL使用下列规则解释2位年值：在00-69范围的年值被变换到2000-2069。 在范围70-99的年值被变换到1970-1999。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务不生效</title>
      <link href="2021/03/02/java/transaction-no-effect/"/>
      <url>2021/03/02/java/transaction-no-effect/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>支付模块是事务操作，如果在支付逻辑执行的过程中有异常，需要做回滚。比如你支付—订单表里插入了订单数据—成功—-然后调起支付失败，此时需要回滚订单表数据。</p><h2 id="transactional注解不生效"><a href="#transactional注解不生效" class="headerlink" title="transactional注解不生效"></a>transactional注解不生效</h2><p>transactional注解什么时候不生效？</p><p>1、检查你的方法是不是public的。@Transactional注解只能应用到public可见度的方法上，如果应用在protected、private或者package可见度的方法上，也不会报错，不过事务设置不会起作用。</p><p>2、检查你的异常类型是不是unchecked异常。默认情况下，Spring会对unchecked异常进行事务回滚，如果是checked异常则不回滚。如空指针异常、算术异常等，会被回滚；文件读写、网络出问题，spring就没法回滚了。如果你想check异常也回滚怎么办，注解上面写明异常类型即可：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类型的还有norollbackFor，自定义不回滚的异常。</p><p>3、是否在service中进行了try…catch的操作，由于已经被捕获异常，故事务也不会回滚。如果非要在service中try…catch异常，又想要事务回滚，可在catch块中抛出运行时异常：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法有个不足之处，就是不能在catch块中存在return子句，若想捕获异常时回滚事务，同时返回提示信息，可以使用手动回滚：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    TransactionAspectSupport<span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ERROR_MESSAGE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另外说明一下，在controller层捕获了service层的异常，事务还会回滚吗？答案是会的，只要你service层抛出了异常，并且你加的事务可以处理这个异常，也就是rollbackFor = Exception.class这个符合你抛出的异常，不管外面有没有捕获都可以回滚。</p></blockquote><p>4、是否开启了对注解的解析：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、数据库引擎要支持事务，如果是mysql，注意表要使用支持事务的引擎，比如innodb，如果是myisam，事务是不起作用的。</p><p>6、spring是否扫描到你这个包，如下是扫描到org.test下面的包：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.test<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、检查是不是同一个类中的方法调用（如A方法无@Transactional注解，调用了一个有@Transactional注解的方法），这样事务也是不生效的。</p><p>原因：我们知道spring事务的原理是采用aop,其实质是给你的service对象另外造了一个代理对象。这个代理对象和你的service对象有同样的方法名,但是额外在你的 方法前后加了对事务的处理,处理完后再通过this调用你自己service对象的相关方法。<br>所以,当调用方是处于你的service的外面,你拿到的其实不是你写的service的实例,是spring加上事务处理特性后的代理对象,这样子调用事务是能够生效的。<br>但是,你用service 内部方法调用注解了@Transactional的方法, <strong>内部方法得通过this调用这个注解了@Transactional的方法</strong>,此时this对象并不是spring的代理对象,而是你自己写的service的实例.而你自己写的service实例的所有方法都没有事务特性,所以事务必然不生效了。</p><p>8、请确保你的业务和事务入口在<strong>同一个线程</strong>里，否则事务也是不生效的，比如下面代码事务不生效：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>User user1<span class="token punctuation">,</span> User user2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">saveError</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>数据库不支持事务</li><li>注解放在了私有方法上</li><li>类内部调用，类里面使用this调用本类方法（this通常省略）</li><li>未捕获异常</li><li>没有被Spring管理（没加@Service等注解）</li><li>多线程场景</li></ol><p>这些场景都会导致@Transactional失效</p><h2 id="Transactional注解的使用场景和注意点"><a href="#Transactional注解的使用场景和注意点" class="headerlink" title="Transactional注解的使用场景和注意点"></a>Transactional注解的使用场景和注意点</h2><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>分布式事务，能避免尽量避免，使用分布式事务中间件不是变慢这么简单，比如你用了事务包围里的一个函数是有一个数据库的写操作，spring会通过jdbc进行锁表的，而此时你又要RPC去调用其他服务，其他服务同样又要都这个表进行写入操作，此时就会死锁。所以如果是分布式事务的话，能避免就避免，因为不同的service是不同的人做，设计到的数据读写，你不是很清楚的情况下，很容易这样的。</p><h3 id="单一表写操作"><a href="#单一表写操作" class="headerlink" title="单一表写操作"></a>单一表写操作</h3><p>单一表的写操作。。就没必要加事务了。。会降低性能的，多表才需要加事务</p><p>mysql会帮你做好并发处理的，单表操作，对于程序逻辑而言是原子性的，不用加事务处理</p><blockquote><p>pagehelper github上有给这个中间件，分页用的，很好用，SQL拦截的</p></blockquote><p>待补充。。。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的cache</title>
      <link href="2021/03/01/database/redis-cache/"/>
      <url>2021/03/01/database/redis-cache/</url>
      
        <content type="html"><![CDATA[<h2 id="思考步骤"><a href="#思考步骤" class="headerlink" title="思考步骤"></a>思考步骤</h2><ol><li><p>评估是否真的需要缓存</p><p>1.1 使用场景？有返回时间要求吗？</p><p>1.2 是否频繁？落到数据库压力大吗？</p><p>1.3 计算难度有多大？</p></li><li><p>真的需要缓存了</p><p>2.1 数据粒度？<br>2.2 数据类型？<br>2.3 数据大小？<br>2.4 数据有效时长？<br>2.5 加载进缓存的时机？<br>2.6 删除缓存的时机？<br>2.7 更新缓存的时机？</p></li><li><p>根据多个缓存对缓存进行操作</p><p>3.1 缓存值可信吗？</p><p>3.2 为什么要根据缓存值对缓存操作？想要的是过程值还是结果值？</p><p>3.3 考虑过拿第一个缓存成功，拿第二个缓存成功，但是第一个缓存在第二个缓存操作的时候失效的情况和后果吗？</p><p>3.4 缓存联动管理是否困难？</p></li></ol><h2 id="简易操作缓存方案"><a href="#简易操作缓存方案" class="headerlink" title="简易操作缓存方案"></a>简易操作缓存方案</h2><ol><li>使用饿汉模式进行管理。只有在要读的时候，才进行缓存加载，其他操作删除相关缓存。</li><li>缓存时间设置不宜过长，5分钟内为宜（因为现在业务没什么对数据库压力特别大、计算又很复杂的时候）</li><li>不同Key的缓存失效时间尽量随机</li><li>考虑缓存穿透问题</li><li>不要使用redis事务</li><li>先进行数据库操作，再操作缓存</li><li>数据粒度要很大时，借助定时任务定期刷新内存</li><li>缓存中找不到时，应该去查找数据库中是否存在，记得用一定策略保证击穿问题得到解决</li><li>用service屏蔽缓存的直接操作，避免造成缓存管理困难（因为service的操作一定可以反映到数据库上，直接操作缓存不一定能落到数据库）</li></ol><p>ps: 数据一致性可以借助<strong>数据库</strong>事务进行实现，保证最坏结果是一次最近更新的值</p><h2 id="补充规范"><a href="#补充规范" class="headerlink" title="补充规范"></a>补充规范</h2><p>1：key定义的规范，这个是用的时候比较容易出错的，重名，和系统关键字冲突，长度等，都需要给出规范来<br>2：value上，应该控制数据的长度，比如防止一些大数据类型，redis本来是提速的，不要因为数据长度影响了自身性能，另外就是合理的使用数据类型，节省存储提升性能，比如能整型的就不要字符串型<br>3：提前评估生命周期，必须保证每个变量都有过期时间；需要对数据进行手动清理，打散过期时间，防止雪崩<br>4：尽可能只使用set和get，避免使用其他命令，特别是flushXXX<br>5：尽量不要使用事务，事务逻辑尽量通过对应的框架实现，包括分布式事务seata<br>6：做好防穿透，击穿，雪崩的常规逻辑处理，比如增加有效数据校验，防止数据库压力过大，增加互斥锁，降低并发，打乱过期时间等。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>原本是用RedisTemplate实现</p><p>建议每个函数还可以重载一个默认值的函数，不然每个函数都要写入太多的参数，一般除了KEY值外，其他的值，都可以根据规范来给一个默认的</p><p>还有封装的话最好用原生提供的jedis：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/redis-cache-1.png" alt></p><p>就是从redis读取对应的key的值，使用100次耗费的时长，单位毫秒</p><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><p>属于只读缓存方案，1.就是删改直接删缓存，2.增加直接加入数据库。3.查时到缓存取，没有再从数据库中加载，再放到缓存</p><p>回复：数据库那块不属于缓存工具类的职责，不用写</p><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> redis </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lucene 查询原理</title>
      <link href="2021/02/25/database/lucene/"/>
      <url>2021/02/25/database/lucene/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Lucene 是一个基于 Java 的全文信息检索工具包，目前主流的搜索系统Elasticsearch和solr都是基于lucene的索引和搜索能力进行。想要理解搜索系统的实现原理，就需要深入lucene这一层，看看lucene是如何存储需要检索的数据，以及如何完成高效的数据检索。</p><p>转载至阿里云：<a href="https://zhuanlan.zhihu.com/p/35814539" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35814539</a>  |   <a href="https://blog.csdn.net/baichoufei90/article/details/111303223" target="_blank" rel="noopener">https://blog.csdn.net/baichoufei90/article/details/111303223</a></p><h2 id="Lucene数据模型"><a href="#Lucene数据模型" class="headerlink" title="Lucene数据模型"></a>Lucene数据模型</h2><p>Lucene中包含了四种基本数据类型，分别是：</p><ol><li><strong>Index</strong>：索引，由很多的Document组成。</li><li><strong>Document</strong>：由很多的Field组成，是Index和Search的最小单位。</li><li><strong>Field</strong>：由很多的Term组成，包括Field Name和Field Value。</li><li><strong>Term</strong>：由很多的字节组成。一般将Text类型的Field Value分词之后的每个最小单元叫做Term。</li></ol><p>在lucene中，<strong>读写路径是分离的</strong>。写入的时候创建一个IndexWriter，而读的时候会创建一个IndexSearcher。</p><p>下面是一个简单的代码示例，如何使用lucene的IndexWriter建索引以及如何使用indexSearch进行搜索查询。</p><pre class="line-numbers language-java"><code class="language-java">Analyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Store the index in memory:</span>    Directory directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RAMDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// To store an index on disk, use this instead:</span>    <span class="token comment" spellcheck="true">//Directory directory = FSDirectory.open("/tmp/testindex");</span>    IndexWriterConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>    IndexWriter iwriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    Document doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String text <span class="token operator">=</span> <span class="token string">"This is the text to be indexed."</span><span class="token punctuation">;</span>    doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token string">"fieldname"</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> TextField<span class="token punctuation">.</span>TYPE_STORED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iwriter<span class="token punctuation">.</span><span class="token function">addDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>    iwriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Now search the index:</span>    DirectoryReader ireader <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>    IndexSearcher isearcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>ireader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Parse a simple query that searches for "text":</span>    QueryParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">"fieldname"</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>    Query query <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ScoreDoc<span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> isearcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//assertEquals(1, hits.length);</span>    <span class="token comment" spellcheck="true">// Iterate through the results:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Document hitDoc <span class="token operator">=</span> isearcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>hits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hitDoc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fieldname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ireader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    directory<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这个示例中可以看出，lucene的读写有各自的操作类。本文重点关注读逻辑，在使用IndexSearcher类的时候，需要一个DirectoryReader和QueryParser：</p><ol><li>DirectoryReader需要对应写入时候的Directory实现。</li><li>QueryParser主要用来解析你的查询语句，例如你想查 “A and B”，lucene内部会有机制解析出是term A和term B的交集查询。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-8.png" alt></p><ul><li>虚线箭头（a、b、c、d）表示<strong>写索引</strong>的主要过程</li><li>实线箭头（1-9）表示<strong>查询</strong>的主要过程</li></ul><p>Lucene 中的主要模块及模块说明如下：</p><ol><li>analysis：主要负责词法分析及语言处理，也就是我们常说的<strong>分词</strong>，通过该模块可最终形成存储或者搜索的最小单元 Term。</li><li>index 模块：主要负责<strong>索引的创建工作</strong>。</li><li>store 模块：主要负责<strong>索引的读写</strong>，主要是对文件的一些操作，其主要目的是抽象出和平台文件系统无关的存储。</li><li>queryParser 模块：主要负责<strong>语法分析</strong>，把我们的查询语句生成 Lucene 底层可以识别的条件。</li><li>search 模块：主要负责<strong>对索引的搜索工作</strong>。</li><li>similarity 模块：主要负责<strong>相关性打分和排序的实现</strong></li></ol><h2 id="Lucene-查询过程"><a href="#Lucene-查询过程" class="headerlink" title="Lucene 查询过程"></a>Lucene 查询过程</h2><p>在lucene中查询是基于segment。每个segment可以看做是一个独立的subindex，在建立索引的过程中，lucene会不断的flush内存中的数据持久化形成新的segment。多个segment也会不断的被merge成一个大的segment，在老的segment还有查询在读取的时候，不会被删除，没有被读取且被merge的segement会被删除。这个过程类似于LSM数据库的merge过程。下面我们主要看在一个segment内部如何实现高效的查询。</p><p>为了方便大家理解，我们以人名字，年龄，学号为例，如何实现查某个名字（有重名）的列表。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-1.jpg" alt></p><p>在lucene中为了查询 name=XXX 的这样一个条件，会建立基于name的倒排链。以上面的数据为例，倒排链如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-2.png" alt></p><p>如果我们还希望按照年龄查询，例如想查 年龄=18 的列表，我们还可以建立另一个倒排链：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-3.png" alt></p><p>在这里，Alice，Alan，18，这些都是term。所以<strong>倒排本质上就是基于term的反向列表</strong>，方便进行属性查找。到这里我们有个很自然的问题，如果term非常多，如何快速拿到这个倒排链呢？在lucene里面就引入了term dictonary的概念，也就是term的字典。term字典里我们可以按照term进行排序，那么用一个二分查找就可以定为这个term所在的地址。这样的复杂度是logN，在term很多，内存放不下的时候，效率还是需要进一步提升。可以用一个hashmap，当有一个term进入，hash继续查找倒排链。这里hashmap的方式可以看做是term dictionary的一个index。 从lucene4开始，为了方便实现rangequery或者前缀，后缀等复杂的查询语句，lucene使用FST数据结构来存储term字典，下面就详细介绍下FST的存储结构。</p><h2 id="FST"><a href="#FST" class="headerlink" title="FST"></a>FST</h2><p>我们就用Alice和Alan这两个单词为例，来看下FST的构造过程。首先对所有的单词做一下排序为“Alice”，“Alan”。</p><ol><li><p>插入“Alan”</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-4.png" alt></p></li><li><p>插入“Alice”</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-5.jpg" alt></p></li></ol><p>这样你就得到了一个<strong>有向无环图</strong>，有这样一个数据结构，就可以很快查找某个人名是否存在。FST在单term查询上可能相比hashmap并没有明显优势，甚至会慢一些。但是在范围，前缀搜索以及压缩率上都有明显的优势。</p><p>在通过FST定位到倒排链后，有一件事情需要做，就是倒排链的合并。因为查询条件可能不止一个，例如上面我们想找 name= “alan” and age = “18” 的列表。lucene是如何实现倒排链的合并呢。这里就需要看一下倒排链存储的数据结构</p><h2 id="SkipList"><a href="#SkipList" class="headerlink" title="SkipList"></a>SkipList</h2><p>为了能够快速查找docid，lucene采用了SkipList这一数据结构。SkipList有以下几个特征：</p><ol><li>元素排序的，对应到我们的倒排链，lucene是按照docid进行排序，从小到大。</li><li>跳跃有一个固定的间隔，这个是需要建立SkipList的时候指定好，例如下图以间隔是3</li><li>SkipList的层次，这个是指整个SkipList有几层</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-6.jpg" alt></p><p>有了这个SkipList以后比如我们要查找docid=12，原来可能需要一个个扫原始链表，1，2，3，5，7，8，10，12。有了SkipList以后先访问第一层看到是然后大于12，进入第0层走到3，8，发现15大于12，然后进入原链表的8继续向下经过10和12。</p><p>SkipList本质上是在有序的链表上实现实现二分查找，它能有效的提升链表的查找效率，其时间复杂度为O(logn)（其中n为链表长度）。简单说SkipList优化了Postings的随机查找的性能问题。</p><p>SkipList的节点存储了三部分数据：</p><ol><li>当前节点指向Block的信息，是关于Block本身的信息；</li><li>指向下层的索引；</li><li>存储freq和norm的信息，它被封装在Impact里面。</li></ol><p>Impact结构仅是 &lt;freq, norm&gt; 的键值对，与文档无关，在SkipList的索引节点中。Impacts表示一系列Impact结构，用有序的TreeSet存储。这里强调的是Impact并没有与具体文档关联，其次按freq和norm作为主键去重。也就是Impacts代表了该索引节点指向数据点以及之前所有数据节点所包含的文档得分的分布。</p><p>如果此索引节点中最大的Impact都小于Scorer的水位线，那么此节点的范围内的所有节点都不需要再进入Scorer评分程序，在TOP_SCORE模式下。</p><p>实际上SkipList的性能提升是通过在链表上加上多级索引获得的，所以说它属于<strong>空间换时间</strong>的做法，在索引时牺牲小量空间换取在搜索时的性能提升。而层级越高，索引的步长越短，构建索引的空间代价也会越高。这也解释了Lucene为什么要采用8个Block作为步长，虽然它的查询性能相比会差一些，但是需要的空间也缩减少n/8，是一种存储空间和性能的折中方案。</p><h2 id="倒排结构图解"><a href="#倒排结构图解" class="headerlink" title="倒排结构图解"></a>倒排结构图解</h2><p>有了FST和SkipList的介绍以后，我们大体上可以画一个下面的图来说明lucene是如何实现整个倒排结构的：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-7.jpg" alt></p><p>有了这张图，我们可以理解为什么基于lucene可以快速进行倒排链的查找和docid查找，下面就来看一下有了这些后如何进行倒排链合并返回最后的结果。</p><h2 id="倒排合并"><a href="#倒排合并" class="headerlink" title="倒排合并"></a>倒排合并</h2><p>假如我们的查询条件是name = “Alice”，那么按照之前的介绍，首先在term字典中定位是否存在这个term，如果存在的话进入这个term的倒排链，并根据参数设定返回分页返回结果即可。这类查询，在数据库中使用二级索引也是可以满足，那lucene的优势在哪呢。</p><p>假如我们有多个条件，例如我们需要按名字或者年龄单独查询，也需要进行组合 name = “Alice” and age = “18”的查询，那么使用传统二级索引方案，你可能需要建立两张索引表，然后分别查询结果后进行合并，这样如果age = 18的结果过多的话，查询合并会很耗时。那么在lucene这两个倒排链是怎么合并呢。</p><p>假如我们有下面三个倒排链需要进行合并。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-9.png" alt></p><p>在lucene中会采用下列顺序进行合并：</p><ol><li>在termA开始遍历，得到第一个元素docId=1</li><li>Set currentDocId=1</li><li>在termB中 search（currentDocId） = 1 （返回大于等于currentDocId的一个doc，这一步搜索时就会进行SkipList数据跳过）,<ol><li>因为currentDocId ==search结果1，继续</li><li>如果currentDocId 和search返回的不相等，则执行2，然后继续（执行2是什么意思。。。）</li></ol></li><li>到termC后搜索结果依然符合，返回结果</li><li>Set currentDocId = termC.nextItem = 2</li><li>然后继续步骤3 依次循环。直到某个倒排链到末尾。</li></ol><blockquote><p>这里有点看不明白，留个坑</p></blockquote><p>整个合并步骤我可以发现，如果某个链很短，会大幅减少比对次数，并且由于SkipList结构的存在，在某个倒排中定位某个docid的速度会比较快不需要一个个遍历（该例子所需的时间比完整遍历三个posting list要快得多，但是前提是每个list需要使用SkipList独有的Advance操作）。可以很快的返回最终的结果。从倒排的定位，查询，合并整个流程组成了lucene的查询过程，和传统数据库的索引相比，lucene合并过程中的优化减少了读取数据的IO，倒排合并的灵活性也解决了传统索引较难支持多条件查询的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> lucene </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 集群架构学习</title>
      <link href="2021/02/25/database/es/"/>
      <url>2021/02/25/database/es/</url>
      
        <content type="html"><![CDATA[<h2 id="Elasticsearch-集群架构"><a href="#Elasticsearch-集群架构" class="headerlink" title="Elasticsearch 集群架构"></a>Elasticsearch 集群架构</h2><p>Elasticsearch是一个非常著名的开源搜索和分析系统，目前被广泛应用于互联网多种领域中，尤其是以下三个领域特别突出。</p><ol><li>搜索领域，相对于solr，真正的后起之秀，成为很多搜索系统的不二之选。</li><li>Json文档数据库，相对于MongoDB，读写性能更佳，而且支持更丰富的地理位置查询以及数字、文本的混合查询等。</li><li>时序数据分析处理，目前是日志处理、监控数据的存储、分析和可视化方面做得非常好，可以说是该领域的引领者了。</li></ol><p><strong>转载至阿里云</strong>：<a href="https://zhuanlan.zhihu.com/p/32990496" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32990496</a></p><p>Elasticsearch的详细介绍可以到<a href="https://link.zhihu.com/?target=https%3A//www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">官网</a>查看。我们先来看一下Elasticsearch中几个关键概念：</p><ol><li><strong>节点</strong>（Node）：物理概念，一个运行的Elasticearch实例，一般是一台机器上的一个进程。</li><li><strong>索引</strong>（Index），逻辑概念，包括配置信息mapping和倒排正排数据文件，一个索引的数据文件可能会分布于一台机器，也有可能分布于多台机器。索引的另外一层意思是倒排索引文件。</li><li><strong>分片</strong>（Shard）：为了支持更大量的数据，索引一般会按某个维度分成多个部分，每个部分就是一个分片，分片被节点（Node）管理。一个节点一般会管理多个分片，这些分片可能是属于同一份索引，也有可能属于不同索引，但是为了可靠性和可用性，同一个索引的分片尽量会分布在不同节点上。分片有两种，主分片和副本分片。</li><li><strong>副本</strong>（Replica）：同一个分片（Shard）的备份数据，一个分片可能会有0个或多个副本，这些副本中的数据保证强一致或最终一致。</li></ol><p>用图形表示出来可能是这样子的：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-1.png" alt></p><ol><li>Index 1：蓝色部分，有3个shard，分别是P1，P2，P3，位于3个不同的Node中，这里没有Replica。</li><li>Index 2：绿色部分，有2个shard，分别是P1，P2，位于2个不同的Node中。并且每个shard有一个replica，分别是R1和R2。基于系统可用性的考虑，同一个shard的 primary 和 replica 不能位于同一个Node中。这里Shard1的P1和R1分别位于Node3和Node2中，如果某一刻Node2发生宕机，服务基本不会受影响，因为还有一个P1和R2都还是可用的。因为是主备架构，当主分片发生故障时，需要切换，这时候需要选举一个副本作为新主，这里除了会耗费一点点时间外，也会有丢失数据的风险。</li></ol><h2 id="建Index流程"><a href="#建Index流程" class="headerlink" title="建Index流程"></a>建Index流程</h2><p>建索引（Index）的时候，一个Doc先是经过路由规则定位到主Shard，发送这个doc到主Shard上建索引，成功后再发送这个Doc到这个Shard的副本上建索引，等副本上建索引成功后才返回成功。</p><p>在这种架构中，索引数据全部位于Shard中，主Shard和副本Shard各存储一份。当某个副本Shard或者主Shard丢失（比如机器宕机，网络中断等）时，需要将丢失的Shard在其他Node中恢复回来，这时候就需要从其他副本（Replica）全量拷贝这个Shard的所有数据到新Node上构造新Shard。这个拷贝过程需要一段时间，这段时间内只能由剩余主副本来承载流量，在恢复完成之前，整个系统会处于一个比较危险的状态，直到failover结束。</p><p>这里就体现了副本（Replica）存在的一个理由，<strong>避免数据丢失，提高数据可靠性</strong>。副本（Replica）存在的另一个理由是读请求量很大的时候，一个Node无法承载所有流量，这个时候就需要一个副本来分流查询压力，目的就是<strong>扩展查询能力</strong>。</p><h2 id="角色部署方式"><a href="#角色部署方式" class="headerlink" title="角色部署方式"></a>角色部署方式</h2><p>看看角色分工的两种不同方式：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-2.jpg" alt></p><p>Elasticsearch支持上述两种方式：</p><p><strong>混合部署</strong>（左图）：</p><ul><li><ol><li>默认方式。</li><li>不考虑 MasterNode 的情况下，还有两种Node，<strong>Data Node 和 Transport Node</strong> ，这种部署模式下，这两种不同类型Node角色都位于同一个Node中，相当于一个Node具备两种功能：Data和Transport。</li><li>当有index或者query请求的时候，请求随机（自定义）发送给任何一个Node，这台<strong>Node中会持有一个全局的路由表</strong>，通过路由表选择合适的Node，将请求发送给这些Node，然后等所有请求都返回后，合并结果，然后返回给用户。一个Node分饰两种角色。</li><li>好处就是使用极其<strong>简单</strong>，易上手，对推广系统有很大价值。最简单的场景下只需要启动一个Node，就能完成所有的功能。</li><li>缺点就是<strong>多种类型的请求会相互影响</strong>，在大集群如果某一个 Data Node 出现热点，那么就会影响途经这个Data Node的所有其他跨Node请求。如果发生故障，故障影响面会变大很多。</li><li>Elasticsearch中每个Node都需要和其余的每一个Node都保持13个连接。这种情况下，每个Node都需要和其他所有Node保持连接，而一个系统的连接数是有上限的，这样连接数就会限制集群规模。</li><li>还有就是<strong>不能支持集群的热更新</strong>。</li></ol></li></ul><p><strong>分层部署</strong>（右图）：</p><ul><li><ol><li>通过配置可以隔离开Node。</li><li>设置部分Node为Transport Node，<strong>专门用来做请求转发和结果合并</strong>。</li><li>其他Node可以设置为DataNode，<strong>专门用来处理数据</strong>。</li><li>缺点是上手复杂，需要提前设置好Transport的数量，且数量和Data Node、流量等相关，否则要么资源闲置，要么机器被打爆。</li><li>好处就是<strong>角色相互独立</strong>，不会相互影响，一般Transport Node的流量是平均分配的，很少出现单台机器的CPU或流量被打满的情况，而DataNode由于处理数据，很容易出现单机资源被占满，比如CPU，网络，磁盘等。独立开后，DataNode如果出了故障只是影响单节点的数据处理，不会影响其他节点的请求，影响限制在最小的范围内。</li><li>角色独立后，只需要Transport Node连接所有的DataNode，而DataNode则不需要和其他DataNode有连接。一个集群中DataNode的数量远大于Transport Node，这样集群的规模可以更大。另外，还可以通过分组，使Transport Node只连接固定分组的DataNode，这样Elasticsearch的连接数问题就彻底解决了。</li><li>可以<strong>支持热更新</strong>：先一台一台的升级DataNode，升级完成后再升级Transport Node，整个过程中，可以做到让用户无感知。</li></ol></li></ul><h2 id="Elasticsearch-数据层架构"><a href="#Elasticsearch-数据层架构" class="headerlink" title="Elasticsearch 数据层架构"></a>Elasticsearch 数据层架构</h2><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>Elasticsearch的Index和meta，目前支持存储在本地文件系统中，同时支持niofs，mmap，simplefs，smb等不同加载方式，性能最好的是直接将索引LOCK进内存的MMap方式。默认，Elasticsearch会自动选择加载方式，另外可以自己在配置文件中配置。这里有几个细节，具体可以看官方文档。</p><p>索引和meta数据都存在本地，会带来一个问题：当某一台机器宕机或者磁盘损坏的时候，数据就丢失了。为了解决这个问题，可以使用Replica（副本）功能。</p><h3 id="副本（Replica）"><a href="#副本（Replica）" class="headerlink" title="副本（Replica）"></a>副本（Replica）</h3><p>可以为每一个Index设置一个配置项：副本（Replicda）数，如果设置副本数为2，那么就会有3个Shard，其中一个是PrimaryShard，其余两个是ReplicaShard，这三个Shard会被Mater尽量调度到不同机器，甚至机架上，这三个Shard中的数据一样，提供同样的服务能力。</p><p>副本（Replica）的目的有三个：</p><ol><li><strong>保证服务可用性</strong>：当设置了多个Replica的时候，如果某一个Replica不可用的时候，那么请求流量可以继续发往其他Replica，服务可以很快恢复开始服务。</li><li><strong>保证数据可靠性</strong>：如果只有一个Primary，没有Replica，那么当Primary的机器磁盘损坏的时候，那么这个Node中所有Shard的数据会丢失，只能reindex了。</li><li><strong>提供更大的查询能力</strong>：当Shard提供的查询能力无法满足业务需求的时候， 可以继续加N个Replica，这样查询能力就能提高N倍，轻松增加系统的并发度。</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上面说了一些优势，这种架构同样在一些场景下会有些问题。</p><p>Elasticsearch采用的是基于本地文件系统，使用Replica保证数据可靠性的技术架构，这种架构一定程度上可以满足大部分需求和场景，但是也存在一些遗憾：</p><ol><li>Replica带来<strong>成本浪费</strong>。为了保证数据可靠性，必须使用Replica，但是当一个Shard就能满足处理能力的时候，另一个Shard的计算能力就会浪费。</li><li>Replica带来<strong>写性能和吞吐的下降</strong>。每次Index或者update的时候，需要先更新Primary Shard，更新成功后再并行去更新Replica，再加上长尾，写入性能会有不少的下降。</li><li>当出现热点或者需要紧急扩容的时候<strong>动态增加Replica慢</strong>。新Shard的数据需要完全从其他Shard拷贝，拷贝时间较长。</li></ol><p>上面介绍了Elasticsearch数据层的架构，以及副本策略带来的优势和不足，下面简单介绍了几种不同形式的分布式数据系统架构。</p><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><h3 id="第一种：基于本地文件系统的分布式系统"><a href="#第一种：基于本地文件系统的分布式系统" class="headerlink" title="第一种：基于本地文件系统的分布式系统"></a>第一种：基于本地文件系统的分布式系统</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-3.jpg" alt></p><p>上图中是一个基于本地磁盘存储数据的分布式系统。Index一共有3个Shard，每个Shard除了Primary Shard外，还有一个Replica Shard。当Node 3机器宕机或磁盘损坏的时候，首先确认P3已经不可用，重新选举R3位Primary Shard，此Shard发生主备切换。然后重新找一台机器Node 7，在Node7 上重新启动P3的新Replica。由于数据都会存在本地磁盘，此时需要将Shard 3的数据从Node 6上拷贝到Node7上。如果有200G数据，千兆网络，拷贝完需要1600秒。如果没有replica，则这1600秒内这些Shard就不能服务。</p><p>为了保证可靠性，就需要冗余Shard，会导致更多的物理资源消耗。</p><p>这种思想的另外一种表现形式是<strong>使用双集群</strong>，集群级别做备份。</p><p>在这种架构中，如果你的数据是在其他存储系统中生成的，比如HDFS/HBase，那么你还需要一个数据传输系统，将准备好的数据分发到相应的机器上。</p><p>这种架构中为了保证可用性和可靠性，需要双集群或者Replica才能用于生产环境，优势和副作用在上面介绍Elasticsearch的时候已经介绍过了，这里就就不赘述了。</p><p>Elasticsearch使用的就是这种架构方式。</p><h3 id="第二种：基于分布式文件系统的分布式系统（共享存储）"><a href="#第二种：基于分布式文件系统的分布式系统（共享存储）" class="headerlink" title="第二种：基于分布式文件系统的分布式系统（共享存储）"></a>第二种：基于分布式文件系统的分布式系统（共享存储）</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-4.png" alt></p><p>针对第一种架构中的问题，另一种思路是：<strong>存储和计算分离</strong>。</p><p>第一种思路的问题根源是数据量大，拷贝数据耗时多，那么有没有办法可以不拷贝数据？为了实现这个目的，一种思路是底层存储层使用共享存储，每个Shard只需要连接到一个分布式文件系统中的一个目录/文件即可，Shard中不含有数据，只含有计算部分。相当于每个Node中只负责计算部分，存储部分放在底层的另一个分布式文件系统中，比如<strong>HDFS</strong>。</p><p>上图中，Node 1 连接到第一个文件；Node 2连接到第二个文件；Node3连接到第三个文件。当Node 3机器宕机后，只需要在Node 4机器上新建一个空的Shard，然后构造一个新连接，连接到底层分布式文件系统的第三个文件即可，创建连接的速度是很快的，总耗时会非常短。</p><p>这种是一种典型的存储和计算分离的架构，优势有以下几个方面：</p><ol><li>在这种架构下，资源可以更加弹性，当存储不够的时候只需要扩容存储系统的容量；当计算不够的时候，只需要扩容计算部分容量。</li><li>存储和计算是独立管理的，资源管理粒度更小，管理更加精细化，浪费更少，结果就是总体成本可以更低。</li><li>负载更加突出，抗热点能力更强。一般热点问题基本都出现在计算部分，对于存储和计算分离系统，计算部分由于没有绑定数据，可以实时的扩容、缩容和迁移，当出现热点的时候，可以第一时间将计算调度到新节点上。</li></ol><p>这种架构同时也有一个不足：</p><p><strong>访问分布式文件系统的性能可能不及访问本地文件系统</strong>。在上一代分布式文件系统中，这是一个比较明显的问题，但是目前使用了各种用户态协议栈后，这个差距已经越来越小了。</p><p>HBase使用的就是这种架构方式。</p><p>Solr也支持这种形式的架构。</p><h2 id="Lucene数据模型"><a href="#Lucene数据模型" class="headerlink" title="Lucene数据模型"></a>Lucene数据模型</h2><p>Lucene中包含了四种基本数据类型，分别是：</p><ol><li>Index：索引，由很多的Document组成。</li><li>Document：由很多的Field组成，是Index和Search的最小单位。</li><li>Field：由很多的Term组成，包括Field Name和Field Value。</li><li>Term：由很多的字节组成，可以分词。</li></ol><p>上述四种类型在Elasticsearch中同样存在，意思也一样。</p><p>Lucene中存储的索引主要分为三种类型：</p><ol><li>Invert Index：<strong>倒排索引</strong>，或者简称Index，<strong>通过Term可以查询到拥有该Term的文档</strong>。可以配置为是否分词，如果分词可以配置不同的分词器。索引存储的时候有多种存储类型，分别是：<ol><li>DOCS：只存储DocID。</li><li>DOCS_AND_FREQS：存储DocID和词频（Term Freq）。</li><li>DOCS_AND_FREQS_AND_POSITIONS：存储DocID、词频（Term Freq）和位置。</li><li>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS：存储DocID、词频（Term Freq）、位置和偏移。</li></ol></li><li>DocValues：正排索引，采用列式存储。<strong>通过DocID可以快速读取到该Doc的特定字段的值</strong>。由于是列式存储，性能会比较好。一般用于sort，agg等需要高频读取Doc字段值的场景。</li><li>Store：字段原始内容存储，同一篇文章的多个Field的Store会存储在一起，适用于一次读取少量且多个字段内存的场景，比如摘要等。</li></ol><p>Lucene中提供索引和搜索的最小组织形式是Segment，Segment中按照索引类型不同，分成了Invert Index，Doc Values和Store这三大类（还有一些辅助类，这里省略），每一类里面都是按照Doc为最小单位存储。</p><ol><li>Invert Index中存储的Key是Term，Value是Doc ID的链表；</li><li>Doc Value中Key 是Doc ID和Field Name，Value是Field Value；</li><li>Store的Key是Doc ID，Value是Filed Name和Filed Value。</li></ol><p>由于Lucene中没有主键概念和更新逻辑，所有对Lucene的更新都是Append一个新Doc，类似于一个只能Append的队列，所有Doc都被同等对等，同样的处理方式。其中的Doc由众多Field组成，没有特殊Field，每个Field也都被同等对待，同样的处理方式。</p><p>从上面介绍来看，Lucene只是提供了一个索引和查询的最基本的功能，距离一个完全可用的完整搜索引擎还有一些距离</p><h2 id="Lucene-gt-Elasticsearch"><a href="#Lucene-gt-Elasticsearch" class="headerlink" title="Lucene =&gt; Elasticsearch"></a>Lucene =&gt; Elasticsearch</h2><p>在Elasticsearch中，为了支持分布式，增加了一个系统字段<code>_routing</code>（路由），通过<code>_routing</code>将Doc分发到不同的Shard，不同的Shard可以位于不同的机器上，这样就能实现简单的分布式了。</p><p>采用类似的方式，Elasticsearch增加了<code>_id、_version、_source和_seq_no</code>等等多个系统字段，通过这些Elasticsearch中特有的系统字段可以有效解决上述的几个问题，新增的系统字段主要是下列几个：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-5.jpg" alt></p><h3 id="1-id"><a href="#1-id" class="headerlink" title="1. _id"></a>1. _id</h3><p><strong>Doc的主键</strong>，在写入的时候，可以指定该Doc的ID值，<strong>如果不指定，则系统自动生成一个唯一的UUID</strong>值。</p><p>Lucene中没有主键索引，要保证系统中同一个Doc不会重复，Elasticsearch引入了<code>_id</code>字段来实现主键。每次写入的时候都会先查询id，如果有，则说明已经有相同Doc存在了。</p><p>通过<code>_id</code>值（ES内部转换成_uid）可以唯一在Elasticsearch中确定一个Doc。</p><p>Elasticsearch中，<code>_id</code>只是一个用户级别的虚拟字段，在Elasticsearch中并不会映射到Lucene中，所以也就不会存储该字段的值。</p><p><code>_id</code>的值可以由<code>_uid</code>解析而来（<code>_uid =type + &#39;#&#39; + id</code>），Elasticsearch中会存储<code>_uid</code>。</p><h3 id="2-uid"><a href="#2-uid" class="headerlink" title="2. _uid"></a>2. _uid</h3><p>_uid的格式是：<code>type + &#39;#&#39; + id</code>。</p><p>_uid会存储在Lucene中，在Lucene中的映射关系如下：dex下可能存在多个id值相同的Doc，而6.0.0之后只支持单Type，同Index下id值是唯一的。</p><p>uid会存储在Lucene中，在Lucene中的映射关系如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-6.png" alt></p><p><code>_uid</code> <strong>只是存储了倒排Index和原文store</strong>：倒排Index的目的是可以通过<code>_id</code>快速查询到文档；原文store用来在返回的Response里面填充完整的<code>_id</code>值。</p><p>在Lucene中存储<code>_uid</code>，而不是<code>_id</code>的原因是，在6.0.0之前版本里面，<code>_uid</code>可以比<code>_id</code>表示更多的信息，比如Type。在6.0.0版本之后，同一个Index只能有一个Type，这时候Type就没多大意义了，后面Type应该会消失，那时候<code>_id</code>就会和<code>_uid</code>概念一样，到时候两者会合二为一，也能简化大家的理解。</p><h3 id="3-version"><a href="#3-version" class="headerlink" title="3. _version"></a>3. _version</h3><p>Elasticsearch中每个Doc都会有一个Version，该Version可以由用户指定，也可以由系统自动生成。如果是系统自动生成，那么每次Version都是递增1。</p><p><code>_version</code>是实时的，不受搜索的近实时性影响，原因是可以通过<code>_uid</code>从内存中versionMap或者TransLog中读取到。</p><p>Version在Lucene中也是映射为一个特殊的Field存在。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-7.png" alt></p><p>Elasticsearch中Version字段的主要目的是<strong>通过doc_id读取Version</strong>，所以Version只要存储为DocValues就可以了，类似于KeyValue存储。</p><p>Elasticsearch通过使用version来<strong>保证对文档的变更能以正确的顺序执行</strong>，避免乱序造成的数据丢失。</p><h3 id="4-source"><a href="#4-source" class="headerlink" title="4. _source"></a>4. _source</h3><p>Elasticsearch中有一个重要的概念是source，<strong>存储原始文档</strong>，也可以通过过滤设置只存储特定Field。</p><p>Source在Lucene中也是映射为了一个特殊的Field存在：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-8.png" alt></p><p>Elasticsearch中_source字段的主要目的是通过doc_id读取该文档的原始内容，所以只需要存储Store即可。</p><p><code>_source</code>其实是名为<code>_source</code>的虚拟Store Field。</p><p>Elasticsearch中使用_source字段可以实现以下功能：</p><ol><li>Update：部分更新时，需要从读取文档保存在<code>_source</code>字段中的原文，然后和请求中的部分字段合并为一个完整文档。如果没有<code>_source</code>，则不能完成部分字段的Update操作。</li><li>Rebuild：最新的版本中新增了rebuild接口，可以通过Rebuild API完成索引重建，过程中不需要从其他系统导入全量数据，而是从当前文档的<code>_source</code>中读取。如果没有<code>_source</code>，则不能使用Rebuild API。</li><li>Script：不管是Index还是Search的Script，都可能用到存储在Store中的原始内容，如果禁用了<code>_source</code>，则这部分功能不再可用。</li><li>Summary：摘要信息也是来源于<code>_source</code>字段。</li></ol><h3 id="5-seq-no"><a href="#5-seq-no" class="headerlink" title="5. _seq_no"></a>5. _seq_no</h3><p><strong>严格递增的顺序号</strong>，每个文档一个，Shard级别严格递增，保证后写入的Doc的<code>_seq_no</code>大于先写入的Doc的<code>_seq_no</code>。</p><p>任何类型的写操作，包括index、create、update和Delete，都会生成一个<code>_seq_no</code>。</p><p><code>_seq_no</code>在Primary Node中由SequenceNumbersService生成，但其实真正产生这个值的是LocalCheckpointTracker，每次递增1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * The next available sequence number.     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> nextSeqNo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Issue the next sequence number.     *     * @return the next assigned sequence number     */</span>    <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">generateSeqNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextSeqNo<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个文档在使用Lucene的document操作接口之前，会获取到一个<code>_seq_no</code>，这个<code>_seq_no</code>会以系统保留Field的名义存储到Lucene中，文档写入Lucene成功后，会标记该seq_no为完成状态，这时候会使用当前seq_no更新local_checkpoint。</p><p>checkpoint分为 local_checkpoint 和 global_checkpoint ，主要是用于保证有序性，以及减少Shard恢复时数据拷贝的数据拷贝量，更详细的介绍可以看这篇文章：<a href="https://link.zhihu.com/?target=https%3A//www.elastic.co/blog/elasticsearch-sequence-ids-6-0" target="_blank" rel="noopener">Sequence IDs: Coming Soon to an Elasticsearch Cluster Near You</a>。</p><p><code>_seq_no</code>在Lucene中的映射：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-9.png" alt></p><p>Elasticsearch中<code>_seq_no</code>的作用有两个：</p><ol><li>通过doc_id查询到该文档的seq_no，</li><li>通过seq_no范围查找相关文档，所以也就需要存储为Index和DocValues（或者Store）。</li></ol><p>由于是在冲突检测时才需要读取文档的<code>_seq_no</code>，而且此时只需要读取<code>_seq_no</code>，不需要其他字段，这时候存储为列式存储的DocValues比Store在性能上更好一些。</p><p><code>_seq_no</code>是严格递增的，写入Lucene的顺序也是递增的，所以DocValues存储类型可以设置为Sorted。</p><p>另外，<code>_seq_no</code>的索引应该仅需要支持存储DocId就可以了，不需要FREQS、POSITIONS和分词。如果多存储了这些，对功能也没影响，就是多占了一点资源而已。</p><h3 id="6-primary-term"><a href="#6-primary-term" class="headerlink" title="6. _primary_term"></a>6. _primary_term</h3><p><code>_primary_term</code>也和<code>_seq_no</code>一样是一个整数，每当Primary Shard发生重新分配时，比如重启，Primary选举等，<code>_primary_term</code>会递增1。</p><p><code>_primary_term</code>主要是用来恢复数据时处理当多个文档的<code>_seq_no</code>一样时的冲突，避免Primary Shard上的写入被覆盖。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-10.png" alt></p><p>Elasticsearch中<code>_primary_term</code>只需要通过doc_id读取到即可，所以只需要保存为DocValues就可以了</p><h3 id="7-routing"><a href="#7-routing" class="headerlink" title="7. _routing"></a>7. _routing</h3><p><strong>路由规则</strong>，写入和查询的routing需要一致，否则会出现写入的文档没法被查到情况。</p><p>在mapping中，或者Request中可以指定按某个字段路由。默认是按照<code>_Id</code>值路由。</p><p><code>_routing</code>在Lucene中映射为：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-11.png" alt></p><p>Elasticsearch中文档级别的<code>_routing</code>主要有两个目的：</p><ol><li>可以查询到使用某种<code>_routing</code>的文档有哪些，当发生<code>_routing</code>变化时，可以对历史<code>_routing</code>的文档重新读取再Index，这个需要倒排Index。</li><li>查询到文档后，在Response里面展示该文档使用的<code>_routing</code>规则，这里需要存储为Store。</li></ol><h3 id="8-field-names"><a href="#8-field-names" class="headerlink" title="8. _field_names"></a>8. _field_names</h3><p>该字段会索引某个Field的名称，用来<strong>判断某个Doc中是否存在某个Field</strong>，用于exists或者missing请求。</p><p><code>_field_names</code>在Lucene中的映射：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-12.png" alt></p><p>Elasticsearch中<code>_field_names</code>的目的是查询哪些Doc的这个Field是否存在，所以<strong>只需要倒排Index</strong>即可。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> 分布式系统 </tag>
            
            <tag> lucene </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper的原理和分布式锁</title>
      <link href="2021/02/24/project/zookeeper/"/>
      <url>2021/02/24/project/zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="Zookeeper介绍"><a href="#Zookeeper介绍" class="headerlink" title="Zookeeper介绍"></a>Zookeeper介绍</h2><p>Zookeeper是一个高性能的分布式一致系统，在分布式系统中有着广泛的应用。基于它，可以实现分布式同步、配置管理、命名空间管理等众多功能，是分布式系统中常见的基础系统。</p><p>Zookeeper主要用来解决分布式集群中应用系统的一致性问题，它有着树状结构的节点，每个节点均可存储少量的数据。同时，用户可以修改和订阅节点中的内容。分布式系统中的节点通过监控这些数据状态的变化，从而可以达到基于数据的集群管理。</p><p>从设计模式角度来看，Zookeeper是基于观察者模式实现的。可以把它作为一个信息的中心。使用该服务的生产者和消费者都以Zookeeper中的数据为基准。即：</p><ol><li>生产者可以改变Zookeeper的节点，或者节点上的数据</li><li>消费者通过订阅Zookeeper节点，从而能够在节点变动时收到通知</li></ol><p>基于这样的机制，将Zookeeper作为信息中心，便可以实现分布式系统中节点状态的最终一致性。</p><p><strong>Zookeeper具有以下特点</strong>：</p><ol><li>最终一致性：客户端不论连接到哪个Zookeeper的哪一个节点，都会收到同一份状态。这是zookeeper最重要的性能。</li><li>可靠性：Zookeeper集群具有简单、健壮、良好的性能，如果消息m被到一台server接受，那么它将被所有的server接受。</li><li>实时性：Zookeeper保证client将在一个时间间隔范围内获得server的更新信息，或者server失效的信息。但由于网络延时等原因，Zookeeper不能保证两个client能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</li><li>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</li><li>原子性：更新只能成功或者失败，没有中间状态。</li><li>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台server上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</li></ol><h2 id="zookeeper应用场景"><a href="#zookeeper应用场景" class="headerlink" title="zookeeper应用场景"></a>zookeeper应用场景</h2><ol><li><p><strong>数据发布与订阅</strong>：应用配置集中到节点上，应用启动时主动获取，并在节点上注册一个watcher，每次配置更新都会通知到应用。</p></li><li><p><strong>名空间服务</strong>：分布式命名服务，创建一个节点后，节点的路径就是全局唯一的，可以作为全局名称使用。</p></li><li><p><strong>分布式通知/协调</strong>：不同的系统都监听同一个节点，一旦有了更新，另一个系统能够收到通知。</p></li><li><p><strong>分布式锁</strong>：Zookeeper能<strong>保证数据的强一致性</strong>，用户任何时候都可以相信集群中每个节点的数据都是相同的。一个用户创建一个节点作为锁，另一个用户检测该节点，如果存在，代表别的用户已经锁住，如果不存在，则可以创建一个节点，代表拥有一个锁。</p></li><li><p><strong>集群管理</strong>：每个加入集群的机器都创建一个节点，写入自己的状态。监控父节点的用户会受到通知，进行相应的处理。离开时删除节点，监控父节点的用户同样会收到通知。如图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zookeeper-1.jpg" alt></p></li><li><p><strong>配置管理</strong>：在分布式应用环境中很常见，例如同一个应用系统需要多台节点运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。像这样的配置信息完全可以交给 Zookeeper 来管理，<strong>将配置信息保存在 Zookeeper 的某个目录节点</strong>中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 Zookeeper 的通知，然后从 Zookeeper 获取新的配置信息应用到系统中。如图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zookeeper-2.jpg" alt></p></li></ol><h2 id="分布式锁的流程"><a href="#分布式锁的流程" class="headerlink" title="分布式锁的流程"></a>分布式锁的流程</h2><p>分布式锁的应用上面已经讲到了，具体流程如下：</p><p>假如说有n个分布式的工作点，定义为a1,a2,a3,a4……</p><p>当某个分布式点做一件事时，先去zk某个固定位置判断（例如：/aTask/sync目录下）是否存在一个特定节点（例如节点名：lock）:</p><ol><li>如果没有，则创建该节点，即声明自己持有该锁。然后进行分布式任务，任务结束后。去删除该节点，表明释放该锁。</li><li>如果有，表明其他工作点持有了锁，不能开展分布式任务。</li></ol><h2 id="分布式锁的应用"><a href="#分布式锁的应用" class="headerlink" title="分布式锁的应用"></a>分布式锁的应用</h2><p>举一个最简单的例子：</p><p>1、假如有一个系统，能够提供报表查看功能——&gt;于是我们开发了一个单节点应用</p><p>2、该系统访量非常大，系统难以支撑——&gt;我们部署了多个节点（加入为5个），分担访问请求。于是成了分布式应用</p><p>3、老板要求增加一个每天晚上向指定邮件发送该日统计报表的功能—–&gt;应用中增加个定时线程，每天晚上半夜跑报表，发邮件</p><p>这个时候，出问题了，老板每天晚上会收到5封邮件！因为同样的程序我们部署了5个节点！怎么解决呢？</p><p><strong>方案一</strong>：有一个节点和其他节点不一样，具有每日汇总功能。</p><p>优点：开发简单。</p><p>缺点：这样，一个应用便成了两个应用。我们必须维护两份代码。一份是不具有每日汇总功能的，一份是具有每日汇总功能的。</p><p><strong>方案二</strong>：增加分布式锁。这样，5个节点中，只有获取到锁的节点才会发出邮件。</p><p>优点：代码还是只有一份，维护简单。扩展性强，可以继续扩展类似的需要锁的功能（例如某个业务流程只允许处理一次，还可以继续复用相关逻辑）。</p><p>缺点：开发稍微复杂一点。</p><p>因此，方案二是最好的选择。</p><h2 id="基于ZooKeeper的三种分布式锁实现"><a href="#基于ZooKeeper的三种分布式锁实现" class="headerlink" title="基于ZooKeeper的三种分布式锁实现"></a>基于ZooKeeper的三种分布式锁实现</h2><p><a href="https://www.cnblogs.com/codestory/p/11387116.html" target="_blank" rel="noopener">https://www.cnblogs.com/codestory/p/11387116.html</a></p><h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 版本信息：3.5.8</span><span class="token comment" spellcheck="true"># 路径：/home/rndii/projects/zookeeper/apache-zookeeper-3.5.8</span><span class="token comment" spellcheck="true"># 服务器节点：10.0.1.104   10.0.1.117    10.0.1.127</span><span class="token comment" spellcheck="true"># 操作系统用户：rndii</span><span class="token comment" spellcheck="true"># 1.修改zoo.conf文件，如果该文件不存在，则cp zoo.simple.cnf zoo.cnf</span><span class="token comment" spellcheck="true"># zoo.cnf 如下修改：</span><span class="token comment" spellcheck="true"># The number of milliseconds of each tick</span>tickTime<span class="token operator">=</span>2000<span class="token comment" spellcheck="true"># The number of ticks that the initial </span><span class="token comment" spellcheck="true"># synchronization phase can take</span>initLimit<span class="token operator">=</span>10<span class="token comment" spellcheck="true"># The number of ticks that can pass between </span><span class="token comment" spellcheck="true"># sending a request and getting an acknowledgement</span>syncLimit<span class="token operator">=</span>5<span class="token comment" spellcheck="true"># the directory where the snapshot is stored.</span><span class="token comment" spellcheck="true"># do not use /tmp for storage, /tmp here is just </span><span class="token comment" spellcheck="true"># example sakes.</span>dataDir<span class="token operator">=</span>/home/rndii/projects/zookeeper/apache-zookeeper-3.5.8/data<span class="token comment" spellcheck="true"># the port at which the clients will connect</span>clientPort<span class="token operator">=</span>2181<span class="token comment" spellcheck="true"># the maximum number of client connections.</span><span class="token comment" spellcheck="true"># increase this if you need to handle more clients</span><span class="token comment" spellcheck="true">#maxClientCnxns=60</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Be sure to read the maintenance section of the </span><span class="token comment" spellcheck="true"># administrator guide before turning on autopurge.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The number of snapshots to retain in dataDir</span><span class="token comment" spellcheck="true">#autopurge.snapRetainCount=3</span><span class="token comment" spellcheck="true"># Purge task interval in hours</span><span class="token comment" spellcheck="true"># Set to "0" to disable auto purge feature</span><span class="token comment" spellcheck="true">#autopurge.purgeInterval=1</span>server.1<span class="token operator">=</span>10.0.1.104:2888:3888server.2<span class="token operator">=</span>10.0.1.117:2888:3888server.3<span class="token operator">=</span>10.0.1.127:2888:3888<span class="token comment" spellcheck="true"># 配置文件到此结束</span><span class="token comment" spellcheck="true"># 2.在data文件夹中新增myid文本文件，内容为对应ip的节点id。对应zoo.cnf下的server.x=10.0.1.104:2888:3888的x</span><span class="token comment" spellcheck="true"># 3.如果未配置全局环境变量可修改zoo下的bin/zkServer.sh文件增加JAVA_HOME=xx</span><span class="token comment" spellcheck="true"># 4. 常规命令</span><span class="token comment" spellcheck="true"># 启动</span>bin/zkServer.sh start<span class="token comment" spellcheck="true"># 停止</span>bin/zkServer.sh stop<span class="token comment" spellcheck="true"># 查看zookeeper的状态</span>bin/zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lock </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RefreshScope注解和Spring bean scope</title>
      <link href="2021/02/23/java/refreshscope/"/>
      <url>2021/02/23/java/refreshscope/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-bean-scope详解"><a href="#Spring-bean-scope详解" class="headerlink" title="Spring bean scope详解"></a>Spring bean scope详解</h2><p>Scope是定义Spring如何创建bean的实例的。@Scope 代表了Bean的作用域</p><p>在创建bean的时候可以带上scope属性，scope有下面几种类型。</p><ol><li><strong>Singleton</strong>：这也是Spring默认的scope，表示Spring容器<strong>只创建一个bean的实例</strong>，Spring在创建第一次后会缓存起来，之后不再创建，就是设计模式中的<strong>单例模式</strong>。</li><li><strong>Prototype</strong>：代表线程每次调用这个bean都新创建一个实例。</li><li><strong>Request</strong>：表示每个request作用域（HTTP请求）内的请求只创建一个实例。</li><li><strong>Session</strong>：表示每个session内的请求只创建一个实例，session过期bean随之失效。</li><li><strong>application</strong>：bean被定义为ServletContext的生命周期中复用一个单例对象。</li><li><strong>websocket</strong>：bean被定义为在websocket的生命周期中复用一个单例对象。</li><li>GlobalSession：全局作用域，这个只在porlet的web应用程序中才有意义，它映射到porlet的global范围的session，如果普通的web应用使用了这个scope，容器会把它作为普通的session作用域的scope创建。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/RefreshScope-1.jpg" alt></p><h3 id="在创建bean的时候如何指定"><a href="#在创建bean的时候如何指定" class="headerlink" title="在创建bean的时候如何指定"></a>在创建bean的时候如何指定</h3><p><strong>xml方式</strong>：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注解方式</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doGetBean中的使用"><a href="#doGetBean中的使用" class="headerlink" title="doGetBean中的使用"></a>doGetBean中的使用</h3><p>AbstractBeanFactory#doGetBean（）</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>          Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Singleton和Prototype是硬编码的，并不是Scope子类。 Scope实际上是自定义扩展的接口</li><li>Scope Bean实例交由Scope自己创建，例如SessionScope是从Session中获取实例的，ThreadScope是从ThreadLocal中获取的，而RefreshScope是在内建缓存中获取的。</li></ol><blockquote><p>硬编码和软编码的区别是：软编码可以在运行时确定，修改；而硬编码是不能够改变的。</p></blockquote><h3 id="Scope-的属性"><a href="#Scope-的属性" class="headerlink" title="Scope 的属性"></a>Scope 的属性</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Alias for {@link #scopeName}.     * @see #scopeName     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"scopeName"</span><span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  singleton  表示该bean是单例的。(默认)     *  prototype    表示该bean是多例的，即每次使用该bean时都会新建一个对象。     *  request        在一次http请求中，一个bean对应一个实例。     *  session        在一个httpSession中，一个bean对应一个实例     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String <span class="token function">scopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    *   DEFAULT            不使用代理。(默认)    *     NO                不使用代理，等价于DEFAULT。    *     INTERFACES        使用基于接口的代理(jdk dynamic proxy)。    *     TARGET_CLASS    使用基于类的代理(cglib)。    */</span>    ScopedProxyMode <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们需要关心的就是ScopedProxyMode.TARGET_CLASS 这个属性，当ScopedProxyMode 为TARGET_CLASS 的时候会给当前创建的bean 生成一个代理对象，会通过代理对象来访问，每次访问都会创建一个新的对象。</strong></p><h2 id="RefreshScope的实现原理"><a href="#RefreshScope的实现原理" class="headerlink" title="RefreshScope的实现原理"></a>RefreshScope的实现原理</h2><h3 id="先来看下-RefreshScope"><a href="#先来看下-RefreshScope" class="headerlink" title="先来看下@RefreshScope"></a>先来看下@RefreshScope</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RefreshScope</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @see Scope#proxyMode()     */</span>    ScopedProxyMode <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ScopedProxyMode<span class="token punctuation">.</span>TARGET_CLASS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，它使用就是 @Scope ，其内部就一个属性默认 ScopedProxyMode.TARGET_CLASS。知道了是通过Spring Scope 来实现的那就简单了，我们来看下Scope 这个接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Return the object with the given name from the underlying scope,     * {@link org.springframework.beans.factory.ObjectFactory#getObject() creating it}     * if not found in the underlying storage mechanism.     * &lt;p>This is the central operation of a Scope, and the only operation     * that is absolutely required.     * @param name the name of the object to retrieve     * @param objectFactory the {@link ObjectFactory} to use to create the scoped     * object if it is not present in the underlying storage mechanism     * @return the desired object (never {@code null})     * @throws IllegalStateException if the underlying scope is not currently active     */</span>    Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    Object <span class="token function">remove</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">registerDestructionCallback</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Runnable callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    Object <span class="token function">resolveContextualObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    String <span class="token function">getConversationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看下接口，我们只看<code>Object get(String name, ObjectFactory&lt;?&gt; objectFactory)</code>; 这个方法帮助我们来<strong>创建一个新的bean</strong> ，也就是说，@RefreshScope 在调用 刷新的时候会使用此方法来给我们创建新的对象，这样就可以通过spring 的装配机制将属性重新注入了，也就实现了所谓的动态刷新。</p><h3 id="get（）方法"><a href="#get（）方法" class="headerlink" title="get（）方法"></a>get（）方法</h3><p>它究竟是怎么处理老的对象，又怎么除法创建新的对象呢？</p><p>因为RefreshScope extends GenericScope和 GenericScope implements Scope，RefreshScope继承GenericScope。</p><p>通过查看代码，是GenericScope 实现了 Scope 最重要的 <code>get(String name, ObjectFactory&lt;?&gt; objectFactory)</code>方法，在GenericScope 里面 包装了一个内部类 BeanLifecycleWrapperCache 来对加了 @RefreshScope 从而创建的对象进行缓存，使其在不刷新时获取的都是同一个对象。（这里你可以把 BeanLifecycleWrapperCache 想象成为一个大Map 缓存了所有@RefreshScope 标注的对象）</p><p>知道了对象是缓存的，所以在进行动态刷新的时候，只需要清除缓存，重新创建就好了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ContextRefresher 外面使用它来进行方法调用 ============================== 我是分割线</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> <span class="token function">refreshEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">refreshAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keys<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// RefreshScope 内部代码  ============================== 我是分割线</span>    <span class="token annotation punctuation">@ManagedOperation</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"Dispose of the current instance of all beans in this scope and force a refresh on next method execution."</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refreshAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshScopeRefreshedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// GenericScope 里的方法 ============================== 我是分割线</span>    <span class="token comment" spellcheck="true">//进行对象获取，如果没有就创建并放入缓存</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanLifecycleWrapper value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">BeanLifecycleWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> objectFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        locks<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//进行缓存的数据清理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>BeanLifecycleWrapper<span class="token operator">></span> wrappers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanLifecycleWrapper wrapper <span class="token operator">:</span> wrappers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Lock lock <span class="token operator">=</span> locks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    wrapper<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们截取了三个片段所得之，ContextRefresher 就是外层调用方法用的，GenericScope 里面的 get 方法<strong>负责对象的创建和缓存</strong>，destroy 方法负责再刷新时缓存的清理工作。</p><h3 id="总结下-RefreshScope-实现流程"><a href="#总结下-RefreshScope-实现流程" class="headerlink" title="总结下@RefreshScope 实现流程"></a>总结下@RefreshScope 实现流程</h3><ol><li>需要动态刷新的类标注@RefreshScope 注解</li><li>@RefreshScope 注解标注了@Scope 注解，并默认了ScopedProxyMode.TARGET_CLASS; 属性，此属性的功能就是在创建一个代理，在每次调用的时候都用它来调用GenericScope get 方法来获取对象</li><li>如属性发生变更会调用 ContextRefresher refresh（） -》RefreshScope refreshAll（） 进行缓存清理方法调用，并发送刷新事件通知 -》 GenericScope 真正的 清理方法destroy（）实现清理缓存</li><li>在下一次使用对象的时候，会调用GenericScope get（String name, ObjectFactory&lt;?&gt; objectFactory） 方法创建一个新的对象，并存入缓存中，此时新对象因为Spring 的装配机制就是新的属性了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> spring </tag>
            
            <tag> annotation </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>doGetBean方法</title>
      <link href="2021/02/23/java/dogetbean/"/>
      <url>2021/02/23/java/dogetbean/</url>
      
        <content type="html"><![CDATA[<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过三种形式获取beanName</span>        <span class="token comment" spellcheck="true">//一个是原始的beanName，一个是加了&amp;的，一个是别名</span>        <span class="token keyword">final</span> String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Eagerly check singleton cache for manually registered singletons.</span>        <span class="token comment" spellcheck="true">//尝试从单例缓存集合里获取bean实例</span>        Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object bean<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果先前已经创建过单例Bean的实例，并且调用的getBean方法传入的参数为空</span>        <span class="token comment" spellcheck="true">//则执行if里面的逻辑</span>        <span class="token comment" spellcheck="true">//args之所以要求为空是因为如果有args，则需要做进一步赋值，因此无法直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果Bean还在创建中，则说明是循环引用</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning eagerly cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                            <span class="token string">"' that is not fully initialized yet - a consequence of a circular reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果是普通bean，直接返回，如果是FactoryBean，则返回它的getObject</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//若scope为prototype或者单例模式但是缓存中还不存在bean</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果scope为prototype并且 显示还在创建中，则基本是循环依赖的情况</span>            <span class="token comment" spellcheck="true">//针对prototype的循环依赖，spring误解，直接抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Check if bean definition exists in this factory.</span>            BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从当前容器中找不到指定名称的bean，此时递归去parentFactory查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Not found -> check parent.</span>                <span class="token comment" spellcheck="true">//主要针对FactoryBean，将Bean的&amp;重新加上</span>                String nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果parent容器依旧是AbstractBeanFactory的实例</span>                <span class="token comment" spellcheck="true">//instanceof通过返回一个布尔值来指出，这个对象是否是这个特定类或者是它的子类的一个实例</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//直接递归调用方法来查找</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>                            nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> typeCheckOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果有参数，则委派父类容器根据指定名称和显示的参数查找</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No args -> delegate to standard getBean method.</span>                    <span class="token comment" spellcheck="true">//委派父级容器根据指定名称和类型查找</span>                    <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//委派父级容器根据指定名称查找</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//typeCheckOnly是用来判断调用getBean()是否仅仅是为了类型检查获取bean，而不是为了创建Bean</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果不是仅仅做类型检查则是创建bean</span>                <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将父类的BeanDefinition与子类的BeanDefinition进行合并覆盖</span>                <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//对合并的BeanDefinition做验证，主要看属性是否为abstract的</span>                <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Guarantee initialization of beans that the current bean depends on.</span>                <span class="token comment" spellcheck="true">//获取当前Bean所有依赖Bean的名称</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果当前Bean设置了dependsOn的属性</span>                <span class="token comment" spellcheck="true">//depends-on用来指定Bean初始化及销毁时的顺序</span>                <span class="token comment" spellcheck="true">//&lt;bean id="a" Class="com.imooc.A" depends-on="b" /></span>                <span class="token comment" spellcheck="true">//&lt;bean id="b" Class="com.imooc.B" /></span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//校验该依赖是否已经注册给当前bean，注意这里传入的key是当前的bean名称</span>                        <span class="token comment" spellcheck="true">//这里主要是判断是否有以下这种类型的依赖：</span>                        <span class="token comment" spellcheck="true">//&lt;bean id="beanA" Class="com.imooc.A" depends-on="beanB" /></span>                        <span class="token comment" spellcheck="true">//&lt;bean id="beanB" Class="com.imooc.B" depends-on="beanA" /></span>                        <span class="token comment" spellcheck="true">//如果有，直接抛出异常</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                    <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//缓存依赖调用，注意这里传入的key是被依赖的bean名称</span>                        <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//递归调用getBean方法，注册Bean之间的依赖(如C需要晚于B初始化，而B需要晚于A初始化)</span>                            <span class="token comment" spellcheck="true">//初始化依赖的bean</span>                            <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                    <span class="token string">"'"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' depends on missing bean '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Create bean instance.</span>                <span class="token comment" spellcheck="true">//如果BeanDefinition为单例</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span>                    sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Explicitly remove instance from singleton cache: It might have been put there</span>                            <span class="token comment" spellcheck="true">// eagerly by the creation process, to allow for circular reference resolution.</span>                            <span class="token comment" spellcheck="true">// Also remove any beans that received a temporary reference to the bean.</span>                            <span class="token comment" spellcheck="true">//显示从单例缓存中删除bean实例</span>                            <span class="token comment" spellcheck="true">//因为单例模式下为了解决循环依赖，可能它已经存在了，所以将其销毁</span>                            <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//只有在单例情况下才会尝试解决循环依赖</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果是普通bean，直接返回，如果是FactoryBean，则返回它的getObject</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// It's a prototype -> create a new instance.</span>                    Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//指定的scope上实例化bean</span>                    String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                                <span class="token string">"Scope '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"' is not active for the current thread; consider "</span> <span class="token operator">+</span>                                <span class="token string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span><span class="token punctuation">,</span>                                ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span>        <span class="token comment" spellcheck="true">//检查需要的类型是否符合bean的实际类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                T convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> convertedBean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                            ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/doGetBean-1.png" alt></p><h3 id="尝试从缓存中加载单例"><a href="#尝试从缓存中加载单例" class="headerlink" title="尝试从缓存中加载单例"></a>尝试从缓存中加载单例</h3><p>单例在spring容器内只会创建一次，后续获取都是从单例缓存中获取。如果获取不到则从singletonFactories中加载。因为在创建单例bean的时候会存在依赖注入的情况，而在创建的时候为了避免循环依赖，在Spring中创建bean的原则是不等bean创建完就会将创建bean的ObjectFactory提早曝光，也就是将ObjectFactory加入到缓存中，一旦下个bean创建时候需要依赖上个bean则直接使用ObjectFactory。</p><p>缓存池获取bean实例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一级缓存：存放的是已经完成实例化，属性填充和初始化步骤的单例bean实例</span>    Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//二级缓存：存放的是提前暴露的单例bean实例，可能是代理对象，也可能是未经代理的原对象，但都还没有完成初始化的步骤</span>            singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//三级缓存：存放的是ObjectFactory的匿名内部类实例</span>                ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ObjectFactory<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//回调ObjectFactory#getObject方法获取提前暴露的引用</span>                    singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//移入二级缓存</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//移除三级缓存</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> singletonObject <span class="token operator">!=</span> NULL_OBJECT <span class="token operator">?</span> singletonObject <span class="token operator">:</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类加载器classloader</title>
      <link href="2021/02/22/java/classloader/"/>
      <url>2021/02/22/java/classloader/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是classloader"><a href="#什么是classloader" class="headerlink" title="什么是classloader"></a>什么是classloader</h2><p>转载至阿里巴巴淘系技术：<a href="https://www.zhihu.com/question/46719811/answer/1739289578" target="_blank" rel="noopener">https://www.zhihu.com/question/46719811/answer/1739289578</a></p><p>classloader顾名思义，即是类加载。虚拟机把描述类的数据从class字节码文件加载到内存，并对数据进行检验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p><h2 id="classloader的加载过程"><a href="#classloader的加载过程" class="headerlink" title="classloader的加载过程"></a>classloader的加载过程</h2><p>类从被加载到虚拟机内存到被卸载，整个完整的生命周期包括：<strong>类加载、验证、准备、解析、初始化</strong>、使用和卸载七个阶段。其中验证，准备，解析三个部分统称为连接。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-1.jpg" alt></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载指的是把class字节码文件从各个来源通过类加载器装<strong>载入内存</strong>中</p><p>主要任务：</p><ol><li>通过“类全名”来获取定义此类的二进制字节流</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口</li></ol><p>相对于类加载过程的其他阶段，加载阶段是通过类加载（ClassLoader）来完成的，而类加载器也可以由用户自定义完成，因此，开发人员可以通过定义类加载器去控制字节流的获取方式。加载之后，二进制文件会被读入到虚拟机所需的格式存储在<strong>方法区</strong>中，方法区中存储格式由虚拟机自行定义，然后在java堆中实例化一个java.lang.Class类对象，通过这个对象就可以访问方法区中的数据。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证阶段是链接阶段的第一步，目的就是确保class文件的字节流中包含的信息<strong>符合虚拟机的要求</strong>，不能危害虚拟机自身安全。验证阶段主要包括四个检验过程：文件格式验证、元数据验证、字节码验证和符号引用验证。</p><ol><li>文件格式的验证，文件中是否有不规范的或者附加的其他信息。例如常量中是否有不被支持的常量。</li><li>元数据的验证，保证其描述的信息复合Java语言规范的要求。例如类是否有父类，是否继承了不被允许的final类等</li><li>字节码的验证，保证程序语义的合理性，比如要保证类型转换的合理性。</li><li>符号引用的验证，比如校验符号引用中通过全限定名是否能够找到对应的类，校验符号引用中的访问性（private，public等）是否可被当前类访问等。</li></ol><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>这个阶段就是<strong>为类变量分配内存并设置类变量初始值</strong>的阶段，这些内存将在方法区中进行分配。</p><p>要注意的是，进行分配内存的<strong>只是包括类变量，而不包括实例变量</strong>，实例变量是在对象实例化时随着对象一起分配在java堆中的。</p><p>通常情况下，初始值为零值，假设public static int value = 2;那么value在准备阶段过后的初始值为0，不为2，这时候只是开辟了内存空间，并没有运行java代码，value赋值为2的指令是程序被编译后。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>将虚拟机常量池的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程。</p><p>比如，现在调用方法hello（），这个方法的地址是1234567，那么hello就是符号引用，1234567就是直接引用。</p><p>在解析阶段，虚拟机会把所有的类名，方法名，字段名这些符号引用替换成具体的内存地址或偏移量，也就是直接引用。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。在以下四种情况下初始化过程会被触发执行：</p><ol><li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需先触发其初始化。生成这4条指令的最常见的java代码场景是：使用new关键字实例化对象、读取或设置一个类的静态字段（被final修饰、已在编译器把结果放入常量池的静态字段除外）的时候，以及调用类的静态方法的时候。</li><li>使用java.lang.reflect包的方法对类进行反射调用的时候。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化、则需要先出发其父类的初始化。</li><li>jvm启动时，用户指定一个执行的主类（包含main方法的那个类），虚拟机会先初始化这个类。</li></ol><h4 id="lt-clinit-gt-和-lt-init-gt-的区别"><a href="#lt-clinit-gt-和-lt-init-gt-的区别" class="headerlink" title="&lt;clinit&gt;() 和 &lt;init&gt;() 的区别"></a><code>&lt;clinit&gt;()</code> 和 <code>&lt;init&gt;()</code> 的区别</h4><ul><li><code>&lt;clinit&gt;()</code> </li></ul><p>Java 类加载的初始化过程中，编译器<strong>按语句在源文件中出现的顺序</strong>，依次自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并产生 <code>&lt;clinit&gt;()</code> 方法。 如果类中没有静态语句和静态代码块，那可以不生成<code>&lt;clinit&gt;()</code>方法。</p><p>并且 <code>&lt;clinit&gt;()</code> 不需要显式调用父类（接口除外，接口不需要调用父接口的初始化方法，只有使用到父接口中的静态变量时才需要调用）的初始化方法 <code>&lt;clinit&gt;()</code>，虚拟机会保证在子类的 <code>&lt;clinit&gt;()</code> 方法执行之前，父类的 <code>&lt;clinit&gt;()</code> 方法已经执行完毕。</p><ul><li><code>&lt;init&gt;()</code></li></ul><p>对象构造时用以初始化对象的，构造器以及非静态初始化块中的代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Test instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下面这句编译器报错，非法向前引用</span>        <span class="token comment" spellcheck="true">// System.out.println("x=" + x);</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">";y="</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造器可以访问声明于他们后面的静态变量</span>        <span class="token comment" spellcheck="true">// 因为静态变量在类加载的准备阶段就已经分配内存并初始化0值了</span>        <span class="token comment" spellcheck="true">// 此时 x=0，y=0</span>        x<span class="token operator">++</span><span class="token punctuation">;</span>        y<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">";y="</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Test <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test obj <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y="</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出信息如下：</p><pre class="line-numbers language-shell"><code class="language-shell">static开始构造器开始x=0;y=0x=1;y=1构造器结束static结束x=6y=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚拟机首先执行的是类加载初始化过程中的 <code>&lt;clinit&gt;()</code> 方法，也就是静态变量赋值以及静态代码块中的代码，如果 <code>&lt;clinit&gt;()</code> 方法中触发了对象的初始化，也就是 <code>&lt;init&gt;()</code> 方法，那么会进入执行 <code>&lt;init&gt;()</code> 方法，执行 <code>&lt;init&gt;()</code> 方法完成之后，再回来继续执行 <code>&lt;clinit&gt;()</code> 方法。</strong></p><p>上面代码中，先执行 static 代码块，此时调用了构造器，构造器中对类变量 x 和 y 进行加 1 ，之后继续完 static 代码块，接着执行下面的 <code>public static int x = 6;</code> 来重新给类变量 x 赋值为 6，因此，最后输出的是 x=6， y=1。</p><p>如果希望输出的是 x=7，y=1，很简单，将语句 <code>public static int x = 6;</code> 移至 static 代码块之前就可以了。</p><blockquote><p>初始化顺序依次是：父类static方法 –&gt; 子类static方法 –&gt; 父类构造方法- -&gt; 子类构造方法 </p></blockquote><h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>为了方便记忆，我们可以使用一句话来表达其加载的整个过程，<strong>家宴准备了西式菜</strong>，即家（加载）宴（验证）准备（准备）了西（解析）式（初始化）菜。</p><h2 id="classloader双亲委托机制"><a href="#classloader双亲委托机制" class="headerlink" title="classloader双亲委托机制"></a>classloader双亲委托机制</h2><p>classloader的双亲委托机制是指多个类加载器之间存在父子关系的时候，某个class类具体由哪个加载器进行加载的问题。其具体的过程表现为：当一个类加载的过程中，它首先不会去加载，而是委托给自己的父类去加载，父类又委托给自己的父类。因此所有的类加载都会委托给顶层的父类，即Bootstrap Classloader进行加载，然后父类自己无法完成这个加载请求，子加载器才会尝试自己去加载。</p><p>使用双亲委派模型，Java类随着它的加载器一起具备了一种带有优先级的层次关系，通过这种层次模型，可以<strong>避免类的重复加载</strong>，也可以<strong>避免核心类被不同的类加载器加载到内存中造成冲突和混乱</strong>，从而保证了Java核心库的安全。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-2.jpg" alt></p><p>整个java虚拟机的类加载层次关系如上图所示，启动类加载器（Bootstrap Classloader）负责将<java_home>/lib 目录下并且被虚拟机识别的类库加载到虚拟机内存中。我们常用基础库，例如<code>java.util.**，java.io.**，java.lang.**</code>等等都是由根加载器加载。</java_home></p><p>扩展类加载器（Extention Classloader）负责加载JVM扩展类，比如swing系列、内置的js引擎、xml解析器等，这些类库以javax开头，它们的jar包位于 <java_home>/lib/ext 目录中。</java_home></p><p>应用程序加载器（Application Classloader）也叫系统类加载器，它负责加载用户路径（ClassPath）上所指定的类库。我们自己编写的代码以及使用的第三方的jar包都是由它来加载的。</p><p>自定义加载器（Custom Classloader）通常是我们为了某些特殊目的实现的自定义加载器，如tomcat、jboss都会根据j2ee规范自行实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>        <span class="token comment" spellcheck="true">//缓存中是否已经存在</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果parent classloader存在，则委托给父类进行加载</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>                <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                <span class="token comment" spellcheck="true">// to find the class.</span>                <span class="token comment" spellcheck="true">//自己加载</span>                <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//是否进行解析</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="classloader的应用场景"><a href="#classloader的应用场景" class="headerlink" title="classloader的应用场景"></a>classloader的应用场景</h2><p>类加载器是java语言的一项创新，也是java语言流行的重要原因这一。通过灵活定义classloader的加载机制，我们可以完成很多事情，例如解决类冲突问题，实现热加载以及热部署，甚至可以实现jar包的加密保护。</p><h3 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h3><p>做过多人协同开发的大型项目的同学可能深有感触。基于maven的pom进制可以方便的进行依赖管理，但是由于maven依赖的传递性，会导致我们的依赖错综复杂，这样就会导致引入类冲突的问题。最典型的就是NoSuchMethodException异常了。</p><p>例如阿里内部也很多成熟的中间件，由不同的中间件团队来负责。那么当一个项目引入不同的中间件的时候，该如何避免依赖冲突的问题呢？</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-3.jpg" alt></p><p>某个业务引用了消息中间件（例如metaq）和微服务中间件（例如dubbo），这两个中间件也同时引用了fastjson-2.0和fastjson-3.0版本，而业务自己本身也引用了fastjson-1.0版本。这三个版本表现不同之处在于classA类中方法数目不相同，我们根据maven依赖处理的机制，引用路径最短的fastjson-1.0会真正作为应用最终的依赖，其它两个版本的fastjson则会被忽略，那么中间件在调用method2方法的时候，则会抛出方法找不到异常。</p><p>或许你会说，将所有依赖fastjson的版本都升级到3.0不是就能解解决问题吗？确实这样能够解决问题，但是在实际操作中不太现实：</p><ol><li>首先，中间件团队和业务团队之间并不是一个团队，并不能做到高效协同</li><li>其次是中间件的稳定性是需要保障的，不可能因为包冲突问题，就升级版本</li><li>更何况一个中间件依赖的包可能有上百个，如果纯粹依赖包升级来解决，不仅稳定性难以保障，排包耗费的时间恐怕就让人窒息了</li></ol><p>那如何解决包冲突的问题呢？答案就是pandora（潘多拉），通过自定义类加载器，为每个中间件自定义一个加载器，这些加载器之间的关系是平行的，彼此没有依赖关系。这样每个中间件的classloader就可以加载各自版本的fastjson。因为<strong>一个类的全限定名以及加载该类的加载器两者共同形成了这个类在JVM中的惟一标识</strong>，这也是阿里pandora实现<strong>依赖隔离</strong>的基础。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-4.jpg" alt></p><p>可能到这里，你又会有新的疑惑，根据双亲委托模型，App Classloader分别继承了Custom Classloader，那么业务包中的fastjson的class在加载的时候，会先委托到Custom ClassLoader。这样不就会导致自身依赖的fastjson版本被忽略吗？</p><p>确实如此，所以潘多拉又是如何做的呢？</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-5.jpg" alt></p><p>首先每个中间件对应的ModuleClassLoader在加载中间对应的class文件的同时，根据中间件配置的export.index负责将要需要透出的<strong>class</strong>（主要是提供api接口的相关类）<strong>索引到exportedClassHashMap中</strong>。</p><p>然后应用程序的类加载器会持有这个exportedClassHashMap，因此应用程序代码在loadClass的时候，会优先判断exportedClassHashMap是否存在当前类，如果存在，则直接返回，如果不存在，则再使用传统的双亲委托机制来进行类加载。这样中间件MoudleClassloader不仅实现了中间件的加载，也实现了中间件关键服务类的透出。</p><p>我们可以大概看下应用程序类加载的过程</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-6.jpg" alt></p><h3 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h3><p>通过classloader我们可以完成对变更内容的加载，然后快速的启动。</p><p>常用的热加载方案有好几个，接下来我们介绍下spring官方推荐的热加载方案，即 spring boot devtools 。</p><p>首先我们需要思考下，为什么重新启动一个应用会比较慢，那是因为在启动应用的时候，JVM虚拟机需要将所有的应用程序重新装载到整个虚拟机。可想而知，一个复杂的应用程序所包含的jar包可能有上百兆，每次微小的改动都是全量加载，那自然是很慢了。</p><p>那么我们是否可以做到，当我们修改了某个文件后，在JVM中替换到这个文件相关的部分而不全量的重新加载呢？而spring boot devtools正是基于这个思路进行处理的。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-7.jpg" alt></p><p>如上图所示，通常一个项目的代码由以上四部分组成，即<strong>基础类、扩展类、二方包/三方包、以及我们自己编写的业务代码</strong>组成。上面的一排是我们通常的类加载结构，其中业务代码和二方包/三方包是由应用加载器加载的。</p><p>而实际开发和调试的过程中，<strong>主要变化的是业务代码</strong>，并且业务代码相对二方包/三方包的内容来说会更少一些。因此我们可以将业务代码单独通过一个自定义的加载器Custom Classloader来进行加载，当监控发现业务代码发生改变后，我们重新加载启动，老的业务代码的相关类则由虚拟机的垃圾回收机制来自动回收。其工程流程大概如下。有兴趣的同学可以去看下源码，会更加清楚。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-8.jpg" alt></p><p>RestartClassLoader为自定义的类加载器，其<strong>核心是loadClass的加载方式</strong>，我们发现其通过<strong>修改了双亲委托机制，默认优先从自己加载</strong>，如果自己没有加载到，从parent进行加载。这样保证了业务代码可以优先被RestartClassLoader加载。进而通过重新加载RestartClassLoader即可完成应用代码部分的重新加载。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-9.jpg" alt></p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>热部署本质其实与热加载并没有太大的区别，通常我们说热加载是指在开发环境中进行的classloader加载，而热部署则更多是指在线上环境使用classloader的加载机制完成业务的部署。所以这二者使用的技术并没有本质的区别。那热部署除了与热加载具有发布更快之外，还有更多的更大的优势就是<strong>具有更细的发布粒度</strong>。我们可以想像以下的一个业务场景。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-10.jpg" alt></p><p>假设某个营销投放平台涉及到4个业务方的开发，需要对会场业务进行投放。而这四个业务方的代码全部都在一个应用里面。因此某个业务方有代码变更则需要对整个应用进行发布，同时其它业务方也需要跟着回归。因此每个微小的发动，则需要走整个应用的全量发布。这种方式带来的稳定性风险估且不说，整个发布迭代的效率也可想而知了。这在整个互联网里，时间和效率就是金钱的理念下，显然是无法接受的。</p><p>那么我们完全可以通过类加载机制，<strong>将每个业务方通过一个classloader来加载</strong>。基于类的隔离机制，可以保障各个业务方的代码不会相互影响，同时也可以做到各个业务方进行独立的发布。其实在移动客户端，每个应用模块也可以基于类加载，实现插件化发布。本质上也是一个原理。</p><p>在阿里内部像阿拉丁投放平台，以及crossbow容器化平台，本质都是使用classloader的热加载技术，实现业务细粒度的开发部署以及多应用的合并部署。</p><h3 id="加密保护"><a href="#加密保护" class="headerlink" title="加密保护"></a>加密保护</h3><p>众所周期，基于java开发编译产生的jar包是由 .class 字节码组成，由于字节码的文件格式是有明确规范的。因此对于字节码进行反编译，就很容易知道其源码实现了。</p><p>因此大致会存在如下两个方面的诉求。</p><ol><li>在服务端，我们向别人提供三方包实现的时候，不希望别人知道核心代码实现，我们可以考虑对jar包进行加密</li><li>在客户端则会比较普遍，那就是我们打包好的apk的安装包，不希望被人家反编译而被人家翻个底朝天，我们也可以对apk进行加密。</li></ol><p>jar包加密的本质，还是对字节码文件进行操作。但是JVM虚拟机加载class的规范是统一的，因此我们在最终加载class文件的时候，还是需要满足其class文件的格式规范，否则虚拟机是不能正常加载的。因此我们可以在打包的时候对class进行正向的加密操作，然后，在加载class文件之前通过自定义classloader先进行反向的解密操作，然后再按照标准的class文件标准进行加载，这样就完成了class文件正常的加载。因此这个加密的jar包只有能够实现解密方法的classloader才能正常加载。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-11.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-12.jpg" alt></p><p>更高安全的保障则取决于加密算法的安全性了以及如何保障加密算法的密钥不被泄露的问题了。这有种套娃的感觉，所谓安全基本都是相对的。安全保障只要做到使对方破解的成本高于收益即是安全，所以一定程度的安全性，足以减少很多低成本的攻击了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> classloader </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的锁</title>
      <link href="2021/02/19/database/mysql-lock/"/>
      <url>2021/02/19/database/mysql-lock/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>操作类型：</p><ol><li><p>读锁（共享锁，Shared Lock）：对同一个数据，多个读操作可以同时进行，互不干扰</p></li><li><p>写锁（互斥锁，Exclusive Lock）： 如果当前写操作没有完毕，则无法进行其他的读操作、写操作</p></li></ol><p>操作范围：</p><ol><li>表锁 ：一次性对一张表整体加锁。如MyISAM存储引擎使用表锁，开销小、加锁快；无死锁；但锁的范围大，容易发生锁冲突、并发度低。</li><li>行锁：一次性对一条数据加锁。如InnoDB存储引擎使用行锁，开销大，加锁慢；容易出现死锁；锁的范围较小，不易发生锁冲突，并发度高（很小概率 发生高并发问题：脏读、幻读、不可重复度、丢失更新等问题）。</li></ol><p>记录锁（Record Lock）：记录锁也是属于行锁的一种，锁的只是表中的某一条记录。精准条件命中，并且命中的条件字段是<strong>唯一索引</strong>。加了记录锁后数据可以避免数据在查询时被修改的重复读问题，也避免了在修改的事务未提交前被其他事务读取的脏读的问题。</p><p>页锁：开销、并发度和加锁时间界于表锁和行锁之间，<strong>会出现死锁</strong></p><p>间隙锁（Gap Lock）：属于行锁的一种，是在事务加锁后其锁住的是表记录的某一个区间，当表的相邻ID之间出现间隙则会形成一个区间，遵循左开右闭原则。只会出现在重复读的事务级别中。</p><p>临建锁（Next-Key Lock）：行锁的一种，是Innodb的行锁默认算法，就是记录锁和间隙锁的结合，临建锁会把查询出来的记录锁住，同时也会把该范围内的所有间隙也锁住，再之它会把相邻的下一个区间也会锁住。触发条件：范围查询并命中，查询命中了索引。结合记录锁和间隙锁的特性，临建锁避免了再范围查询时出现脏读，重复读，幻读问题。加了临建锁后，再范围区间内数据不允许被修改和插入。</p><h2 id="基本的指令"><a href="#基本的指令" class="headerlink" title="基本的指令"></a>基本的指令</h2><h3 id="增加锁和释放锁"><a href="#增加锁和释放锁" class="headerlink" title="增加锁和释放锁"></a>增加锁和释放锁</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">table</span> 表<span class="token number">1</span>  <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span>  <span class="token punctuation">,</span>表<span class="token number">2</span>  <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>unlock <span class="token keyword">tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查看加锁的表"><a href="#查看加锁的表" class="headerlink" title="查看加锁的表"></a>查看加锁的表</h3><p>show open tables列举在表缓存中当前被打开的非TEMPORARY表。</p><p>如果您没有表的权限，则它不会显示在输出中</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token comment" spellcheck="true"># 返回结果</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span> <span class="token keyword">where</span> in_use <span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+--------+-------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span> <span class="token operator">|</span> <span class="token keyword">Table</span> <span class="token operator">|</span> In_use <span class="token operator">|</span> Name_locked <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+--------+-------------+</span><span class="token operator">|</span> MyDB     <span class="token operator">|</span> test  <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>           <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+--------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>Database</strong>：含有该表的数据库。</li><li><strong>Table</strong>：表名称。</li><li><strong>In_use</strong>：表当前被查询使用的次数。为1表示上锁了。</li><li><strong>Name_locked</strong>：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</li></ol><h3 id="分析表锁定的严重程度"><a href="#分析表锁定的严重程度" class="headerlink" title="分析表锁定的严重程度"></a>分析表锁定的严重程度</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'table%'</span><span class="token comment" spellcheck="true">--Table_locks_immediate :即可能获取到的锁数</span><span class="token comment" spellcheck="true">--Table_locks_waited：需要等待的表锁数(如果该值越大，说明存在越大的锁竞争)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><p>加读锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- tablelock引擎是myisam</span><span class="token keyword">create</span> <span class="token keyword">table</span> tablelock<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span> myisam<span class="token punctuation">;</span>        会话<span class="token number">0</span>：            <span class="token keyword">lock</span> <span class="token keyword">table</span>  tablelock <span class="token keyword">read</span> <span class="token punctuation">;</span>            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablelock<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--读（查），可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> tablelock <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写（增删改），不可以</span>            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--读，不可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> eid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写，不可以</span>            结论<span class="token number">1</span>：            <span class="token comment" spellcheck="true">--如果某一个会话 对A表加了read锁，则 该会话 可以对A表进行读操作、不能进行写操作； 且 该会话不能对其他表进行读、写操作。</span>            <span class="token comment" spellcheck="true">--即如果给A表加了读锁，则当前会话只能对A表进行读操作。</span>        会话<span class="token number">1</span>（其他会话）：            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablelock<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--读（查），可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> tablelock <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写，会“等待”会话0将锁释放</span>        会话<span class="token number">1</span>（其他会话）：            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--读（查），可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> eno <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写，可以</span>            结论<span class="token number">2</span>：            <span class="token comment" spellcheck="true">--总结：会话0给A表加了锁；其他会话的操作：a.可以对其他表（A表以外的表）进行读、写操作 b.对A表：读-可以；  写-需要等待释放锁。</span>        释放锁: unlock <span class="token keyword">tables</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加写锁"><a href="#加写锁" class="headerlink" title="加写锁"></a>加写锁</h3><pre class="line-numbers language-sql"><code class="language-sql">    会话<span class="token number">0</span>：        <span class="token keyword">lock</span> <span class="token keyword">table</span> tablelock <span class="token keyword">write</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">--当前会话（会话0） 可以对加了写锁的表  进行任何操作（增删改查）；但是不能 操作（增删改查）其他表</span>    其他会话：        对会话<span class="token number">0</span>中加写锁的表，可以进行增删改查的前提是：等待会话<span class="token number">0</span>释放写锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL表级锁的锁模式"><a href="#MySQL表级锁的锁模式" class="headerlink" title="MySQL表级锁的锁模式"></a>MySQL表级锁的锁模式</h3><p>MyISAM在执行查询语句（SELECT）前，会<strong>自动给涉及的所有表加读锁</strong>，在执行更新操作（DML）前，会<strong>自动给涉及的表加写锁</strong>。</p><p>所以对MyISAM表进行操作，会有以下情况：</p><ol><li>对MyISAM表的读操作（加读锁），不会阻塞其他进程（会话）对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</li><li>对MyISAM表的写操作（加写锁），会阻塞其他进程（会话）对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。</li></ol><h2 id="行锁（InnoDB）"><a href="#行锁（InnoDB）" class="headerlink" title="行锁（InnoDB）"></a>行锁（InnoDB）</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> linelock<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--mysql默认自动commit;    oracle默认不会自动commit ;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了研究行锁，暂时将自动commit关闭; </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> autocommit <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">start</span> <span class="token keyword">transaction</span> <span class="token punctuation">;</span><span class="token keyword">begin</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--上边三种都可以，关闭后需要手动通过commit提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>如果会话x对某条数据a进行 DML操作（研究时：关闭了自动commit的情况下），则其他会话必须等待会话x结束事务（commit/rollback）后  才能对数据a进行操作。</li><li>表锁 是通过unlock tables，也可以通过事务解锁 ; 行锁 是通过事务解锁。</li></ol><h3 id="行锁的注意事项"><a href="#行锁的注意事项" class="headerlink" title="行锁的注意事项"></a>行锁的注意事项</h3><p>如果没有索引，则行锁会转为表锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> linelock <span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> linelock <span class="token keyword">add</span> <span class="token keyword">index</span> idx_linelock_name<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    会话<span class="token number">0</span>： 写操作        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'ai'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'3'</span> <span class="token punctuation">;</span>    会话<span class="token number">1</span>： 写操作， 不同的数据        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'aX'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'4'</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--上边不会阻塞。    </span>    会话<span class="token number">0</span>： 写操作        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'ai'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span>    会话<span class="token number">1</span>： 写操作， 不同的数据        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'aX'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--可以发现，数据被阻塞了（加锁）</span><span class="token comment" spellcheck="true">-- 原因：如果索引类 发生了类型转换，则索引失效。 因此 此次操作，会从行锁 转为表锁。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行锁的一种特殊情况：<strong>间隙锁</strong>（值在范围内，但却不存在）</p><pre class="line-numbers language-sql"><code class="language-sql">     <span class="token comment" spellcheck="true">--此时linelock表中 没有id=7的数据</span>     <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span><span class="token string">'x'</span> <span class="token keyword">where</span> id <span class="token operator">></span><span class="token number">1</span> <span class="token operator">and</span> id<span class="token operator">&lt;</span><span class="token number">9</span> <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--即在此where范围中，没有id=7的数据，则id=7的数据成为间隙。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>完全避过了主键记录, 锁住数据不存在的区间</strong></p><p><strong>间隙</strong>：Mysql会自动给 间隙 加锁 -&gt;间隙锁。即 本题 会自动给id=7的数据加 间隙锁（行锁）。如果有where，则<strong>实际加锁的范围就是where后面的范围</strong>（不是实际的值）</p><blockquote><p>锁其实是锁住了索引</p><ul><li><p>如果不使用索引<br>走表锁</p></li><li><p>使用了索引<br>走行锁, 锁住了是索引, 不是锁住了一行</p></li></ul></blockquote><h3 id="for-update"><a href="#for-update" class="headerlink" title="for update"></a>for update</h3><p>查询数据想加锁的话用for update</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> linelock <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">for</span> <span class="token keyword">update</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>行锁分析：</p><p>show status like ‘%innodb_row_lock%’ ;<br>         Innodb_row_lock_current_waits :当前正在等待锁的数量<br>         Innodb_row_lock_time：等待总时长。从系统启到现在 一共等待的时间<br>         Innodb_row_lock_time_avg  ：平均等待时长。从系统启到现在平均等待的时间<br>         Innodb_row_lock_time_max  ：最大等待时长。从系统启到现在最大一次等待的时间<br>         Innodb_row_lock_waits ：    等待次数。从系统启到现在一共等待的次数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OLTP vs OLAP</title>
      <link href="2021/02/05/database/oltp-olap/"/>
      <url>2021/02/05/database/oltp-olap/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>OLTP（on-line transaction processing）翻译为联机事务处理， OLAP（On-Line Analytical Processing）翻译为联机分析处理，从字面上来看OLTP是做事务处理，OLAP是做分析处理。<strong>从对数据库操作来看，OLTP主要是对数据的增删改，OLAP是对数据的查询</strong>。</p><p><strong>OLTP方法的优点</strong>：<br>它管理组织的日常交易。 OLTP通过简化单个流程来扩大组织的客户基础。</p><p><strong>OLTP方法的缺点</strong>：<br>如果OLTP系统面临硬件故障，那么在线交易将受到严重影响。 OLTP系统允许多个用户同时访问和更改同一数据时，会造成混乱。</p><p><strong>使用OLAP服务的优点</strong>：<br>OLAP为所有类型的业务分析需求（包括计划，预算，预测和分析）创建一个平台。<br>OLAP的主要好处是信息和计算的一致性。 轻松对用户和对象施加安全限制，以符合法规并保护敏感数据。</p><p><strong>OLAP服务的缺点</strong>：<br>实施和维护依赖于IT专业人员，因为传统的OLAP工具需要复杂的建模过程。 OLAP工具需要各个部门人员之间的合作才能有，过程相对繁琐复杂。</p><h2 id="从应用上来看看OLTP与OLAP的区别"><a href="#从应用上来看看OLTP与OLAP的区别" class="headerlink" title="从应用上来看看OLTP与OLAP的区别"></a>从应用上来看看OLTP与OLAP的区别</h2><p>OLTP主要用来记录某类业务事件的发生，如购买行为，当行为产生后，系统会记录是谁在何时何地做了何事，这样的一行（或多行）数据会以增删改的方式在数据库中进行数据的更新处理操作，要求实时性高、稳定性强、确保数据及时更新成功，像公司常见的业务系统如ERP，CRM，OA等系统都属于OLTP。</p><p>当数据积累到一定的程度，我们需要对过去发生的事情做一个总结分析时，就需要把过去一段时间内产生的数据拿出来进行统计分析，从中获取我们想要的信息，为公司做决策提供支持，这时候就是在做OLAP了。</p><p>因为OLTP所产生的业务数据分散在不同的业务系统中，而OLAP往往需要将不同的业务数据集中到一起进行统一综合的分析，这时候就需要根据业务分析需求做对应的数据清洗后存储在数据仓库中，然后由数据仓库来统一提供OLAP分析。所以我们常说OLTP是数据库的应用，OLAP是数据仓库的应用，下面用一张图来简要对比。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/oltp-olap-1.jpg" alt></p><h2 id="使用图示"><a href="#使用图示" class="headerlink" title="使用图示"></a>使用图示</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/oltp-olap-2.jpg" alt></p><h3 id="操作型数据库（ODS）"><a href="#操作型数据库（ODS）" class="headerlink" title="操作型数据库（ODS）"></a>操作型数据库（ODS）</h3><p>操作型数据库（ODS），数据仓库（DW或EDW），数据集市（DM）是目前标准数仓结构的三个核心组件。</p><p>他们在数仓架构中差异点大致如下（以标准理论为准，实际设计中都会有越界和妥协现象）</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/oltp-olap-3.jpg" alt></p><h3 id="ODS和贴源层（缓冲区）"><a href="#ODS和贴源层（缓冲区）" class="headerlink" title="ODS和贴源层（缓冲区）"></a>ODS和贴源层（缓冲区）</h3><p><strong>贴源层</strong>的数据结构和数据内容是和源系统一模一样的，包括里面的垃圾数据，唯一不同的是，贴源层加了“时间戳”。</p><p><strong>ODS层</strong>，则要清洗掉垃圾数据，更改不能入库的格式为数仓支持的格式或优化后的格式，如nchar改为char或Varchar。</p><p>贴源层数据存放一般为一周左右，几乎不会超过一个月；而ODS则永久存放。</p><p>细节可以看：<a href="https://www.jianshu.com/p/72e395d8cb33" target="_blank" rel="noopener">https://www.jianshu.com/p/72e395d8cb33</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seata</title>
      <link href="2021/02/04/project/seata/"/>
      <url>2021/02/04/project/seata/</url>
      
        <content type="html"><![CDATA[<h2 id="Seata-介绍"><a href="#Seata-介绍" class="headerlink" title="Seata 介绍"></a>Seata 介绍</h2><p>Seata 是从两段提交演变而来的一种分布式事务解决方案，提供了 <code>AT</code>、<code>TCC</code>、<code>SAGA</code> 和 <code>XA</code> 等事务模式，这里重点介绍 AT模式。</p><p>既然 Seata 是两段提交，那我们看看它在每个阶段都做了点啥？下边我们还以下单扣库存、扣余额举例。</p><p>部分介绍转载于seata官方文档等：<a href="http://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener">http://seata.io/zh-cn/docs/overview/what-is-seata.html</a>   |  <a href="https://zhuanlan.zhihu.com/p/344184343" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/344184343</a>   |    <a href="https://zhuanlan.zhihu.com/p/315164700" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/315164700</a></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-1.jpg" alt></p><p>先介绍Seata分布式事务的几种角色：</p><ol><li>Transaction Coordinator（TC）: 全局事务协调者，用来协调全局事务和各个分支事务（不同服务）的状态， 驱动全局事务和各个分支事务的回滚或提交。</li><li>Transaction Manager（TM）: 事务管理者，业务层中用来开启/提交/回滚一个整体事务（在调用服务的方法中用注解开启事务）。</li><li>Resource Manager（RM）: 资源管理者，一般指业务数据库代表了一个分支事务（Branch Transaction），管理分支事务与TC进行协调注册分支事务并且汇报分支事务的状态，驱动分支事务的提交或回滚。</li></ol><blockquote><p>Seata 实现分布式事务，设计了一个关键角色 <code>UNDO_LOG</code> （回滚日志记录表），我们在每个应用分布式事务的业务库中创建这张表，这个表的核心作用就是，将业务数据在更新前后的数据镜像组织成回滚日志，备份在 <code>UNDO_LOG</code> 表中，以便业务异常能随时回滚。</p></blockquote><h3 id="第一个阶段"><a href="#第一个阶段" class="headerlink" title="第一个阶段"></a>第一个阶段</h3><p>比如：下边我们更新 <code>user</code> 表的 <code>name</code> 字段。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'锦泉'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'ArthurJQ'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先 Seata 的 <code>JDBC</code> 数据源代理通过对业务 SQL 解析，提取 SQL 的元数据，也就是得到 SQL 的类型（UPDATE），表（user），条件（<code>where name = &#39;ArthurJQ&#39;</code>）等相关的信息。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-2.jpg" alt></p><p>先查询数据前镜像，根据解析得到的条件信息，生成查询语句，定位一条数据。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>  name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'ArthurJQ'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">ID</th><th align="center">NAME</th><th align="center">USER_ID</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">ArthurJQ</td><td align="center">9527</td></tr></tbody></table><p>紧接着执行业务 SQL，根据前镜像数据主键查询出后镜像数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">ID</th><th align="center">NAME</th><th align="center">USER_ID</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">锦泉</td><td align="center">9527</td></tr></tbody></table><p>把业务数据在更新前后的数据镜像组织成回滚日志，将业务数据的更新和回滚日志在同一个本地事务中提交，分别插入到业务表和 <code>UNDO_LOG</code> 表中。</p><p>回滚记录数据格式如下：包括 afterImage 前镜像、beforeImage 后镜像、 branchId 分支事务ID、xid 全局事务ID</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"branchId"</span><span class="token operator">:</span><span class="token number">641789253</span><span class="token punctuation">,</span>    <span class="token property">"xid"</span><span class="token operator">:</span><span class="token string">"xid:xxx"</span><span class="token punctuation">,</span>    <span class="token property">"undoItems"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"afterImage"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"rows"</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">{</span>                                <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>                                <span class="token property">"type"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>                                <span class="token property">"value"</span><span class="token operator">:</span><span class="token number">1</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"tableName"</span><span class="token operator">:</span><span class="token string">"product"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"beforeImage"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"rows"</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">{</span>                                <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>                                <span class="token property">"type"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>                                <span class="token property">"value"</span><span class="token operator">:</span><span class="token number">1</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"tableName"</span><span class="token operator">:</span><span class="token string">"product"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"sqlType"</span><span class="token operator">:</span><span class="token string">"UPDATE"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以保证，任何提交的业务数据的更新一定有相应的回滚日志。</p><blockquote><p>在本地事务提交前，各分支事务需向 <code>全局事务协调者</code> TC 注册分支 ( <code>Branch Id</code>) ，为要修改的记录申请 <strong>全局锁</strong> ，要为这条数据加锁，利用 <code>SELECT FOR UPDATE</code> 语句。而如果一直拿不到锁那就需要回滚本地事务。TM 开启事务后会生成全局唯一的 <code>XID</code>，会在各个调用的服务间进行传递。</p></blockquote><p>有了这样的机制，本地事务分支（Branch Transaction）便可以在全局事务的第一阶段提交，并马上释放本地事务锁定的资源。相比于传统的 XA 事务在第二阶段释放资源，Seata 降低了锁范围提高效率，即使第二阶段发生异常需要回滚，也可以快速 从<code>UNDO_LOG</code> 表中<strong>找到对应回滚数据并反解析成 SQL 来达到回滚补偿</strong>。</p><p>最后本地事务提交，业务数据的更新和前面生成的 UNDO LOG 数据一并提交，并将本地事务提交的结果上报给全局事务协调者 TC。</p><h3 id="第二个阶段"><a href="#第二个阶段" class="headerlink" title="第二个阶段"></a>第二个阶段</h3><p>第二阶段是根据各分支的决议做提交或回滚：</p><p>如果决议是全局提交，此时各分支事务已提交并成功，这时 全局事务协调者（TC） 会向分支发送第二阶段的请求。收到 TC 的分支提交请求，该<strong>请求会被放入一个异步任务队列</strong>中，并马上返回提交成功结果给 TC。异步队列中会异步和批量地根据 <code>Branch ID</code> 查找并删除相应 <code>UNDO LOG</code> 回滚记录。并把相关事务信息如：<strong>行锁删除</strong>，之后让因为在竞争锁被阻塞的事务顺利进行。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-3.jpg" alt></p><p>如果二阶段是回滚，过程比全局提交麻烦一点，</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-12.jpg" alt></p><p>首先在 Client 端收到 TC 告知的二阶段是回滚时，会去查到对应的事务的 undolog，取出后镜像，对比当前的数据（因为 SeataAT 是从业务应用层面进行保护分布式事务，如果此时在数据库层面直接修改了库内信息，这个时候 SeataAT 的行锁不起隔离性作用），如果出现了在全局事务以外的数据修改，此时判定为脏写，而 Seata 因为无法感知这个脏写如何发生，此时只能打印日志和触发异常通知，告知用户需要人工介入（规范修改数据入口可避免脏写）。</p><p>而如果没有发生脏写就比较简单了，拿出前镜像，众所皆知事务是需要有原子性的，要么一起发生，要么都不发生，此时前镜像记录了发生之前的数据，进行回滚后，就达到了类似本地事务那样的原子性效果。回滚后，再把事务相关信息，如 undolog，行锁进行删除。二阶段回滚算是告一段落了。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-4.jpg" alt></p><blockquote><p>注意：这里删除回滚日志记录操作，一定是在本地业务事务执行之后</p></blockquote><h3 id="AT-在-Seata-的分布式事务框架"><a href="#AT-在-Seata-的分布式事务框架" class="headerlink" title="AT 在 Seata 的分布式事务框架"></a>AT 在 Seata 的分布式事务框架</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-13.png" alt></p><p>可以看到，AT 与其它事务模式在 Seata 事务框架中，会多出一个 undolog 的表（相对其它模式的入侵点），但是除此之外，对业务来说，几乎是零入侵性，这也就是为什么 AT 模式在 Seata 中受众广泛的原因。</p><h3 id="写隔离"><a href="#写隔离" class="headerlink" title="写隔离"></a>写隔离</h3><ul><li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li><li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li></ul><p>以一个示例来说明：</p><p>两个全局事务 tx1 和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000。</p><p>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 <strong>全局锁</strong> ，本地提交释放本地锁。 tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 <strong>全局锁</strong> ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待 <strong>全局锁</strong> 。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-5.png" alt></p><p>tx1 二阶段全局提交，释放 <strong>全局锁</strong> 。tx2 拿到 <strong>全局锁</strong> 提交本地事务。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-6.png" alt></p><p>如果 tx1 的二阶段全局回滚，则 tx1 需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。</p><p>此时，如果 tx2 仍在等待该数据的 <strong>全局锁</strong>，同时持有本地锁，则 tx1 的分支回滚会失败。分支的回滚会一直重试，直到 tx2 的 <strong>全局锁</strong> 等锁超时，放弃 <strong>全局锁</strong> 并回滚本地事务释放本地锁，tx1 的分支回滚最终成功。</p><p>因为整个过程 <strong>全局锁</strong> 在 tx1 结束前一直是被 tx1 持有的，所以不会发生 <strong>脏写</strong> 的问题。</p><h3 id="读隔离"><a href="#读隔离" class="headerlink" title="读隔离"></a>读隔离</h3><p>在数据库本地事务隔离级别 <strong>读已提交（Read Committed）</strong> 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 <strong>读未提交（Read Uncommitted）</strong> 。</p><p>如果应用在特定场景下，必需要求全局的 <strong>读已提交</strong> ，目前 Seata 的方式是通过 SELECT FOR UPDATE 语句的代理。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-7.png" alt></p><p>SELECT FOR UPDATE 语句的执行会申请 <strong>全局锁</strong> ，如果 <strong>全局锁</strong> 被其他事务持有，则释放本地锁（回滚 SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到 <strong>全局锁</strong> 拿到，即读取的相关数据是 <strong>已提交</strong> 的，才返回。</p><p>出于总体性能上的考虑，Seata 目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。</p><h2 id="Seata-Server-搭建"><a href="#Seata-Server-搭建" class="headerlink" title="Seata Server 搭建"></a>Seata Server 搭建</h2><p>Seata 是一个需独立部署的中间件，所以先搭 Seata Server</p><p>seata下载：<a href="https://seata.io/zh-cn/blog/download.html" target="_blank" rel="noopener">https://seata.io/zh-cn/blog/download.html</a></p><p>seata源码和seata server两个都要下载，分别解压，如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-9.jpg" alt></p><h3 id="file-conf"><a href="#file-conf" class="headerlink" title="file.conf"></a>file.conf</h3><p><code>seata\conf\</code>目录下的file.conf 文件用于配置持久化事务日志的模式，目前提供 <code>file</code>、<code>db</code>、<code>redis</code> 三种方式。例如使用 db 方式修改file.conf如下：</p><pre class="line-numbers language-shell"><code class="language-shell">## transaction log store, only used in seata-serverstore {  ## store mode: file、db、redis  mode = "db"  ## database store property  db {    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.    datasource = "druid"    ## mysql/oracle/postgresql/h2/oceanbase etc.    dbType = "mysql"    driverClassName = "com.mysql.cj.jdbc.Driver"    url = "jdbc:mysql://10.0.1.110:3308/seata?serverTimezone=Asia/Shanghai"    user = "mysql"    password = "mysql"    minConn = 5    maxConn = 100    globalTable = "global_table"    branchTable = "branch_table"    lockTable = "lock_table"    queryLimit = 100    maxWait = 5000  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在选择 <code>db</code> 方式后，需要在对应数据库创建 globalTable（持久化全局事务）、branchTable（持久化各提交分支的事务）、 lockTable（持久化各分支锁定资源事务）三张表。</p><h3 id="seata-server数据库创建"><a href="#seata-server数据库创建" class="headerlink" title="seata server数据库创建"></a>seata server数据库创建</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-8.jpg" alt></p><p>里边有对应的 globalTable（持久化全局事务）、branchTable（持久化各提交分支的事务）、 lockTable（持久化各分支锁定资源事务）三张表，粘出来去对应的数据库创建就行了。比如mysql.sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- the table to store GlobalSession data</span><span class="token comment" spellcheck="true">-- 持久化全局事务</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>                       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>            <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>                    <span class="token keyword">TINYINT</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span>                   <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span>                <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>                <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>              <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- the table to store BranchSession data</span><span class="token comment" spellcheck="true">-- 持久化各提交分支的事务</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>         <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>               <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>    <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>            <span class="token keyword">TINYINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span>         <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>        <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>      <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- the table to store lock data</span><span class="token comment" spellcheck="true">-- 持久化每个分支锁表事务</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span>        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>      <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pk<span class="token punctuation">`</span>             <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>     <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_branch_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="seata-server配置文件推送到nacos"><a href="#seata-server配置文件推送到nacos" class="headerlink" title="seata server配置文件推送到nacos"></a>seata server配置文件推送到nacos</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-10.jpg" alt></p><p>打开config.txt文件，因为要推送到nacos（方便统一配置），把需要配置的参数保留就好，修改配置如下：</p><pre class="line-numbers language-text"><code class="language-text">service.vgroupMapping.my_test_tx_group=defaultstore.mode=dbstore.db.datasource=druidstore.db.dbType=mysqlstore.db.driverClassName=com.mysql.cj.jdbc.Driverstore.db.url=jdbc:mysql://10.0.1.110:3308/seata?serverTimezone=Asia/Shanghaistore.db.user=#你创建表的数据库登录的用户名store.db.password=#数据库登录密码store.db.minConn=5store.db.maxConn=30store.db.globalTable=global_tablestore.db.branchTable=branch_tablestore.db.queryLimit=100store.db.lockTable=lock_tablestore.db.maxWait=5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入nacos目录，git执行命令</p><pre class="line-numbers language-shell"><code class="language-shell">sh nacos-config.sh -h 10.0.1.104 -p 8848 -g SEATA_GROUP -t 6e802a92-d7a4-498f-8f14-5625988e1608 -u nacos -w nacos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面指令执行成功后nacos配置中心能看到推送过去的配置，如下</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-11.jpg" alt></p><h3 id="registry-conf"><a href="#registry-conf" class="headerlink" title="registry.conf"></a>registry.conf</h3><p>registry.conf 文件设置 注册中心 和 配置中心：</p><p>目前注册中心支持 <code>nacos</code> 、<code>eureka</code>、<code>redis</code>、<code>zk</code>、<code>consul</code>、<code>etcd3</code>、<code>sofa</code> 七种，这里我使用的 <code>nacos</code>作为注册中心 ； 配置中心支持 <code>nacos</code> 、<code>apollo</code>、<code>zk</code>、<code>consul</code>、<code>etcd3</code> 五种方式。</p><p>将seata server注册到nacos，打开<code>\seata\conf</code>目录下的<strong>registry.conf</strong>，修改部分配置如下：</p><pre class="line-numbers language-shell"><code class="language-shell">registry {  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type = "nacos"  loadBalance = "RandomLoadBalance"  loadBalanceVirtualNodes = 10  nacos {    application = "seata-server"    serverAddr = "10.0.1.104:8848"    group = "SEATA_GROUP"    namespace = "" #nacos服务空间    cluster = "default"    username = "" #nacos用户名    password = "" #nacos密码  }}config {  # file、nacos 、apollo、zk、consul、etcd3  type = "nacos"  nacos {    serverAddr = "10.0.1.104:8848"    namespace = "" #nacos服务空间    group = "SEATA_GROUP"    username = "" #nacos用户名    password = "" #nacos密码  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完以后在 <code>\seata\bin</code> 目录下启动 <code>seata-server</code> 即可，到这 <code>Seata</code> 的服务端就搭建好了。</p><h2 id="Seata-Client"><a href="#Seata-Client" class="headerlink" title="Seata Client"></a>Seata Client</h2><p>Seata Server 环境搭建完，接下来我们新建三个服务 <code>order-server</code>（下单服务）、<code>storage-server</code>（扣减库存服务）、<code>account-server</code>（账户金额服务），分别服务注册到 nacos。</p><h3 id="应用接入Seata-Server"><a href="#应用接入Seata-Server" class="headerlink" title="应用接入Seata Server"></a>应用接入Seata Server</h3><p>添加seata依赖：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>framework-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- alibaba-seata --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring-boot-seata --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 指定项目编译时的java版本和编码方式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${maven-compiler-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>${encoding}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个服务创建application.yml文件：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Seata 配置项，对应 SeataProperties 类</span><span class="token key atrule">seata</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> my_test_tx_group <span class="token comment" spellcheck="true"># Seata 事务组编号，用于 TC 集群名</span>  <span class="token comment" spellcheck="true"># Seata 服务配置项，对应 ServiceProperties 类</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 09dd3d79<span class="token punctuation">-</span>92c0<span class="token punctuation">-</span>47fe<span class="token punctuation">-</span>bd1d<span class="token punctuation">-</span>0f1b7f8dc928      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 10.0.1.104<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># Seata 注册中心配置项，对应 RegistryProperties 类</span>  <span class="token key atrule">registry</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos <span class="token comment" spellcheck="true"># 注册中心类型，默认为 file</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server <span class="token comment" spellcheck="true"># Nacos 服务名</span>      <span class="token key atrule">cluster</span><span class="token punctuation">:</span> default <span class="token comment" spellcheck="true"># 使用的 Nacos 机器名</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP <span class="token comment" spellcheck="true"># Nacos 组</span>      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 09dd3d79<span class="token punctuation">-</span>92c0<span class="token punctuation">-</span>47fe<span class="token punctuation">-</span>bd1d<span class="token punctuation">-</span>0f1b7f8dc928 <span class="token comment" spellcheck="true"># Nacos 命名空间</span>      <span class="token key atrule">serverAddr</span><span class="token punctuation">:</span> 10.0.1.104<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># Nacos 服务地址</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>业务大致流程：用户发起下单请求，本地 order 订单服务创建订单记录，并通过 <code>RPC</code> 远程调用 <code>storage</code> 扣减库存服务和 <code>account</code> 扣账户余额服务，只有三个服务同时执行成功，才是一个完整的下单流程。如果某个服执行失败，则其他服务全部回滚。</p><p>Seata 对业务代码的侵入性非常小，<strong>代码中使用只需用 @GlobalTransactional 注解开启一个全局事务即可</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create-order"</span><span class="token punctuation">,</span> rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String xid <span class="token operator">=</span> RootContext<span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->交易开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//本地方法</span>    orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//远程方法 扣减库存</span>    storageApi<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//远程方法 扣减账户余额</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->扣减账户开始order中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    accountApi<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->扣减账户结束order中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->交易结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"全局事务 xid： {}"</span><span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="seata-client-表创建"><a href="#seata-client-表创建" class="headerlink" title="seata client 表创建"></a>seata client 表创建</h3><p>进入都seata源码里，选择客户端，再选择at模式：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-12.jpg" alt></p><p>打开mysql.sql（选择自己对应的数据库，我是用的mysql），前边说过 Seata AT 模式实现分布式事务，<strong>必须在相关的业务库中创建 undo_log 表来存数据回滚日志</strong>，表结构如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>     <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'branch transaction id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'global transaction id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>context<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'undo_log context,such as serialization'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> <span class="token keyword">LONGBLOB</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'rollback info'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_status<span class="token punctuation">`</span>    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'0:normal status,1:defense status'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_created<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'create datetime'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'modify datetime'</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">'AT transaction mode undo table'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在每个应用分布式事务的业务库中创建这张表，这个表的核心作用就是，将业务数据在更新前后的数据镜像组织成回滚日志，备份在 <code>UNDO_LOG</code> 表中，以便业务异常能随时回滚。</p><h2 id="模块接入seata"><a href="#模块接入seata" class="headerlink" title="模块接入seata"></a>模块接入seata</h2><p>将上一步的操作，新建了一个模块framework-seata，所以其他业务模块想接入seata，只需要引入该模块即可（不要忘记每个client都需要新建undo_log表）。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.wisefly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>framework-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${wisefly.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>开启分布式事务需要在入口方法加上@GlobalTransactional注解</li><li>不建议方法有try-catch，如果有需要在catch里面加上<code>GlobalTransactionContext.reload(RootContext.getXID()).rollback()</code>;</li><li>由于seata在一阶段提交的时候就commit，所以<strong>存在脏读可能</strong>。强烈建议在涉及分布式事务的查询语句后面加上for update</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
            <tag> nacos </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化方法</title>
      <link href="2021/02/03/database/mysql-optimization/"/>
      <url>2021/02/03/database/mysql-optimization/</url>
      
        <content type="html"><![CDATA[<h2 id="选取最适用的字段属性"><a href="#选取最适用的字段属性" class="headerlink" title="选取最适用的字段属性"></a>选取最适用的字段属性</h2><p>MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。</p><p>例如，在定义邮政编码这个字段时，如果将其设置为CHAR（255）,显然给数据库增加了不必要的空间，甚至使用VARCHAR这种类型也是多余的，因为CHAR（6）就可以很好的完成任务了。同样的，如果可以的话，我们应该使用MEDIUMINT而不是BIGIN来定义整型字段。</p><p><strong>另外一个提高效率的方法是在可能的情况下，应该尽量把字段设置为NOTNULL</strong>，这样在将来执行查询的时候，数据库不用去比较NULL值。</p><p>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，<strong>ENUM类型被当作数值型数据来处理</strong>，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p><h2 id="使用连接（JOIN）来代替子查询（Sub-Queries）"><a href="#使用连接（JOIN）来代替子查询（Sub-Queries）" class="headerlink" title="使用连接（JOIN）来代替子查询（Sub-Queries）"></a>使用连接（JOIN）来代替子查询（Sub-Queries）</h2><p>MySQL从4.1开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。</p><p>例如，我们要将客户基本信息表中没有任何订单的客户删除掉，就可以利用子查询先从销售信息表中将所有发出订单的客户ID取出来，然后将结果传递给主查询，如下所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> customerinfo<span class="token keyword">WHERE</span> CustomerID <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> CustomerID <span class="token keyword">FROM</span> salesinfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接（JOIN）替代。</p><p>例如，假设我们要将所有没有订单记录的用户取出来，可以用下面这个查询完成：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customerinfo<span class="token keyword">WHERE</span> CustomerID <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>SELECTC ustomerID <span class="token keyword">FROM</span> salesinfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如果使用连接（JOIN）来完成这个查询工作，速度将会快很多</strong>。尤其是当salesinfo表中对CustomerID建有索引的话，性能将会更好，查询如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customerinfo<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> salesinfo <span class="token keyword">ON</span> customerinfo<span class="token punctuation">.</span>CustomerID<span class="token operator">=</span>salesinfo<span class="token punctuation">.</span>CustomerID<span class="token keyword">WHERE</span> salesinfo<span class="token punctuation">.</span>CustomerID ISNULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>连接（JOIN）之所以更有效率一些，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</p><h2 id="使用联合（UNION）来代替手动创建的临时表"><a href="#使用联合（UNION）来代替手动创建的临时表" class="headerlink" title="使用联合（UNION）来代替手动创建的临时表"></a>使用联合（UNION）来代替手动创建的临时表</h2><p>MySQL从4.0的版本开始支持union查询，它可以把需要使用临时表的两条或更多的select查询合并的一个查询中。在客户端的<strong>查询会话结束的时候，临时表会被自动删除</strong>，从而保证数据库整齐、高效。</p><p>使用union来创建查询的时候，我们只需要用UNION作为关键字把多个select语句连接起来就可以了，要<strong>注意的是所有select语句中的字段数目要相同</strong>。下面的例子就演示了一个使用UNION的查询。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span>Phone <span class="token keyword">FROM</span> client <span class="token keyword">UNION</span><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span>BirthDate <span class="token keyword">FROM</span> author <span class="token keyword">UNION</span><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span>Supplier <span class="token keyword">FROM</span> product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>尽管我们可以使用子查询（Sub-Queries）、连接（JOIN）和联合（UNION）来创建各种各样的查询，但不是所有的数据库操作都可以只用一条或少数几条SQL语句就可以完成的。更多的时候是需要用到一系列的语句来完成某种工作。但是在这种情况下，当这个语句块中的某一条语句运行出错的时候，整个语句块的操作就会变得不确定起来。</p><p>设想一下，要把某个数据同时插入两个相关联的表中，可能会出现这样的情况：第一个表中成功更新后，数据库突然出现意外状况，造成第二个表中的操作没有完成，这样，就会造成数据的不完整，甚至会破坏数据库中的数据。要避免这种情况，就应该使用事务，它的作用是：要么语句块中每条语句都操作成功，要么都失败。</p><p>换句话说，就是可以保持数据库中数据的一致性和完整性。事物以BEGIN关键字开始，COMMIT关键字结束。在这之间的一条SQL操作失败，那么，ROLLBACK命令就可以把数据库恢复到BEGIN开始之前的状态。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> salesinfo <span class="token keyword">SET</span> CustomerID<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span> <span class="token keyword">UPDATE</span> inventory <span class="token keyword">SET</span> Quantity<span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">WHERE</span> item<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">;</span> <span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>事务的另一个重要作用是当多个用户同时使用相同的数据源时，它可以利用锁定数据库的方法来为用户提供一种安全的访问方式，这样可以保证用户的操作不被其它的用户所干扰。</p><h2 id="锁定表"><a href="#锁定表" class="headerlink" title="锁定表"></a>锁定表</h2><p>尽管事务是维护数据库完整性的一个非常好的方法，但却因为它的独占性，有时会影响数据库的性能，尤其是在很大的应用系统中。由于在事务执行的过程中，数据库将会被锁定，因此其它的用户请求只能暂时等待直到该事务结束。如果一个数据库系统只有少数几个用户来使用，事务造成的影响不会成为一个太大的问题；但假设有成千上万的用户同时访问一个数据库系统，例如访问一个电子商务网站，就会产生比较严重的响应延迟。</p><p>其实，有些情况下我们可以通过锁定表的方法来获得更好的性能。下面的例子就用锁定表的方法来完成前面一个例子中事务的功能。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> inventory <span class="token keyword">WRITE</span> <span class="token keyword">SELECT</span> Quantity <span class="token keyword">FROM</span> inventory <span class="token keyword">WHERE</span> Item<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">UPDATE</span> inventory <span class="token keyword">SET</span> Quantity<span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">WHERE</span> Item<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">;</span> UNLOCKTABLES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里，我们用一个select语句取出初始数据，通过一些计算，用update语句将新值更新到表中。包含有WRITE关键字的LOCK TABLE语句可以保证在UNLOCK TABLES命令被执行之前，不会有其它的访问来对inventory进行插入、更新或者删除的操作。</p><h2 id="使用外键"><a href="#使用外键" class="headerlink" title="使用外键"></a>使用外键</h2><p><strong>锁定表的方法可以维护数据的完整性，但是它却不能保证数据的关联性。这个时候我们就可以使用外键。</strong></p><p>例如，外键可以保证每一条销售记录都指向某一个存在的客户。在这里，外键可以把customerinfo表中的CustomerID映射到salesinfo表中CustomerID，任何一条没有合法CustomerID的记录都不会被更新或插入到salesinfo中。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customerinfo<span class="token punctuation">(</span> CustomerID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> PRIMARYKEY<span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">TYPE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> salesinfo<span class="token punctuation">(</span> SalesID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> CustomerIDINT <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>PRIMARYKEY<span class="token punctuation">(</span>CustomerID<span class="token punctuation">,</span>SalesID<span class="token punctuation">)</span><span class="token punctuation">,</span>FOREIGNKEY<span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> customerinfo<span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token keyword">TYPE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意例子中的参数“ON DELETE CASCADE”。该参数保证当customerinfo表中的一条客户记录被删除的时候，salesinfo表中所有与该客户相关的记录也会被自动删除。</p><p>如果要在MySQL中使用外键，一定要记住在创建表的时候将表的类型定义为事务安全表InnoDB类型。该类型不是MySQL表的默认类型。定义的方法是在CREATETABLE语句中加上TYPE=INNODB。如例中所示。</p><h2 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h2><p>索引是提高数据库性能的常用方法，它可以令数据库服务器以比没有索引快得多的速度检索特定的行，尤其是在查询语句当中包含有MAX（）,MIN（）和ORDER BY这些命令的时候，性能提高更为明显。</p><p>加索引的注意事项：</p><ol><li><p>一般说来，索引应建立在那些将用于JOIN,WHERE判断和ORDER BY排序的字段上。尽量不要对数据库中某个含有大量重复的值的字段建立索引。如ENUM类型的字段会出现大量重复值</p></li><li><p>索引需要逐步优化</p></li><li><p>索引一旦进行 升级优化，需要将之前废弃的索引删掉，防止干扰。</p></li><li><p>根据SQL实际解析的顺序，调整索引的顺序（最左前缀，保持索引的定义和使用的顺序一致性）</p><blockquote><p>sql解析顺序：from … on… join …where …group by …having …select dinstinct …order by … limit …</p></blockquote></li><li><p>范围查询 in 有时不会实现，所以将含In的范围查询 放到where条件的最后，防止失效。</p></li><li><p>对于多表查询，小表驱动大表</p></li><li><p>对于复合索引，where 和 order by 拼起来，不要跨列使用</p></li><li><p>此外，MySQL从版本3.23.23开始支持全文索引和搜索。全文索引在MySQL中是一个FULLTEXT类型索引，但仅能用于MyISAM类型的表。如果将数据装载到一个已经有FULLTEXT索引的表中，执行过程将会非常慢。</p></li></ol><h2 id="优化的查询语句"><a href="#优化的查询语句" class="headerlink" title="优化的查询语句"></a>优化的查询语句</h2><p>绝大多数情况下，使用索引可以提高查询的速度，但如果SQL语句使用不恰当的话，索引将无法发挥它应有的作用。</p><p>下面是应该注意的几个方面。</p><ul><li><p>首先，最好是在相同类型的字段间进行比较的操作。</p></li><li><p>其次，在建有索引的字段上尽量不要<strong>计算、使用函数和类型转换</strong>进行操作。</p></li></ul><blockquote><p>例如，在一个DATE类型的字段上使用YEAE（）函数时，将会使索引不能发挥应有的作用。</p></blockquote><ul><li>第三，在搜索字符型字段时，我们有时会使用LIKE关键字和通配符，这种做法虽然简单，但却也是以牺牲系统性能为代价的。</li></ul><p>例如下面的查询将会比较表中的每一条记录。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span>  books  <span class="token keyword">WHERE</span>  name  <span class="token operator">like</span>  <span class="token string">"MySQL%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是如果换用下面的查询，返回的结果一样，但速度就要快上很多：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>   <span class="token operator">*</span>  <span class="token keyword">FROM</span>  books<span class="token keyword">WHERE</span>  name＞<span class="token operator">=</span><span class="token string">"MySQL"</span>  <span class="token operator">and</span>  name  ＜<span class="token string">"MySQM"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>SQL优化，是一种概率层面的优化，这是因为sql语句在执行前要经过服务层的sql优化器（MySQL Query Optimizer）进行优化。至于是否实际使用了我们的优化，需要通过explain进行推测。</p></blockquote><p>索引失效的十大情况：<a href="http://arthurjq.com/2020/12/26/index-missing/">http://arthurjq.com/2020/12/26/index-missing/</a></p><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>就是将数据库分为主从库，一个主库（<strong>Master</strong>）用于写数据，多个从库（<strong>Slaver</strong>）进行轮询读取数据的过程，主从库之间通过某种通讯机制进行数据的同步，是一种常见的数据库架构。下面这张图就展示了 “一主二从” 的结构：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-1.png" alt></p><h3 id="为什么要读写分离"><a href="#为什么要读写分离" class="headerlink" title="为什么要读写分离"></a>为什么要读写分离</h3><p>大多数互联网数据操作往往都是读多写少，随着数据的增长，数据库的“读”会首先成为瓶颈。如果我们希望能线性地提升数据库的读性能和写性能，就需要让读 写尽可能的不相互影响，各自为政。<strong>在使用读写分离之前我们应该考虑使用缓存能不能解决问题</strong>。然后再考虑对数据库按照 “读” 和 “写” 进行分组。读写分离意味着将一体的结构的进行分散，在数据量大、高并发的情景中要考虑以下这些问题：</p><ol><li>如何保证 <strong>Master</strong> 的高可用，故障转移，熔断限流等。</li><li>读写操作的区分规则，代码层面如何处理好读命令和写命令，尽量无感知无业务入侵。</li><li>数据一致性的容忍度。虽然是数据同步，但是由于网络的不确定性这仍然是一个不可忽视的问题。</li></ol><h2 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h2><p><strong>数据库垂直拆分、数据库水平拆分</strong> 统称 <strong>分库</strong>。是指按照特定的条条件和维度，将同一个数据库中的数据拆分到多个数据库（主机）上面以达到分散单库（主机）负载的效果。这样我们变相地降低了数据集的大小，以空间换时间来提升性能。</p><h3 id="数据库垂直拆分"><a href="#数据库垂直拆分" class="headerlink" title="数据库垂直拆分"></a>数据库垂直拆分</h3><p><strong>数据库垂直拆分</strong> 指的是按照业务对数据库中的表进行分组，同组的放到一个新的数据库（逻辑上，并非实例）中。需要从实际业务出发将大业务分割成小业务。</p><p>比如商城的整个业务中的 <strong>用户相关表，订单相关表，物流相关表</strong> 各自独立分类形成 <strong>用户系统数据库，订单系统数据库，物流系统数据库</strong> 如下图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-2.png" alt></p><p><strong>垂直分库是指按照业务将表进行分类，分布到不同的数据库上面，每个库可以放在不同的服务器上，它的核心理念是专库专用。</strong></p><p>这样带来了一些好处： （a）业务清晰，职责单一 （b）易维护，易扩展 （c）数据服务化 </p><p>同时也有一些负面的作用：</p><p>（a）提高了整个应用的复杂度，而且会形成跨库事务 </p><p>（b）引发 “木桶效应”，任何一个短板有可能影响整个系统 </p><p>（c）部分表关系不能 join 只能通过服务相互调用来维系。甚至由于网络问题引发数据不一致。</p><p>在需要进行分库的情况下，通常可优先考虑垂直拆分。</p><h3 id="数据库水平拆分"><a href="#数据库水平拆分" class="headerlink" title="数据库水平拆分"></a>数据库水平拆分</h3><p>在数据库垂直拆分后遇到单机数据库性能瓶颈之后，就可以考虑数据库水平拆分了。 </p><p>之所以先垂直拆分才水平拆分，是因为垂直拆分后数据业务清晰而且单一，更加方便指定水平的标准。比如我们对商城业务垂直拆分后的 用户系统 进行水平拆分就比对整个商城业务进行水平拆分好找维度，我们可以根据用户注册时间的区间、用户的区域或者用户 ID 的范围、 hash 等条件，然后关联相关表的记录将数据进行拆分，如果放在整个商城业务上你是以用户为准还是以订单为准都不太好考虑。</p><p>我们按照每100万为区间对用户系统水平拆分如下（按照 id % 2 分也可以）：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-3.png" alt></p><p><strong>水平分库是把同一个表的数据按一定规则拆到不同的数据库中，每个库可以放在不同的服务器上。</strong></p><p>这种拆分的好处在于： （a）单个库的容量可控 （b）单条记录保证了数据完整性 （c）数据关系可以通过 join 维持 （d） 避免了跨库事务 （e）稳定性体现在IO冲突减少，锁定减少，可用性指某个库出问题，部分可用；</p><p>缺点同样存在：（a）拆分规则对编码有一定的影响 （b）不同业务的分区交互需要统筹设计</p><h2 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h2><p>分表也分为 <strong>数据表垂直拆分</strong> 和 <strong>数据表水平拆分</strong> 。</p><h3 id="数据表垂直拆分"><a href="#数据表垂直拆分" class="headerlink" title="数据表垂直拆分"></a>数据表垂直拆分</h3><p>数据表垂直拆分就是纵向地把表中的列分成多个表，把表从“ 宽 ”变“ 窄 ”。一般遵循以下几个点进行拆分：</p><ol><li>冷热分离，把常用的列放在一个表，不常用的放在一个表</li><li>大字段列独立存放</li><li>关联关系的列紧密的放在一起</li></ol><p>我们把用户表中常用的和不常用的而且大字段分离成两张表：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-4.png" alt></p><p><strong>垂直分表定义：将一个表按照字段分成多表，每个表存储其中一部分字段。</strong></p><p>它带来的提升是：</p><ol><li>为了避免IO争抢并减少锁表的几率，查看详情的用户与商品信息浏览互不影响</li><li>充分发挥热门数据的操作效率，商品信息的操作的高效率不会被商品描述的低效率所拖累。</li></ol><blockquote><p>为什么大字段IO效率低：第一是由于数据量本身大，需要更长的读取时间；第二是跨页，页是数据库存储单位，很多查找及定位操作都是以页为单位，单页内的数据行越多数据库整体性能越好，而大字段占用空间大，单页内存储行数少，因此IO效率较低。第三，数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率更高，减少了磁盘IO，从而提升了数据库性能。</p></blockquote><h3 id="数据表的水平拆分"><a href="#数据表的水平拆分" class="headerlink" title="数据表的水平拆分"></a>数据表的水平拆分</h3><p>表的水平拆分感觉跟库的水平拆分思想上都是一样的，只不过粒度不同。表结构维持不变。也就是说拆分后数据集的并集等于拆分前的数据集。理解了 数据库水平拆分 之后这个就没有什么可说的了。</p><p><strong>水平分表是在同一个数据库内，把同一个表的数据按一定规则拆到多个表中。</strong></p><p>这里简单阐述了几个数据库优化概念，在实际操作中往往会组合使用。我们在实际操作之前要做好数据量的预估，这样能够根据预测未来数据的增量来进行选型。业务数据增长较小，常用于表的拆分。增长特别大达到上万级别则可以选择分库，比如一些资金积分流水，历史记录之类的。有些时候并不是拆分完就万事大吉了，比如我们按照地区拆分后，A地区业务增长很快业绩很好，而B地区推广不力竞争激烈业绩萧条，造成了数据倾斜。也会影响分库分表的期望效果。这需要建立长效的监控预测机制来应对，甚至根据实际情况及时调整策略。数据拆分还面临分布式的很多问题，分布式事务，高可用，数据一致性，全局唯一性都是应该考虑的问题。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>分库分表神器 Sharding-JDBC，几千万的数据你不搞一下？：<a href="https://zhuanlan.zhihu.com/p/301031380" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/301031380</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="2021/02/03/database/jta/"/>
      <url>2021/02/03/database/jta/</url>
      
        <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>本地事务四大特性（ACID）</strong></p><ol><li>原子性（atomicity）：一个事务中的所有操作，不可分割，要么全部成功，要么全部失败；</li><li>一致性（consistency）：一个事务执行前与执行后数据的<strong>完整性</strong>必须保持一致，与cap的一致性是两个概念，详情请看：<a href="http://arthurjq.com/2020/12/25/consistency/">http://arthurjq.com/2020/12/25/consistency/</a></li><li>隔离性（isolation）：一个事务的执行，不能被其他事务干扰，多并发时事务之间要相互隔离，细节请看：<a href="http://arthurjq.com/2020/12/25/acid-isolation/">http://arthurjq.com/2020/12/25/acid-isolation/</a></li><li>持久性（durability）：一个事务一旦被提交，它对数据库中数据的改变是永久性的。</li></ol><p><strong>CAP理论</strong></p><ol><li>一致性（Consistency） ：在分布式系统中所有的数据备份，<strong>在同一时刻都保持一致状态</strong>，如无法保证状态一致，直接返回错误；对于客户端来说，一致性指的是并发访问时更新过的数据如何获取的问题；从服务器来看，则是更新如何复制分布到整个系统，以保证数据最终一致；</li><li>可用性（Availability）：在集群中一部分节点故障，也能保证客户端访问系统并得到正确响应，<strong>允许一定时间内数据状态不一致</strong>；</li><li>分区容错性（Partition tolerance）：分布式系统在遇到任何网络分区故障时，仍然能保证对外提供满足一致性和可用性的服务，除非整个网络环境都发生故障；</li></ol><p><strong>BASE理论</strong></p><p>基本可用（Basically Available）：分布式系统在出现故障时，保证核心可用，允许损失部分可用性。（响应时间上的损失、功能上的损失）<br>软状态（Soft State）：系统中的数据允许存在中间状态，中间状态不影响系统的整体可用性。（如：支付中、处理中）<strong>数据同步允许一定的延迟</strong><br>最终一致性（Eventually Consistent）：系统中的数据不可一直处于软状态，必须在有时间期限，在期限过后应当保证数据的一致性。（支付中 =&gt; 支付成功）</p><ul><li>相比于本地事务的ADIC强一致性模型，BASE理论提出<strong>通过牺牲一定的强一致性来获得可用性</strong>；</li><li>不同业务单元和业务组件对数据一致性的要求不一样，因此分布式系统中BASE理论和ACID特性会结合使用。</li></ul><p><strong>幂等性</strong></p><ol><li>幂等（Idempotent）是一个数学与计算机学中的概念：<code>f(n) = 1^n</code> // 无论n等于多少，f（n）永远值等于1；</li><li>在程序中，使用相同参数执行同一个方法，每一次执行结果都是相同的，即具有<code>幂等性</code>；</li><li>以订单状态处理为例的幂等性设计（举个栗子），不论执行多少次orderProcess（）方法，都只会扣减一次库存，并且返回true。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 订单处理 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">orderProcess</span><span class="token punctuation">(</span>OrderEntity orderEntity<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//查询原订单信息</span> OrderEntity oldOrderEntity <span class="token operator">=</span> <span class="token function">getOrderInfo</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断订单状态，如订单状态为 ok 则直接返回 true</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>oldOrderEntity<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//更新订单状态</span> <span class="token keyword">boolean</span> upBoolean <span class="token operator">=</span> <span class="token function">updateOrderInfo</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>upBoolean<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//扣减库存</span>   <span class="token keyword">boolean</span> reduceBoolean <span class="token operator">=</span> <span class="token function">reduceInventories</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reduceBoolean<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务的演进过程"><a href="#事务的演进过程" class="headerlink" title="事务的演进过程"></a>事务的演进过程</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>对于一些小型项目，使用单体架构可以快速的开发，并且很容易控制我们的业务逻辑和事务处理。通过本地事务的ACID特性，保证我们数据的一致性。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-1.png" alt></p><h3 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h3><p>实际项目中，我们可能会遇到一种情况就是，并发量不大，但常年累积下来数据量很大，这时候我们考虑到了<strong>分库策略</strong>。由于垮库情况下本地事务已经无法保证多库之间的数据一致性，<strong>这时我们就需要考虑分布式事务了</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-2.png" alt></p><h3 id="分布式架构（服务拆分）"><a href="#分布式架构（服务拆分）" class="headerlink" title="分布式架构（服务拆分）"></a>分布式架构（服务拆分）</h3><p>也有可能所使用的数据库性能比较好，但我们的单应用的性能无法满足业务需求，这时候我们可以选择对服务进行拆分的策略。此时虽然还是使用同一数据库，但我们多个服务之间互相调用来完成原有单体架构下的业务逻辑，这种情况下原有的本地事务也无法保证数据的一致性，这时我们也需要考虑分布式事务。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-3.png" alt></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>服务的拆分可以提高应用性能，让应用更专注于处理自己所负责的事情。数据库的拆分，一定程度上提升IO性能、数据库连接数、单机硬件资源的瓶颈。这时，服务间互相调用，每个服务都存在一个自己特定的业务数据库，所以我们需要考虑分布式事务。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-4.png" alt></p><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h2 id="XA规范（协议）"><a href="#XA规范（协议）" class="headerlink" title="XA规范（协议）"></a>XA规范（协议）</h2><p> X/Open组织（现在的Open Group）定义了一套DTP（Distributed Transaction Processing）分布式事务处理模型，主要包含以下四部分：</p><ol><li>AP（应用程序）</li><li>TM（事务管理器）：交易中间件</li><li>RM（资源管理器）：数据库</li><li>CRM（通信资源管理器）：消息中间件</li></ol><p><strong>XA规范</strong>则是DTP模型定义TM和RM之间通讯的接口规范。XA接口函数由数据库厂商提供。TM用它来通知数据库事务的开始、结束、提交、回滚。基于XA规范衍生出下面的二阶段提交（2PC）、三阶段提交（3PC）。</p><blockquote><p>XA规范包括两套函数，以<code>xa_</code>开头的及以<code>ax_</code>开头的。<br>以下的函数使事务管理器可以对资源管理器进行的操作：</p><ul><li>xa_open,xa_close：建立和关闭与资源管理器的连接。</li><li>xa_start,xa_end：开始和结束一个本地事务。</li><li>xa_prepare,xa_commit,xa_rollback：预提交、提交、回滚一个本地事务。</li><li>xa_recover：回滚一个已进行预提交的事务。</li><li>ax_开头的函数使资源管理器可以动态地在事务管理器中进行注册，并可以对XID（TRANSACTION IDS）进行操作。</li><li>ax_reg,ax_unreg；允许一个资源管理器在一个TMS（TRANSACTION MANAGER SERVER）中 动态注册 或 撤消注册 。</li></ul></blockquote><p>XA的一些问题：</p><ol><li><p>性能（阻塞、响应时间增加（一阶段不提交，且锁粒度更大）、死锁（收到 XA commit 或 XA rollback 前必须阻塞等待））；</p></li><li><p>XA 在整个事务处理过程结束前，涉及数据都被锁定，读写都按隔离级别的定义约束起来；</p></li><li><p>依赖于独立的J2EE中间件，<code>Weblogic</code>、<code>Jboss</code>，后期轻量级的<code>Atomikos</code>、<code>Narayana</code>、<code>Bitronix</code>；</p></li><li><p>不是所有资源（RM，数据库）都支持XA协议；</p><p>Seata 事务框架中的XA事务模式：</p></li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-11.png" alt></p><p>如图所示，XA 模式其实就是 Seata 底层利用了 XA 接口，在一阶段二阶段时自动处理。如一阶段时，XA 的 RM 通过代理用户数据源，创建 XAConnection，进行开启 XA 事务（XA start）和 XA-prepare（此时 XA 的任何操作都会被持久化，即便宕机也能恢复），在二阶段时，TC 通知 RM 进行 XA 分支的 Commit/Rollback 操作。</p><h2 id="JTA（Java-Transaction-API）"><a href="#JTA（Java-Transaction-API）" class="headerlink" title="JTA（Java Transaction API）"></a>JTA（Java Transaction API）</h2><p>即<strong>Java的事务API</strong>，<strong>基于XA实现</strong>，也就是RM需要支持XA，所以也有JTA（XA）的说法，JTA仅定义了接口。主要包括<code>javax.sql.XADataResource</code>、<code>javax.sql.XAConnection</code>、<code>javax.sql.XAException</code>、<code>javax.transaction.xa.XAResource</code>、<code>javax.transaction.Xid</code>。<br>JTA的实现有几种形式：</p><ol><li>J2EE容器提供的JTA实现（Weblogic、JBoss ）；</li><li>JOTM（Java Open Transaction Manager）、Atomikos，可独立于J2EE容器的环境下实现JTA；</li></ol><h2 id="二阶段提交（2PC）"><a href="#二阶段提交（2PC）" class="headerlink" title="二阶段提交（2PC）"></a>二阶段提交（2PC）</h2><p>2PC就是分布式事务中<strong>将事务分为两步进行提交</strong>。基于数据库的XA协议完成事务本质上就是二阶段提交（XA、JTA/JTS）。</p><ul><li>协调者（Coordinater）：事务管理器（TM）</li><li>参与者（participants）：资源管理器（RM）</li></ul><ol><li><p><strong>准备阶段：</strong><br>协调者向参与者发送prepare信息，以询问参与者是否能够提交事务；<br>参与者在收到prepare信息后，进行本地事务的<strong>预处理</strong>，<strong>但不提交</strong>。并根据处理结果返回，失败<code>not commit</code> or 成功<code>ready</code> ；</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-6.jpg" alt></p></li><li><p><strong>提交阶段：</strong><br>如协调者收到参与者的失败消息，则向每个参与者发送<code>rollback</code>消息进行回滚；<br>所有参与者都返回<code>ready</code>，则向每个参与者发送提交<code>commit</code>消息，通知参与者进行事务提交；</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-7.jpg" alt></p></li></ol><p>整理于：<a href="https://zhuanlan.zhihu.com/p/315164700" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/315164700</a></p><p>二阶段提交的一些问题：</p><ol><li><strong>同步阻塞</strong>，事务执行过程中所有参与者都是阻塞型的，第三方参与者访问参与者占有的资源时会被阻塞；</li><li><strong>单点故障</strong>，协调者一旦发生故障，参与者会被阻塞。尤其在提交阶段，所有参与者都处于锁定资源状态中，无法完成事务操作；（可以选择新的协调者，但无法解决参与者被阻塞的问题）；</li><li><strong>数据不一致</strong>，提交阶段协调者向参与者发送<code>commit</code>信息，发生局部网络故障，会导致存在参与者未收到<code>commit</code>信息无法提交事务情况，导致出现数据不一致现象；</li></ol><h2 id="三阶段提交（3PC）"><a href="#三阶段提交（3PC）" class="headerlink" title="三阶段提交（3PC）"></a>三阶段提交（3PC）</h2><p>相比于2PC，<strong>3PC把2PC的准备阶段再次进行拆分</strong>，并且3PC<strong>引入了参与者超时机制</strong>。</p><ol><li><p><strong>canCommit：</strong>协调者询问参与者，是否具备执行事务的条件，参与者进行自身事务必要条件的检查；</p></li><li><p><strong>preCommit：</strong>协调者通知参与者进行事务的预提交；</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-8.jpg" alt></p></li><li><p><strong>doCommit：</strong>协调者根据<code>preCommit</code>阶段参与者的反馈结果通知参与者是否进行事务提交或是进行事务回滚；</p></li></ol><p>虽然 3PC 用超时机制，解决了协调者故障后参与者的阻塞问题，但与此同时却多了一次网络通信，性能上反而变得更差，也不太推荐。</p><h2 id="事务补偿方案TCC"><a href="#事务补偿方案TCC" class="headerlink" title="事务补偿方案TCC"></a>事务补偿方案TCC</h2><p>TCC的核心思想就是校验、资源锁定、补偿，对每个操作（Try）都提供确认（Confirm）和取消（cancel）的操作，这样根据操作的结果，来确认是进行Confirm还是Cancel。<br>可以看出XA的两阶段提交是基于<strong>资源层面</strong>的，而TCC也是一种两阶段提交，但它是基于<strong>应用层面</strong>的。</p><ol><li><p><strong>Try</strong>：主要负责对业务进行数据检查和资源预留，例如：对资金进行<code>冻结</code>；对状态更改为<code>处理中</code>；</p></li><li><p><strong>Confirm</strong>：确认执行业务的操作，例如：进行实际<code>资金扣除</code>；更改状态为<code>最终结果</code>；</p></li><li><p><strong>Cancel</strong>：取消执行业务的操作，例如：<code>解冻资金</code>；更改状态为<code>未处理</code>；</p><p>Seata 事务框架中的TCC事务：</p></li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-10.png" alt></p><p>TCC存在的一些问题：</p><ol><li>业务操作的是不同服务的Try来进行资源预留，每个Try都是独立完成本地事务，因此不会对资源一直加锁。</li><li>业务服务需要提供try、confirm、cancel<strong>三种方法</strong>来支持，<strong>业务侵入性强</strong>，如不适用三方框架要做到对各阶段状态的感知，比较麻烦，而且这种模式并不能很好地复用，会导致并发量激增。</li><li>常用TCC框架：<code>tcc-transaction</code>、<code>ByteTCC</code>、<code>spring-cloud-rest-tcc</code>、<code>Himly</code></li><li><strong>Confirm/Cancel要做幂等性设计</strong>。</li></ol><p>常见的微服务系统大部分接口调用是同步的，这时候使用TCC来保证一致性是比较合适的。</p><h2 id="Saga（补偿）"><a href="#Saga（补偿）" class="headerlink" title="Saga（补偿）"></a>Saga（补偿）</h2><p>Saga的核心是补偿，与TCC不同的是<strong>Saga不需要Try</strong>，而是直接进行<code>confirm</code>、<code>cancel</code>操作。</p><ol><li>Confirm：依次按顺序依次执行资源操作，各个资源直接处理本地事务，如无问题，二阶段什么都不用做；</li><li>Cancel：异常情况下<strong>需要调用的补偿事务</strong>（逆操作）来保证数据的一致性。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-9.png" alt></p><p>可以看出，Saga和TCC有些类似，都是补偿型事务</p><p>适用场景：</p><ol><li>业务流程长、业务流程多</li><li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</li></ol><p><strong>优势：</strong></p><ol><li>一阶段提交本地事务，无锁，高性能；</li><li>事件驱动模式，参与者可异步执行，高吞吐；</li><li>应用成本低，补偿服务易于实现；</li></ol><p><strong>劣势：</strong>无法保证隔离性（脏写）</p><blockquote><p>脏写：先前的写入尚未提交，后面的写入又覆盖了这个尚未提交的值</p></blockquote><h2 id="可靠消息最终一致性（RocketMQ）"><a href="#可靠消息最终一致性（RocketMQ）" class="headerlink" title="可靠消息最终一致性（RocketMQ）"></a>可靠消息最终一致性（RocketMQ）</h2><p>有一些情况，服务间调用时异步的，服务A将消息发送到MQ，服务B进行消息的消费。这时我们就需要用到<code>可靠消息最终一致性</code>来解决分布式事务问题。首先字面理解</p><ul><li><strong>可靠消息：</strong>即这个消息一定是可靠的，并且最终一定需要被消费的。</li><li><strong>最终一致性：</strong>过程中数据存在一定时间内的不一致，但超过限定时间后，需要最终会保持一致。</li></ul><p>确保以上两点情况下，通过消息中间件（RocketMQ）来完成分布式事务处理，因为RocketMQ支持事务消息，可以方便的让我们进行分布式事务控制。</p><p>因此首先需要了解一下，RocketMQ的事务消息的原理。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-5.png" alt></p><blockquote><p><strong>half message：</strong>半消息，此时消息不能被consumer所发现和消费，需producer进行二次消息确认。</p></blockquote><ol><li><code>producer</code>发送<code>half message</code>给<code>MQ Server</code>；</li><li><code>producer</code>根据<code>MQ Server</code>应答结果判断<code>half message</code>是否发送成功；</li><li><code>producer</code>处理本地事务；</li><li><code>producer</code>发送最终确认消息<code>commit / rollback</code>；<br><code>commit</code>：<code>consumer</code>对消息可见并进行消费；<br><code>rollback</code>：<code>discard</code>抛弃消息，<code>consumer</code>无法进行消息消费；</li><li>如遇异常情况下<code>step4</code>最终确认消息未达到<code>MQ Server</code>，<code>MQ Server</code>会定期查询当前处于半消息状态下的消息，主动进行消息回查来询问<code>producer</code>该消息的最终状态；</li><li><code>producer</code>检查本地事务执行的最终结果；</li><li><code>producer</code>根据检查到的结果，再次提交确认消息，<code>MQ Server</code>仍然按照<code>step4</code>进行后续操作。</li></ol><p><strong>事务消息发送对应步骤1、2、3、4，事务消息回查对应步骤5、6、7。</strong></p><p>由以上步骤可以看出通过事务性消息的两步操作，避免了消息直接投递所产生一些问题。最终投递到MQ Server的消息，是真实可靠且必须被消费的。</p><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p>阿里开源的Seata 是一款分布式事务解决方案，提供了 AT、TCC、SAGA 和 XA 事务模式。</p><p>Seata架构的亮点主要有几个:</p><ol><li>应用层基于SQL解析实现了自动补偿，从而最大程度的降低业务侵入性；</li><li>将分布式事务中TC（事务协调者）独立部署，负责事务的注册、回滚（支持多种注册中心形式以及本地文件形式）；</li><li>通过全局锁实现了写隔离与读隔离。</li></ol><p>Seata的介绍、安装和使用在另一篇文章中。</p><p>在实际业务开发中，考虑设计一套好分布式事务框架，需要根据具体业务情况结合上述一些理论，进行权衡取舍。<br>需要考虑的特性：</p><blockquote><ul><li>实现复杂度：事务模式与当前业务结合，实施成本是否过高；</li><li>业务侵入性：基于注解、XML、补偿逻辑；</li><li>TC/TM部署：独立部署、与应用部署；</li><li>性能：回滚概率、回滚所付出的代价、响应时间、吞吐量；</li><li>高可用：数据库、注册中心、配置中心</li><li>持久化：文件、数据库；</li><li>同步/异步：分布式事务执行过程中是否阻塞，还是非阻塞；</li></ul></blockquote><p>具体的介绍和实践在：<a href="http://arthurjq.com/2021/02/04/seata/">http://arthurjq.com/2021/02/04/seata/</a></p><h2 id="总结-AT、TCC、Saga、XA-模式分析"><a href="#总结-AT、TCC、Saga、XA-模式分析" class="headerlink" title="总结 AT、TCC、Saga、XA 模式分析"></a>总结 AT、TCC、Saga、XA 模式分析</h2><table><thead><tr><th>分布式事务模式</th><th>介绍</th><th>技术栈</th></tr></thead><tbody><tr><td><strong>AT 模式</strong></td><td>无侵入的分布式事务解决方案，适用于不希望对业务进行改造的场景，几乎0学习成本（sql都由框架托管统一执行，会存在<strong>脏写</strong>问题）</td><td>seata、shardingsphere</td></tr><tr><td><strong>TCC 模式</strong></td><td>高性能分布式事务解决方案，适用于核心系统等对性能有很高要求的场景（第一阶段会产生行锁，事务执行太久会<strong>锁行很久</strong>）</td><td>seata、service-comb</td></tr><tr><td><strong>Saga 模式</strong></td><td>长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统（第一阶段就操作DB，会存在<strong>脏读</strong>问题）</td><td>seata、shardingsphere、service-comb</td></tr><tr><td><strong>XA模式</strong></td><td>分布式强一致性的解决方案，但<strong>性能低</strong>而使用较少。</td><td>seata、shardingsphere</td></tr></tbody></table><p>Saga和TCC模式区别不大，TCC就是多了个锁行的步骤（避免了脏读，但事务执行太久会导致锁行很久，不适用于长事务）</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-14.png" alt></p><p>注：</p><ol><li>shardingsphere的<strong>Saga 模式</strong> 引擎使用的是service-comb（较comb实现了解析sql自动回滚）</li><li>shardingsphere的<strong>AT模式</strong>引擎是用的Seata引擎</li><li>shardingsphere是从Sharding-JDBC进化而来，分库分表使用很火</li></ol><p>（当当开源）shardingsphere开源地址：<a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener">https://github.com/apache/shardingsphere</a></p><p>（阿里2019年开源）seata开源地址：<a href="https://github.com/seata/seata" target="_blank" rel="noopener">https://github.com/seata/seata</a></p><p>（华为2017年开源）service-comb开源地址：<a href="https://github.com/apache/servicecomb-pack" target="_blank" rel="noopener">https://github.com/apache/servicecomb-pack</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射机制</title>
      <link href="2021/02/02/java/reflection/"/>
      <url>2021/02/02/java/reflection/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>转载：<a href="https://zhuanlan.zhihu.com/p/86293659" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/86293659</a></p><p>反射的概念是由 Smith 在 1982 年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。通俗地讲，一提到反射，我们就可以想到镜子。镜子可以明明白白地照出我是谁，还可以照出别人是谁。反映到程序中，反射就是用来让开发者知道这个类中有什么成员，以及别的类中有什么成员。</p><p>反射主要应用在以下几方面：</p><ol><li>反射让开发人员可以通过外部类的全路径名创建对象，并使用这些类，实现一些扩展的功能。</li><li>反射让开发人员可以枚举出类的全部成员，包括构造函数、属性、方法。以帮助开发者写出正确的代码。</li><li>测试时可以利用反射 API 访问类的私有成员，以保证测试代码覆盖率。</li></ol><h2 id="反射-API"><a href="#反射-API" class="headerlink" title="反射 API"></a>反射 API</h2><p>Java 类的成员包括以下三类：属性字段、构造函数、方法。反射的 API 也是与这几个成员相关：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/reflection-1.jpg" alt></p><ol><li>Field 类：提供有关类的属性信息，以及对它的动态访问权限。它是一个封装反射类的属性的类。</li><li>Constructor 类：提供有关类的构造方法的信息，以及对它的动态访问权限。它是一个封装反射类的构造方法的类。</li><li>Method 类：提供关于类的方法的信息，包括抽象方法。它是用来封装反射类方法的一个类。</li><li>Class 类：表示正在运行的 Java 应用程序中的类的实例。</li><li>Object 类：Object 是所有 Java 类的父类。所有对象都默认实现了 Object 类的方法。</li></ol><p>接下来，我们通过一个典型的例子来学习反射。先做准备工作，新建 com.test.reflection 包，在此包中新建一个 Student 类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String studentName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> studentAge<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Student</span><span class="token punctuation">(</span>String studentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>studentName <span class="token operator">=</span> studentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>studentAge <span class="token operator">=</span> studentAge<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">show</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show: "</span> <span class="token operator">+</span> studentName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> studentAge <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"testReturnValue"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Student 类中有两个<strong>字段</strong>、两个<strong>构造方法</strong>、两个<strong>函数</strong>，且都是一个私有，一个公有。由此可知，这个测试类基本涵盖了我们平时常用的所有类成员。</p><h3 id="获取-Class-对象的三种方式"><a href="#获取-Class-对象的三种方式" class="headerlink" title="获取 Class 对象的三种方式"></a>获取 Class 对象的三种方式</h3><p>获取 Class 对象有三种方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span>Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.通过类的class属性</span>Class <span class="token class-name">studentClass2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.通过对象的getClass()函数</span>Student studentObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">studentClass3</span> <span class="token operator">=</span> studentObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>第一种方法是通过类的全路径字符串获取 Class 对象，这也是我们平时最常用的反射获取 Class 对象的方法；</li><li>第二种方法有限制条件：需要导入类的包；</li><li>第三种方法已经有了 Student 对象，不再需要反射。</li></ol><p>通过这<strong>三种方式获取到的 Class 对象是同一个</strong>，也就是说 Java 运行时，每一个类只会生成一个 Class 对象。</p><p>我们将其打印出来测试一下：</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class1 = "</span> <span class="token operator">+</span> studentClass <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class2 = "</span> <span class="token operator">+</span> studentClass2 <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class3 = "</span> <span class="token operator">+</span> studentClass3 <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class1 == class2 ? "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass <span class="token operator">==</span> studentClass2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class2 == class3 ? "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass2 <span class="token operator">==</span> studentClass3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">class1 = class com.test.reflection.Studentclass2 = class com.test.reflection.Studentclass3 = class com.test.reflection.Studentclass1 == class2 ? trueclass2 == class3 ? true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h3><p>获取字段有两个 API：<code>getDeclaredFields</code>和<code>getFields</code>。他们的区别是:<code>getDeclaredFields</code>用于获取所有声明的字段，包括公有字段和私有字段，<code>getFields</code>仅用来获取公有字段：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的字段</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Field: "</span> <span class="token operator">+</span> declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的字段</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"field: "</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">declared Field: private java.lang.String com.test.reflection.Student.studentNamedeclared Field: public int com.test.reflection.Student.studentAgefield: public int com.test.reflection.Student.studentAge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><p>获取构造方法同样包含了两个 API：用于获取所有构造方法的 <code>getDeclaredConstructors</code>和用于获取公有构造方法的<code>getConstructors</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的构造方法</span>Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor declaredConstructor <span class="token operator">:</span> declaredConstructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Constructor: "</span> <span class="token operator">+</span> declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的构造方法</span>Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> constructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor constructor <span class="token operator">:</span> constructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"constructor: "</span> <span class="token operator">+</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">declared Constructor: public com.test.reflection.Student()declared Constructor: private com.test.reflection.Student(java.lang.String)constructor: public com.test.reflection.Student()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取非构造方法"><a href="#获取非构造方法" class="headerlink" title="获取非构造方法"></a>获取非构造方法</h3><p>同样地，获取非构造方法的两个 API 是：获取所有声明的非构造函数的 <code>getDeclaredMethods</code> 和仅获取公有非构造函数的 <code>getMethods</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的函数</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Method declaredMethod <span class="token operator">:</span> declaredMethodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Method: "</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的函数</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">declared Method: public void com.test.reflection.Student.setStudentAge(int)declared Method: private java.lang.String com.test.reflection.Student.show(java.lang.String)method: public void com.test.reflection.Student.setStudentAge(int)method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedExceptionmethod: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedExceptionmethod: public final void java.lang.Object.wait() throws java.lang.InterruptedExceptionmethod: public boolean java.lang.Object.equals(java.lang.Object)method: public java.lang.String java.lang.Object.toString()method: public native int java.lang.Object.hashCode()method: public final native java.lang.Class java.lang.Object.getClass()method: public final native void java.lang.Object.notify()method: public final native void java.lang.Object.notifyAll()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出中我们看到，<code>getMethods</code> 方法不仅获取到了我们声明的公有方法<code>setStudentAge</code>，还获取到了很多 Object 类中的公有方法。这是因为我们前文已说到：Object 是所有 Java 类的父类。所有对象都默认实现了 Object 类的方法。 而<code>getDeclaredMethods</code>是无法获取到父类中的方法的。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>学以致用，让我们来一个实际的应用感受一下。还是以 Student 类为例，如果此类在其他的包中，并且我们的需求是要在程序中通过反射获取他的构造方法，构造出 Student 对象，并且通过反射访问他的私有字段和私有方法。那么我们可以这样做：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span>Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.获取声明的构造方法，传入所需参数的类名，如果有多个参数，用','连接即可</span>Constructor studentConstructor <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的构造方法，需要调用下面这一行代码使其可使用，公有的构造方法则不需要下面这一行代码</span>studentConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用构造方法的newInstance方法创建对象，传入构造方法所需参数，如果有多个参数，用','连接即可</span>Object student <span class="token operator">=</span> studentConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"NameA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.获取声明的字段，传入字段名</span>Field studentAgeField <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"studentAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的字段，需要调用下面这一行代码使其可使用，公有的字段则不需要下面这一行代码</span><span class="token comment" spellcheck="true">// studentAgeField.setAccessible(true);</span><span class="token comment" spellcheck="true">// 使用字段的set方法设置字段值，传入此对象以及参数值</span>studentAgeField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.获取声明的函数，传入所需参数的类名，如果有多个参数，用','连接即可</span>Method studentShowMethod <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的函数，需要调用下面这一行代码使其可使用，公有的函数则不需要下面这一行代码</span>studentShowMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用函数的invoke方法调用此函数，传入此对象以及函数所需参数，如果有多个参数，用','连接即可。函数会返回一个Object对象，使用强制类型转换转成实际类型即可</span>Object result <span class="token operator">=</span> studentShowMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的逻辑注释已经写得很清晰了，我们再梳理一下：</p><ol><li>先用第一种全路径获取 Class 的方法获取到了 Student 的 Class 对象</li><li>然后反射调用它的私有构造方法 <code>private Student(String studentName)</code>，构建出 newInstance</li><li>再将其公有字段 studentAge 设置为 10</li><li>最后反射调用其私有方法 <code>show</code>，传入参数 “message”，并打印出这个方法的返回值。</li></ol><p>其中，<code>setAccessible</code> 函数用于动态获取访问权限，Constructor、Field、Method 都提供了此方法，让我们得以访问类中的私有成员。</p><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">show: NameA,10,messageresult: testReturnValue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构型模式</title>
      <link href="2021/02/01/java/design-pattern-structure-pattern/"/>
      <url>2021/02/01/java/design-pattern-structure-pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="7-种结构型模式"><a href="#7-种结构型模式" class="headerlink" title="7 种结构型模式"></a>7 种结构型模式</h2><p><strong>结构型模式是用来设计程序的结构的</strong>。结构型模式就像搭积木，将不同的类结合在一起形成契合的结构。包括以下几种：</p><ul><li>适配器模式</li><li>桥接模式</li><li>组合模式</li><li>装饰模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><p>转载：<a href="https://www.zhihu.com/question/308850392/answer/1324509357" target="_blank" rel="noopener">https://www.zhihu.com/question/308850392/answer/1324509357</a></p><h2 id="一、适配器模式"><a href="#一、适配器模式" class="headerlink" title="一、适配器模式"></a>一、适配器模式</h2><p>适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p><p>适配的意思是适应、匹配。通俗地讲，适配器模式适用于 <strong>有相关性但不兼容的结构</strong>，源接口通过一个中间件转换后才可以适用于目标接口，这个转换过程就是适配，这个中间件就称之为适配器。</p><p>比如电源适配器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">int</span> homeVolt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 适配过程：使用电阻、电容等器件将其降低为输出 5V</span>        <span class="token keyword">int</span> chargeVolt <span class="token operator">=</span> homeVolt <span class="token operator">-</span> <span class="token number">215</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chargeVolt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但适配器模式<strong>并不推荐多用</strong>。因为未雨绸缪好过亡羊补牢，如果事先能预防接口不同的问题，不匹配问题就不会发生，只有遇到源接口无法改变时，才应该考虑使用适配器。</p><h2 id="二、桥接模式"><a href="#二、桥接模式" class="headerlink" title="二、桥接模式"></a>二、桥接模式</h2><p>桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体模式或<strong>接口模式</strong>。</p><p>考虑这样一个需求：绘制矩形、圆形、三角形这三种图案。按照面向对象的理念，我们至少需要三个具体类，对应三种不同的图形。</p><p>接下来我们有了新的需求，每种形状都需要有四种不同的颜色：红、蓝、黄、绿。</p><p>这时我们很容易想到两种设计方案：</p><ol><li><p>为了复用形状类，将每种形状定义为父类，每种不同颜色的图形继承自其形状父类。此时一共有 12 个类。</p></li><li><p>为了复用颜色类，将每种颜色定义为父类，每种不同颜色的图形继承自其颜色父类。此时一共有 12 个类。</p></li></ol><p>乍一看没什么问题，我们使用了面向对象的继承特性，复用了父类的代码并扩展了新的功能。</p><p>但仔细想一想，不同的排列组合将会使工作量变得无比的庞大。</p><p>说到这里，不得不提一个设计原则：合成 / 聚合复用原则。虽然它没有被划分到六大设计原则中，但它在面向对象的设计中也非常的重要。</p><blockquote><p>合成 / 聚合复用原则：优先使用合成 / 聚合，而不是类继承。</p></blockquote><p>继承虽然是面向对象的三大特性之一，但<strong>继承会导致子类与父类有非常紧密的依赖关系，它会限制子类的灵活性和子类的复用性</strong>。而使用合成 / 聚合，也就是使用接口实现的方式，就不存在依赖问题，一个类可以实现多个接口，可以很方便地拓展功能。</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p>新建接口类 IColor，仅包含一个获取颜色的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每种颜色都实现此接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Red</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"红"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blue</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"蓝"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Yellow</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"黄"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Green</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"绿"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>每个形状类中，桥接 IColor 接口</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">IShape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IColor color<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>IColor color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制"</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"矩形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Round</span> <span class="token keyword">implements</span> <span class="token class-name">IShape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IColor color<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>IColor color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制"</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"圆形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">implements</span> <span class="token class-name">IShape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IColor color<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>IColor color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制"</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来回顾一下官方定义：将抽象部分与它的实现部分分离，使它们都可以独立地变化。抽象部分指的是父类，对应本例中的形状类，实现部分指的是不同子类的区别之处。将子类的区别方式 —— 也就是本例中的颜色 —— 分离成接口，通过组合的方式桥接颜色和形状，这就是桥接模式，它主要用于 <strong>两个或多个同等级的接口</strong>。</p><h2 id="三、组合模式"><a href="#三、组合模式" class="headerlink" title="三、组合模式"></a>三、组合模式</h2><p>上文说到，桥接模式用于将同等级的接口互相组合，那么组合模式和桥接模式有什么共同点吗？</p><p>事实上组合模式和桥接模式的组合完全不一样。组合模式用于 <strong>整体与部分的结构</strong>，当整体与部分有相似的结构，在操作时可以被一致对待时，就可以使用组合模式。例如：</p><ol><li><p>文件夹和子文件夹的关系：文件夹中可以存放文件，也可以新建文件夹，子文件夹也一样。</p></li><li><p>总公司子公司的关系：总公司可以设立部门，也可以设立分公司，子公司也一样。</p></li><li><p>树枝和分树枝的关系：树枝可以长出叶子，也可以长出树枝，分树枝也一样。</p></li></ol><p>在这些关系中，虽然整体包含了部分，但无论整体或部分，<strong>都具有一致的行为</strong>。</p><p>组合模式：又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>考虑这样一个实际应用：设计一个公司的人员分布结构，结构如下图所示。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-composite-pattern.png" alt></p><p>我们注意到人员结构中有两种结构，一是管理者，如老板，PM，CFO，CTO，二是职员。其中有的管理者不仅仅要管理职员，还会管理其他的管理者。这就是一个典型的整体与部分的结构。</p><h3 id="一般的思路"><a href="#一般的思路" class="headerlink" title="一般的思路"></a>一般的思路</h3><p>新建管理者类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">private</span> String position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工作内容</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 管理的管理者</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Manager<span class="token operator">></span> managers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 管理的职员</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addManager</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        managers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeManager</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        managers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEmployee</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEmployee</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        employees<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 做自己的本职工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token string">"，我正在"</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查下属</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee employee <span class="token operator">:</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>            employee<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Manager manager <span class="token operator">:</span> managers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            manager<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建职员类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">private</span> String position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工作内容</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 做自己的本职工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token string">"，我正在"</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就设计出了公司的结构，但是这样的设计有两个弊端：</p><ol><li><p>name 字段，job 字段，work 方法重复了。</p></li><li><p>管理者对其管理的管理者和职员需要区别对待。</p></li></ol><p>关于第一个弊端，虽然这里为了讲解，只有两个字段和一个方法重复，实际工作中这样的整体部分结构会有相当多的重复。比如此例中还可能有工号、年龄等字段，领取工资、上下班打卡、开各种无聊的会等方法。</p><p>大量的重复显然是很丑陋的代码，分析一下可以发现， Manager 类只比 Employee 类多一个管理人员的列表字段，多几个增加 / 移除人员的方法，其他的字段和方法全都是一样的。</p><p>有读者应该会想到：我们可以将重复的字段和方法提取到一个工具类中，让 Employee 和 Manager 都去调用此工具类，就可以消除重复了。</p><p>这样固然可行，但属于 Employee 和 Manager 类自己的东西却要通过其他类调用，并不利于程序的高内聚。</p><p>关于第二个弊端，此方案无法解决，此方案中 Employee 和 Manager 类完全是两个不同的对象，两者的相似性被忽略了。</p><p>所以我们有更好的设计方案，那就是组合模式！</p><h3 id="使用组合模式的设计方案"><a href="#使用组合模式的设计方案" class="headerlink" title="使用组合模式的设计方案"></a>使用组合模式的设计方案</h3><p>组合模式最主要的功能就是让用户可以一致对待整体和部分结构，将两者都作为一个相同的组件，所以我们先新建一个抽象的组件类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">private</span> String position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工作内容</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Component</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 做自己的本职工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token string">"，我正在"</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">removeComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>管理者继承自此抽象类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 管理的组件</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Component<span class="token operator">></span> components <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        components<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">removeComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        components<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查下属</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Component component <span class="token operator">:</span> components<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>职员同样继承自此抽象类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"职员没有管理权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">removeComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"职员没有管理权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用组合模式后，我们解决了之前的两个弊端。一是将共有的字段与方法移到了父类中，消除了重复，并且在客户端中，可以一致对待 Manager 和 Employee 类：</p><ul><li>Manager 类和 Employee 类统一声明为 Component 对象</li><li>统一调用 Component 对象的 addComponent 方法添加子对象即可。</li></ul><h2 id="四、装饰模式"><a href="#四、装饰模式" class="headerlink" title="四、装饰模式"></a>四、装饰模式</h2><p>装饰品并不会改变物品本身，只是起到一个锦上添花的作用。装饰模式也一样，它的主要作用就是：</p><ol><li><p><strong>增强一个类原有的功能</strong></p></li><li><p><strong>为一个类添加新的功能</strong></p></li></ol><p>并且 <strong>装饰模式也不会改变原有的类</strong>。</p><p>装饰模式：动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。</p><p>其别名也可以称为包装器，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”。</p><h3 id="用于增强功能的装饰模式"><a href="#用于增强功能的装饰模式" class="headerlink" title="用于增强功能的装饰模式"></a>用于增强功能的装饰模式</h3><p>我们用程序来模拟一下戴上装饰品提高我们颜值的过程：</p><p>新建颜值接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBeauty</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建 Me 类，实现颜值接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Me</span> <span class="token keyword">implements</span> <span class="token class-name">IBeauty</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>戒指装饰类，将 Me 包装起来：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RingDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">IBeauty</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IBeauty me<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RingDecorator</span><span class="token punctuation">(</span>IBeauty me<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>me <span class="token operator">=</span> me<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> me<span class="token punctuation">.</span><span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，装饰器也实现了 IBeauty 接口，并且没有添加新的方法，也就是说这里的装饰器<strong>仅用于增强功能</strong>，<strong>并不会改变 Me 原有的功能</strong>，这种装饰模式称之为 <strong>透明装饰模式</strong>，由于没有改变接口，也没有新增方法，所以<strong>透明装饰模式可以无限装饰</strong>。</p><p>装饰模式是 <strong>继承</strong> 的一种替代方案。本例如果不使用装饰模式，而是改用继承实现的话，戴着戒指的 Me 需要派生一个子类、戴着项链的 Me 需要派生一个子类、戴着耳环的 Me 需要派生一个子类、戴着戒指 + 项链的需要派生一个子类……各种各样的排列组合会造成类爆炸。而采用了装饰模式就只需要为每个装饰品生成一个装饰类即可，所以说就 <strong>增加对象功能</strong> 来说，<strong>装饰模式比生成子类实现更为灵活</strong>。</p><h3 id="用于添加功能的装饰模式"><a href="#用于添加功能的装饰模式" class="headerlink" title="用于添加功能的装饰模式"></a>用于添加功能的装饰模式</h3><p>我们用程序来模拟一下房屋装饰粘钩后，新增了挂东西功能的过程：</p><p>新建房屋接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHouse</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>房屋类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token keyword">implements</span> <span class="token class-name">IHouse</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房屋原有的功能：居住功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建粘钩装饰器接口，继承自房屋接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStickyHookHouse</span> <span class="token keyword">extends</span> <span class="token class-name">IHouse</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">hangThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>粘钩装饰类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StickyHookDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">IStickyHookHouse</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IHouse house<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StickyHookDecorator</span><span class="token punctuation">(</span>IHouse house<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>house <span class="token operator">=</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hangThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有了粘钩后，新增了挂东西功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是用于 <strong>新增功能</strong> 的装饰模式。我们在接口中新增了方法：hangThings，然后在装饰器中将 House 类包装起来，之前 House 中的方法仍然调用 house 去执行，也就是说我们并没有修改原有的功能，只是扩展了新的功能，这种模式在装饰模式中称之为 <strong>半透明装饰模式</strong>。</p><p>为什么叫半透明呢？由于新的接口 IStickyHookHouse 拥有之前 IHouse 不具有的方法，所以我们如果要使用装饰器中添加的功能，就不得不区别对待 <strong>装饰前的对象和装饰后的对象</strong>。也就是说客户端要使用新方法，必须知道具体的装饰类 StickyHookDecorator，所以这个装饰类对客户端来说是可见的、不透明的。而被装饰者不一定要是 House，它可以是实现了 IHouse 接口的任意对象，所以被装饰者对客户端是不可见的、透明的。由于一半透明，一半不透明，所以称之为半透明装饰模式。</p><h3 id="I-O-中的装饰模式"><a href="#I-O-中的装饰模式" class="headerlink" title="I/O 中的装饰模式"></a>I/O 中的装饰模式</h3><p>Java 7 中引入了try（resource）语法糖，IO 的代码就可以简化如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察获取 InputStream 这句代码：</p><pre class="line-numbers language-java"><code class="language-java">InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是不是和我们之前多次装饰的代码非常相似：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 多次装饰</span>IBeauty meWithManyDecorators <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NecklaceDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RingDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EarringDecorator</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>事实上，查看 I/O 的源码可知，Java I/O 的设计框架便是使用的 <strong>装饰者模式</strong>，InputStream 的继承关系如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-decorator.png" alt></p><p>其中，InputStream 是一个抽象类，对应上文例子中的 IHouse，其中最重要的方法是 read 方法，这是一个抽象方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法会读取输入流的下一个字节，并返回字节表示的 int 值（0~255），返回 -1 表示已读到末尾。由于它是抽象方法，所以具体的逻辑交由子类实现。</p><p>上图中，左边的三个类 FileInputStream、ByteArrayInputStream、ServletInputStream 是 InputStream 的三个子类，对应上文例子中实现了 IHouse 接口的 House。</p><p>右下角的三个类 BufferedInputStream、DataInputStream、CheckedInputStream 是三个具体的装饰者类，他们都为 InputStream 增强了原有功能或添加了新功能。</p><p>FilterInputStream 是<strong>所有装饰类的父类</strong>，它<strong>没有实现具体的功能</strong>，仅用来<strong>包装</strong>了一下 InputStream：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">InputStream</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> InputStream in<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">FilterInputStream</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们以 BufferedInputStream 为例。原有的 InputStream 读取文件时，是一个字节一个字节读取的，这种方式的执行效率并不高，所以我们可以设立一个缓冲区，先将内容读取到缓冲区中，缓冲区读满后，将内容从缓冲区中取出来，这样就变成了一段一段读取，用内存换取效率。BufferedInputStream 就是用来做这个的。它继承自 FilterInputStream：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BufferedInputStream</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> DEFAULT_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BufferedInputStream</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先来看它的构造方法，在构造方法中，新建了一个 byte[] 作为缓冲区，从源码中我们看到，Java 默认设置的缓冲区大小为 8192 byte，也就是 8 KB。</p><p>然后我们来查看 read 方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> count<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 往缓冲区内填充读取内容的过程</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 read 方法中，调用了 fill 方法，fill 方法的作用就是往缓冲区中填充读取的内容。这样就实现了增强原有的功能。</p><p>在源码中我们发现，BufferedInputStream 没有添加 InputStream 中没有的方法，所以 BufferedInputStream 使用的是 <strong>透明的装饰模式</strong>。</p><p>DataInputStream 用于更加方便地读取 int、double 等内容，观察 DataInputStream 的源码可以发现，DataInputStream 中新增了 readInt、readLong 等方法，所以 DataInputStream 使用的是 <strong>半透明装饰模式</strong>。</p><p>这就是装饰模式，注意不要和适配器模式混淆了。两者在使用时都是包装一个类，但两者的区别其实也很明显：</p><ol><li><p>纯粹的适配器模式 <strong>仅用于改变接口</strong>，不改变其功能，部分情况下我们需要改变一点功能以适配新接口。但使用适配器模式时，接口一定会有一个 <strong>回炉重造</strong> 的过程。</p></li><li><p>装饰模式 <strong>不改变原有的接口</strong>，仅用于增强原有功能或添加新功能，强调的是 <strong>锦上添花</strong>。</p></li></ol><p>掌握了装饰者模式之后，理解 Java I/O 的框架设计就非常容易了。但对于不理解装饰模式的人来说，各种各样相似的 InputStream 非常容易让开发者感到困惑。这一点正是装饰模式的缺点：<strong>容易造成程序中有大量相似的类</strong>。虽然这更像是开发者的缺点，我们应该做的是提高自己的技术，掌握了这个设计模式之后它就是我们的一把利器。现在我们再看到 I/O 不同的 InputStream 装饰类，只需要关注它增强了什么功能或添加了什么功能即可。</p><h2 id="五、外观模式"><a href="#五、外观模式" class="headerlink" title="五、外观模式"></a>五、外观模式</h2><p><strong>外观模式</strong>：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为<strong>门面模式</strong>。</p><p>外观模式非常简单，体现的就是 Java 中封装的思想。将多个子系统封装起来，提供一个更简洁的接口供外部调用。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-facade.png" alt></p><p>由于我们每天都要做这几件事，所以我们可以使用<strong>外观模式</strong>，将这几个子系统封装起来，提供更简洁的接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Browser<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IDE<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Wechat<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IDE<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Wechat<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它使得两种不同的类不用直接交互，而是通过一个中间件——也就是外观类——间接交互。外观类中只需要暴露简洁的接口，隐藏内部的细节，所以说白了就是封装的思想。</p><p>外观模式非常常用，（当然了！写代码哪有不封装的！）尤其是在第三方库的设计中，我们应该提供尽量简洁的接口供别人调用。另外，在 MVC 架构中，C 层（Controller）就可以看作是外观类，Model 和 View 层通过 Controller 交互，减少了耦合。</p><h2 id="六、享元模式"><a href="#六、享元模式" class="headerlink" title="六、享元模式"></a>六、享元模式</h2><p>享元模式体现的是 <strong>程序可复用</strong> 的特点，为了节约宝贵的内存，程序应该尽可能地复用，简单来说 <strong>享元模式就是共享对象</strong>。</p><p><strong>享元模式</strong>：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式。</p><p>有个细节值得注意：有些对象本身不一样，但通过一点点变化后就可以复用，我们编程时可能稍不注意就会忘记复用这些对象。</p><h2 id="七、代理模式"><a href="#七、代理模式" class="headerlink" title="七、代理模式"></a>七、代理模式</h2><p>代理（Proxy）提供了对目标对象另外的访问方式；即通过代理对象访问目标对象.这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。<br>这里使用到编程中的一个思想：不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-proxy.png" alt></p><p>举个例子来说明代理的作用：假设我们想邀请一位明星,那么并不是直接连接明星,而是联系明星的经纪人,来达到同样的目的.明星就是一个目标对象,他只要负责活动中的节目,而其他琐碎的事情就交给他的代理人（经纪人）来解决</p><p>代理模式的关键点是：<strong>代理对象与目标对象</strong>。<strong>代理对象是对目标对象的扩展，并会调用目标对象</strong>。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类.</p><p>在实际工作中，我们可能会遇到这样的需求：在网络请求前后，分别打印将要发送的数据和接收到数据作为日志信息。此时我们就可以新建一个网络请求的代理类，让它代为处理网络请求，并在代理类中打印这些日志信息。</p><p>新建网络请求接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 Http 请求工具类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpUtil</span> <span class="token keyword">implements</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网络请求中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网络请求完成。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 Http 代理类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HttpUtil httpUtil<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HttpProxy</span><span class="token punctuation">(</span>HttpUtil httpUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpUtil <span class="token operator">=</span> httpUtil<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpUtil<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpUtil<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们在 HttpProxy 中<strong>新增打印日志信息</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HttpUtil httpUtil<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HttpProxy</span><span class="token punctuation">(</span>HttpUtil httpUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpUtil <span class="token operator">=</span> httpUtil<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送数据:"</span> <span class="token operator">+</span> sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpUtil<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到数据:"</span> <span class="token operator">+</span> receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpUtil<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端验证：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpUtil httpUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpProxy</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"request data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token string">"received result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre><code>发送数据:request data网络请求中...收到数据:received result网络请求完成。</code></pre><p>这就是代理模式的一个应用，除了 <strong>打印日志</strong>，它还可以用来做<strong>权限管理</strong>。代理类看起来和装饰模式的 FilterInputStream 一模一样，但两者的目的不同，装饰模式是为了 <strong>增强功能或添加功能</strong>，代理模式主要是为了<strong>加以控制</strong>。</p><p><strong>静态代理总结:</strong></p><ol><li>可以做到在不修改目标对象的功能前提下,对目标功能扩展</li><li><strong>缺点</strong>：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多。同时,一旦接口增加方法,目标对象与代理对象都要维护</li></ol><p>如何解决静态代理中的缺点呢?答案是可以使用动态代理方式</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p><strong>动态代理有以下特点:</strong></p><ol><li>代理对象,<strong>不需要实现接口</strong></li><li>代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象（需要我们指定创建代理对象/目标对象实现的接口的类型）</li><li>动态代理也叫做:JDK代理,接口代理</li></ol><p><strong>JDK中生成代理对象的API</strong></p><p>代理类所在包:java.lang.reflect.Proxy</p><p>JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>InvocationHandler h <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:</p><ol><li><strong>ClassLoader loader</strong>：指定当前目标对象使用类加载器,即<strong>被代理的类的 ClassLoader</strong>，获取加载器的方法是固定的。</li><li><strong>Class&lt;?&gt;[ ] interfaces</strong>：目标对象实现的接口的类型，即被代理类的 Interfaces，1和2中两个参数都是 目标对象 中的，每个类都有，固定写法。</li><li><strong>InvocationHandler h</strong>：实现<strong>调用被代理类的任意方法时</strong>，<strong>都通过一个方法间接调用</strong>。会把当前执行目标对象的方法作为参数传入</li></ol><p>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建动态代理对象 * 动态代理不需要实现接口,但是需要指定接口类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HttpUtil httpUtil<span class="token punctuation">;</span>    <span class="token keyword">public</span> IHttp <span class="token function">getInstance</span><span class="token punctuation">(</span>HttpUtil httpUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 维护一个目标对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpUtil <span class="token operator">=</span> httpUtil<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给目标对象生成代理对象</span>        <span class="token comment" spellcheck="true">// newProxyInstance(ClassLoader loader, Class&lt;?>[] interfaces,InvocationHandler h)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>IHttp<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> httpUtil<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// InvocationHandler()中的invoke方法</span>    <span class="token comment" spellcheck="true">// 调用 httpUtil 的任意方法时，都要通过这个方法调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果方法名是 request，打印日志，并调用 request 方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送数据:"</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 反射调用函数</span>            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"onSuccess"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果方法名是 onSuccess，打印日志，并调用 onSuccess 方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到数据:"</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 反射调用函数</span>            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改客户端验证一下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpUtil httpUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IHttp proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"request data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token string">"received result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果跟之前一样的就不贴了。</p><p><strong>总结:</strong><br><strong>代理对象不需要实现接口,但是目标对象一定要实现接口,因为代理对象要拿到目标对象的类加载器和接口类型</strong>！否则不能用动态代理。</p><h3 id="Cglib代理（Code-Generation-Library）"><a href="#Cglib代理（Code-Generation-Library）" class="headerlink" title="Cglib代理（Code Generation Library）"></a>Cglib代理（Code Generation Library）</h3><p>上面的静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以使用<strong>以目标对象子类的方式类实现代理</strong>,这种方法就叫做：Cglib代理</p><p>Cglib代理,也叫作<strong>子类代理</strong>,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展</p><ol><li>JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现</li><li>Cglib是一个强大的高性能的代码生成包,它可以<strong>在运行期扩展java类与实现java接口</strong>。它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception（拦截）</li><li>Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类。不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉</li></ol><p>Cglib子类代理实现方法:</p><ol><li>需要引入cglib的jar文件,但是Spring的核心包中已经包括了Cglib功能,所以直接引入<code>pring-core-3.2.5.jar</code>即可</li><li>引入功能包后,就可以在内存中动态构建子类</li><li>代理的类不能为final,否则报错</li><li>目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法</li></ol><p>代码示例:<br>目标对象类:UserDao.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 目标对象,没有实现任何接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----已经保存数据!----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cglib代理工厂:ProxyFactory.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Cglib子类代理工厂 * 对UserDao在内存中动态构建一个子类对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//维护目标对象</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//给目标对象创建一个代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.工具类</span>        Enhancer en <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.设置父类</span>        en<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.设置回调函数</span>        en<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建子类(代理对象)，以目标对象子类的方式类实现代理</span>        <span class="token keyword">return</span> en<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行目标对象的方法</span>        Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Spring的AOP编程中：如果加入容器的目标对象<strong>有实现接口</strong>,用JDK代理，如果目标对象<strong>没有实现接口</strong>,用Cglib代理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autowired注入的细节和Resource的功能对比</title>
      <link href="2021/01/23/java/autowired-resource/"/>
      <url>2021/01/23/java/autowired-resource/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>@Autowired和@Resource都可以用于来实现依赖注入，但前者是Spring提供的，后者为JDK（JSR-250标准）自带的。阿里Java开发规范中推荐使用@Resource。但大多数人往往并没有留意为何如此，甚至代码中的提示信息可能都没留意去看。</p><p>本文就带大家彻底了解一下这两个注解的功能、运用场景及区别。</p><p>参考整理于：<a href="https://zhuanlan.zhihu.com/p/337498135" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/337498135</a></p><h2 id="IDE的提示"><a href="#IDE的提示" class="headerlink" title="IDE的提示"></a>IDE的提示</h2><p>如果在项目中使用@Autowired进行注入，如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InjectController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ConnectService connectService<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会有这样的提示信息：</p><pre class="line-numbers language-java"><code class="language-java">Field injection is not recommended Inspection info<span class="token operator">:</span> Spring Team recommends<span class="token operator">:</span> <span class="token string">"Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>翻译过来就是：<strong>字段注入是不推荐的</strong>，Spring团队建议：“始终在bean中使用基于构造函数的依赖项注入。始终对强制性依赖项使用断言”。</p><p>根据提示，我们来重新写一种注入方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InjectController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ConnectService connectService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConnectService</span><span class="token punctuation">(</span>ConnectService connectService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>connectService <span class="token operator">=</span> connectService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面将@Autowired的注解使用在了setter方法上，此时提示消失了。再看另外一种注入方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InjectController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ConnectService connectService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">InjectController</span><span class="token punctuation">(</span>ConnectService connectService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>connectService <span class="token operator">=</span> connectService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此种方式<strong>将@Autowired的注解使用在了构造方法上</strong>，与Spring团队的建议一致。此时，也不会再出现警告信息。</p><p>也就是说IDE提示的信息并不是说不建议大家使用@Autowired注解，而且不要直接使用在字段（Field）上。</p><h2 id="Spring注入的方式及场景"><a href="#Spring注入的方式及场景" class="headerlink" title="Spring注入的方式及场景"></a>Spring注入的方式及场景</h2><p>Spring常见的DI方式：<strong>构造器注入、Setter注入、字段注入</strong>。显然，我们经常使用的方式并不是官方最推荐的。</p><p>而上面三种注入方式所适用的场景也是有所区别的：</p><ol><li><p>构造器注入适用具有强依赖和不变性的依赖；</p></li><li><p>Setter注入适用于具有可选性和可变性的依赖注入；</p></li><li><p>Field注入，尽量少使用，如果需要则使用@Resource进行替代，以降低耦合性。</p></li></ol><h2 id="Field注入的缺点"><a href="#Field注入的缺点" class="headerlink" title="Field注入的缺点"></a>Field注入的缺点</h2><p>Field注入的缺点很明显，比如不能像构造器注入那样注入不可变的对象，依赖对外部不可见（构造器和Setter可见，而private的属性不可见），会导致组件与IoC容器（比如Spring）紧密耦合，单元测试也需要使用IoC容器，依赖过多时相对构造器注入不能够明显的看出依赖过多（违反单一职责原则）。</p><p>既然Field注入这么多缺点，但为什么大家还是习惯使用呢？主要原因：太方便了，极大的缩减了代码。而且大多数业务并不需要用构造器强绑定，同时换IoC容器的可能性也极低。所以，虽然官方及IDE一直强调和提醒，但貌似并没有阻止程序员的使用。</p><h2 id="为什么只对-Autowired警告"><a href="#为什么只对-Autowired警告" class="headerlink" title="为什么只对@Autowired警告"></a>为什么只对@Autowired警告</h2><p>最主要的原因是：<strong>@Autowired是Spring提供的</strong>，是特定IoC提供的特定注解，与框架形成了强绑定，一旦换用其他IoC框架，是无法支持注入的。而@Resource是JSR-250提供的，IoC容器应当去兼容它，即使更换容器，也可以正常工作。</p><p>另外可能还跟这两种注解的工作机制有关。默认情况下@Autowired是以类型（ByType）进行匹配的，@Resource是以名字（ByName）进行匹配的。也就是说当容器中存在两个相同类型的Bean时，使用@Autowired注入会报错，而使用@Resource会更精准。当然@Autowired也可以指定名称（还需配合@Qualifier注解）。</p><h2 id="Autowired和-Resource区别"><a href="#Autowired和-Resource区别" class="headerlink" title="@Autowired和@Resource区别"></a>@Autowired和@Resource区别</h2><p>（1）处理这2个注解的BeanPostProcessor不一样</p><p>CommonAnnotationBeanPostProcessor是处理@Resource注解的</p><p>AutoWiredAnnotationBeanPostProcessor是处理@Autowired注解的</p><p>（2）@Autowired只按照byType 注入；@Resource默认按byName自动注入，也提供按照byType 注入；</p><p>（3）属性：@Autowired按类型装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它required属性为false。</p><p>如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。</p><p>@Resource有两个中重要的属性：name和type。name属性指定byName，如果没有指定name属性，当注解标注在字段上，即默认取字段的名称作为bean名称寻找依赖对象，当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象。需要注意的是，@Resource如果没有指定name属性，并且按照默认的名称仍然找不到依赖对象时， @Resource注解会回退到按类型装配。但一旦指定了name属性，就只能按名称装配了。</p><p>@Resource装配顺序</p><p>　　1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常</p><p>　　2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常</p><p>　　3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常</p><p>　　4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>推荐使用@Resource注解在字段上，这样就不用写setter方法了.并且这个注解是属于J2EE的，减少了与Spring的耦合,这样代码看起就比较优雅 。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud的gateway网关配置</title>
      <link href="2021/01/22/project/cloud-gateway/"/>
      <url>2021/01/22/project/cloud-gateway/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网关作用"><a href="#一、网关作用" class="headerlink" title="一、网关作用"></a>一、网关作用</h2><p>​    1. 统一服务的对外入口，鉴权，跨域，日志；</p><p>​    2. 统一过滤与拦截；</p><p>​    3. 动态路由；</p><p>​    4. 限流熔断。</p><h2 id="二、网关原理"><a href="#二、网关原理" class="headerlink" title="二、网关原理"></a>二、网关原理</h2><ol><li>网关的核心概念<ul><li>Route：网关的基础元素，由 ID、目标 URI、断言、过滤器组成。</li><li>Predicate：匹配条件。</li><li>Filter：过滤器</li></ul></li></ol><ol start="2"><li><p>网关请求链路</p><p>当网关接受到请求后，会在<strong>Gateway Handler Mapping</strong>中找到与请求相匹配的路径，将请求转发到<strong>Gateway Web Handler</strong>中，Handler在通过路由指定的<strong>Filter过滤器</strong>，判断过滤器的类型，如果是<strong>pre过滤器</strong>，则执行完过滤器在执行代理请求，如果是<strong>post过滤器</strong>，则先执行代理请求在执行过滤器。</p></li></ol><h2 id="三、网关接入"><a href="#三、网关接入" class="headerlink" title="三、网关接入"></a>三、网关接入</h2><h3 id="pom-xml加入依赖"><a href="#pom-xml加入依赖" class="headerlink" title="pom.xml加入依赖"></a>pom.xml加入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- spring cloud gateway 网关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring cloud alibaba sentinel 网关整合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-sentinel-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个要注意的点是gateway是依赖spring-boot-starter-webflux实现的，与spring-boot-starter-web会有冲突。所以在网关项目中不要引用spring-boot-starter-web，或者排除它。</p><p>全部pom配置：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.wisefly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>business-wcenter-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入配置中心阿里巴巴--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入注册中心阿里巴巴--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--sentinel 熔断--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- sentinel nacos 数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring cloud gateway 网关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring cloud alibaba sentinel 网关整合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-sentinel-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring boot actuator--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--SpringBoot 监控客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--验证码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.penggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Swagger --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger.fox.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger.fox.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringCloud Zipkin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--kafka --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-stream-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- kafka client--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 指定项目编译时的java版本和编码方式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>build-info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--新增的docker maven插件--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${docker-maven-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--docker镜像相关的配置信息--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--镜像名，要带上私有服务器IP和端口--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">></span></span>${docker-registryUrl}/${project.artifactId}:${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--TAG,这里用工程版本号--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTags</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTag</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTag</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTag</span><span class="token punctuation">></span></span>latest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTag</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTags</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--Dockerfile文件地址--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerDirectory</span><span class="token punctuation">></span></span>${project.basedir}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerDirectory</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--构建镜像的配置信息--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>                            <span class="token comment" spellcheck="true">&lt;!--指定复制jar包的根目录--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                            <span class="token comment" spellcheck="true">&lt;!--指定复制的文件--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--指定推送的仓库--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>registryUrl</span><span class="token punctuation">></span></span>${docker-registryUrl}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>registryUrl</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 开启远程API --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerHost</span><span class="token punctuation">></span></span>${docker-dockerHost}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerHost</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 是否有push功能 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pushImage</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pushImage</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--push后是否覆盖存在的标签镜像--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件加入"><a href="#配置文件加入" class="headerlink" title="配置文件加入"></a>配置文件加入</h3><pre class="line-numbers language-yaml"><code class="language-yaml">           <span class="token key atrule">Spring</span><span class="token punctuation">:</span>               <span class="token key atrule">cloud</span><span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># 路由网关配置</span>                    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># 设置与服务注册发现组件结合，这样可以采用服务名的路由策略</span>                        <span class="token key atrule">discovery</span><span class="token punctuation">:</span>                           <span class="token key atrule">locator</span><span class="token punctuation">:</span>                              <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                              <span class="token comment" spellcheck="true"># 配置之后访问时无需大写</span>                              <span class="token key atrule">lower-case-service-id</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                        <span class="token comment" spellcheck="true">#路由配置</span>                         <span class="token key atrule">routes</span><span class="token punctuation">:</span>                             <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>route                                <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//wisefly<span class="token punctuation">-</span>file                                <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                                   <span class="token punctuation">-</span> Path=/file/v1.0/**                        <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>                            <span class="token punctuation">-</span> StripPrefix=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nacos上的全部配置：</p><details>  <summary>展开查看</summary>  <pre><code> spring:  cloud:    # 使用 Naoos 作为服务注册发现    nacos:      discovery:        server-addr: 10.0.1.104:8848        namespace: 09dd3d79-92c0-47fe-bd1d-0f1b7f8dc928        metadata:          management:            context-path: ${server.servlet.context-path}/actuator    sentinel:      transport:        port: 8730        dashboard: 10.0.1.104:8080        # 服务启动直接建立心跳连接      eager: true      # Sentinel Nacos 数据源      datasource:        ds:          nacos:            server-addr: 10.0.1.104:8848            groupId: DEFAULT_GROUP            dataId: gateway-sentinel            namespace: 09dd3d79-92c0-47fe-bd1d-0f1b7f8dc928            rule-type: flow    # 路由网关配置    gateway:      # 设置与服务注册发现组件结合，这样可以采用服务名的路由策略      discovery:        locator:          enabled: true          # 配置之后访问时无需大写          lower-case-service-id: true      routes:        - id: file-route          uri: lb://wisefly-file          predicates:            - Path=/file/v1.0/**        - id: workflow-route          uri: lb://wisefly-workflow          predicates:            - Path=/workflow/v1.0/**        - id: wcenter-route          uri: lb://wisefly-wcenter          predicates:            - Path=/wcenter/v1.0/**        - id: resource-route          uri: lb://wisefly-resource          predicates:            - Path=/resource/v1.0/**        - id: inspection-route          uri: lb://wisefly-inspection          predicates:            - Path=/inspection/v1.0/**        - id: criterion-route          uri: lb://wisefly-criterion          predicates:            - Path=/criterion/v1.0/**        - id: hbase-route          uri: lb://wisefly-hbase          predicates:            - Path=/hbase/v1.0/**        - id: turnhospital-route          uri: lb://wisefly-turnhospital          predicates:            - Path=/turnhospital/v1.0/**        - id: cms-route          uri: lb://business-cms          predicates:            - Path=/cms/v1.0/**      default-filters:        - StripPrefix=0    #自定义过滤的地址    filter:      url:        whites:           - /wcenter/v1.0/authentication/login          - /v2/api-docs  # redis 配置  redis:    # 地址    host: 10.0.1.104    # 端口，默认为6379    port: 6379    # 密码    password: 123456    # 连接超时时间    timeout: 10s    lettuce:      pool:        # 连接池中的最小空闲连接        min-idle: 0        # 连接池中的最大空闲连接        max-idle: 8        # 连接池的最大数据库连接数        max-active: 8        # #连接池最大阻塞等待时间（使用负值表示没有限制）        max-wait: -1ms  </code></pre></details><h2 id="四、动态网关实现"><a href="#四、动态网关实现" class="headerlink" title="四、动态网关实现"></a>四、动态网关实现</h2><p>framework2.0动态路由是基础nacos配置中心实现动态路由配置以及存储。具体实现在cn.wisefly.gateway.route包下面，主要有三个要点，大概说下：</p><h3 id="动态路由nacos配置类"><a href="#动态路由nacos配置类" class="headerlink" title="动态路由nacos配置类"></a>动态路由nacos配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>SentinelFallbackHandler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>sc<span class="token punctuation">.</span>SentinelGatewayFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GlobalFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Ordered<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> DEFAULT_TIMEOUT <span class="token operator">=</span> <span class="token number">30000</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.cloud.nacos.config.server-addr}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String address<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.cloud.nacos.config.namespace}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String namespace<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${nacos.gateway.route.config.data-id}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String dataId<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${nacos.gateway.route.config.group}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String groupId<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span>  <span class="token keyword">public</span> SentinelFallbackHandler <span class="token function">sentinelGatewayExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelFallbackHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> GlobalFilter <span class="token function">sentinelGatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelGatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> namespace<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNamespace</span><span class="token punctuation">(</span>String namespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> address<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> dataId<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDataId</span><span class="token punctuation">(</span>String dataId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataId <span class="token operator">=</span> dataId<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> groupId<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGroupId</span><span class="token punctuation">(</span>String groupId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>groupId <span class="token operator">=</span> groupId<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化路由，监听nacos配置变化"><a href="#初始化路由，监听nacos配置变化" class="headerlink" title="初始化路由，监听nacos配置变化"></a>初始化路由，监听nacos配置变化</h3><p>监听是利用了nacos-api提供的ConfigService.addListener来实现的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>nacos<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GatewayConfig<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>service<span class="token punctuation">.</span>DynamicRouteServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>NacosFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>Listener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>NacosException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicRouteServiceImplByNacos</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//定义全局静态MAP</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DynamicRouteServiceImpl dynamicRouteService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> GatewayConfig gatewayConfig<span class="token punctuation">;</span>  <span class="token keyword">private</span> ConfigService configService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"gateway route init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      configService <span class="token operator">=</span> <span class="token function">initConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>configService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"initConfigService fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      String configInfo <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>gatewayConfig<span class="token punctuation">.</span><span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GatewayConfig<span class="token punctuation">.</span>DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取网关当前配置:\r\n{}"</span><span class="token punctuation">,</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">></span> definitionList <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> RouteDefinition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition definition <span class="token operator">:</span> definitionList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update route : {}"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dynamicRouteService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//放入全局MAP中</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>gatewayConfig<span class="token punctuation">.</span><span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> definitionList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"初始化网关路由时发生错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dynamicRouteByNacosListener</span><span class="token punctuation">(</span>gatewayConfig<span class="token punctuation">.</span><span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 监听Nacos下发的动态路由配置   *   * @param dataId   * @param group   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dynamicRouteByNacosListener</span><span class="token punctuation">(</span>String dataId<span class="token punctuation">,</span> String group<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span>String configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进行网关更新:\n\r{}"</span><span class="token punctuation">,</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">></span> definitionList <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> RouteDefinition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition definition <span class="token operator">:</span> definitionList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update route : {}"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dynamicRouteService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//更具dataId获取map里面存在的route</span>          List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">></span> staticRouteMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dataId<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>staticRouteMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//比较与监听到的路由配置是否一致（只比较ID）</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition mapRoute <span class="token operator">:</span> staticRouteMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>              Boolean bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition definition <span class="token operator">:</span> definitionList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果MAP的数据在动态获取的数据中不存在，则表示此次动态删除了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mapRoute<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果为false则主动触发删除操作</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  dynamicRouteService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mapRoute<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//将最新的动态数据放入map</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> definitionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Executor <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"getExecutor\n\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"从nacos接收动态路由配置出错!!!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 初始化网关路由 nacos config   *   * @return   */</span>  <span class="token keyword">private</span> ConfigService <span class="token function">initConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"serverAddr"</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> configService <span class="token operator">=</span> NacosFactory<span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"初始化网关路由时发生错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态更新路由网关"><a href="#动态更新路由网关" class="headerlink" title="动态更新路由网关"></a>动态更新路由网关</h3><p>这里的核心是实现Spring提供的事件推送接口ApplicationEventPublisherAware。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>event<span class="token punctuation">.</span>RefreshRoutesEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteDefinitionWriter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEventPublisher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEventPublisherAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span>Mono<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicRouteServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> RouteDefinitionWriter routeDefinitionWriter<span class="token punctuation">;</span>  <span class="token keyword">private</span> ApplicationEventPublisher publisher<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 增加路由   *   * @param definition   * @return   */</span>  <span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span>RouteDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshRoutesEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 更新路由   *   * @param definition   * @return   */</span>  <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>RouteDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"update fail,not find route routeId: "</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshRoutesEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"update route fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 删除路由   *   * @param id   * @return   */</span>  <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"delete success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"delete fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span>ApplicationEventPublisher applicationEventPublisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>publisher <span class="token operator">=</span> applicationEventPublisher<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、网关路由配置"><a href="#五、网关路由配置" class="headerlink" title="五、网关路由配置"></a>五、网关路由配置</h2><p>网关模块搭建完成后，改动最频繁的就是路由配置了，目前我们的路由配置在配置中心的wisefly-gateway-dev.yaml文件中。配置规则如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml">      <span class="token comment" spellcheck="true">#路由配置</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>route <span class="token comment" spellcheck="true">#路由ID，不能重复</span>           <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//wisefly<span class="token punctuation">-</span>file <span class="token comment" spellcheck="true">#请求转发的路径，一般配置成服务名称即可。</span>           <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#断言</span>               <span class="token punctuation">-</span> Path=/file/v1.0/** <span class="token comment" spellcheck="true">#拦截的请求方法的路径，一般配置与context-path相同，如果不相同的话swagger无法接入网关中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上路由规则配置完成后，访问file模块的请求路径只需要为<code>http://网关ip:网关port/file/v1.0/**</code>就能通过网关转发到业务请求（当然不做以上配置的话也是能通过<code>http://网关ip:网关port/服务名称/context-path/**</code>通过网关转发业务请求）。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> gateway </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty的Pipeline之源码分析</title>
      <link href="2021/01/21/project/netty-pipeline/"/>
      <url>2021/01/21/project/netty-pipeline/</url>
      
        <content type="html"><![CDATA[<h2 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h2><p><strong>架构设计</strong>：</p><p>Channel都<strong>有且仅有一个</strong>ChannelPipeline与之对应，Channel包含了ChannelPipeline，ChannelPipeline内部<strong>包含了N个handler</strong>，每一个handler都是由一个线程去执行；</p><p>ChannelPipeline内部维护了一个由ChannelHandlerContext组成的<strong>双向链表</strong>，<strong>头为HeadContext，尾为TailHandler</strong>（双向链表为自己写的，而<strong>不是使用JDK的</strong>链表，为了轻量级），并且每个ChannelHandlerContext中又关联着一个ChannelHandler，下图提供参考：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/netty-pipeline-1.png" alt></p><h2 id="传播inbound事件"><a href="#传播inbound事件" class="headerlink" title="传播inbound事件"></a>传播inbound事件</h2><p>在业务代码中, 我们自己的handler往往会通过重写channelRead方法来处理对方发来的数据, 那么对方发来的数据是如何走到channelRead方法中了呢？</p><p>在业务代码中, 传递channelRead事件方式是通过fireChannelRead方法进行传播的</p><p><strong>两种写法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写法1:</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写法2</span>    ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里重写了channelRead方法, 并且方法体内继续通过fireChannelRead方法进行传播channelRead事件, 那么这两种写法有什么异同?</p><p>我们先以 <strong>写法2</strong> 为例, 将这种写法进行剖析</p><p>这里首先获取当前context的pipeline对象, 然后通过pipeline对象调用自身的<strong>fireChannelRead方法</strong>进行传播, 因为默认创建的 DefaultChannelpipeline</p><p><strong>我们跟到DefaultChannelpipeline的fireChannelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AbstractChannelHandlerContext<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里首先调用的是AbstractChannelHandlerContext类的静态方法invokeChannelRead, 参数<strong>传入head节点</strong>和事件的消息</p><p><strong>我们跟进invokeChannelRead方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext next<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object m <span class="token operator">=</span> next<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventExecutor executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的Object m 中msg通常就是我们传入的msg, 而next, 目前是head节点, 然后<strong>再判断是否为当前eventLoop线程, 如果不是则将方法包装成task交给eventLoop线程处理</strong></p><p><strong>我们跟到invokeChannelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>ChannelInboundHandler<span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">notifyHandlerException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先通过invokeHandler（）判断当前handler是否已添加, 如果添加, 则执行当前handler的chanelRead方法, 其实这里我们基本上就明白了, 通过fireChannelRead方法传递事件的过程中, 其实就是找到相关handler执行其channelRead方法, 由于我们在<strong>这里的handler就是head节点</strong>, 所以我们跟到HeadContext的channelRead方法中:</p><p><strong>HeadContext的channelRead方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//向下传递channelRead事件</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们看到, 这里通过fireChannelRead方法继续往下传递channelRead事件, 而这种调用方式, 就是我们刚才分析用户代码的第一种调用方式,回头看一开始的channelRead:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写法1:</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写法2</span>    ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里直接通过context对象调用fireChannelRead方法, 那么和使用pipeline调用有什么区别呢</p><p>我们回到HeadContext的channelRead方法, 我们来剖析ctx.fireChannelRead（msg）这句, 大家就会对这个问题有答案了, 跟到ctx的fireChannelRead方法中, 这里会走到AbstractChannelHandlerContext类中的fireChannelRead方法中</p><p><strong>跟到AbstractChannelHandlerContext类中的fireChannelRead方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ChannelHandlerContext <span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们看到, invokeChannelRead方法中传入了一个findContextInbound（）参数, 而这findContextInbound方法<strong>其实就是找到当前Context的下一个节点</strong></p><p><strong>跟到findContextInbound方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    AbstractChannelHandlerContext ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>inbound<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的逻辑也比较简单, 是通过一个doWhile循环, 找到当前handlerContext的下一个节点, 这里要注意循环的终止条件, while （!ctx.inbound）表示下一个context标志的事件不是inbound的事件, 则循环继续往下找, 言外之意就是<strong>要找到下一个标注inbound事件的节点</strong></p><p>有关事件的标注,  如果是用户定义的handler, 是通过handler继承的接口而定的, 如果tail或者head, 那么是在初始化的时候就已经定义好</p><p><strong>回到AbstractChannelHandlerContext类的fireChannelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ChannelHandlerContext <span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>找到下一个节点后, 继续调用invokeChannelRead方法, 传入下一个和消息对象:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext next<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object m <span class="token operator">=</span> next<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一次执行next其实就是head</span>    EventExecutor executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的逻辑我们又不陌生了, 因为我们<strong>传入的是当前context的下一个节点</strong>, 所以这里会调用下一个节点invokeChannelRead方法, 因我们刚才剖析的是head节点, 所以下一个节点有可能是用户添加的handler的包装类HandlerConext的对象</p><p><strong>这里我们跟进invokeChannelRead方法中去:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token punctuation">(</span><span class="token punctuation">(</span>ChannelInboundHandler<span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//发生异常的时候在这里捕获异常</span>            <span class="token function">notifyHandlerException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又是我们熟悉的逻辑, <strong>调用了自身handler的channelRead方法</strong>, <strong>如果是用户自定义的handler, 则会走到用户定义的channelRead（）方法中</strong>去, 所以这里就解释了为什么通过传递channelRead事件, 最终会走到用户重写的channelRead方法中去</p><p>同样, 也解释了最初提到过的两种写法的区别:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写法1:</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写法2</span>    ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>写法1是<strong>通过当前节点往下传播事件</strong></p></li><li><p>写法2是<strong>通过head头节点往下传递事件</strong></p></li></ul><p>所以, 在handler中如果如果要在channelRead方法中传递channelRead事件, 一定要采用写法2的方式向下传递, 或者交给其父类处理, 如果采用1的写法则每次事件传输到这里都会继续从head节点传输, 从而陷入死循环或者发生异常。</p><blockquote><p>这里有一点需要注意, 如果用户代码中channelRead方法, 如果没有显示的调用ctx.fireChannelRead（msg）那么事件则不会再往下传播, 则事件会在这里终止, 所以如果我们写业务代码的时候要考虑有关资源释放的相关操作。</p></blockquote><p>如果ctx.fireChannelRead（msg）则事件会继续往下传播, 如果每一个handler都向下传播事件, 当然, 根据我们之前的分析channelRead事件只会在标识为inbound事件的HandlerConetext中传播, 传播到最后, 则<strong>最终会调用到tail节点的channelRead方法</strong></p><p><strong>我们跟到tailConext的channelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token function">onUnhandledInboundMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们跟进到onUnhandledInboundMessage方法中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onUnhandledInboundMessage</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>                <span class="token string">"Discarded inbound message {} that reached at the tail of the pipeline. "</span> <span class="token operator">+</span>                        <span class="token string">"Please check your pipeline configuration."</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        ReferenceCountUtil<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里做了释放资源的相关的操作</p><p>至此, channelRead事件传输相关罗辑剖析完整, 对于inbound事件的传输流程都会遵循这一逻辑。</p><h2 id="pipeline的addLast方法"><a href="#pipeline的addLast方法" class="headerlink" title="pipeline的addLast方法"></a>pipeline的addLast方法</h2><p>简单来说，pipeline.addLast（）添加handler节点后，回调callHandlerAdded（）方法，最终调用ChannelInitializer的initChannel方法。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/netty-pipeline-addLast1.jpg" alt></p><p>细节部分转载于：<a href="https://blog.csdn.net/qq_16192007/article/details/92752048" target="_blank" rel="noopener">https://blog.csdn.net/qq_16192007/article/details/92752048</a></p><p>跟踪到DefaultChannelPipeline # ChannelPipeline addLast（EventExecutorGroup group, String name, ChannelHandler handler）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">addLast</span><span class="token punctuation">(</span>EventExecutorGroup group<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> AbstractChannelHandlerContext newCtx<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//(1)判断handler是否被重复添加</span>        <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(2)创建一个HandlerContext并添加到列表</span>        newCtx <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">filterName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(3)添加HandlerContext</span>        <span class="token function">addLast0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否已注册</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EventExecutor executor <span class="token operator">=</span> newCtx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//回调用户事件</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//(4)回调添加事件</span>    <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重复添加验证"><a href="#重复添加验证" class="headerlink" title="重复添加验证"></a>重复添加验证</h3><p>我们跟到checkMultiplicity（handler）中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">ChannelHandlerAdapter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChannelHandlerAdapter h <span class="token operator">=</span> <span class="token punctuation">(</span>ChannelHandlerAdapter<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">isSharable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>added<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ChannelPipelineException</span><span class="token punctuation">(</span>                    h<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" is not a @Sharable handler, so can't be added or removed multiple times."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//满足条件设置为true, 代表已添加</span>        h<span class="token punctuation">.</span>added <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先判断是不是ChannelHandlerAdapter类型, 因为我们自定义的handler通常会直接或者间接的继承该接口, 所以这里为true<br>拿到handler之后转换成ChannelHandlerAdapter类型, 然后进行条件判断<br><code>if (!h.isSharable() &amp;&amp; h.added)</code>代表如果不是共享的handler, 并且是未添加状态, 则抛出异常:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSharable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Boolean<span class="token operator">></span> cache <span class="token operator">=</span> InternalThreadLocalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handlerSharableCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Boolean sharable <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//如果这个类注解了Sharable.class, 说明这个类会被多个channel共享</span>        sharable <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Sharable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> sharable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sharable<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先拿到当前handler的class对象然后再从netty自定义的一个ThreadLocalMap对象中获取一个盛放handler的class对象的map, 并获取其value。如果value值为空, 则会判断是否被Sharable注解, 并将自身 handler class 对象和判断结果存入map对象中, 最后返回判断结果</p><p>这说明了被Sharable注解的handler是一个共享handler，从这个逻辑我们可以判断, <strong>共享对象是可以重复添加的</strong>。</p><h3 id="创建HandlerContext并添加到列表"><a href="#创建HandlerContext并添加到列表" class="headerlink" title="创建HandlerContext并添加到列表"></a>创建HandlerContext并添加到列表</h3><p>如果是共享对象或者没有被添加, 则将ChannelHandlerAdapter的added设置为true, 代表已添加。剖析完了重复添加验证, 回到addLast方法中, 我们看第二步, 创建一个HandlerContext并添加到列表:</p><pre class="line-numbers language-java"><code class="language-java">newCtx <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">filterName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先看filterName（name, handler）方法, 这个方法是<strong>判断添加handler的name是否重复</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> String <span class="token function">filterName</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没有名字创建默认名字</span>        <span class="token keyword">return</span> <span class="token function">generateName</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//检查名字是否重复</span>    <span class="token function">checkDuplicateName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们添加handler时候, 不一定会会给handler命名, 所以这一步name有可能是null, 如果是null, 则创建一个默认的名字，generateName（handler）类似Spring的beanFactory给每个bean起名字，为类名首字母小写，这里同样会起名字，名字我们看源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> String <span class="token function">generateName</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span> cache <span class="token operator">=</span> nameCaches<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会有一个缓存</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> handlerType <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return StringUtil.simpleClassName(handlerType) + "#0";</span>        <span class="token comment" spellcheck="true">//假设handler名字为PdcHandler，则name为PdcHandler#0</span>        name <span class="token operator">=</span> <span class="token function">generateName0</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再检查名字是否重复checkDuplicateName（name）这个方法中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkDuplicateName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">context0</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Duplicate handler name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">context0</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历pipeline</span>    AbstractChannelHandlerContext context <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发现name相同, 说明存在handler</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//返回</span>            <span class="token keyword">return</span> context<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context <span class="token operator">=</span> context<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里做的操作非常简单, 就是将pipeline中, 从head节点往下遍历HandlerContext, 一直遍历到tail, 如果发现名字相同则会认为重复并返回HandlerContext对象。</p><p>我们回到addLast（）方法中并继续看添加创建相关的逻辑：newCtx = newContext（group, filterName（name, handler）, handler）<br>中 filterName（name, handler）这步如果并没有重复则会返回handler的name。</p><p>跟到newContext（group, filterName（name, handler）, handler）方法中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">newContext</span><span class="token punctuation">(</span>EventExecutorGroup group<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultChannelHandlerContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">childExecutor</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里我们看到创建了一个DefaultChannelHandlerContext对象, 构造方法的参数中, 第一个this代表当前的pipeline对象, group为null, 所以childExecutor（group）也会返回null, name为handler的名字, handler为新添加的handler对象。</p><p>继续跟到DefaultChannelHandlerContext的构造方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">DefaultChannelHandlerContext</span><span class="token punctuation">(</span>        DefaultChannelPipeline pipeline<span class="token punctuation">,</span> EventExecutor executor<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">isInbound</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isOutbound</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到首先调用了父类的构造方法, 之后将handler赋值为自身handler的成员变量, HandlerContext和handler关系在此也展现了出来, 是一种组合关系。</p><p>我们首先看父类的构造方法,有这么两个参数:<code>isInbound(handler)</code>, <code>isOutbound(handler)</code>,这两个参数意思是<strong>判断需要添加的handler是inboundHandler还是outBoundHandler</strong></p><p>同样我们看isOutbound（handler）方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isOutbound</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> handler <span class="token keyword">instanceof</span> <span class="token class-name">ChannelOutboundHandler</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过判断是否实现 ChannelOutboundHandler 接口，判断是否为 outboundhandler</p><p>跟到其父类AbstractChannelHandlerContext的构造方法中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">AbstractChannelHandlerContext</span><span class="token punctuation">(</span>DefaultChannelPipeline pipeline<span class="token punctuation">,</span> EventExecutor executor<span class="token punctuation">,</span> String name<span class="token punctuation">,</span>                               <span class="token keyword">boolean</span> inbound<span class="token punctuation">,</span> <span class="token keyword">boolean</span> outbound<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> ObjectUtil<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pipeline <span class="token operator">=</span> pipeline<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inbound <span class="token operator">=</span> inbound<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outbound <span class="token operator">=</span> outbound<span class="token punctuation">;</span>    ordered <span class="token operator">=</span> executor <span class="token operator">==</span> null <span class="token operator">||</span> executor <span class="token keyword">instanceof</span> <span class="token class-name">OrderedEventExecutor</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一切都不陌生了, 因为tail节点和head节点创建的时候同样走到了这里。这里初始化了name, pipeline, 以及标识添加的handler是inboundhanlder还是outboundhandler</p><h3 id="添加HandlerContext"><a href="#添加HandlerContext" class="headerlink" title="添加HandlerContext"></a>添加HandlerContext</h3><p>回到最初的addLast（）方法中:跟完了创建HandlerContext的相关逻辑, 我们继续跟第三步, 添加HandlerContext</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addLast0</span><span class="token punctuation">(</span>AbstractChannelHandlerContext newCtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//拿到tail节点的前置节点</span>    AbstractChannelHandlerContext prev <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前节点的前置节点赋值为tail节点的前置节点</span>    newCtx<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前节点的下一个节点赋值为tail节点</span>    newCtx<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//tail前置节点的下一个节点赋值为当前节点</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newCtx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//tail节点的前一个节点赋值为当前节点</span>    tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> newCtx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后会判断当前线程线程是否为eventLoop线程, 如果不是eventLoop线程, 就将添加回调事件封装成task交给eventLoop线程执行, 否则, 直接执行添加回调事件<strong>callHandlerAdded0（newCtx）</strong></p><h3 id="回调添加事件（callHandlerAdded0方法）"><a href="#回调添加事件（callHandlerAdded0方法）" class="headerlink" title="回调添加事件（callHandlerAdded0方法）"></a>回调添加事件（callHandlerAdded0方法）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">setAddComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//忽略代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们重点关注这句<strong>ctx.handler（）.handlerAdded（ctx）</strong><br>其中ctx是<strong>我们新创建的HandlerContext</strong>, 通过handler（）方法<strong>拿到绑定的handler</strong>, 也就是新添加的handler, 然后执行handlerAdded（ctx）方法, 如果我们没有重写这个方法, 则会执行父类的该方法</p><p>在ChannelHandlerAdapter类中定义了该方法的实现:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们看到没做任何操作, 也就是如果我们没有重写该方法时, 如果添加handler之后将不会做任何操作, 这里如果我们需要做一些业务逻辑, 可以通过重写该方法进行实现。<br>以上就是添加handler的有关的业务逻辑。</p><h3 id="handler的删除"><a href="#handler的删除" class="headerlink" title="handler的删除"></a>handler的删除</h3><p>如果用户在业务逻辑中进行<code>ctx.pipeline().remove(this)</code>这样的写法, 或者<code>ch.pipeline().remove(new SimpleHandler())</code>这样的写法, 则就是对handler进行删除, 我们学习过添加handler的逻辑, 所以对handler删除操作理解起来也会比较容易</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">remove</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getContextOrDie</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法体里有个remove（）方法, 传入一个 getContextOrDie（handler）参数,这个 getContextOrDie（handler）, 其实就是<strong>根据handler拿到其包装类HandlerContext对象</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">getContextOrDie</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AbstractChannelHandlerContext ctx <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractChannelHandlerContext<span class="token punctuation">)</span> <span class="token function">context</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//代码省略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里仍然会通过context（handler）方法去寻找, 再跟进去</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelHandlerContext <span class="token function">context</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从头遍历节点</span>    AbstractChannelHandlerContext ctx <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到handler</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们看到寻找的方法也非常的简单, 就是从头结点开始遍历, 遍历到如果其包装的handler对象是传入的handler对象, 则返回找到的handlerContext</p><p>回到remove（handler）方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">remove</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getContextOrDie</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前删除的节点不能是head, 也不能是tail</span>    <span class="token keyword">assert</span> ctx <span class="token operator">!=</span> head <span class="token operator">&amp;&amp;</span> ctx <span class="token operator">!=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行删除操作</span>        <span class="token function">remove0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//回调删除handler事件</span>        EventExecutor executor <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">callHandlerRemoved0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">callHandlerRemoved0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先要断言删除的节点不能是tail和head，然后通过remove0（ctx）进行实际的删除操作, 跟到remove0（ctx）中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove0</span><span class="token punctuation">(</span>AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前节点的前置节点</span>    AbstractChannelHandlerContext prev <span class="token operator">=</span> ctx<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前节点的后置节点</span>    AbstractChannelHandlerContext next <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//前置节点的下一个节点设置为后置节点</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后置节点的上一个节点设置为前置节点</span>    next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的操作也非常简单, 做了一个指针移动的操作, 熟悉双向链表的小伙伴应该不会陌生。</p><p>回到<code>remove(ctx)</code>方法:我们继续往下看, <strong>如果当前线程不是eventLoop线程则将回调删除事件封装成task放在taskQueue中让eventLoop线程进行执行</strong>，这跟inbound事件的invokeChannelRead方法一个处理方式, 否则, 则直接执行回调删除事件。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callHandlerRemoved0</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用handler的handlerRemoved方法</span>            ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将当前节点状态设置为已移除</span>            ctx<span class="token punctuation">.</span><span class="token function">setRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fireExceptionCaught</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelPipelineException</span><span class="token punctuation">(</span>                ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".handlerRemoved() has thrown an exception."</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与添加handler的逻辑一样, 这里会调用当前handler的handlerRemoved方法, 如果用户没有重写该方法, 则会调用其父类的方法, 方法体在ChannelHandlerAdapter类中有定义, 我们跟进去</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同添加handler一样, 也是一个空实现, 这里用户可以通过重写来添加自己需要的逻辑。</p><p>以上就是删除handler的相关操作。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
            <tag> 网络通信框架 </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年的学习目标</title>
      <link href="2021/01/19/java/keep-learning/"/>
      <url>2021/01/19/java/keep-learning/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年就是我找工作的一年了，看<a href="https://home.cnblogs.com/u/xrq730/" target="_blank" rel="noopener">五月的仓颉</a>大佬的文章有感而发，记录一下我2021年的Java学习目标。</p><p>转载：<a href="http://www.cnblogs.com/xrq730/p/5260294.html" target="_blank" rel="noopener">http://www.cnblogs.com/xrq730/p/5260294.html</a>  |  <a href="https://www.cnblogs.com/xrq730/p/9159586.html" target="_blank" rel="noopener">https://www.cnblogs.com/xrq730/p/9159586.html</a></p><h2 id="关于项目经验"><a href="#关于项目经验" class="headerlink" title="关于项目经验"></a><strong>关于项目经验</strong></h2><p>LZ在网上经常看到一些别的朋友有提出项目经验的问题，依照LZ面试的感觉来说，面试主要看几点：<strong>项目经验+基本技术+个人潜力</strong>（也就是值不值得培养）。</p><p>关于项目经验，我认为并发编程网的创始人方腾飞老师讲的一段话非常好：</p><blockquote><p>介绍产品时面试官会考察应聘者的沟通能力和思考能力，我们大部分情况都是做产品的一个功能或一个模块，但是即使是这样，自己有没有把整个系统架构或产品搞清楚，并能介绍清楚，为什么做这个系统？这个系统的价值是什么？这个系统有哪些功能？优缺点有哪些？如果让你重新设计这个系统你会如何设计？</p></blockquote><p>我觉得这就已经足以概括了。也许你仅仅工作一年，也许你做的是项目中微不足道的模块，当然这些一定是你的劣势且无法改变，但是如何弥补这个劣势，从方老师的话中我总结几点：</p><ol><li>明确你的项目到底是做什么的，有哪些功能</li><li>明确你的项目的整体架构，在面试的时候能够清楚地画给面试官看并且清楚地指出从哪里调用到哪里、使用什么方式调用</li><li>明确你的模块在整个项目中所处的位置及作用</li><li>明确你的模块用到了哪些技术，更好一些的可以再了解一下整个项目用到了哪些技术</li></ol><p>在你无法改变自己的工作年限、自己的不那么有说服力的项目经验的情况下（这一定是扣分项），可以通过这种方式来一定程度上地弥补并且增进面试官对你的好感度。</p><p>补充一点，在面试中聊你的项目的时候，有一个问题90%是绕不过的：<strong>谈一下你在项目中解决过的比较复杂的问题</strong>。这需要在工作中不断去发现和探索，不需要多，在你自己目前的项目中只要你找到一两个能说的问题就行。一个小技巧是，即使问题不是你解决的而是别人解决的，但是你把这个问题弄懂、搞透了，在面试的时候你一样可以把这个问题当作是你自己解决的来说—-毕竟，谁来管这个问题当时到底是不是你解决的呢？</p><h2 id="关于专业技能"><a href="#关于专业技能" class="headerlink" title="关于专业技能"></a><strong>关于专业技能</strong></h2><p>写完项目接着写写一名3年工作经验的Java程序员应该具备的技能，这可能是Java程序员们比较关心的内容。我这里要说明一下，以下列举的内容不是都要会的东西—-但是如果你掌握得越多，最终能得到的评价、拿到的薪水势必也越高。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>这包括static、final、transient等关键字的作用，foreach循环的原理等等。今天面试我问你static关键字有哪些作用，如果你答出static修饰变量、修饰方法我会认为你合格，答出静态块，我会认为你不错，答出静态内部类我会认为你很好，答出静态导包我会对你很满意，因为能看出你非常热衷研究技术。</p><p>最深入的一次，LZ记得面试官直接问到了我volatile关键字的底层实现原理（顺便插一句，面试和被面试本身就是相对的，面试官能问这个问题同时也让面试者感觉到面试官也是一个喜爱研究技术的人，增加了面试者对公司的好感，LZ最终选择的就是问了这个问题的公司），不要觉得这太吹毛求疵了—-越简单的问题越能看出一个人的水平，别人对你技术的考量绝大多数都是以<strong>深度优先、广度次之</strong>为标准的，切记。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>非常重要，也是必问的内容。基本上就是List、Map、Set，问的是各种实现类的底层实现原理，实现类的优缺点。</p><p>集合要掌握的是ArrayList、LinkedList、Hashtable、HashMap、ConcurrentHashMap、HashSet的实现原理，能流利作答，当然能掌握CopyOnWrite容器和Queue是再好不过的了。另外多说一句，ConcurrentHashMap的问题在面试中问得特别多，大概是因为这个类可以衍生出非常多的问题，关于ConcurrentHashMap，我给网友朋友们提供三点回答或者是研究方向：</p><p>（1）ConcurrentHashMap的锁分段技术</p><p>（2）ConcurrentHashMap的读是否要加锁，为什么</p><p>（3）ConcurrentHashMap的迭代器是强一致性的迭代器还是弱一致性的迭代器</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>本来以为蛮重要的一块内容，结果只在阿里巴巴B2B事业部面试的时候被问了一次，当时问的是装饰器模式。</p><p>当然咱们不能这么功利，为了面试而学习，设计模式在工作中还是非常重要、非常有用的，23种设计模式中重点研究常用的十来种就可以了，面试中关于设计模式的问答主要是三个方向：</p><p>（1）你的项目中用到了哪些设计模式，如何使用</p><p>（2）知道常用设计模式的优缺点</p><p>（3）能画出常用设计模式的UML图</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>这也是必问的一块了。因为三年工作经验，所以基本上不会再问你怎么实现多线程了，会问得深入一些比如说Thread和Runnable的区别和联系、多次start一个线程会怎么样、线程有哪些状态。当然这只是最基本的，出乎意料地，几次面试几乎都被同时问到了一个问题，问法不尽相同，总结起来是这么一个意思：</p><pre><code>假如有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？</code></pre><p>聪明的网友们对这个问题是否有答案呢？不难，java.util.concurrent下就有现成的类可以使用。</p><p>另外，线程池也是比较常问的一块，常用的线程池有几种？这几种线程池之间有什么区别和联系？线程池的实现原理是怎么样的？实际一些的，会给你一些具体的场景，让你回答这种场景该使用什么样的线程池比较合适。</p><p>最后，虽然这次面试问得不多，但是多线程同步、锁这块也是重点。synchronized和ReentrantLock的区别、synchronized锁普通方法和锁静态方法、死锁的原理及排查方法等等，关于多线程，我在之前有些过文章总结过多线程的40个问题，可以参看<a href="http://www.cnblogs.com/xrq730/p/5060921.html" target="_blank" rel="noopener">40个Java多线程问题总结</a>。</p><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>再次补充IO的内容，之前忘了写了。</p><p>IO分为File IO和Socket IO，File IO基本上是不会问的，问也问不出什么来，平时会用就好了，另外记得File IO都是阻塞IO。</p><p>Socket IO是比较重要的一块，要搞懂的是阻塞/非阻塞的区别、同步/异步的区别，借此理解阻塞IO、非阻塞IO、多路复用IO、异步IO这四种IO模型，Socket IO如何和这四种模型相关联。这是基本一些的，深入一些的话，就会问NIO的原理、NIO属于哪种IO模型、NIO的三大组成等等，这有些难，当时我也是研究了很久才搞懂NIO。提一句，<strong>NIO并不是严格意义上的非阻塞IO而应该属于多路复用IO</strong>，面试回答的时候要注意这个细节，讲到NIO会阻塞在Selector的select方法上会增加面试官对你的好感。</p><p>如果用过Netty，可能会问一些Netty的东西，毕竟这个框架基本属于当前最好的NIO框架了（Mina其实也不错，不过总体来说还是比不上Netty的），大多数互联网公司也都在用Netty。</p><h3 id="JDK源码"><a href="#JDK源码" class="headerlink" title="JDK源码"></a>JDK源码</h3><p>要想拿高工资，JDK源码不可不读。上面的内容可能还和具体场景联系起来，JDK源码就是实打实地看你平时是不是爱钻研了。LZ面试过程中被问了不少JDK源码的问题，其中最刁钻的一个问了LZ，String的hashCode()方法是怎么实现的，幸好LZ平时String源代码看得多，答了个大概。JDK源码其实没什么好总结的，纯粹看个人，总结一下比较重要的源码：</p><p>（1）List、Map、Set实现类的源代码</p><p>（2）ReentrantLock、AQS的源代码</p><p>（3）AtomicInteger的实现原理，主要能说清楚CAS机制并且AtomicInteger是如何利用CAS机制实现的</p><p>（4）线程池的实现原理</p><p>（5）Object类中的方法以及每个方法的作用</p><p>这些其实要求蛮高的，LZ去年一整年基本把JDK中重要类的源代码研究了个遍，真的花费时间、花费精力，当然回头看，是值得的—-不仅仅是为了应付面试。</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>老生常谈，面试必问的东西。一般来说会问你一下你们项目中使用的框架，然后给你一些场景问你用框架怎么做，比如我想要在Spring初始化bean的时候做一些事情该怎么做、想要在bean销毁的时候做一些事情该怎么做、MyBatis中$和#的区别等等，这些都比较实际了，平时积累得好、有多学习框架的使用细节自然都不成问题。</p><p>如果上面你的问题答得好，面试官往往会深入地问一些框架的实现原理。问得最多的就是Spring AOP的实现原理，当然这个很简单啦，两句话就搞定的的事儿，即使你不会准备一下就好了。LZ遇到的最变态的是让LZ画一下Spring的Bean工厂实现的UML图，当然面对这样一个有深度的问题，LZ是绝对答不出来的/(ㄒoㄒ)/~~</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库十有八九也都会问到。一些基本的像union和union all的区别、left join、几种索引及其区别就不谈了，比较重要的就是数据库性能的优化，如果对于数据库的性能优化一窍不通，那么有时间，还是建议你在面试前花一两天专门把SQL基础和SQL优化的内容准备一下。</p><p>不过数据库倒是不用担心，一家公司往往有很多部门，如果你对数据库不熟悉而基本技术又非常好，九成都是会要你的，估计会先把你放到对数据库使用不是要求非常高的部门锻炼一下。</p><h3 id="数据结构和算法分析"><a href="#数据结构和算法分析" class="headerlink" title="数据结构和算法分析"></a>数据结构和算法分析</h3><p>数据结构和算法分析，对于一名程序员来说，会比不会好而且在工作中绝对能派上用场。数组、链表是基础，栈和队列深入一些但也不难，树挺重要的，比较重要的树AVL树、红黑树，可以不了解它们的具体实现，但是要知道什么是二叉查找树、什么是平衡树，AVL树和红黑树的区别。记得某次面试，某个面试官和我聊到了数据库的索引，他问我：</p><pre><code>你知道索引使用的是哪种数据结构实现吗？</code></pre><p>LZ答到用的Hash表吧，答错。他又问，你知道为什么要使用树吗？LZ答到因为Hash表可能会出现比较多的冲突，在千万甚至是上亿级别的数据面前，会大大增加查找的时间复杂度。而树比较稳定，基本保证最多二三十次就能找到想要的数据，对方说不完全对，最后我们还是交流了一下这个问题，我也明白了为什么要使用树，这里不说，网友朋友们觉得索引为什么要使用树来实现呢？</p><p>至于算法分析，不会、不想研究就算了，记得某次面试对方问我，Collections.sort方法使用的是哪种排序方法，额，吐血三升。当然为了显示LZ的博学，对算法分析也有一定的研究(⊙﹏⊙)b，LZ还是硬着头皮说了一句可能是冒泡排序吧。当然答案肯定不是，有兴趣的网友朋友们可以去看一下Collections.sort方法的源代码，用的是一种叫做TimSort的排序法，也就是增强型的归并排序法。</p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>出乎LZ的意料，Java虚拟机应该是很重要的一块内容，结果在这几家公司中被问到的概率几乎为0。要知道，LZ去年可是花了大量的时间去研究Java虚拟机的，光周志明老师的《深入理解Java虚拟机：JVM高级特性与最佳实践》，LZ就读了不下五遍。</p><p>言归正传，虽然Java虚拟机没问到，但我觉得还是有必要研究的，LZ就简单地列一个提纲吧，谈谈Java虚拟机中比较重要的内容：</p><ol><li>Java虚拟机的内存布局</li><li>GC算法及几种垃圾收集器</li><li>类加载机制，也就是双亲委派模型</li><li>Java内存模型</li><li>happens-before规则</li><li>volatile关键字使用规则</li></ol><p>也许面试无用，但在走向大牛的路上，不可不会。</p><h3 id="Web方面的一些问题"><a href="#Web方面的一些问题" class="headerlink" title="Web方面的一些问题"></a>Web方面的一些问题</h3><p>Java主要面向Web端，因此Web的一些问题也是必问的。LZ碰到过问得最多的两个问题是：</p><pre><code>谈谈分布式Session的几种实现方式</code></pre><p>常用的四种能答出来自然是让面试官非常满意的，另外一个常问的问题是：</p><pre><code>讲一下Session和Cookie的区别和联系以及Session的实现原理</code></pre><p>这两个问题之外，web.xml里面的内容是重点，Filter、Servlet、Listener，不说对它们的实现原理一清二楚吧，至少能对它们的使用知根知底。另外，一些细节的方面比如get/post的区别、forward/重定向的区别、HTTPS的实现原理也都可能会被考察到。</p><p>噢，想起来了，一致性Hash算法貌似也被问到了几次，这个LZ以前专门深入研究过并且写了两篇博文，因此问到这个问题LZ自然是答得毫不费力。文章是<a href="http://www.cnblogs.com/xrq730/p/4948707.html" target="_blank" rel="noopener">MemCache详细解读</a>和对<a href="http://www.cnblogs.com/xrq730/p/5186728.html" target="_blank" rel="noopener">一致性Hash算法，Java代码实现的深入研究</a>，特别说明，LZ真的不是在为自已以前写的文章打广告啊啊啊啊啊啊。</p><p>最后，如果有兴趣有时间，建议学习、研究一下SOA和RPC，面向服务体系，大型分布式架构必备，救命良方、包治百病、屡试不爽。</p><h2 id="程序员技能目标"><a href="#程序员技能目标" class="headerlink" title="程序员技能目标"></a>程序员技能目标</h2><p>首先，前五年，如果一个程序员大致能做到一下几点（后面还会详谈）：</p><ul><li>具有扎实的基本功</li><li>能快速完成领导交给你的代码开发任务</li><li>能在遇到问题的时候有正确的解决思路</li><li>能对公司的新人进行一定辅导，包括但不限于技术点分享、代码评审、需求分析、表结构设计等</li></ul><p>那么，从第五年开始，我认为可以、也应当朝更高的层次进行迈进，前一个层次如果更多是偏重个人，那么这个层次我认为更多应该偏重团队，简单罗列一下大致上应该有：</p><ul><li>系统设计能力，或许在之前给一个功能，能从DB设计–&gt;服务端开发–&gt;前端开发一栈把事情都做好，那么之后，在领导给出具体一块大业务，比如想做一个淘宝商场的会员模块，能充分分析出整个功能并把功能拆分成一个一个的点、能对每一个点之间的交互画出交互图、能梳理清楚数据库的ER关系图、能把工作合理分配给同事进行开发</li><li>带领团队能力，大致就是把控整体开发节奏，保证在约定时间点前进行交付，不出现延期的情况</li><li>大而博不如小而美，会10门技术、每门技术掌握到6分，不如会5门技术、2门技术掌握到8分，我感觉整个行业什么都会一点的人比较多，把一门技术进行深入研究的比较少，毕竟掌握也许只需要1星期，深耕或许需要1个月甚至更久。在五年这个节点，我认为选择一到两个自己感兴趣的方向进行深入研究会是一个比较好的选择</li></ul><h2 id="2021年学习目标"><a href="#2021年学习目标" class="headerlink" title="2021年学习目标"></a>2021年学习目标</h2><p>为什么之前说针对面试题进行学习和准备作用不大，因为我认为我们关注的不应当是题，而是题背后的一个一个的方向，这也就是我认为的基本功。那从基本功的角度来说，罗列一下我能想到的，包括但不限于以下内容：</p><ul><li>工作相关使用到的JDK类及其相关源码、机制</li><li>设计模式，设计模式在工作中用到了哪些，具体使用场景</li><li>并发类的相关知识，线程安全、锁机制、信号量、闭锁、栅栏、线程池等</li><li>框架相关，Spring相关机制、Spring MVC相关机制、MyBatis相关机制、使用的细节点、框架实现原理等</li><li>JVM，内存布局、垃圾识别算法、垃圾回收算法、垃圾收集器、类加载机制、内存模型、出现内存问题时定位问题的方法等</li><li>数据库的基本数据类型、索引机制、各引擎区别、锁机制、慢SQL定位及优化等</li><li>缓存机制，这里的机制指的是缓存加载、缓存击穿、缓存雪崩这些机制及其相关应对方案，用过Redis、MemCache的最好理解一下它们的原理或者缓存提供的一些高级功能，集群如何实现</li><li>分布式的一些知识，比如CAP理论、数据一致性的几种解决方案、分布式事务如何处理、分库分表怎么做、现有的相关解决方案等</li><li>NIO的作用，epoll模型是否知道一些，Netty的相关机制、Netty相比原生NIO的优点、半包拆包、断线重连解决方案等</li><li>Web相关，Get与Post的区别、转发与重定向的区别、跨域问题如何解决、如何保证接口幂等性等</li><li>网络层相关，三次握手和四次握手、全连接队列和半连接队列、负载均衡算法等</li><li>其他中间件，MQ作用和使用场景、服务化治理框架的作用和使用场景、配置中心的作用和使用场景等</li><li>数据结构，数组、链表、栈、队列、树等优缺点，在什么场景下使用什么数据结构</li><li>Linux相关知识，基本命令的使用，排查日志、定位问题，项目或者第三方组件的基本运维等</li></ul><p>坦白讲，以上的这些东西全都掌握也不可能，哪怕面试官肯定也有很多不会的，但这就是基本功，能多掌握一点多掌握一点，技多不压身，至于别人如何评价你，就留给别人去评价吧，做好自己能做好的就行了。我在之前写过的文章中反复强调深度+广度，<strong>深度优先、广度次之</strong>，有了深度+广度，在开发过程中我们可以尽快完成需求，在遇到问题情况下我们可以第一时间找到应对方案。</p><p>在三年的时间点，能掌握上述的知识点我认为已经是非常非常优秀的了，但这两年的经历让我意识到的是，到了五年的时间点，如果只是具备这些硬性技能，还是不够，这两年更多的应当是在项目上进行积累，也就是前面说的<strong>项目</strong>，大致上应该有：</p><ul><li>独立完成复杂业务，或者完成一个已有项目中的大功能点，这就需要有根据业务对功能进行分解、分析的能力</li><li>独立排查复杂问题，在项目运行过程中，一定不可能安然无事，除开业务性的问题，CPU 100%是否能独立排查、内存溢出是否能独立排查、应用死锁或者DB死锁能否独立排查、API调用时间长能否独立排查，以上问题排查完毕能否及时解决</li><li>带领团队的能力，可能这时候带领的是1~2个人的小团队，即使一个小团队，也能考验带团队、任务合理分配的能力</li></ul><p>可能上面的要求有点高，可能工作中未必有这样的机会，但是不要抱怨，机会永远留给有能力、有准备的人，我们首先想的不应该是等待别人交给你一件有挑战性的事情，你在做这件事情的情况下去提升自己，而应当是先提升自己的素质，然后让别人放心把有挑战性的事情交给你来做。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="2021/01/19/database/redis/"/>
      <url>2021/01/19/database/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="RDB持久化机制"><a href="#RDB持久化机制" class="headerlink" title="RDB持久化机制"></a>RDB持久化机制</h2><p>Redis DataBase</p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是<strong>fork一个子进程</strong>，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩技术存储。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>整个Redis数据库将只包含一个文件 dump.rdb ，方便持久化</li><li>容灾性好，方便备份</li><li>性能最大化，fork子进程来完成子操作，让主进程继续处理命令，所以是IO最大化。使用单独子进程进行持久化，主进程不会进行任何IO操作，保证了redis的高性能</li><li>相对于数据集大时，比AOF的启动效率更高</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。更适合数据要求不严谨的时候</li><li>由于RDB是通过fork子进程来协助完成数据持久化工作，因此当数据集较大时，可能导致整个服务器停止服务几百毫秒，甚至一分钟。</li></ol><h2 id="AOF持久化机制"><a href="#AOF持久化机制" class="headerlink" title="AOF持久化机制"></a>AOF持久化机制</h2><p>Append Only File</p><p>以日志的形式记录服务器所处理的每一个写、删除操作，<strong>查询操作不会记录</strong>，以文本方式记录，有点类似binlog</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>数据安全，Redis中提供了三种同步策略：每秒同步、每修改同步和不同步。每秒同步是<strong>异步同步</strong>，效率高，但一旦宕机，这一秒内的修改数据将会丢失。每修改同步可以视为<strong>同步持久化</strong>，即每次发生的数据变化都会被立即记录到磁盘中</li><li>通过append 模式写文件，即使中途宕机也不会破坏已存在的内容，可以通过redis-check-aof 工具解决数据一致性问题</li><li>AOF机制的 rewrite 模式。定期对AOF文件进行重新，压缩大小</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>AOF文件比RDB文件大，且恢复速度慢</li><li>数据集大时，比RDB启动效率低</li><li>运行效率没RDB高，因为RDB时快照，AOF是同步策略</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>AOF文件比RDB更新频率高，优先使用AOF还原数据。</p><p>AOF比RDB更安全更大</p><p>RDB性能比AOF好</p><p>如果两个都配优先加载AOF</p><h2 id="redis安装和配置文件redis-conf"><a href="#redis安装和配置文件redis-conf" class="headerlink" title="redis安装和配置文件redis.conf"></a>redis安装和配置文件redis.conf</h2><p><a href="https://www.cnblogs.com/xrq730/p/8890896.html" target="_blank" rel="noopener">https://www.cnblogs.com/xrq730/p/8890896.html</a></p><h2 id="redis-key-键名称中的冒号"><a href="#redis-key-键名称中的冒号" class="headerlink" title="redis key 键名称中的冒号"></a>redis key 键名称中的冒号</h2><p>redis中key的命名，用:分隔不同的层次|命名空间，如：<code>user:id12345:contact</code><br>如果某个对象有<code>字段的字段</code>，用 . 连接。如<code>user:id12345:contact.mail</code></p><h3 id="其他分隔符"><a href="#其他分隔符" class="headerlink" title="其他分隔符"></a>其他分隔符</h3><p>读过文首三个链接会发现以下格式的ID：<br><code>user:id12345:contact</code> 表示user表的ID为id12345的记录的字段contact。（那这个key的值就是对应的字段的值了）<br><code>user::id12345::contact</code>或<code>user:::id12345:::contact</code>，即多层冒号分隔。<br>user/id12345/contact<br>使用多层冒号分隔、使用/分隔，我测试过后，都可以正常获取key的值。</p><p>但是，在RedisDesktopManager这款Redis可视化管理工具中，只有使用<code>单个:分隔</code>的key名称，层次看起来最舒服。</p><p>另外redis官网也是介绍的冒号:，所以<strong>key名称的层次分隔符就推荐单个冒号:</strong></p><p>最后一个字段contact，如果联系方式包含三种：tel, mail, qq，怎么命名？<br>官网说可以使用<code>.</code>或<code>-</code>连接，如：<code>user:id12345:contact.mail</code>或<code>user.id12345.contact-mail</code>表示用户表中ID为id12345的记录的contact属性中的mail属性值。</p><h2 id="Redis过期键的删除策略"><a href="#Redis过期键的删除策略" class="headerlink" title="Redis过期键的删除策略"></a>Redis过期键的删除策略</h2><h3 id="惰性过期"><a href="#惰性过期" class="headerlink" title="惰性过期"></a>惰性过期</h3><p>只有当访问一个key时，才会判断该key是否已经过期，过期则清除。该策略最大化节约cpu资源，但对内存非常不友好。</p><h3 id="定期过期"><a href="#定期过期" class="headerlink" title="定期过期"></a>定期过期</h3><p>每隔一定的时间，会<strong>扫描一定数量的数据库的expires字典中一定数量的key</strong>，并清除其中已经过期的key。折中方案。</p><blockquote><p>expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间的某个键的指针，value是该键的毫秒精度的unix时间戳表示的过期时间，键空间是指向该redis集群中保存的所有键。</p></blockquote><h3 id="定时过期"><a href="#定时过期" class="headerlink" title="定时过期"></a>定时过期</h3><p>给每一个key设定一个定时器，当这个key过期的时候由这个定时器删掉。对内存非常友好，但对cpu不友好。</p><p>redis中同时使用了惰性过期和定期过期两种过期策略</p><h2 id="Redis线程模型、单线程快的原因"><a href="#Redis线程模型、单线程快的原因" class="headerlink" title="Redis线程模型、单线程快的原因"></a>Redis线程模型、单线程快的原因</h2><p>Redis基于<strong>Reactor模式</strong>开发了网络事件处理器，这个处理器叫做<strong>文件时间处理器 file event handler</strong>。这个文件事件处理器，它是单线程的，所有Redis 才叫做单线程模型，它采用IO多路复用机制来同时监听多隔Socket，根据Socket上的事件类型来选择对应的事件处理器来处理这个事件。可以实现高性能的网络通信模型，又可以根据内部其他单线程的模型进行对接，保证了简单性。</p><p>文件事件处理器结构包含4个部分：多个Socket，IO多路复用程序，文件事件分派器以及事件处理器（命令请求处理器、命令回复处理器、连接应答处理器等）。</p><p>多个Socket可能并发的产生不同的操作，每个操作对应不同的文件事件，但是IO多路复用程序会监听多个Socket，会将Socket放入一个队列中排队，每次从队列中取出一个Socket给事件分派器，事件分派器把Socket给对应的事件处理器。</p><p>然后一个Socket的事件处理完之后，IO多路复用程序才会将队列中的下一个Socket给时间分派器。</p><h3 id="单线程快的原因"><a href="#单线程快的原因" class="headerlink" title="单线程快的原因"></a>单线程快的原因</h3><ol><li>纯内存操作</li><li>核心是基于非阻塞的IO多路复用机制</li><li>单线程反而避免了多线程频繁上下文切换带来的性能问题</li></ol><h2 id="缓存雪崩、击穿、穿透"><a href="#缓存雪崩、击穿、穿透" class="headerlink" title="缓存雪崩、击穿、穿透"></a>缓存雪崩、击穿、穿透</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存<strong>同一时间大面积失效</strong>，后面请求都落到数据库上导致数据库崩掉。（缓存重启也会）</p><p>解决方案：</p><ol><li>缓存数据的过期事件设置随机，防止同一时间大量数据过期现象发生</li><li>给每一个缓存数据增加相应的缓存标记，记录缓存是否失效，如果标记失效则更新缓存（比较消耗性能）</li><li>缓存预热（面对重启）</li><li>互斥锁（避免大量请求对同一个键进行操作，让请求排队）</li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读取缓存没读到数据，又同时去数据库读。<strong>并发查同一条数据</strong>。</p><p>解决方案：</p><ol><li>设置热点数据永不过期</li><li>加互斥锁</li></ol><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><strong>缓存和数据库中都没有的数据</strong>，导致所有的请求都落到数据库上</p><p>解决方案：</p><ol><li>接口层增加校验，如用户鉴权校验，id做基础校验，id &lt;= 0 的直接拦截</li><li>从缓存取不到的数据，再数据库中也没取到，也可以将key-value对也为key-null，缓存有效时间可以设置短点，如30秒（太长会导致正常情况也无法使用），防止攻击用户反复用同一个id暴力攻击</li><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一定不存在的数据会被这个bitmap拦截，避免对底层存储系统的查询压力</li></ol><h2 id="Redis事务实现"><a href="#Redis事务实现" class="headerlink" title="Redis事务实现"></a>Redis事务实现</h2><h3 id="事务开始"><a href="#事务开始" class="headerlink" title="事务开始"></a>事务开始</h3><p>MULTI命令的执行，标识着一个事务的开始。MULTI命令会将客户端状态的 <strong>flags</strong> 属性中打开 REDIS_MULTI标识来完成的。</p><h3 id="命令入队"><a href="#命令入队" class="headerlink" title="命令入队"></a>命令入队</h3><p>当一个客户端切换到事务状态之后，服务器会根据这个客户端发送来的命令来执行不同的操作。如果客户端发送的命令为<strong>MULTI、EXEC、WATCH、DISCARD</strong>中的一个，立即执行这个命令，否则将命令放入一个事务队列里面，然后向客户端返回QUEUED 回复。</p><p>如果客户端发送的是四个命令以外的命令，服务器并不立即执行。首先检查此命令格式是否正确，如果不正确服务器会在客户端状态（redisClient）的flags属性关闭 REDIS_MULTI 标识，并返回错误信息给客户端。如果正确将这个命令放入一个事务队列里，向客户端返回QUEUED回复。</p><blockquote><p> 事务队列是FIFO方式保存入队命令的</p></blockquote><h3 id="事务执行"><a href="#事务执行" class="headerlink" title="事务执行"></a>事务执行</h3><p>客户端发送 EXEC 命令，服务器执行 EXEC 命令逻辑。</p><ol><li>如果客户端状态的 flags 属性不包含 REDIS_MULTI 标识，或者包含 REDIS_DIRTY_CAS 或者 REDIS_DIRTY_EXEC 标识，直接取消事务执行。</li><li>否则处于事务状态，服务器会遍历客户端的事务队列，然后执行事务队列中的所有命令，最后将返回结果全部给客户端</li></ol><p>redis不支持事务回滚机制，但是会检查每一个事务中的命令是否错误。</p><p>redis事务不支持检查那些程序员自己逻辑错误，例如String类型的数据库键执行HashMap操作</p><h3 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h3><ol><li>WATCH 命令是一个乐观锁，可以为Redis事务提供 check-and-set（<strong>CAS</strong>）行为。可以监控一个或多个键，一旦其中一个键被修改，之后的事务就不会执行，监控一直持续到EXEC命令。</li><li>MULTI命令用于<strong>开启一个事务</strong>，总是返回OK。MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是放到一个队列中，当调用EXEC才会被执行。</li><li>EXEC：<strong>执行</strong>所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排序。当操作打断返回null。</li><li>通过调用DISCARD，客户端可以<strong>清空事务队列</strong>，并放弃执行事务，并且客户端会从事务状态中退出。</li><li>UNWATCH命令可以取消WATCH对所有key的监控。</li></ol><h2 id="主从复制核心原理"><a href="#主从复制核心原理" class="headerlink" title="主从复制核心原理"></a>主从复制核心原理</h2><p>通过执行slaveof命令或设置slaveof选项，让一个服务器去复制另一个服务器的数据。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的。一个主数据库可以拥有多个从库，而一个从库只能有一个主库。</p><h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><ol><li>主节点通过bgsave命令fork子进程进行RDB持久化，该过程是非常消耗CPU、内存（页表复制）、IO的</li><li>主节点通过网络将RDB文件发送给从节点，消耗贷款</li><li>从节点清空老数据、载入新RDB文件的过程是阻塞的，无法响应客户端的命令；如果从节点执行bgrewriteaof会带来额外的消耗</li></ol><h3 id="部分复制（增量复制）"><a href="#部分复制（增量复制）" class="headerlink" title="部分复制（增量复制）"></a>部分复制（增量复制）</h3><ol><li>复制偏移量：执行复制的双方，主从节点分别维护一个复制偏移量offset，以主节点为主</li><li>复制积压缓冲区：主节点内部维护的一个固定长度的、FIFO队列，当主从节点offset的差距过大超过缓冲区长度时，无法执行部分复制，只能全量复制</li><li>服务器运行ID（runid）：每个Redis节点都有运行ID，由节点在启动时自动生成，主节点会将自己的运行ID发送给从节点，从节点会将主节点的运行ID存起来。从节点Redis断开重连时根据运行ID来判断同步进度：<ol><li>如果从节点保存的runid与主节点现在的runid相同，主节点会继续尝试使用部分复制（到底能不能部分复制还是看offset和复制积压缓冲区的情况）</li><li>如果从节点保存的runid和主节点不相同，说明从节点在断线前同步的Redis节点并不是当前的主节点，只能进行全量复制。</li></ol></li></ol><h3 id="过程原理图"><a href="#过程原理图" class="headerlink" title="过程原理图"></a>过程原理图</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/redis-2.jpg" alt></p><h2 id="Redis集群方案"><a href="#Redis集群方案" class="headerlink" title="Redis集群方案"></a>Redis集群方案</h2><h3 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/redis-1.jpg" alt></p><h3 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h3><p>Redis Cluster时一种服务端Sharding技术，3.0版本开始正式提供。利用了slot（槽）的概念，一共分成16384个槽。将请求发送到任意节点，<strong>接收到请求的节点会将查询请求发送到正确的节点上执行</strong></p><p>方案说明：</p><ol><li>通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽（哈希值）区间的数据，默认分配了16384个槽位</li><li>每份数据分片会存储在多个<strong>互为主从</strong>的多节点上</li><li>数据写入先写主节点，再同步到从节点（支持配置为阻塞同步）</li><li>同一分片多个节点间的数据<strong>不保持强一致性</strong></li><li>读取数据时，当客户端操作的key没有分配在该节点上时，redis会返回转向指令，指向正确的节点</li><li>扩容时需要把旧节点的数据迁移一部分到新节点</li></ol><p>redis cluster架构下，每个redis都要开放两个端口好，比如一个6379，另一个16379。</p><p>16379用来进行<strong>节点间通信</strong>，也就是cluster bus的通信，用来进行故障检测、配置更新、故障转移授权。cluster bus用了另外一种二进制的协议，<strong>gossip协议</strong>，用以节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li>无中心架构，支持动态扩容，对业务透明</li><li>具备<strong>Sentinel</strong>的监控和自动Failover（故障转移）能力</li><li>客户端不需要链接集群所有节点，连接集群中任何一个可用节点即可</li><li>高性能，客户端直连redis服务，免去proxy代理</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li>运维复杂，数据迁移需要人工干预</li><li>只能使用0号数据库</li><li>不支持批量操作（pipeline管道操作）</li><li>分布式逻辑和存储模块耦合等</li></ol><h3 id="Redis-Sharding"><a href="#Redis-Sharding" class="headerlink" title="Redis Sharding"></a>Redis Sharding</h3><p>业界普遍使用的多Redis实例集群方法。其主要思想是采用哈希算法将Redis数据的key进行散列，通过hash函数，<strong>特定的key会映射到特定的Redis节点上</strong>。Java redis客户端驱动jedis，支持Redis Sharding功能，即ShardedJedis以及结合缓存池的ShardedJedisPool</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>非常简单，服务器Redis实例彼此独立，每个Redis实例像服务器一样运行，非常容易线性扩展，系统的灵活性很强</p><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ol><li>由于sharding处理放到客户端，规模进一步扩大给运维带来挑战。</li><li>客户端sharding不支持动态增删节点。服务器Redis实例群拓扑结构有变化时，每个客户端都要更新调整。</li><li>连接不能共享，当应用规模增大时，资源浪费制约优化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网医院bug反馈</title>
      <link href="2021/01/19/project/ihis-bug/"/>
      <url>2021/01/19/project/ihis-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="2021-1-19"><a href="#2021-1-19" class="headerlink" title="2021/1/19"></a>2021/1/19</h2><h3 id="优先使用工具类"><a href="#优先使用工具类" class="headerlink" title="优先使用工具类"></a>优先使用工具类</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-1.png" alt></p><p>类似这些工具类，<strong>优先采用hutool、guava、framework里面已经定义的</strong>。绝大部分不建议自己新建</p><h3 id="属性必须用名称"><a href="#属性必须用名称" class="headerlink" title="属性必须用名称"></a>属性必须用名称</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-2.png" alt></p><p>属性必须要用名称，不能用动词。</p><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-3.png" alt></p><h3 id="service层别调用别的service层"><a href="#service层别调用别的service层" class="headerlink" title="service层别调用别的service层"></a>service层别调用别的service层</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-4.png" alt></p><p>service的方法尽量的去调mapper方法。否则事务隔离会出现一些很奇怪的现象出来的。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 互联网医院 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用kubectl的Deployment实践练习创建App</title>
      <link href="2021/01/15/project/kubernetes-kubectl/"/>
      <url>2021/01/15/project/kubernetes-kubectl/</url>
      
        <content type="html"><![CDATA[<h2 id="Kubernetes-Deployments"><a href="#Kubernetes-Deployments" class="headerlink" title="Kubernetes Deployments"></a>Kubernetes Deployments</h2><p>kubectl 的Deployment 功能可以指令Kubernetes 如何创建和更新应用实例。通过kubectl 命令创建一个deployment后，Kubernetes master 会调度deployment配置好的应用实例到集群特定的节点运行。</p><p>一旦应用实例被创建好之后，Kubernetes Deployment Controller 会 <strong>持续监控</strong> 这些实例。如果运行这些实例的节点down机或被删除，Deployment controller 会替换掉它。所以Kubernetes 提供了一种自修复机制来处理机器故障或维护。</p><p>进入下面的链接进行部署应用练习。</p><p>练习环境：<a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-interactive/" target="_blank" rel="noopener">https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-interactive/</a></p><h3 id="kubectl-get-nodes"><a href="#kubectl-get-nodes" class="headerlink" title="kubectl get nodes"></a>kubectl get nodes</h3><p>终端输入 kubectl get nodes 命令可以来查看当前集群</p><h3 id="kubectl-run命令"><a href="#kubectl-run命令" class="headerlink" title="kubectl run命令"></a>kubectl run命令</h3><p>run命令创建一个新的部署。 我们需要提供部署名称和应用程序镜像位置 。 如果希望在特定端口上运行应用程序，需要添加port参数 :</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令通过创建deployment部署了一个应用程序，命令完成了几件事:</p><ul><li>搜索可以运行应用程序实例的适当节点（目前只有一个）。</li><li>调度应用程序在该节点上运行。</li><li>配置集群，以便在需要时重新调度新节点上的实例。</li></ul><h3 id="kubectl-get-deployments"><a href="#kubectl-get-deployments" class="headerlink" title="kubectl get deployments"></a>kubectl get deployments</h3><p>此命令可以查看刚才新创建的部署</p><h3 id="查看-app"><a href="#查看-app" class="headerlink" title="查看 app"></a>查看 app</h3><p>在Kubernetes内部运行的Pods运行在一个私有的、隔离的网络上。默认情况下，它们可以从同一个kubernetes集群内的其他pod和服务中看到，但不能从 集群 网络之外看到。 当我们使用kubectl时，我们通过API端点与应用程序进行交互。</p><p>kubectl命令可以创建一个代理，将通信转发到集群范围的私有网络。按control-C可以终止代理，运行时不会显示任何输出。</p><p>打开第二个终端窗口来运行代理。 <code>kubectl proxy</code></p><p>现在我们在主机（在线终端）和Kubernetes集群之间建立了连接。代理允许从这些终端直接访问API。您可以看到通过代理端点托管的所有这些api，现在可以通过<code>http://localhost:8001</code>获得这些api。例如，我们可以使用curl命令直接通过API查询版本: <code>curl http://localhost:8001/version</code></p><p>API服务器将根据pod名称为每个pod自动创建端点，这些端点也可以通过代理访问。</p><p>首先我们需要获得Pod名称，我们将存储在环境变量POD_NAME中: </p><pre class="line-numbers language-shell"><code class="language-shell">export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}') echo "Name of the Pod: $POD_NAME"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，我们可以向在该pod中运行的应用程序发出HTTP请求: </p><pre class="line-numbers language-shell"><code class="language-shell">curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如图: <img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-6.jpg" alt></p><h2 id="Kubernetes-Pods"><a href="#Kubernetes-Pods" class="headerlink" title="Kubernetes Pods"></a>Kubernetes Pods</h2><p>创建部署时，Kubernetes<strong>创建了一个Pod来托管应用程序实例</strong>。 Pod是一个Kubernetes抽象概念，它表示<strong>一个或多个应用程序容器的组合</strong>（如Docker或rkt），以及这些容器的一些共享资源。 这些资源包括:</p><ul><li>共享存储，如卷</li><li>网络，作为唯一的集群IP地址</li><li>关于如何运行每个容器的信息，例如容器镜像版本或要使用的特定端口</li></ul><p>Pod为特定于应用程序的“逻辑主机”建模，可以包含相对紧密耦合的不同应用程序容器。 例如，Pod可能既包括带有Nodejs应用程序的容器， 也包括由Nodejs web服务器发布的提供数据的容器。 Pod中的容器共享一个IP地址和端口空间，它们总是位于同一个节点上，并在同一个上下文中运行。</p><p>Pods在Kubernetes 平台上是<strong>原子单位</strong>。 当我们在Kubernetes上创建部署时，该部署将创建包含容器的Pods（而不是直接创建容器）。 每个Pod被绑定到调试执行它的节点上，并一直保持到终止（根据重启策略）或删除。 在节点失败的情况下，相同的pod会在集群中的其他可用节点上被调度。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-7.jpg" alt></p><h2 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h2><p><strong>Pod总是在节点上运行</strong>。 节点是Kubernetes中的工作机器，根据集群的不同，它可以是虚拟机器，也可以是物理机器。 每个节点都由主节点管理。 一个节点可以有多个pod, Kubernetes master自动处理集群中节点之间的pod调度。 主节点的自动调度考虑到每个节点上的可用资源。</p><p>每个Kubernetes节点都至少运行的服务:</p><p>Kubelet, 负责Kubernetes Master 和 Node 之间通信的进程; 它管理在机器上运行的pod和容器。</p><p>容器运行时（如Docker、rkt）负责从registry中提取容器镜像、解压缩容器并运行应用程序。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-8.jpg" alt></p><h2 id="kubectl概述"><a href="#kubectl概述" class="headerlink" title="kubectl概述"></a>kubectl概述</h2><p>kubectl是Kubernetes集群的命令行工具，通过kubectl能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。运行kubectl命令的语法如下所示</p><pre class="line-numbers language-shell"><code class="language-shell">$ kubectl [command] [TYPE] [NAME] [flags]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>comand</strong>：指定要对资源执行的操作，例如create、get、describe和delete</p><p><strong>TYPE</strong>：指定资源类型，资源类型是<strong>大小写敏感</strong>的，开发者能够以单数、复数和缩略的形式。例如：</p><pre class="line-numbers language-shell"><code class="language-shell">$ kubectl get pod pod1 $ kubectl get pods pod1 $ kubectl get po pod1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>NAME</strong>：指定资源的名称，名称也<strong>大小写敏感</strong>的。如果省略名称，则会显示所有的资源。</p><p><strong>flags</strong>：指定可选的参数。例如，可以使用-s或者–server参数指定Kubernetes API server的地址和端口。</p><p>另外，可以通过<code>kubectl help</code>或<code>kubectl -h</code>命令获取更多的信息。</p><p><strong>资源对象</strong></p><p>kubectl大部分子命令后都可以指定要操作的资源对象，可以用<em>kubectl api-resources</em>命令参考</p><p><strong>全局参数</strong></p><p><em>kubectl options</em>命令可以列出可以全局使用的命令参数，比较重要的有：</p><pre class="line-numbers language-shell"><code class="language-shell">--cluster='': 指定命令操作对象的集群--context='':  指定命令操作对象的上下文-n, --namespace='': 指定命令操作对象的Namespace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>资源字段</strong></p><p><em>kubectl explain</em>命令可以输出资源对应的属性字段及定义,在定义资源配置文件时候非常有用。</p><pre><code># Usage:  kubectl explain RESOURCE [options]# Examples: $ kubectl  explain deployment.spec.selectorKIND:     DeploymentVERSION:  extensions/v1beta1RESOURCE: selector &lt;Object&gt;DESCRIPTION:     Label selector for pods. Existing ReplicaSets whose pods are selected by     this will be the ones affected by this deployment.     A label selector is a label query over a set of resources. The result of     matchLabels and matchExpressions are ANDed. An empty label selector matches     all objects. A null label selector matches no objects.FIELDS:   matchExpressions     &lt;[]Object&gt;     matchExpressions is a list of label selector requirements. The requirements     are ANDed.   matchLabels  &lt;map[string]string&gt;     matchLabels is a map of {key,value} pairs. A single {key,value} in the     matchLabels map is equivalent to an element of matchExpressions, whose key     field is &quot;key&quot;, the operator is &quot;In&quot;, and the values array contains only     &quot;value&quot;. The requirements are ANDed.</code></pre><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>kubectl安装后，默认是没有比如自动补全等功能的，频繁使用比较不方便。目前已经有各类kubectl小工具可以提高效率，还有kubectl专用的shell了。个人感觉比较好用有以下这些：</p><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>kubectl 命令在bash中默认是没有自动补全的，需要安装bash_completion，添加自动补全脚本。这里以CentOS为例，其他操作系统配置可以参看<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl" target="_blank" rel="noopener">Install and Set Up kubectl</a></p><pre class="line-numbers language-shell"><code class="language-shell"># 安装bash-completionyum install -y epel-release.noarchyum install -y bash_completion# 添加补全脚本kubectl completion bash >/etc/bash_completion.d/kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新登录shell，可以发现kubectl的子命令，包括资源名称都可以用Tab键自动补全了。</p><h3 id="快速切换集群和Namespace"><a href="#快速切换集群和Namespace" class="headerlink" title="快速切换集群和Namespace"></a>快速切换集群和Namespace</h3><p>生产环境一般是多集群，至少也是多NS的环境，免不了经常在不同集群和不同NS间切换。切换集群要修改环境变量、切换NS要在命令跟上 -n namespace，都不是太方便。而用kubectx和kubens两个小工具可以实现快速切换。这俩在同一项目里：<a href="https://github.com/ahmetb/kubectx" target="_blank" rel="noopener">ahmetb/kubectx</a></p><pre class="line-numbers language-shell"><code class="language-shell"># 安装sudo git clone https://github.com/ahmetb/kubectx /opt/kubectxsudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectxsudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens# 使用kubectx# kubectx  : 列出所有上下文# kubectx <NAME> : 切换到某个上下文$ kubectx minikubeSwitched to context "minikube".# kubectx -   : 切换回上一个上下文$ kubectx -Switched to context "oregon".# kubectx <NEW_NAME>=<NAME> : 重命名一个集群上下文$ kubectx dublin=gke_ahmetb_europe-west1-b_dublinContext "dublin" set.Aliased "gke_ahmetb_europe-west1-b_dublin" as "dublin".# kubectx <NEW_NAME>=. : 重命名当前上下文# kubectx -d <NAME>  : 删除上下文# 使用kubens# kubens : 列出所有的NS# kubens <NS-NAME>  : 切换当前NS$ kubens kube-systemContext "test" set.Active namespace is "kube-system".# kubens - : 切换回上一个NS$ kubens -Context "test" set.Active namespace is "default".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于多集群切换的配置和上下文的概念可以参看<a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/" target="_blank" rel="noopener">官方文档</a>，有中文。</p><h3 id="kubectl-shell"><a href="#kubectl-shell" class="headerlink" title="kubectl shell"></a>kubectl shell</h3><p>kubectl已经有比较成熟的专用shell了，优化了自动补全，模糊匹配等功能：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-11.png" alt></p><p>但实际使用过程中，偶尔还是会各种小问题。推荐两个比较热门的，有需要可以尝试一下：<br><a href="https://github.com/cloudnativelabs/kube-shell" target="_blank" rel="noopener">kube-shell</a><br><a href="https://github.com/c-bata/kube-prompt" target="_blank" rel="noopener">kube-prompt</a></p><h2 id="kubectl命令"><a href="#kubectl命令" class="headerlink" title="kubectl命令"></a>kubectl命令</h2><p>Kubectl 命令工具可以获取关于已部署应用程序及其环境的信息。 最常见的操作可以使用以下kubectl命令完成:</p><ul><li><strong>kubectl get –</strong> 列资源</li><li><strong>kubectl describe</strong> – 显示有关资源的详细信息</li><li><strong>kubectl logs</strong> – 从一个pod的容器打印日志</li><li><strong>kubectl exec</strong> – 在pod中的容器上执行命令</li></ul><p>您可以使用这些命令查看应用程序的部署时间、当前状态、运行位置和配置。</p><p>练习环境: <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-interactive/" target="_blank" rel="noopener">https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-interactive/</a></p><p>Kubectl常用子命令大概分为以下几类：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-12.png" alt></p><h3 id="声明式资源对象管理"><a href="#声明式资源对象管理" class="headerlink" title="声明式资源对象管理"></a>声明式资源对象管理</h3><p>对集群资源的声明式管理，是Kubernetes最主要的特性之一，而kubectl apply命令是最能体现这个特性的命令。apply命令最主要的参数有两个:</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:  kubectl apply (-f FILENAME | -k DIRECTORY) [options]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-f 参数后 <strong>跟yaml或json格式</strong> 的资源配置文件，-k 参数后跟 kustomization.yaml 配置文件的位置。</p><p>为什么说apply是声明式管理呢，因为<strong>所有对集群的增改操作，都能用apply命令完成</strong>，一切取决于后面的配置文件：</p><ul><li>如果配置文件中的资源找集群中不存在，则创建这个资源。</li><li>如果配置文件中的资源在集群中已存在，则根据配置对资源字段进行更新</li></ul><p>举个例子：</p><pre class="line-numbers language-shell"><code class="language-shell"># 部署一个goweb应用，配置pod数为4个：[root@master-1 ~]# grep replicas deployment-goweb.yaml   replicas: 4# 使用 apply 创建资源[root@master-1 ~]# kubectl apply -f deployment-goweb.yaml deployment.apps/goweb created[root@master-1 ~]# kubectl get poNAME                     READY   STATUS    RESTARTS   AGEgoweb-6b5d559869-4x5mb   1/1     Running   0          14sgoweb-6b5d559869-77lbz   1/1     Running   0          14sgoweb-6b5d559869-9ztkh   1/1     Running   0          14sgoweb-6b5d559869-ccjtp   1/1     Running   0          14s# 修改pod数量为2个：[root@master-1 ~]# sed -ri 's/4$/2/g' deployment-goweb.yaml[root@master-1 ~]# grep replicas deployment-goweb.yaml         replicas: 2# 使用apply更新资源[root@master-1 ~]# kubectl  apply  -f deployment-goweb.yaml deployment.apps/goweb configured[root@master-1 ~]# kubectl get poNAME                     READY   STATUS    RESTARTS   AGEgoweb-6b5d559869-4x5mb   1/1     Running   0          8m21sgoweb-6b5d559869-77lbz   1/1     Running   0          8m21s# pod数已更新为2个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，同一个<em>kubectl apply -f deployment-goweb.yaml</em>命令，可以用来创建资源也可以更新资源。<br>简单来说，apply命令的作用就是一个：使集群的实际状态朝用户声明的期望状态变化，而用户不用关心具体要进行怎样的增删改操作才能呢达到这个期望状态，也即Kubernetes的声明式资源管理。</p><h4 id="kubectl-apply"><a href="#kubectl-apply" class="headerlink" title="kubectl apply"></a>kubectl apply</h4><p>通过文件名或控制台输入，对资源进行配置。接受JSON和YAML格式的描述文件。</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl apply -f FILENAME# 将pod.json中的配置应用到pod$ kubectl apply -f ./pod.json# 将控制台输入的JSON配置应用到Pod$ cat pod.json | kubectl apply -f -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令式资源对象管理"><a href="#命令式资源对象管理" class="headerlink" title="命令式资源对象管理"></a>命令式资源对象管理</h3><p>命令式管理类就是直接通过命令执行增删改的操作，除了删除资源外，下面的命令能用apply代替，kubernetes也建议尽量使用apply命令。</p><ul><li>创建资源</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubectl create deployment my-dep --image=busybox        # 创建一个deplpymekubectl expose rc nginx --port=80 --target-port=8000    # 创建一个svc，暴露nginx这个rc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更新资源</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubectl scale --replicas=3 -f foo.yaml                     # 将foo.yaml中描述的对象扩展为3个kubectl annotate pods foo description='my frontend'        # 增加description='my frontend'备注,已有保留不覆盖kubectl label --overwrite pods foo status=unhealthy        # 增加status=unhealthy 标签，已有则覆盖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>删除资源</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubectl delete -f xxx.yaml                      # 删除一个配置文件对应的资源对象  kubectl delete pod,service baz foo              # 删除名字为baz或foo的pod和service  kubectl delete pods,services -l name=myLabel    # -l 参数可以删除包含指定label的资源对象                            kubectl delete pod foo --grace-period=0 --force # 强制删除一个pod，在各种原因pod一直terminate不掉的时候很有用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a>查看资源状态</h3><ul><li>get</li></ul><p>最常用的查看命令，显示一个或多个资源的详细信息</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:  kubectl get[(-o|--output=)](TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags] [options]# Examples: kubectl get services                          # 列出当前NS中所有service资源kubectl get pods --all-namespaces             # 列出集群所有NS中所有的Podkubectl get pods -o wide                      # -o wide也比较常用，可以显示更多资源信息，比如pod的IP等kubectl get deployment my-dep                 # 可以直接指定资源名查看kubectl get deployment my-dep --watch         # --watch 参数可以监控资源的状态，在状态变换时输出。在跟踪服务部署情况时很有用kubectl get pod my-pod -o yaml                # 查看yaml格式的资源配置，这里包括资实际的status，可以用--export排除kubectl get pod my-pod -l app=nginx           # 查看所有带有标签app: nginx的pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kubectl 可用JSONPATH来过滤字段，JSON Path的语法可参考<a href="https://kubectl.docs.kubernetes.io/pages/resource_printing/fields.html" target="_blank" rel="noopener">这里</a></p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get pods --selector=app=cassandra rc -o jsonpath='{.items[*].metadata.labels.version}' # 获取所有具有 app=cassandra 的 pod 中的 version 标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>describe</li></ul><p>describe命令同样用于查看资源信息，但相比与get只输出资源本身的信息，describe聚合了相关资源的信息并输出。比如，在describe node信息时，同时会输出该node下的pod的资源利用情况。所以describe命令在排错和调试时非常有用。</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME) [options]# Examples: kubectl describe nodes my-node    # 查看节点my-node的详细信息kubectl describe pods my-pod      # 查看pod my-pod的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><p>虽然逻辑上，Kubernetes的最小管理单位是Pod，但是实际上还是免不了与容器直接交互，特别是对于多容器的Pod，任意容器有问题，都会导致Pod不可用。</p><ul><li>日志查看</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Usage:  kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [options]# Examples: kubectl logs my-pod                              # 输出一个单容器pod my-pod的日志到标准输出kubectl logs nginx-78f5d695bd-czm8z -c nginx     # 输出多容器pod中的某个nginx容器的日志kubectl logs -l app=nginx                        # 输出所有包含app-nginx标签的pod日志kubectl logs -f my-pod                           # 加上-f参数跟踪日志，类似tail -fkubectl logs my-pod  -p                          # 输出该pod的上一个退出的容器实例日志。在pod容器异常退出时很有用kubectl logs my-pod  --since-time=2018-11-01T15:00:00Z# 指定时间戳输出日志            kubectl logs my-pod  --since=1h # 指定时间段输出日志，单位s/m/h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行命令</li></ul><p>命令作用和参数基本与 docker exec 一致</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:kubectl exec POD [-c CONTAINER] -- COMMAND [args...] [options]# Examples:kubectl exec my-pod ls                         # 对my-pod执行ls命令kubectl exec -t -i nginx-78f5d695bd-czm8z bash # 进入pod的shell，并打开伪终端和标准输入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件传输</li></ul><p>在排错和测试服务的时候，时不时需要和容器互相交互文件，比如传输容器内存的dump到宿主机，或从宿主机临时拷贝个新配置文件做调试，这时就可以用 <em>kubectl cp</em> 命令。要注意的是，cp命令需要容器里已安装有tar程序</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:kubectl cp <file-spec-src> <file-spec-dest> [options]# Examples:  kubectl cp /tmp/foo_dir <some-pod>:/tmp/bar_dir                 # 拷贝宿主机本地文件夹到podkubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar        # 指定namespace的拷贝pod文件到宿主机本地目录kubectl cp /tmp/foo <some-pod>:/tmp/bar -c <specific-container> # 对于多容器pod，用-c指定容器名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><p>除了和具体的资源打交道，在对集群进行维护时，也经常需要查看集群信息和对节点进行管理，集群管理有以下这些常用的命令：</p><ul><li>集群信息查看</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> kubectl cluster-info      # 查看master和集群服务的地址 kubectl cluster-info dump # 查看集群详细日志 kubectl version           # 查看Kubernetes集群和客户端版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>节点管理</li></ul><p>在集群节点出问题时，可能希望把一个节点不再被调度pod，或把节点目前的pod都驱逐出去</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl cordon my-node       # 标记 my-node 为 unschedulable,禁止pod被调度过来。注意这时现有的pod还会继续运行，不会被驱逐。kubectl uncordon my-node # 与cordon相反，标记 my-node 为 允许调度。kubectl drain  my-node# drain字面意思为排水，实际就是把my-node的pod平滑切换到其他node，同时标记pod为unschedulable，也就是包含了cordon命令。# 但是直接使用命令一般不会成功，建议在要维护节点时，加上以下参数：kubectl drain my-node  --ignore-daemonsets  --force  --delete-local-data  # --ignore-daemonsets 忽略daemonset部署的pod# --force 直接删除不由workload对象（Deployment、Job等）管理的pod# --delete-local-data  直接删除挂载有本地目录(empty-dir方式）的pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DaemonSet确保集群中每个（部分）node运行一份pod副本，当node加入集群时创建pod，当node离开集群时回收pod。如果删除DaemonSet，其创建的所有pod也被删除，DaemonSet中的pod覆盖整个集群。</p></blockquote><h2 id="使用kubectl故障排除"><a href="#使用kubectl故障排除" class="headerlink" title="使用kubectl故障排除"></a>使用kubectl故障排除</h2><h3 id="检查应用程序配置"><a href="#检查应用程序配置" class="headerlink" title="检查应用程序配置"></a>检查应用程序配置</h3><p>我们将使用kubectl get命令并查找现有的Pods： <code>kubectl get pods</code></p><p>会看到如图的结果:</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-9.jpg" alt></p><p>接下来，为了查看Pod中的容器以及用于构建这些容器的图像，我们运行describe pods命令: <code>kubectl describe pods</code></p><p>会看到如图的结果：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-10.jpg" alt></p><h3 id="在终端显示app"><a href="#在终端显示app" class="headerlink" title="在终端显示app"></a>在终端显示app</h3><p>Pods是在一个隔离的私有网络中运行的——因此我们需要代理访问它们，以便调试和与它们交互。为此，我们将使用kubectl proxy命令在第二个终端窗口中运行代理: <code>kubectl proxy</code></p><p>现在，我们将再次获得Pod名称，并通过代理直接查询该Pod。获取Pod名称并将其存储在POD_NAME环境变量中： </p><pre class="line-numbers language-shell"><code class="language-shell">export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}');echo "Name of the Pod: $POD_NAME"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要查看应用程序的输出，请运行curl请求: <code>curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/</code></p><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>应用程序通常发送到STDOUT的任何内容都会成为Pod中容器的日志。我们可以使用kubectl logs命令检索这些日志: <code>kubectl logs $POD_NAME</code></p><h2 id="继续学习"><a href="#继续学习" class="headerlink" title="继续学习"></a>继续学习</h2><p><a href="https://jimmysong.io/kubernetes-handbook/guide/using-kubectl.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/guide/using-kubectl.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> kubernetes </tag>
            
            <tag> kubectl </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Skywalking初涉猎</title>
      <link href="2021/01/14/project/skywalking/"/>
      <url>2021/01/14/project/skywalking/</url>
      
        <content type="html"><![CDATA[<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://zhuanlan.zhihu.com/p/260428816" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/260428816</a></p><p><a href="https://www.jianshu.com/p/2fd56627a3cf" target="_blank" rel="noopener">https://www.jianshu.com/p/2fd56627a3cf</a></p><p><a href="https://zhuanlan.zhihu.com/p/41252484" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/41252484</a></p><p><a href="https://www.cnblogs.com/javastack/p/14349662.html" target="_blank" rel="noopener">https://www.cnblogs.com/javastack/p/14349662.html</a></p><h2 id="什么是APM系统"><a href="#什么是APM系统" class="headerlink" title="什么是APM系统"></a><strong>什么是APM系统</strong></h2><p>APM（Application Performance Management）即<strong>应用性能管理系统</strong>，是对企业系统即时监控以实现对应用程序性能管理和故障管理的系统化的解决方案。应用性能管理，主要指对企业的<strong>关键业务应用进行监测、优化</strong>，提高企业应用的可靠性和质量，保证用户得到良好的服务，降低IT总拥有成本。<br>APM系统是可以<strong>帮助理解系统行为、用于分析性能问题</strong>的工具，以便发生故障的时候，能够<strong>快速定位和解决问题</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-1.png" alt></p><p>说白了就是随着微服务的的兴起，传统的单体应用拆分为不同功能的小应用，用户的一次请求会经过多个系统，不同服务之间的调用非常复杂，其中任何一个系统出错都可能影响整个请求的处理结果。为了解决这个问题，Google 推出了一个分布式链路跟踪系统 Dapper ，之后各个互联网公司都参照Dapper 的思想推出了自己的分布式链路跟踪系统，而这些系统就是分布式系统下的APM系统。</p><p>目前市面上的APM系统有很多，比如skywalking、pinpoint、zipkin等。其中</p><ul><li><strong><a href="https://link.zhihu.com/?target=http%3A//zipkin.io/" target="_blank" rel="noopener">Zipkin</a></strong>：由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微服务架构中的延迟问题，包括：数据的收集、存储、查找和展现。</li><li><strong><a href="https://link.zhihu.com/?target=https%3A//github.com/naver/pinpoint" target="_blank" rel="noopener">Pinpoint</a></strong>：一款对Java编写的大规模分布式系统的APM工具，由韩国人开源的分布式跟踪组件。</li><li><strong><a href="https://link.zhihu.com/?target=http%3A//skywalking.org/" target="_blank" rel="noopener">Skywalking</a></strong>：国产的优秀APM组件，是一个对JAVA分布式应用程序集群的业务运行情况进行追踪、告警和分析的系统。</li></ul><h2 id="什么是skywalking"><a href="#什么是skywalking" class="headerlink" title="什么是skywalking"></a><strong>什么是skywalking</strong></h2><p>Skywalking是由国内开源爱好者吴晟（原OneAPM工程师，目前在华为）开源并提交到Apache孵化器的产品，它同时吸收了Zipkin/Pinpoint/CAT的设计思路，支持非侵入式埋点。是一款基于分布式跟踪的应用程序性能监控系统。</p><p>Skywalking的具有以下几个特点：</p><ol><li>多语言自动探针，Java，.NET Core和Node.JS。</li><li>多种监控手段，语言探针和service mesh。</li><li>轻量高效。不需要额外搭建大数据平台。</li><li>模块化架构。UI、存储、集群管理多种机制可选。</li><li>支持告警。</li><li>优秀的可视化效果。</li></ol><p>Skywalking整体架构如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-2.jpg" alt></p><p>整体架构包含如下三个组成部分：</p><ol><li><p>探针（agent）负责进行<strong>数据的收集</strong>，包含了Tracing和Metrics的数据，agent会被安装到服务所在的服务器上，以方便数据的获取。</p></li><li><p>可观测性分析平台OAP（Observability Analysis Platform），接收探针发送的数据，并在内存中使用分析引擎（Analysis Core）进行数据的整合运算，然后将数据存储到对应的存储介质上，比如Elasticsearch、MySQL数据库、H2数据库等。同时OAP还使用查询引擎（Query Core）提供HTTP查询接口。</p></li><li><p>Skywalking提供单独的UI进行数据的查看，此时UI会调用OAP提供的接口，获取对应的数据然后进行展示。</p></li></ol><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>上文提到skywalking的后端数据存储的介质可以是Elasticsearch、MySQL数据库、H2数据库等，我这里使用Elasticsearch作为数据存储，而且为了便与扩展和收集其他应用日志，我将单独搭建Elasticsearch。</p><h2 id="搭建Elasticsearch"><a href="#搭建Elasticsearch" class="headerlink" title="搭建Elasticsearch"></a><strong>搭建Elasticsearch</strong></h2><p><strong>前置条件：安装kubernetes</strong>，因为要部署集群，如果不部署集群的话不需要安装k8s，可以参考：<a href="http://arthurjq.com/2021/01/13/elk/">http://arthurjq.com/2021/01/13/elk/</a></p><p>为了增加es的扩展性，按<strong>角色功能</strong>分为master节点、data数据节点、client客户端节点。其整体架构如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-3.jpg" alt></p><p>其中：</p><ul><li>Elasticsearch数据节点Pods被部署为一个有状态集（StatefulSet）</li><li>Elasticsearch master节点Pods被部署为一个Deployment</li><li>Elasticsearch客户端节点Pods是以Deployment的形式部署的，其内部服务将允许访问R/W请求的数据节点</li><li>Kibana部署为Deployment，其服务可在Kubernetes集群外部访问</li></ul><h3 id="先创建estatic的命名空间（es-ns-yaml）"><a href="#先创建estatic的命名空间（es-ns-yaml）" class="headerlink" title="先创建estatic的命名空间（es-ns.yaml）"></a>先创建estatic的命名空间（es-ns.yaml）</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> elastic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>kubectl apply -f es-ns.yaml</code></p><h3 id="部署es-master"><a href="#部署es-master" class="headerlink" title="部署es master"></a>部署es master</h3><p>配置清单如下（es-master.yaml）：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CLUSTER_NAME<span class="token punctuation">}</span>    <span class="token key atrule">node.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_NAME<span class="token punctuation">}</span>    <span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_LIST<span class="token punctuation">}</span>    <span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>MASTER_NODES<span class="token punctuation">}</span>    <span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">node</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">ingest</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.monitoring.collection.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9300</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> transport  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch      <span class="token key atrule">role</span><span class="token punctuation">:</span> master  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch        <span class="token key atrule">role</span><span class="token punctuation">:</span> master    <span class="token key atrule">spec</span><span class="token punctuation">:</span>     <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>sysctl        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.27.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sysctl        <span class="token punctuation">-</span> <span class="token punctuation">-</span>w        <span class="token punctuation">-</span> vm.max_map_count=262144        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_LIST          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MASTER_NODES          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ES_JAVA_OPTS"</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"-Xms512m -Xmx512m"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9300</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> transport        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/elasticsearch/config/elasticsearch.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> elasticsearch.yml        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">-</span>config      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"storage"</span>        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span>          <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行<code>kubectl apply -f ``es-master.yaml</code>创建配置清单，然后pod变为 running 状态即为部署成功，比如：</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get pod -n elasticNAME                                    READY   STATUS    RESTARTS   AGEelasticsearch-master-77d5d6c9db-xt5kq   1/1     Running   0          67s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="部署es-data"><a href="#部署es-data" class="headerlink" title="部署es data"></a>部署es data</h3><p>配置清单如下（es-data.yaml）：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CLUSTER_NAME<span class="token punctuation">}</span>    <span class="token key atrule">node.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_NAME<span class="token punctuation">}</span>    <span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_LIST<span class="token punctuation">}</span>    <span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>MASTER_NODES<span class="token punctuation">}</span>    <span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">node</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">ingest</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.monitoring.collection.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9300</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> transport  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> <span class="token string">"elasticsearch-data"</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch      <span class="token key atrule">role</span><span class="token punctuation">:</span> data  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch        <span class="token key atrule">role</span><span class="token punctuation">:</span> data    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>sysctl        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.27.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sysctl        <span class="token punctuation">-</span> <span class="token punctuation">-</span>w        <span class="token punctuation">-</span> vm.max_map_count=262144        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_LIST          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MASTER_NODES          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ES_JAVA_OPTS"</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"-Xms1024m -Xmx1024m"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9300</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> transport        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/elasticsearch/config/elasticsearch.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> elasticsearch.yml        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>persistent<span class="token punctuation">-</span>storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data/db      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>config  <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>persistent<span class="token punctuation">-</span>storage    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">accessModes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"ReadWriteOnce"</span> <span class="token punctuation">]</span>      <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> managed<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>storage      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span>          <span class="token key atrule">storage</span><span class="token punctuation">:</span> 20Gi<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>kubectl apply -f es-data.yaml</code>创建配置清单，其状态变为running即为部署成功。</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get pod -n elasticNAME                                    READY   STATUS    RESTARTS   AGEelasticsearch-data-0                    1/1     Running   0          4selasticsearch-master-77d5d6c9db-gklgd   1/1     Running   0          2m35selasticsearch-master-77d5d6c9db-gvhcb   1/1     Running   0          2m35selasticsearch-master-77d5d6c9db-pflz6   1/1     Running   0          2m35s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署es-client"><a href="#部署es-client" class="headerlink" title="部署es client"></a>部署es client</h3><p>配置清单如下（es-client.yaml）：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CLUSTER_NAME<span class="token punctuation">}</span>    <span class="token key atrule">node.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_NAME<span class="token punctuation">}</span>    <span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_LIST<span class="token punctuation">}</span>    <span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>MASTER_NODES<span class="token punctuation">}</span>    <span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">node</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">ingest</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.monitoring.collection.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9200</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> client  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9300</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> transport  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch      <span class="token key atrule">role</span><span class="token punctuation">:</span> client  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch        <span class="token key atrule">role</span><span class="token punctuation">:</span> client    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>sysctl        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.27.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sysctl        <span class="token punctuation">-</span> <span class="token punctuation">-</span>w        <span class="token punctuation">-</span> vm.max_map_count=262144        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_LIST          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MASTER_NODES          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ES_JAVA_OPTS"</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"-Xms256m -Xmx256m"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9200</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> client        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9300</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> transport        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/elasticsearch/config/elasticsearch.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> elasticsearch.yml        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client<span class="token punctuation">-</span>config      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"storage"</span>        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span>          <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一样执行<code>kubectl apply -f es-client.yaml</code>创建配置清单，其状态变为running即为部署成功。</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get pod -n elasticNAME                                    READY   STATUS    RESTARTS   AGEelasticsearch-client-f79cf4f7b-pbz9d    1/1     Running   0          5selasticsearch-data-0                    1/1     Running   0          3m11selasticsearch-master-77d5d6c9db-gklgd   1/1     Running   0          5m42selasticsearch-master-77d5d6c9db-gvhcb   1/1     Running   0          5m42selasticsearch-master-77d5d6c9db-pflz6   1/1     Running   0          5m42s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h3><p>我们启用了 xpack 安全模块来保护我们的集群，所以我们需要一个初始化的密码。我们可以执行如下所示的命令，在客户端节点容器内运行 <code>bin/elasticsearch-setup-passwords</code> 命令来生成默认的用户名和密码：</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl exec $(kubectl get pods -n elastic | grep elasticsearch-client | sed -n 1p | awk '{print $1}') \     -n elastic \     -- bin/elasticsearch-setup-passwords auto -bChanged password for user apm_systemPASSWORD apm_system = QNSdaanAQ5fvGMrjgYnMChanged password for user kibana_systemPASSWORD kibana_system = UFPiUj0PhFMCmFKvuJucChanged password for user kibanaPASSWORD kibana = UFPiUj0PhFMCmFKvuJucChanged password for user logstash_systemPASSWORD logstash_system = Nqes3CCxYFPRLlNsuffEChanged password for user beats_systemPASSWORD beats_system = Eyssj5NHevFjycfUsPnTChanged password for user remote_monitoring_userPASSWORD remote_monitoring_user = 7Po4RLQQZ94fp7F31ioRChanged password for user elasticPASSWORD elastic = n816QscHORFQMQWQfs4U<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意需要将 elastic 用户名和密码也添加到 Kubernetes 的 Secret 对象中：</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl create secret generic elasticsearch-pw-elastic \     -n elastic \     --from-literal password=n816QscHORFQMQWQfs4U<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="验证集群状态"><a href="#验证集群状态" class="headerlink" title="验证集群状态"></a>验证集群状态</h3><pre class="line-numbers language-shell"><code class="language-shell">kubectl exec -n elastic  \        $(kubectl get pods -n elastic | grep elasticsearch-client | sed -n 1p | awk '{print $1}') \        -- curl -u elastic:n816QscHORFQMQWQfs4U http://elasticsearch-client.elastic:9200/_cluster/health?pretty{  "cluster_name" : "elasticsearch",  "status" : "green",  "timed_out" : false,  "number_of_nodes" : 3,  "number_of_data_nodes" : 1,  "active_primary_shards" : 2,  "active_shards" : 2,  "relocating_shards" : 0,  "initializing_shards" : 0,  "unassigned_shards" : 0,  "delayed_unassigned_shards" : 0,  "number_of_pending_tasks" : 0,  "number_of_in_flight_fetch" : 0,  "task_max_waiting_in_queue_millis" : 0,  "active_shards_percent_as_number" : 100.0}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面<code>status</code>的状态为 green ，表示集群正常。到这里ES集群就搭建完了。为了方便操作可以再部署一个kibana服务</p><h3 id="kibana服务"><a href="#kibana服务" class="headerlink" title="kibana服务"></a>kibana服务</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">kibana.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">server.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>ELASTICSEARCH_HOSTS<span class="token punctuation">}</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>ELASTICSEARCH_USER<span class="token punctuation">}</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>ELASTICSEARCH_PASSWORD<span class="token punctuation">}</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5601</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> webinterface  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">prometheus.io/http-probe</span><span class="token punctuation">:</span> <span class="token string">'true'</span>    <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">'true'</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> kibana.coolops.cn      <span class="token key atrule">http</span><span class="token punctuation">:</span>        <span class="token key atrule">paths</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>              <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> kibana              <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">5601 </span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/kibana/kibana<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5601</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> webinterface        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ELASTICSEARCH_HOSTS          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"http://elasticsearch-client.elastic.svc.cluster.local:9200"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ELASTICSEARCH_USER          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"elastic"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ELASTICSEARCH_PASSWORD          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>              <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>pw<span class="token punctuation">-</span>elastic              <span class="token key atrule">key</span><span class="token punctuation">:</span> password        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/kibana/config/kibana.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> kibana.yml      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana<span class="token punctuation">-</span>config<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行<code>kubectl apply -f kibana.yaml</code>创建kibana，查看pod的状态是否为running。</p><p>使用上面我们创建的 Secret 对象的 elastic 用户和生成的密码即可登录。</p><p>登录后界面如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-4.jpg" alt></p><h2 id="搭建Skywalking-Server"><a href="#搭建Skywalking-Server" class="headerlink" title="搭建Skywalking Server"></a><strong>搭建Skywalking Server</strong></h2><p>使用helm安装</p><h3 id="安装helm，这里是使用的helm3"><a href="#安装helm，这里是使用的helm3" class="headerlink" title="安装helm，这里是使用的helm3"></a>安装helm，这里是使用的helm3</h3><pre class="line-numbers language-shell"><code class="language-shell">wget https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gztar zxvf helm-v3.0.0-linux-amd64.tar.gzmv linux-amd64/helm /usr/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：helm3没有tiller这个服务端了，直接用kubeconfig进行验证通信，所以建议部署在master节点</p></blockquote><h3 id="下载skywalking的代码"><a href="#下载skywalking的代码" class="headerlink" title="下载skywalking的代码"></a>下载skywalking的代码</h3><pre class="line-numbers language-shell"><code class="language-shell">mkdir /home/install/package -pcd /home/install/packagegit clone https://github.com/apache/skywalking-kubernetes.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="进入chart目录进行安装"><a href="#进入chart目录进行安装" class="headerlink" title="进入chart目录进行安装"></a>进入chart目录进行安装</h3><pre class="line-numbers language-shell"><code class="language-shell">cd skywalking-kubernetes/charthelm repo add elastic https://helm.elastic.cohelm dep up skywalkinghelm install my-skywalking skywalking -n skywalking \        --set elasticsearch.enabled=false \        --set elasticsearch.config.host=elasticsearch-client.elastic.svc.cluster.local \        --set elasticsearch.config.port.http=9200 \        --set elasticsearch.config.user=elastic \        --set elasticsearch.config.password=n816QscHORFQMQWQfs4U<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>先要创建一个skywalking的namespace： kubectl create ns skywalking</p></blockquote><h3 id="查看所有pod是否处于running"><a href="#查看所有pod是否处于running" class="headerlink" title="查看所有pod是否处于running"></a>查看所有pod是否处于running</h3><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get podNAME                                     READY   STATUS       RESTARTS   AGEmy-skywalking-es-init-x89pr                 0/1     Completed    0          15hmy-skywalking-oap-694fc79d55-2dmgr          1/1     Running      0          16hmy-skywalking-oap-694fc79d55-bl5hk          1/1     Running      4          16hmy-skywalking-ui-6bccffddbd-d2xhs           1/1     Running      0          16h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过以下命令来查看chart。</p><pre class="line-numbers language-shell"><code class="language-shell"># helm list --all-namespacesNAME                NAMESPACE   REVISION UPDATED                                 STATUS   CHART                     APP VERSIONmy-skywalking       skywalking  1        2020-09-29 14:42:10.952238898 +0800 CST deployed skywalking-3.1.0          8.1.0      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要修改配置，则直接修改value.yaml，如下我们修改my-skywalking-ui的service为NodePort，则如下修改：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>..<span class="token key atrule">ui</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ui  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">image</span><span class="token punctuation">:</span>    <span class="token key atrule">repository</span><span class="token punctuation">:</span> apache/skywalking<span class="token punctuation">-</span>ui    <span class="token key atrule">tag</span><span class="token punctuation">:</span> 8.1.0    <span class="token key atrule">pullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span class="token punctuation">...</span>.  <span class="token key atrule">service</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort     <span class="token comment" spellcheck="true"># clusterIP: None</span>    <span class="token key atrule">externalPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">internalPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">...</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用以下命名升级即可。</p><pre class="line-numbers language-shell"><code class="language-shell">helm upgrade sky-server ../skywalking -n skywalking<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们可以查看service是否变为NodePort了。</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get svc -n skywalking NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)               AGEmy-skywalking-oap   ClusterIP   10.109.109.131   <none>        12800/TCP,11800/TCP   88smy-skywalking-ui    NodePort    10.102.247.110   <none>        80:32563/TCP          88s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在就可以通过UI界面查看skywalking了。</p><h2 id="应用接入skywalking-agent"><a href="#应用接入skywalking-agent" class="headerlink" title="应用接入skywalking agent"></a>应用接入skywalking agent</h2><p>现在skywalking的服务端已经安装好了，接下来就是应用接入了，所谓的应用接入就是应用在启动的时候加入skywalking agent，在容器中接入agent的方式我这里介绍两种。</p><ul><li>在制作应用镜像的时候把agent所需的文件和包一起打进去</li><li>以sidecar的形式给应用容器接入agent</li></ul><p>首先我们应该下载对应的agent软件包：</p><pre class="line-numbers language-shell"><code class="language-shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/skywalking/8.1.0/apache-skywalking-apm-8.1.0.tar.gztar xf apache-skywalking-apm-8.1.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在制作应用镜像的时候把agent所需的文件和包一起打进去</p><p>开发类似下面的Dockerfile，然后直接build镜像即可，这种方法比较简单</p><pre class="line-numbers language-shell"><code class="language-shell">FROM harbor-test.coolops.com/coolops/jdk:8u144_testRUN mkdir -p /usr/skywalking/agent/ADD apache-skywalking-apm-bin/agent/ /usr/skywalking/agent/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：这个Dockerfile是咱们应用打包的基础镜像，不是应用的Dockerfile</p><p>以sidecar的形式添加agent包，首先制作一个只有agent的镜像，如下：</p><pre class="line-numbers language-shell"><code class="language-shell">FROM busybox:latest ENV LANG=C.UTF-8RUN set -eux && mkdir -p /usr/skywalking/agent/ADD apache-skywalking-apm-bin/agent/ /usr/skywalking/agent/WORKDIR /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们像下面这样开发deployment的yaml清单。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> innerpeacez/sw<span class="token punctuation">-</span>agent<span class="token punctuation">-</span>sidecar<span class="token punctuation">:</span>latest        <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent<span class="token punctuation">-</span>sidecar        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">]</span>        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'-c'</span><span class="token punctuation">,</span><span class="token string">'mkdir -p /skywalking/agent &amp;&amp; cp -r /usr/skywalking/agent/* /skywalking/agent'</span><span class="token punctuation">]</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /skywalking/agent          <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.coolops.cn/skywalking<span class="token punctuation">-</span>java<span class="token punctuation">:</span>1.7.9        <span class="token key atrule">name</span><span class="token punctuation">:</span> demo        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> java <span class="token punctuation">-</span>javaagent<span class="token punctuation">:</span>/usr/skywalking/agent/skywalking<span class="token punctuation">-</span>agent.jar <span class="token punctuation">-</span>Dskywalking.agent.service_name=$<span class="token punctuation">{</span>SW_AGENT_NAME<span class="token punctuation">}</span> <span class="token punctuation">-</span>jar demo.jar        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/skywalking/agent          <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SW_AGENT_COLLECTOR_BACKEND_SERVICES            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'my-skywalking-oap.skywalking.svc.cluster.local:11800'</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SW_AGENT_NAME            <span class="token key atrule">value</span><span class="token punctuation">:</span> cartechfin<span class="token punctuation">-</span>open<span class="token punctuation">-</span>platform<span class="token punctuation">-</span>skywalking      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在启动应用的时候只要引入skywalking的javaagent即可，如下：</p><pre class="line-numbers language-shell"><code class="language-shell">java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -Dskywalking.agent.service_name=${SW_AGENT_NAME} -jar yourApp.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> APM系统 </tag>
            
            <tag> 链路追踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK</title>
      <link href="2021/01/13/project/elk/"/>
      <url>2021/01/13/project/elk/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么用到ELK"><a href="#为什么用到ELK" class="headerlink" title="为什么用到ELK"></a>为什么用到ELK</h2><p>参考整理：<a href="https://www.cnblogs.com/aresxin/p/8035137.html" target="_blank" rel="noopener">https://www.cnblogs.com/aresxin/p/8035137.html</a></p><p>一般我们通过日志排除，发现问题根源解决问题：如果1台或者几台服务器，我们可以通过 linux命令，<code>tail、cat</code>，通过grep、awk等过滤去查询定位日志查问题。但在规模较大的场景中，此方法效率低下，面临问题包括日志量太大如何归档、文本搜索太慢怎么办、如何多维度查询。需要集中化的日志管理，所有服务器上的日志收集汇总。常见解决思路是<strong>建立集中式日志收集系统</strong>，将所有节点上的日志统一收集，管理，访问。</p><p>一般大型系统是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。</p><p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p><ul><li><strong>收集</strong>－能够采集多种来源的日志数据</li><li><strong>传输</strong>－能够稳定的把日志数据传输到中央系统</li><li><strong>存储</strong>－如何存储日志数据</li><li><strong>分析</strong>－可以支持 UI 分析</li><li><strong>警告</strong>－能够提供错误报告，监控机制</li></ul><p>ELK提供了一整套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用。目前主流的一种日志系统。</p><h2 id="ELK简介"><a href="#ELK简介" class="headerlink" title="ELK简介"></a>ELK简介</h2><p>ELK是三个开源软件的缩写，分别表示：<strong>Elasticsearch , Logstash, Kibana</strong> , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具（Agent），Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p><p>Elasticsearch是个<strong>开源分布式搜索引擎</strong>，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p>Logstash 主要是用来<strong>日志的搜集、分析、过滤日志</strong>的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p><p>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 <strong>Web 界面</strong>，可以帮助汇总、分析和搜索重要数据日志。</p><p>Filebeat隶属于Beats。目前Beats包含四种工具：</p><ol><li><ol><li>Packetbeat（搜集网络流量数据）</li><li>Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</li><li>Filebeat（搜集文件数据）</li><li>Winlogbeat（搜集 Windows 事件日志数据）</li></ol></li></ol><p>官网地址:<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a></p><p>官网权威指南:<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><p>Elasticsearch：<br><a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/products/elasticsearch</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html</a></p><p>elasticsearch中文社区：<br><a href="https://elasticsearch.cn/" target="_blank" rel="noopener">https://elasticsearch.cn/</a></p><p>Logstash：<br><a href="https://www.elastic.co/cn/products/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/products/logstash</a><br><a href="https://www.elastic.co/guide/en/logstash/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/5.6/index.html</a></p><p>Kibana:</p><p><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/products/kibana</a></p><p><a href="https://www.elastic.co/guide/en/kibana/5.5/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/5.5/index.html</a></p><p>Filebeat：</p><p><a href="https://www.elastic.co/cn/products/beats/filebeat" target="_blank" rel="noopener">https://www.elastic.co/cn/products/beats/filebeat</a><br><a href="https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html</a></p><h2 id="ELK架构图"><a href="#ELK架构图" class="headerlink" title="ELK架构图"></a>ELK架构图</h2><h3 id="架构图一"><a href="#架构图一" class="headerlink" title="架构图一"></a>架构图一</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-1.png" alt></p><p>这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是<strong>Logstash耗资源较大</strong>，运行占用CPU和内存高。另外<strong>没有消息队列缓存，存在数据丢失隐患</strong>。</p><h3 id="架构图二"><a href="#架构图二" class="headerlink" title="架构图二"></a>架构图二</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-2.png" alt></p><p>此种架构引入了消息队列机制，位于各个节点上的Logstash Agent先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。<strong>因为引入了Kafka（或者Redis）,所以即使远端Logstash server因故障停止运行，数据将会先被存储下来</strong>，从而避免数据丢失。</p><h3 id="架构图三"><a href="#架构图三" class="headerlink" title="架构图三"></a>架构图三</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-3.png" alt></p><p>此种架构<strong>将收集端logstash替换为beats</strong>，更灵活，消耗资源更少，扩展性更强。同时可配置Logstash 和Elasticsearch 集群用于支持大集群系统的运维日志数据监控和查询。</p><h2 id="Filebeat工作原理"><a href="#Filebeat工作原理" class="headerlink" title="Filebeat工作原理"></a>Filebeat工作原理</h2><p>Filebeat由两个主要组件组成：prospectors 和 harvesters。这两个组件协同工作将文件变动发送到指定的输出中。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-4.png" alt></p><p><strong>Harvester（收割机）：</strong>负责<strong>读取单个文件内容</strong>。每个文件会启动一个Harvester，每个Harvester会逐行读取各个文件，并将文件内容发送到制定输出中。</p><p>Harvester负责打开和关闭文件，意味在Harvester运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat会继续读取此文件。所以在Harvester关闭之前，磁盘不会被释放。默认情况filebeat会保持文件打开的状态，直到达到<a href="https://www.elastic.co/guide/en/beats/filebeat/5.5/configuration-filebeat-options.html#close-inactive" target="_blank" rel="noopener"><code>close_inactive</code></a>（如果此选项开启，filebeat会在指定时间内将不再更新的文件句柄关闭，时间从harvester读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由scan_frequency参数决定，默认10s。Harvester使用内部时间戳来记录文件最后被收集的时间。例如：设置5m，则在Harvester读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄。默认5m）。</p><p><strong>Prospector（勘测者）：</strong>负责<strong>管理Harvester并找到所有读取源</strong>。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">filebeat.prospectors</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">input_type</span><span class="token punctuation">:</span> log  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /apps/logs/*/info.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Prospector会找到/apps/logs/*目录下的所有info.log文件，并为每个文件启动一个Harvester。Prospector会检查每个文件，看Harvester是否已经启动，是否需要启动，或者文件是否可以忽略。若Harvester关闭，只有在文件大小发生变化的时候Prospector才会执行检查。只能检测本地的文件。</p><p><strong>Filebeat如何记录文件状态：</strong></p><p>将文件状态记录在文件中（默认在/var/lib/filebeat/registry）。此状态可以记住Harvester收集文件的偏移量。若连接不上输出设备，如ES等，filebeat会记录发送前的最后一行，并再可以连接的时候继续发送。Filebeat在运行的时候，Prospector状态会被记录在内存中。Filebeat重启的时候，利用registry记录的状态来进行重建，用来还原到重启之前的状态。每个Prospector会为每个找到的文件记录一个状态，对于每个文件，Filebeat存储唯一标识符以检测文件是否先前被收集。</p><p><strong>Filebeat如何保证事件至少被输出一次：</strong></p><p>Filebeat之所以能保证事件至少被传递到配置的输出一次，没有数据丢失，是因为filebeat将每个事件的传递状态保存在文件中。在未得到输出方确认时，filebeat会尝试一直发送，直到得到回应。若filebeat在传输过程中被关闭，则不会再关闭之前确认所有时事件。任何在filebeat关闭之前为确认的时间，都会在filebeat重启之后重新发送。这可确保至少发送一次，但有可能会重复。可通过设置<a href="https://www.elastic.co/guide/en/beats/filebeat/5.5/configuration-global-options.html#shutdown-timeout" target="_blank" rel="noopener"><code>shutdown_timeout</code></a> 参数来设置关闭之前的等待事件回应的时间（默认禁用）。</p><h2 id="Logstash工作原理"><a href="#Logstash工作原理" class="headerlink" title="Logstash工作原理"></a>Logstash工作原理</h2><p>Logstash事件处理有三个阶段：inputs → filters → outputs。是一个接收，处理，转发日志的工具。支持系统日志，webserver日志，错误日志，应用日志，总之包括所有可以抛出来的日志类型。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-5.png" alt></p><p><strong>Input：输入数据到logstash。</strong></p><p>一些常用的输入为：</p><p>file：从文件系统的文件中读取，类似于tail -f命令</p><p>syslog：在514端口上监听系统日志消息，并根据RFC3164标准进行解析</p><p>redis：从redis service中读取</p><p>beats：从filebeat中读取</p><p><strong>Filters：数据中间处理，对数据进行操作。</strong></p><p>一些常用的过滤器为：</p><p>grok：解析任意文本数据，Grok 是 Logstash 最重要的插件。它的主要作用就是将文本格式的字符串，转换成为具体的结构化的数据，配合正则表达式使用。内置120多个解析语法。</p><p>官方提供的grok表达式：<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="noopener">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a><br>grok在线调试：<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="noopener">https://grokdebug.herokuapp.com/</a></p><p>mutate：对字段进行转换。例如对字段进行删除、替换、修改、重命名等。</p><p>drop：丢弃一部分events不进行处理。</p><p>clone：拷贝 event，这个过程中也可以添加或移除字段。</p><p>geoip：添加地理信息（为前台kibana图形化展示使用）</p><p><strong>Outputs：outputs是logstash处理管道的最末端组件。</strong>一个event可以在处理过程中经过多重输出，但是一旦所有的outputs都执行结束，这个event也就完成生命周期。</p><p>一些常见的outputs为：</p><p>elasticsearch：可以高效的保存数据，并且能够方便和简单的进行查询。</p><p>file：将event数据保存到文件中。</p><p>graphite：将event数据发送到图形化组件中，一个很流行的开源存储图形化展示的组件。</p><p><strong>Codecs：codecs 是基于数据流的过滤器，它可以作为input，output的一部分配置</strong>。Codecs可以帮助你轻松的分割发送过来已经被序列化的数据。</p><p>一些常见的codecs：</p><p>json：使用json格式对数据进行编码/解码。</p><p>multiline：将汇多个事件中数据汇总为一个单一的行。比如：java异常信息和堆栈信息。</p><h2 id="Elasticsearch部署"><a href="#Elasticsearch部署" class="headerlink" title="Elasticsearch部署"></a>Elasticsearch部署</h2><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>es版本：7.8.1</p><p>安装路径：/home/rndii/projects/es/elasticsearch-7.8.1</p><p>服务器：10.0.1.104，10.0.1.117，10.0.1.127</p><p>jdk ：/home/rndii/projects/es/elasticsearch-7.8.1/jdk</p><p>jdk-version:14.0.1（需要java-jdk，前置条件）</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>现阶段基本为默认配置，<strong>注意新建index时的分片与备份</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 找到配置文件中的cluster.name，打开该配置并设置集群名称</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> wisefly<span class="token punctuation">-</span>test<span class="token punctuation">-</span>es<span class="token comment" spellcheck="true"># 找到配置文件中的node.name，打开该配置并设置节点名称</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> es<span class="token punctuation">-</span><span class="token number">104</span><span class="token comment" spellcheck="true"># 修改data存放的路径</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /home/rndii/projects/es/elasticsearch<span class="token punctuation">-</span>7.8.1/data<span class="token comment" spellcheck="true"># 修改logs日志的路径</span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /home/rndii/projects/es/elasticsearch<span class="token punctuation">-</span>7.8.1/logs<span class="token comment" spellcheck="true"># 监听的网络地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 10.0.1.104<span class="token comment" spellcheck="true"># 开启监听的端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token comment" spellcheck="true"># 注册到注册中心</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"10.0.1.104"</span><span class="token punctuation">,</span> <span class="token string">"10.0.1.117"</span><span class="token punctuation">,</span> <span class="token string">"10.0.1.127"</span><span class="token punctuation">]</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es-104"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 开启跨域，增加新的参数，这样head插件可以访问es</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有配置java的全局环境变量，需要在bin/elasticsearch 增加JAVA_HOME=/home/rndii/projects/es/elasticsearch-7.8.1/jdk</p><h3 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h3><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a><br><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>在以上路径中找到对应版本的ik分词器，解压到 /home/rndii/projects/es/elasticsearch-7.8.1/plugins/ik/下</p><h4 id="IK分词器动态扩容"><a href="#IK分词器动态扩容" class="headerlink" title="IK分词器动态扩容"></a>IK分词器动态扩容</h4><p>修改 /home/rndii/projects/es/elasticsearch-7.8.1/plugins/ik/config/IKAnalyzer.cfg.xml  文件</p><p>把自己需要的词加到字典中，再在下边添加自己的拓展词典和停用词词典：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remote_ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://10.0.1.117:19200/dynamic.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remote_ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://10.0.1.117:19200/stop.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果配置完重启es报错的话，重启Kibana</p></blockquote><h3 id="启动命令-d表示后台运行"><a href="#启动命令-d表示后台运行" class="headerlink" title="启动命令,-d表示后台运行"></a>启动命令,-d表示后台运行</h3><pre class="line-numbers language-bash"><code class="language-bash">bin/elasticsearch -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看es集群相关信息"><a href="#查看es集群相关信息" class="headerlink" title="查看es集群相关信息"></a>查看es集群相关信息</h3><p>查看集群健康状态<br><a href="http://10.0.1.104:9200/_cluster/health?pretty=true" target="_blank" rel="noopener">http://10.0.1.104:9200/_cluster/health?pretty=true</a></p><p>查看集群状态<br><a href="http://10.0.1.104:9200/_cluster/stats?pretty" target="_blank" rel="noopener">http://10.0.1.104:9200/_cluster/stats?pretty</a></p><p>查看节点总体情况<br><a href="http://10.0.1.104:9200/_nodes/process?pretty" target="_blank" rel="noopener">http://10.0.1.104:9200/_nodes/process?pretty</a></p><p>查看某个节点的情况<br><a href="http://10.0.1.104:9200/_nodes/es-104/process?pretty" target="_blank" rel="noopener">http://10.0.1.104:9200/_nodes/es-104/process?pretty</a></p><p>ElasticSearch-Head<br><a href="http://10.0.1.104:9100/" target="_blank" rel="noopener">http://10.0.1.104:9100/</a></p><h2 id="Kibana部署"><a href="#Kibana部署" class="headerlink" title="Kibana部署"></a>Kibana部署</h2><p>1.下载：到elasticsearch官网下载7.8.1版本</p><p>2.解压后进入config目录</p><p>3.编辑kibana.yml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#外网访问</span><span class="token key atrule">server.host</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span><span class="token comment" spellcheck="true">#配置es集群地址</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://10.0.1.104:9200"</span><span class="token punctuation">,</span> <span class="token string">"http://10.0.1.117:9200"</span><span class="token punctuation">,</span> <span class="token string">"http://10.0.1.127:9200"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#7.x后自带中文包，使用中文包</span><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.进入bin，后台启动nohup </p><pre class="line-numbers language-shell"><code class="language-shell">./kibana > runlog.log 2> & 1&<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2&gt;&amp;1 &amp; 中，最后一个&amp;表示把条命令放到后台执行，含义：将标准错误输出重定向到标准输出</p><p>整句语句的意思就是将标准错误输出和标准输出都定向到runlog.log中。</p></blockquote><p>5.kibana访问界面：<a href="http://10.0.1.127:5601/app/kibana" target="_blank" rel="noopener">http://10.0.1.127:5601/app/kibana</a></p><blockquote><p>公司内网，外边进不去</p></blockquote><p><strong>6.索引模板</strong></p><p>由于每天生成索引日志，并且<strong>日志索引分片为1，副本分片也为1</strong>，logstash在向es中添加数据时会自动创建索引，所以我们可以在es中创建索引模板，规范以logstash开头的索引名的数据类型，索引等生成规则。而不是默认生成！！！！</p><p><strong>下列为索引生成规则及请求参数：</strong></p><p>1）template指定的”searchlog-*”表示该template将应用于searchlog-开头的索引的创建，并与order参数一起决定哪个模板生效（同名称规则的order更大的模板生效）；</p><p>2）setting节点下refresh_interval参数表示数据自动刷新的频率（默认1s），由于日志文件实时性要求并不是特别高，因此这里可以酌情降低频率以提高索引的写入性能；</p><pre class="line-numbers language-json"><code class="language-json">#查询索引GET /_cat/indices?v#模糊查询索引GET _cat/indices/log*DELETE loginfo<span class="token number">-2021</span>-<span class="token number">01</span>-<span class="token number">07</span>#查询索引下所有数据GET loginfo<span class="token number">-2021</span>-<span class="token number">01</span>-<span class="token number">07</span>/_search?pretty<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#获取文档GET loginfo<span class="token number">-2021</span>-<span class="token number">01</span>-<span class="token number">04</span>/_doc/b18izXYBqI-k2LwG7vaq?pretty#获取模板GET _template/loginfo#删除模板DELETE _template/loginfo#添加模板PUT _template/loginfo<span class="token punctuation">{</span>  <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"index_patterns"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"loginfo*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token property">"max_result_window"</span><span class="token operator">:</span> <span class="token number">2147483647</span><span class="token punctuation">,</span>      <span class="token property">"refresh_interval"</span><span class="token operator">:</span> <span class="token string">"10s"</span><span class="token punctuation">,</span>      <span class="token property">"store"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"fs"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"@version"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"dateTime"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"level"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"thread"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"class"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"port"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"applicationName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"traceId"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"spanId"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"method"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"message"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"dynamic_templates"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token property">"longs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"match_mapping_type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token string">"l_*"</span><span class="token punctuation">,</span>                    <span class="token property">"unmatch"</span><span class="token operator">:</span> <span class="token string">"*_text"</span><span class="token punctuation">,</span>                    <span class="token property">"mapping"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token property">"shorts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"match_mapping_type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token string">"s_*"</span><span class="token punctuation">,</span>                    <span class="token property">"unmatch"</span><span class="token operator">:</span> <span class="token string">"*_text"</span><span class="token punctuation">,</span>                    <span class="token property">"mapping"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"display_es"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Logstash部署"><a href="#Logstash部署" class="headerlink" title="Logstash部署"></a>Logstash部署</h2><p>1.elasticsearch官网下载7.8.1logstash</p><p>2.解压后进入config</p><p>3.增加配置文件logstash-es.conf</p><p>4.增加内容</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>    kafka <span class="token punctuation">{</span>        type => <span class="token string">"loginfo"</span>        bootstrap_servers => <span class="token punctuation">[</span><span class="token string">"10.0.1.104:9092,10.0.1.117:9092,10.0.1.127:9092"</span><span class="token punctuation">]</span>        group_id => <span class="token string">"loginfo"</span>        topics => <span class="token punctuation">[</span><span class="token string">"loginfo"</span><span class="token punctuation">]</span>        consumer_threads => <span class="token number">1</span>        decorate_events => <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>#过滤器，去除换行符，将消息以json格式解析filter <span class="token punctuation">{</span>   multiline <span class="token punctuation">{</span>        pattern => <span class="token string">"^\d{4}-\d{1,2}-\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}"</span>        negate => <span class="token boolean">true</span>          what => <span class="token string">"previous"</span>     <span class="token punctuation">}</span>       mutate <span class="token punctuation">{</span>        gsub => <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"    "</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>        gsub => <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"[\u0000-\u000A]"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>         gsub => <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"\r"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    json<span class="token punctuation">{</span>        source => <span class="token string">"message"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#消息输出到es集群，根据时间建立不同索引loginfo-%<span class="token punctuation">{</span>+yyyy-MM-dd<span class="token punctuation">}</span>output <span class="token punctuation">{</span>        if<span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"loginfo"</span> <span class="token punctuation">{</span>                elasticsearch <span class="token punctuation">{</span>                        hosts => <span class="token punctuation">[</span><span class="token string">"10.0.1.104:9200"</span><span class="token punctuation">,</span><span class="token string">"10.0.1.117:9200"</span><span class="token punctuation">,</span><span class="token string">"10.0.1.127:9200"</span><span class="token punctuation">]</span>                        #index => <span class="token string">"log-service"</span>                         #codec => <span class="token string">"json"</span> 这里写好像没用，还没测试，暂时注释                        index => <span class="token string">"loginfo-%{+yyyy-MM-dd}"</span>  #使用自定义名称                                       <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       stdout <span class="token punctuation">{</span>         codec => json           <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还不清晰的可以参考：<a href="https://www.cnblogs.com/yuhuLin/p/7018858.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuhuLin/p/7018858.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> 工具 </tag>
            
            <tag> 日志系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zipkin的安装和配置</title>
      <link href="2021/01/12/project/zipkin/"/>
      <url>2021/01/12/project/zipkin/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Zipkin是一个分布式跟踪系统。它有助于收集解决服务体系结构中的延迟问题所需的时序数据。功能包括该数据的收集和查找。</p><p>如果日志文件中有trace ID，则可以直接跳至该trace ID。否则，您可以基于属性进行查询，例如服务，操作名称，标签和持续时间。将为您总结一些有趣的数据，例如在服务中花费的时间百分比以及操作是否失败。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zipkin-1.png" alt></p><h2 id="Zipkin安装"><a href="#Zipkin安装" class="headerlink" title="Zipkin安装"></a>Zipkin安装</h2><p>zipkin2.0后官网强烈建议用jar或者docker搭建zipkin server，不建议自己搭建zipkin server，并且zipkin server最高只支持到spring boot 2.0.9，后续的高版本服务是启动不了的。</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>docker pull openzipkin/zipkin</p><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><pre class="line-numbers language-sh"><code class="language-sh">           docker run              --name wisefly-zipkin #名称             -p 9411:9411 #暴露端口             -e "STORAGE_TYPE=elasticsearch" #以es方式存储             -e "ES_HOSTS=10.0.1.104:9200,10.0.1.117:9200,10.0.1.127:9200" #es地址             -e "ES_INDEX_SHARDS=5" #分区             -e "ES_INDEX_REPLICAS=1" #副本             -e "ES_INDEX=zipkin" # 索引             -e "COLLECTOR_KAFKA_ENABLED=true" #以kafka方式传输             -e "KAFKA_BOOTSTRAP_SERVERS=10.0.1.104:9092,10.0.1.117:9092,10.0.1.127:9092" #kafka地址             -e "KAFKA_GROUP_ID=zipkin" #组             -e "KAFKA_TOPIC=zipkin" #主题             -e "KAFKA_STREAMS=1" #线程数             -idt openzipkin/zipkin #镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://10.0.1.104:9411/zipkin" target="_blank" rel="noopener">http://10.0.1.104:9411/zipkin</a></p><p>（公司内网，外网进不去）</p><h2 id="Zipkin引入"><a href="#Zipkin引入" class="headerlink" title="Zipkin引入"></a>Zipkin引入</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zipkin-2.png" alt></p><p>pom文件中添加，包含了链路追踪sleuth与链路展示zipkin</p><h2 id="应用连接Zipkin"><a href="#应用连接Zipkin" class="headerlink" title="应用连接Zipkin"></a>应用连接Zipkin</h2><pre class="line-numbers language-yaml"><code class="language-yaml"> <span class="token key atrule">spring</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># zipkin配置</span>         <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>           <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//10.0.1.104<span class="token punctuation">:</span>9411/           <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment" spellcheck="true"># sleuth配置</span>       <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>         <span class="token key atrule">sampler</span><span class="token punctuation">:</span>            <span class="token key atrule">robability</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="应用通过kafka传数据到Zipkin"><a href="#应用通过kafka传数据到Zipkin" class="headerlink" title="应用通过kafka传数据到Zipkin"></a>应用通过kafka传数据到Zipkin</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zipkin-3.png" alt></p><p>pom中添加两个包，配置文件中添加以下配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># kafka配置</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">kafka</span><span class="token punctuation">:</span>         <span class="token key atrule">binder</span><span class="token punctuation">:</span>           <span class="token key atrule">brokers</span><span class="token punctuation">:</span> 10.0.1.104<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>10.0.1.117<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>10.0.1.127<span class="token punctuation">:</span><span class="token number">9092</span>           <span class="token key atrule">zkNodes</span><span class="token punctuation">:</span> 10.0.1.104<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>10.0.1.117<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>10.0.1.127<span class="token punctuation">:</span><span class="token number">2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完成以上操作能实现web请求的链路信息通过kafka传输到zipkin，zipkin传输到es做存储。通过zipkin server提供的管理工具，能查询出整个平台的所有链路信息以及查询具体某条链路的详细信息（包含经过的服务，服务的处理方法，服务的处理时间）。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> APM系统 </tag>
            
            <tag> 链路追踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个返回数组的接口</title>
      <link href="2021/01/12/project/cloud-interface-returnlist/"/>
      <url>2021/01/12/project/cloud-interface-returnlist/</url>
      
        <content type="html"><![CDATA[<h2 id="Rest层"><a href="#Rest层" class="headerlink" title="Rest层"></a>Rest层</h2><p>先找对要查询什么表先，然后在那个表对应的rest层增加新的接口</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取实例包主键数组"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/instanceId/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ResponsePacket<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String packetSubTaskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><p>因为要<strong>实现用一个id查询多条id数据</strong>，返回有可能是一条、多条甚至是没有，所以用一个List数组作为返回值。</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getInstancePacketIds</span><span class="token punctuation">(</span>String packetSubTaskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> instancePacketIds <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getInstancePacketIds</span><span class="token punctuation">(</span>packetSubTaskId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instancePacketIds<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mapper层"><a href="#Mapper层" class="headerlink" title="Mapper层"></a>Mapper层</h2><p>在interface增加：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TFlowPacketSubTaskRelMapper</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getInstancePacketIds</span><span class="token punctuation">(</span>String packetSubTaskId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后是xml文件</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getInstancePacketIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select packet_instance_id    from    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    where    packet_sub_task_id = #{packetSubTaskId}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单的一条sql，其实就是</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> packet_instance_id<span class="token keyword">from</span> t_flow_packet_sub_task_rel<span class="token keyword">where</span> packet_sub_task_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{packetSubTaskId}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就完成了，可以回去写rest了。</p><h2 id="完善Rest层：实现数组返回"><a href="#完善Rest层：实现数组返回" class="headerlink" title="完善Rest层：实现数组返回"></a>完善Rest层：实现数组返回</h2><p>现在回来完善rest层，因为ResponsePacket没有List这样的参数可以传，所以要自己写一个DTO来把List包起来，里边有List的get和set方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDTO</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseResponseData</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把传来的List数组放入DTO里，再把DTO放进ResponsePacket里：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取实例包主键数组"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/instanceId/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ResponsePacket<span class="token operator">&lt;</span>ResponseDTO<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String packetSubTaskId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> instancePacketIds <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getInstancePacketIds</span><span class="token punctuation">(</span>packetSubTaskId<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResponseDTO<span class="token operator">&lt;</span>String<span class="token operator">></span> responseDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseDTO</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    responseDTO<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>instancePacketIds<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResponsePacket<span class="token operator">&lt;</span>ResponseDTO<span class="token operator">&lt;</span>String<span class="token operator">>></span> responsePacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponsePacket</span><span class="token operator">&lt;</span>ResponseDTO<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    responsePacket<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    responsePacket<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>ResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    responsePacket<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>responseDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> responsePacket<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDTO</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseResponseData</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就这样实现了接口。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> interface </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker和K8S简介和安装部署</title>
      <link href="2021/01/11/project/docker-k8s/"/>
      <url>2021/01/11/project/docker-k8s/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>相信很多人都用过虚拟机。虚拟机，就是在你的操作系统里面，装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/docker-1.jpg" alt></p><p>虚拟机，类似于“子电脑”</p><p>在“子电脑”里，你可以和正常电脑一样运行程序，例如开QQ。如果你愿意，你可以变出好几个“子电脑”，里面都开上QQ。“子电脑”和“子电脑”之间，是<strong>相互隔离</strong>的，互不影响。</p><p>虚拟机属于虚拟化技术。而Docker这样的容器技术，也是虚拟化技术，属于<strong>轻量级的虚拟化</strong>。</p><p>虚拟机虽然可以隔离出很多“子电脑”，但占用空间更大，启动更慢，虚拟机软件可能还要花钱（例如VMWare）。</p><p>而容器技术恰好没有这些缺点。它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”）。</p><p>它启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外，它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/docker-2.jpg" alt></p><p>容器和虚拟机的对比</p><p>正因为如此，容器技术受到了热烈的欢迎和追捧，发展迅速。</p><p>我们具体来看看Docker。</p><p>大家需要注意，<strong>Docker本身并不是容器</strong>，它是创建容器的工具，是应用容器引擎。</p><p>想要搞懂Docker，其实看它的两句口号就行。</p><p>第一句，是“<strong>Build, Ship and Run</strong>”。</p><p>也就是，“搭建、发送、运行”，三板斧。</p><p>第二句口号就是：“<strong>Build once，Run anywhere**</strong>（搭建一次，到处能用）**”。</p><p>Docker技术的三大核心概念，分别是：</p><ul><li><strong>镜像（Image）</strong></li><li><strong>容器（Container）</strong></li><li><strong>仓库（Repository）</strong></li></ul><p>说白了，这个Docker镜像，是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>负责对Docker镜像进行管理的，是<strong>Docker Registry服务</strong>（类似仓库管理员）。不是任何人建的任何镜像都是合法的。所以，Docker Registry服务对镜像的管理是非常严格的。</p><p>最常使用的Registry公开服务，是官方的<strong>Docker Hub</strong>，这也是默认的Registry，并拥有大量的高质量的官方镜像。</p><p>好了，说完了Docker，我们再把目光转向K8S。</p><h2 id="K8S简介"><a href="#K8S简介" class="headerlink" title="K8S简介"></a>K8S简介</h2><p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。</p><p>就在这个时候，K8S出现了。</p><p><strong>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes。</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-1.jpg" alt></p><p>Kubernetes这个单词来自于希腊语，含义是舵手或领航员。K8S是它的缩写，用“8”字替代了“ubernete”这8个字符。</p><p>K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的<strong>Borg系统</strong>。</p><p>一个K8S系统，通常称为一个<strong>K8S集群（Cluster）</strong>。</p><p>这个集群主要包括两个部分：</p><ul><li><strong>一个Master节点（主节点）</strong></li><li><strong>一群Node节点（计算节点）</strong></li></ul><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-2.jpg" alt></p><p>一看就明白：Master节点主要还是负责管理和控制。Node节点是工作负载节点，里面是具体的容器。</p><p>深入来看这两种节点。</p><p>首先是<strong>Master节点。</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-3.jpg" alt></p><p>Master节点包括API Server、Scheduler、Controller manager、etcd。</p><p>API Server是整个系统的对外接口，供客户端和其它组件调用，相当于“营业厅”。</p><p>Scheduler负责对集群内部的资源进行调度，相当于“调度室”。</p><p>Controller manager负责管理控制器，相当于“大总管”。</p><p>然后是<strong>Node节点</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-4.jpg" alt></p><p>Node节点包括Docker、kubelet、kube-proxy、Fluentd、kube-dns（可选），还有就是<strong>Pod</strong>。</p><blockquote><p>Pod是Kubernetes最基本的操作单元。一个Pod代表着集群中运行的一个进程，它内部封装了一个或多个紧密相关的容器。除了Pod之外，K8S还有一个Service的概念，一个Service可以看作一组提供相同服务的Pod的对外访问接口。</p></blockquote><p>Docker，不用说了，创建容器的。</p><p>Kubelet，主要负责监视指派到它所在Node上的Pod，包括创建、修改、监控、删除等。</p><p>Kube-proxy，主要负责为Pod对象提供代理。</p><p>Fluentd，主要负责日志收集、存储与查询。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>其实绝大部分Java开发人员都不需要掌握k8s+istio等</strong></p><p>大厂的经验不等于小厂也适用，发展规模和阶段不一样，更重要是能力差异，大部分企业选择最合适的技术能够迅速落地，才是最重要的，毕竟资源、能力、精力都有限。</p><p>市面上大部分的项目依然还是中小型的，Spring boot/cloud技术栈就已经足矣，杀鸡焉用牛刀？部署k8s、istio的人，都不算上是主流的Java研发人员，和Java研发人员也没真正的关系，他们求职的职位也往往是k8s运维工程师、容器开发工程师等偏运维的岗位。</p><h2 id="docker私库搭建"><a href="#docker私库搭建" class="headerlink" title="docker私库搭建"></a>docker私库搭建</h2><p>1.拉取docker默认私库镜像 </p><pre class="line-numbers language-shell"><code class="language-shell">docker pull registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.修改docker配置 docker.service ，开启远程端口2376，用于上传下载</p><pre class="line-numbers language-shell"><code class="language-shell">vi /usr/lib/systemd/system/docker.service <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改docker.service中的ExecStart</p><pre class="line-numbers language-text"><code class="language-text">[Service]Type=notify# the default is not to use systemd for cgroups because the delegate issues still# exists and systemd currently does not support the cgroup feature set required# for containers run by dockerExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H fd:// --containerd=/run/containerd/containerd.sock --bip=172.20.49.1/24 --mtu=1450ExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证2376端口</p><pre class="line-numbers language-shell"><code class="language-shell">netstat -nap|grep 2376<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/docker-3.jpg" alt></p><blockquote><p>netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。</p><ol><li>-n或–numeric：直接使用ip地址，而不通过域名服务器； </li><li>-a或–all：显示所有连线中的Socket； </li><li>-p或–programs：显示正在使用Socket的程序识别码和程序名称； </li></ol></blockquote><p>3.开启私库http上传下载</p><p>在 /etc/docker/  下，新建daemon.json，内容如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://th3lgj42.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"insecure-registries"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"10.0.1.104:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.启动私库镜像，暴露5000端口，用于推送</p><pre class="line-numbers language-shell"><code class="language-shell">docker run --name wisefly-docker-registry -idt -p 5000:5000 registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.重启docker服务</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl daemon-reload;service docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="maven-docker-配置"><a href="#maven-docker-配置" class="headerlink" title="maven docker 配置"></a>maven docker 配置</h2><p>1、在需要上传到docker的pom文件中做如下配置</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-report-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--新增的docker maven插件--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${docker-maven-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--docker镜像相关的配置信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--镜像名，要带上私有服务器IP和端口--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">></span></span>${docker-registryUrl}/${project.artifactId}:${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--TAG,这里用工程版本号--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTags</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTag</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTag</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTag</span><span class="token punctuation">></span></span>latest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTag</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTags</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--镜像的FROM，使用java官方镜像--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">></span></span>${docker-baseImage}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--该镜像的容器启动后，直接运行spring boot工程--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">></span></span>["java", "-jar", "/${project.build.finalName}.jar"]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--构建镜像的配置信息--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!--指定复制jar包的根目录--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!--指定复制的文件--></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--指定推送的仓库--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>registryUrl</span><span class="token punctuation">></span></span>${docker-registryUrl}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>registryUrl</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 开启远程API --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerHost</span><span class="token punctuation">></span></span>${docker-dockerHost}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerHost</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 是否有push功能 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pushImage</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pushImage</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--push后是否覆盖存在的标签镜像--></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、顶级pom文件中定义公共参数，方便统一修改docker maven版本，仓库地址，远程API等</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>docker-maven-plugin.version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>docker-maven-plugin.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>docker-registryUrl</span><span class="token punctuation">></span></span>10.0.1.104:5000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>docker-registryUrl</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>docker-dockerHost</span><span class="token punctuation">></span></span>http://10.0.1.104:2376<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>docker-dockerHost</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>docker-baseImage</span><span class="token punctuation">></span></span>java:8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>docker-baseImage</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven-compiler-plugin.version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven-compiler-plugin.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build-helper-maven-plugin.vrsion</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build-helper-maven-plugin.vrsion</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="maven推送docker镜像"><a href="#maven推送docker镜像" class="headerlink" title="maven推送docker镜像"></a>maven推送docker镜像</h2><p>1、选择需要推送的项目</p><p>2、执行</p><pre class="line-numbers language-shell"><code class="language-shell">mvn clean package -DskipTests docker:build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="验证镜像是否上传成功"><a href="#验证镜像是否上传成功" class="headerlink" title="验证镜像是否上传成功"></a>验证镜像是否上传成功</h2><p>执行 docker images 指令，查看镜像</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/docker-4.jpg" alt></p><h2 id="启动镜像，生成容器"><a href="#启动镜像，生成容器" class="headerlink" title="启动镜像，生成容器"></a>启动镜像，生成容器</h2><p>1、启动脚本文件上传，找到工程中的docker-compose文件夹，找到需要启动镜像的文件（文件名中会有项目名）。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/docker-5.jpg" alt></p><p>2、上传到服务器，目前104测试服务器都放在/home/wisefly/compose</p><p>3、执行docker-compose指定运行文件</p><pre class="line-numbers language-shell"><code class="language-shell">docker-compose -f business-file-compose.yaml up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 4、验证镜像是否启动成功</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/docker-6.jpg" alt></p><p>执行3步骤的指令返回done表示执行成功，通过 <strong>docker ps</strong> 也能查看容器是否启动成功</p><h2 id="docker常用指令"><a href="#docker常用指令" class="headerlink" title="docker常用指令"></a>docker常用指令</h2><pre class="line-numbers language-bash"><code class="language-bash">        docker images 查看镜像        docker rmi 镜像名或者ID 删除镜像        docker <span class="token function">ps</span> 查看运气容器        docker <span class="token function">ps</span> -a 查看所有容器（包含启动失败或者停止的）        docker <span class="token function">kill</span> 镜像ID 关闭容器        docker <span class="token function">rm</span> 镜像名或者ID 删除容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-compose启动所有镜像"><a href="#docker-compose启动所有镜像" class="headerlink" title="docker-compose启动所有镜像"></a>docker-compose启动所有镜像</h3><p>执行 <code>docker-compose -f docker-compose.yaml up -d</code> 启动文件配置所有的镜像，生成容器，用于初始化时启动所有容器。更新单个容器用上面说到的方法。</p><h2 id="k8安装部署（单机部署）"><a href="#k8安装部署（单机部署）" class="headerlink" title="k8安装部署（单机部署）"></a>k8安装部署（单机部署）</h2><p>以下内容为单机模式：</p><h3 id="k8s系统准备"><a href="#k8s系统准备" class="headerlink" title="k8s系统准备"></a>k8s系统准备</h3><p>环境准备</p><p>部署集群没有特殊说明均使用root用户执行命令</p><p>硬件信息</p><p>k8s-master 内存16GB 硬盘20GB k8s 控制节点 + Node节点</p><p>软件信息</p><p>CentOS Linux release </p><p>Kubernetes</p><p>Docker </p><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><pre class="line-numbers language-shell"><code class="language-shell">hostnamectl set-hostname k8s-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>（仅用于测试，生产请不要使用）</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl disable --now firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h3><pre class="line-numbers language-shell"><code class="language-shell">swapoff -ased -i 's/.*swap.*/#&/' /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="关闭-SELinux"><a href="#关闭-SELinux" class="headerlink" title="关闭 SELinux"></a>关闭 SELinux</h3><pre class="line-numbers language-shell"><code class="language-shell">setenforce 0sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="设置系统时区、同步时间"><a href="#设置系统时区、同步时间" class="headerlink" title="设置系统时区、同步时间"></a>设置系统时区、同步时间</h3><pre class="line-numbers language-shell"><code class="language-shell">timedatectl set-timezone Asia/Shanghaisystemctl enable --now chronyd# 将当前的 UTC 时间写入硬件时钟timedatectl set-local-rtc 0# 重启依赖于系统时间的服务systemctl restart rsyslog && systemctl restart crond<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署docker"><a href="#部署docker" class="headerlink" title="部署docker"></a>部署docker</h3><p>添加docker yum源</p><pre class="line-numbers language-shell"><code class="language-shell"># 安装必要依赖yum install -y yum-utils device-mapper-persistent-data lvm2# 添加aliyun docker-ce yum源yum -y install yum-utilsyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# 重建yum缓存yum makecache fast安装指定版本dockeryum install -y docker-ce-19.03.12-3.el7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确保网络模块开机自动加载</p><pre class="line-numbers language-shell"><code class="language-shell">lsmod | grep overlaylsmod | grep br_netfilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若上面命令无返回值输出或提示文件不存在，需执行以下命令：</p><pre class="line-numbers language-text"><code class="language-text">cat > /etc/modules-load.d/docker.conf <<EOFoverlaybr_netfilterEOFmodprobe overlaymodprobe br_netfilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使桥接流量对iptables可见</p><pre class="line-numbers language-text"><code class="language-text">cat > /etc/sysctl.d/k8s.conf <<EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证是否生效，均返回 1 即正确</p><pre class="line-numbers language-shell"><code class="language-shell">sysctl -n net.bridge.bridge-nf-call-iptablessysctl -n net.bridge.bridge-nf-call-ip6tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h3><pre class="line-numbers language-text"><code class="language-text">mkdir /etc/docker#修改cgroup驱动为systemd[k8s官方推荐]、限制容器日志量、修改存储类型，最后的docker家目录可修改cat > /etc/docker/daemon.json <<EOF{  "exec-opts": ["native.cgroupdriver=systemd"],  "log-driver": "json-file",  "log-opts": {    "max-size": "100m"  },  "storage-driver": "overlay2",  "storage-opts": [    "overlay2.override_kernel_check=true"  ],  "registry-mirrors": ["https://7uuu3esz.mirror.aliyuncs.com"],  "data-root": "/data/docker"}EOF#添加开机自启，立即启动systemctl enable --now dockersystemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署kubernetes"><a href="#部署kubernetes" class="headerlink" title="部署kubernetes"></a>部署kubernetes</h3><p>添加kubernetes源</p><pre class="line-numbers language-text"><code class="language-text">cat > /etc/yum.repos.d/kubernetes.repo <<EOF[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF#重建yum缓存，输入y添加证书认证yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看安装版本</p><pre class="line-numbers language-shell"><code class="language-shell">yum list |grep kubeletyum list |grep  kubeadmyum list |grep  kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装kubeadm、kubelet、kubectl，<strong>此处根据自己当前安装的版本进行版本替换</strong></p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y kubelet-1.19.0-0 --disableexcludes=kubernetesyum install -y kubeadm-1.19.0-0 --disableexcludes=kubernetesyum install -y kubectl-1.19.0-0 --disableexcludes=kubernetessystemctl enable --now kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置自动补全命令</p><pre class="line-numbers language-shell"><code class="language-shell">#安装bash自动补全插件yum install bash-completion -y#设置kubectl与kubeadm命令补全，下次login生效kubectl completion bash >/etc/bash_completion.d/kubectlkubeadm completion bash > /etc/bash_completion.d/kubeadm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预拉取kubernetes镜像，<strong>此处根据自己当前安装的版本进行版本替换</strong></p><pre class="line-numbers language-shell"><code class="language-shell">kubeadm config images list --kubernetes-version v1.19.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建脚本get-k8s-images.sh，内容如下：</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash# Script For Quick Pull K8S Docker ImagesKUBE_VERSION=v1.19.0PAUSE_VERSION=3.2CORE_DNS_VERSION=1.7.0ETCD_VERSION=3.4.9-1# pull kubernetes images from hub.docker.comdocker pull kubesphere/kube-proxy-amd64:$KUBE_VERSIONdocker pull kubesphere/kube-controller-manager-amd64:$KUBE_VERSIONdocker pull kubesphere/kube-apiserver-amd64:$KUBE_VERSIONdocker pull kubesphere/kube-scheduler-amd64:$KUBE_VERSION# pull aliyuncs mirror docker imagesdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$CORE_DNS_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSIONdocker pull quay.io/coreos/flannel:v0.12.0-arm64docker pull quay.io/coreos/flannel:v0.12.0-amd64# retag to k8s.gcr.io prefixdocker tag kubesphere/kube-proxy-amd64:$KUBE_VERSION  k8s.gcr.io/kube-proxy:$KUBE_VERSIONdocker tag kubesphere/kube-controller-manager-amd64:$KUBE_VERSION k8s.gcr.io/kube-controller-manager:$KUBE_VERSIONdocker tag kubesphere/kube-apiserver-amd64:$KUBE_VERSION k8s.gcr.io/kube-apiserver:$KUBE_VERSIONdocker tag kubesphere/kube-scheduler-amd64:$KUBE_VERSION k8s.gcr.io/kube-scheduler:$KUBE_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION k8s.gcr.io/pause:$PAUSE_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$CORE_DNS_VERSION k8s.gcr.io/coredns:$CORE_DNS_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION k8s.gcr.io/etcd:$ETCD_VERSION# untag origin tag, the images won't be delete.docker rmi kubesphere/kube-proxy-amd64:$KUBE_VERSIONdocker rmi kubesphere/kube-controller-manager-amd64:$KUBE_VERSIONdocker rmi kubesphere/kube-apiserver-amd64:$KUBE_VERSIONdocker rmi kubesphere/kube-scheduler-amd64:$KUBE_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$CORE_DNS_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本添加可执行权限，执行脚本拉取镜像：</p><pre class="line-numbers language-shell"><code class="language-shell">chmod +x get-k8s-images.sh./get-k8s-images.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="初始化kube-master"><a href="#初始化kube-master" class="headerlink" title="初始化kube-master"></a>初始化kube-master</h3><p>修改kubelet配置默认cgroup driver</p><pre class="line-numbers language-text"><code class="language-text">mkdir -p /var/lib/kubelet/cat > /var/lib/kubelet/config.yaml <<EOFapiVersion: kubelet.config.k8s.io/v1beta1kind: KubeletConfigurationcgroupDriver: systemdEOFsystemctl restart kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试环境是否正常（WARNING是正常的），此处选用国内阿里镜像源</p><pre class="line-numbers language-shell"><code class="language-shell">kubeadm init --image-repository registry.aliyuncs.com/google_containers --ignore-preflight-errors=Swap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化master 10.244.0.0/16是flannel固定使用的IP段，设置取决于网络组件要求</p><pre class="line-numbers language-shell"><code class="language-shell">kubeadm init --image-repository registry.aliyuncs.com/google_containers --pod-network-cidr=10.244.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置master认证</p><pre class="line-numbers language-shell"><code class="language-shell">echo 'export KUBECONFIG=/etc/kubernetes/admin.conf' >> /etc/profilesource /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装网络组件flannel</p><pre class="line-numbers language-shell"><code class="language-shell"># 注意这里下载kubectl apply -f kube-flannel.yaml需要科学上网wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ymlkubectl apply -f kube-flannel.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看kube-master节点状态</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get nodes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果长时间达不到 ready 可以查看所有pod 状态</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get pods --all-namespaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有pod有异常，可以查看描述以解决异常</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl describe pod pod-id -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以观察POD的内的启动日志</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl logs pod-id -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Kubernetes 将Pod调度到Master节点（单机运行K8S）去除 master 的污点</p><p>出于安全考虑，默认配置下Kubernetes不会将Pod调度到Master节点。如果希望将k8s-master也当作Node使用，可以执行如下命令：</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl taint node k8s-master node-role.kubernetes.io/master-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中k8s-master是主机节点hostname如果要恢复Master Only状态，执行如下命令：</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl taint node k8s-master node-role.kubernetes.io/master=""<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维开发 </tag>
            
            <tag> 容器 </tag>
            
            <tag> kubernetes </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud使用Feign暴露Interface</title>
      <link href="2021/01/09/project/cloud-interface/"/>
      <url>2021/01/09/project/cloud-interface/</url>
      
        <content type="html"><![CDATA[<h2 id="实现生产者中的接口"><a href="#实现生产者中的接口" class="headerlink" title="实现生产者中的接口"></a>实现生产者中的接口</h2><p>项目结构组织：项目由多个Module构成，而每个Module又由<strong>api模块、model模块、web模块</strong>等构成</p><p>需求：现在需要将A项目（生产者，或者叫服务提供者）的web模块中的某些接口暴露出去，要求在api模块中定义。使得B项目（消费者，或者叫客户端）能远程调用A项目暴露的接口</p><p>首先实现生产者中的接口，在A项目的<strong>web模块</strong>中，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"字典定义"</span><span class="token punctuation">,</span> tags <span class="token operator">=</span> <span class="token string">" 字典定义"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/wcenter/dict/define"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WcenterDictDefineRest</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**   * 获取树状字典   **/</span>  <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取树状字典"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"codes"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"字典编码"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String[]"</span><span class="token punctuation">,</span> allowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//allowMultiple：允许多个，即：数组或集合。</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/tree"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ResponsePacket<span class="token operator">&lt;</span>RecordsDTO<span class="token operator">></span> <span class="token function">loadTree</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"codes"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> codes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//下面为业务逻辑代码</span>    RecordsDTO<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>TreeEntityDTO<span class="token operator">>></span> responseDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecordsDTO</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>TreeEntityDTO<span class="token operator">>></span> treeDict <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getTreeDict</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>    responseDto<span class="token punctuation">.</span><span class="token function">setRecords</span><span class="token punctuation">(</span>treeDict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ResponsePacket<span class="token punctuation">.</span><span class="token function">generatePacket</span><span class="token punctuation">(</span>responseDto<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：上面那个类，必须加@RestController注解</strong>，否则后面调用api模块暴露的接口会出现问题。</p><h2 id="暴露接口"><a href="#暴露接口" class="headerlink" title="暴露接口"></a>暴露接口</h2><p>首先要引入Feign的依赖，Feign依赖是必须引入的，其余依赖根据自己的接口需要引入其他依赖。如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Feign Form Spring --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign.form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-form-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Feign Form --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign.form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Feign Core--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>10.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Feign Hystrix --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>10.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Feign Slf4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feign-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>10.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>暴露接口，在A项目的<strong>api模块</strong>中，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span><span class="token string">"字典定义远程服务接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ServiceNameConstants<span class="token punctuation">.</span>WISEFLY_WCENTER<span class="token punctuation">,</span> path <span class="token operator">=</span> ServiceNameConstants<span class="token punctuation">.</span>WISEFLY_WCENTER_PATH <span class="token operator">+</span> <span class="token string">"/wcenter/dict/define"</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> DictDefineFallbackFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DictDefineFeign</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"获取树状字典"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"codes"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"字典编码"</span><span class="token punctuation">,</span> paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> dataType <span class="token operator">=</span> <span class="token string">"String[]"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/tree"</span><span class="token punctuation">)</span>    ResponsePacket<span class="token operator">&lt;</span>RecordsDTO<span class="token operator">></span> <span class="token function">loadTree</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"codes"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>\1. <strong>必须加@FeignClient声明</strong><br>\2. 其他 value属性的值是yml文件中<code>spring.application.name</code>的值，这里建议用yml语法动态获取，如上面代码中所示 （用name属性也行，value属性也行）<br>\3. 如果yml文件中配置了<code>server.servlet.context-path</code>，必须配上path属性。否则后面调用这个接口会出现404问题<br>\4. 关于方法的mapping注解，有人说Feign不支持 GetMapping，笔者测试过 是支持的。这应该与某些依赖的版本有关<br>\5. <strong>方法参数必须加@RequestParam注解</strong>（否则，后面调用该接口会报<code>too many bad parameter</code>错误），<strong>若是POST请求方式，需要根据情况加@RequestBody注解</strong></p><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>需要在B项目中引入A项目的api模块的依赖，例子如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>business-wcenter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B项目的启动类<strong>必须加上@EnableFeignClients注解，还必须要加上basePackages的属性</strong>，他的值是标注了@FeignClient注解的接口的包路径，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"xx.xx.xx"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringCloudApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CriterionServerApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBoot整合测试"><a href="#SpringBoot整合测试" class="headerlink" title="SpringBoot整合测试"></a>SpringBoot整合测试</h2><p>引入SpringBoot的测试依赖，如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>    classes <span class="token operator">=</span> 启动类<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictFeignTest</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  DictFeign dictFeign<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 测试 远程调用数据字典   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRpcDictFeign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ResponsePacket<span class="token operator">&lt;</span>ResponseTreeEntityDto<span class="token operator">></span> tree <span class="token operator">=</span> dictFeign<span class="token punctuation">.</span><span class="token function">tree</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The dict tree is: {}"</span><span class="token punctuation">,</span> tree<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种暴露接口的测试，必须先启动生产者（服务提供者），再启动消费者（客户端）。</p><p>我们先启动A项目，再启动B项目，运行上面的测试方法，测试成功。</p><h2 id="服务降级处理（fallback）"><a href="#服务降级处理（fallback）" class="headerlink" title="服务降级处理（fallback）"></a>服务降级处理（fallback）</h2><p>远程调用失败降级处理，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ServiceNameConstants<span class="token punctuation">.</span>WISEFLY_WCENTER<span class="token punctuation">,</span> path <span class="token operator">=</span> ServiceNameConstants<span class="token punctuation">.</span>WISEFLY_WCENTER_PATH <span class="token operator">+</span> <span class="token string">"/wcenter/dict/define"</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> DictDefineFallbackFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DictDefineFeign</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解释：使用<code>@FeignClient</code>注解的<code>fallbackFactory</code>属性，其值是一个类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictDefineFallbackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token operator">&lt;</span>DictDefineFeign<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> DictDefineFeign <span class="token function">create</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"字典定义服务调用失败："</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DictDefineFeign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> ResponsePacket<span class="token operator">&lt;</span>ResponseTreeEntityDto<span class="token operator">></span> <span class="token function">tree</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> codes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponsePacket<span class="token punctuation">.</span><span class="token function">generateFail</span><span class="token punctuation">(</span><span class="token string">"字典定义服务--->获取树状字典失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><p>测试暴露接口的过程中，遇到了一系列形如<code>xxxClass can not find、xxxMethod is not define</code>，一般都是对应的依赖没有下载下来。</p><p>尤其是依赖中的依赖，有些是设置了<code>&lt;optional&gt;true&lt;/optional&gt;</code>，这个作用是只允许此依赖所在的项目使用，即使别的项目引用了这个依赖，都无法下载下来。</p><p><strong>因此解决方法是调整依赖，或者单独引入缺失的依赖</strong></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> interface </tag>
            
            <tag> feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSM-the Non-Sucking Service Manager</title>
      <link href="2021/01/07/project/nssm/"/>
      <url>2021/01/07/project/nssm/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>NSSM是一个服务封装程序，它可以将普通exe程序封装成服务，使之像windows服务一样运行。同类型的工具还有微软自己的srvany，不过nssm更加简单易用，并且功能强大。它的特点如下：</p><ol><li>支持普通exe程序（控制台程序或者带界面的Windows程序都可以）</li><li>安装简单，修改方便</li><li>可以重定向输出（并且支持Rotation）</li><li>可以自动守护封装了的服务，<strong>程序挂掉了后可以自动重启</strong></li><li>可以自定义环境变量</li></ol><p>这里面的每一个功能都非常实用，使用NSSM来封装服务可以大大简化我们的开发流程了。</p><ul><li>开发的时候是一个普通程序，降低了开发难度，调试起来非常方便</li><li>安装简单，并且可以随时修改服务属性，更新也更加方便</li><li>可以利用控制台输出直接实现一个简单的日志系统</li><li>不用考虑再加一个服务实现服务守护功能</li></ul><p>参考整理：<a href="https://www.cnblogs.com/TianFang/p/7912648.html" target="_blank" rel="noopener">https://www.cnblogs.com/TianFang/p/7912648.html</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>访问nssm官网下载：<a href="http://www.nssm.cc/download" target="_blank" rel="noopener">http://www.nssm.cc/download</a></p><blockquote><p>nssm应该在Windows 2000或更高版本下工作。具体来说，支持Windows 7，Windows 8和Windows 10。下载中包含32位和64位二进制文​​件。在大多数情况下，在64位Windows上运行32位版本应该是安全的，但是在某些情况下，您可能会发现它不起作用，必须使用64位版本。这两个版本都是从相同的源代码编译的。如果一个适合您，请使用该一个。如果没有，请尝试其他方法。</p><p>nssm是使用Jenkins 持续集成服务器构建的。</p><p>源代码：<a href="https://git.nssm.cc/nssm/nssm.git" target="_blank" rel="noopener">https://git.nssm.cc/nssm/nssm.git</a></p></blockquote><p>下载完后解压到任意文件夹。</p><h2 id="将bat文件安装为windows服务，以elasticsearch-bat为例"><a href="#将bat文件安装为windows服务，以elasticsearch-bat为例" class="headerlink" title="将bat文件安装为windows服务，以elasticsearch.bat为例"></a>将bat文件安装为windows服务，以elasticsearch.bat为例</h2><p> 以管理员是身份打开cmd，切换到nssm 解压路径下的win64所在目录，输入指令nssm install [serverName] 如：nssm install elasticsearch</p><p> <img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/nssm-1.png" alt></p><p>回车之后，会出现nssm界面，path填入elasticsearch.bat的全路径，startup diectory填入elasticsearch.bat所在文件夹，然后点install service按钮，如图则成功。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/nssm-2.png" alt></p><p>如图，在服务中找到刚才创建的服务，启动，如果启动成功，则没有问题。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/nssm-3.png" alt></p><h2 id="安装exe文件"><a href="#安装exe文件" class="headerlink" title="安装exe文件"></a>安装exe文件</h2><p>跟bat文件的安装一模一样。</p><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>服务管理主要有启动、停止和重启，其命令如下：</p><ul><li>启动服务：nssm start [servicename]</li><li>停止服务：nssm stop [servicename]</li><li>重启服务：nssm restart [servicename]</li></ul><p>当然，也可以使用系统自带的服务管理器操作和使用系统的命令。</p><h2 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h2><p>NSSM安装的服务修改起来非常方便，命令如下：</p><p>nssm edit [servicename]</p><p>会自动启动操作界面，直接更改即可。</p><h2 id="服务删除"><a href="#服务删除" class="headerlink" title="服务删除"></a>服务删除</h2><p>服务删除可以使用如下命令之一：</p><p>nssm remove [servicename]<br>nssm remove [servicename] confirm</p><p>功能没有大的区别，后面的命令是自动确认的，没有交互界面。</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>服务自动化需要使用更多的命令行，具体参看官方文档： Managing services from the command line</p><p>如下是一个安装Jenkins服务的示例：</p><pre class="line-numbers language-shell"><code class="language-shell">nssm install Jenkins %PROGRAMFILES%\Java\jre7\bin\java.exenssm set Jenkins AppParameters -jar slave.jar -jnlpUrl https://jenkins/computer/%COMPUTERNAME%/slave-agent.jnlp -secret redactednssm set Jenkins AppDirectory C:\Jenkinsnssm set Jenkins AppStdout C:\Jenkins\jenkins.lognssm set Jenkins AppStderr C:\Jenkins\jenkins.lognssm set Jenkins AppStopMethodSkip 6nssm set Jenkins AppStopMethodConsole 1000nssm set Jenkins AppThrottle 5000nssm start Jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它教程"><a href="#其它教程" class="headerlink" title="其它教程"></a>其它教程</h2><p>网上一些nssm的使用教程，感兴趣的朋友可以参考一下：</p><ul><li><a href="https://gogs.io/docs/installation/run_as_windows_service" target="_blank" rel="noopener">https://gogs.io/docs/installation/run_as_windows_service</a></li><li><a href="http://www.huangwenchao.com.cn/2016/10/windows-service-wrapper.html" target="_blank" rel="noopener">http://www.huangwenchao.com.cn/2016/10/windows-service-wrapper.html</a></li><li><a href="http://keenwon.com/1289.html" target="_blank" rel="noopener">http://keenwon.com/1289.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 服务管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLSyntaxErrorException</title>
      <link href="2021/01/06/project/sqlsyntaxerrorexception/"/>
      <url>2021/01/06/project/sqlsyntaxerrorexception/</url>
      
        <content type="html"><![CDATA[<h2 id="报bug的操作流程"><a href="#报bug的操作流程" class="headerlink" title="报bug的操作流程"></a>报bug的操作流程</h2><p>任务：项目的一个接口多了一个新需求，那个接口需要多加一个字段，需要从数据库多select一个字段出来。</p><p>一开始想不就加个字段嘛，在源码里找到接口，然后找到mapper.xml里对应的实现sql，如下：</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    a.id as "id",    a.packet_task_id as "packetTaskId",    a.packet_define_id as "packetDefineId",    a.total_packet_count as "totalPacketCount",    a.packeted_count as "packetdCount",    a.status as "status",    a.start_packet_time as "startPacketTime",    a.end_packet_time as "endPacketTime",    a.packet_user as "packetUser",    a.create_user as "createUser",    a.create_time as "createTime",    a.last_user as "lastUser",    a.last_time as "lastTime",    a.delete_flag as "deleteFlag",    b.name as "packetName",    c.audit_user as "auditUser",    c.audit_time as "auditTime",    b.serial_number as "serialNumber"    from    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    a    inner join t_basic_packet b on a.packet_define_id = b.id    inner join t_flow_packet_task c on a.packet_task_id = c.id    where a.delete_flag = 0    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>condition_sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listmap_and_countmap_oneday_keyword_condition<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> _sort !<span class="token punctuation">=</span>null and _sort !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      order by ${_sort}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_order !<span class="token punctuation">=</span>null and _order !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ${_order}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任务就是改写这段sql就完事了。</p><p>我也懒得拼接sql语句，自己拼接也容易拼接错是吧，我就直接从项目的日志文件里拉出sql语句来：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">as</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_task_id <span class="token keyword">as</span> <span class="token string">"packetTaskId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_define_id <span class="token keyword">as</span> <span class="token string">"packetDefineId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>total_packet_count <span class="token keyword">as</span> <span class="token string">"totalPacketCount"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packeted_count <span class="token keyword">as</span> <span class="token string">"packetdCount"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token keyword">as</span> <span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>start_packet_time <span class="token keyword">as</span> <span class="token string">"startPacketTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>end_packet_time <span class="token keyword">as</span> <span class="token string">"endPacketTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_user <span class="token keyword">as</span> <span class="token string">"packetUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_user <span class="token keyword">as</span> <span class="token string">"createUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">as</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_user <span class="token keyword">as</span> <span class="token string">"lastUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_time <span class="token keyword">as</span> <span class="token string">"lastTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token keyword">as</span> <span class="token string">"deleteFlag"</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">"packetName"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>audit_user <span class="token keyword">as</span> <span class="token string">"auditUser"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>audit_time <span class="token keyword">as</span> <span class="token string">"auditTime"</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>serial_number <span class="token keyword">as</span> <span class="token string">"serialNumber"</span> <span class="token keyword">from</span> t_flow_packet_sub_task <span class="token number">a</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> t_basic_packet <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_define_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token keyword">inner</span> <span class="token keyword">join</span> t_flow_packet_task <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_task_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我就去查a，b，c三张表有没有我需要的那个字段了，如果有的话就好办了，结果查了下发现没有，那没办法，只能join多一张表来拿到那个字段,下边就是inner join多了一张d表的sql（d.packet_instance_id就是我需要的字段）：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">as</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_task_id <span class="token keyword">as</span> <span class="token string">"packetTaskId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_define_id <span class="token keyword">as</span> <span class="token string">"packetDefineId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>total_packet_count <span class="token keyword">as</span> <span class="token string">"totalPacketCount"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packeted_count <span class="token keyword">as</span> <span class="token string">"packetdCount"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token keyword">as</span> <span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>start_packet_time <span class="token keyword">as</span> <span class="token string">"startPacketTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>end_packet_time <span class="token keyword">as</span> <span class="token string">"endPacketTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_user <span class="token keyword">as</span> <span class="token string">"packetUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_user <span class="token keyword">as</span> <span class="token string">"createUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">as</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_user <span class="token keyword">as</span> <span class="token string">"lastUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_time <span class="token keyword">as</span> <span class="token string">"lastTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token keyword">as</span> <span class="token string">"deleteFlag"</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">"packetName"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>audit_user <span class="token keyword">as</span> <span class="token string">"auditUser"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>audit_time <span class="token keyword">as</span> <span class="token string">"auditTime"</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>serial_number <span class="token keyword">as</span> <span class="token string">"serialNumber"</span> <span class="token number">d</span><span class="token punctuation">.</span>packet_instance_id <span class="token keyword">as</span> <span class="token string">"packetInstanceId"</span><span class="token keyword">from</span> t_flow_packet_sub_task <span class="token number">a</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> t_basic_packet <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_define_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token keyword">inner</span> <span class="token keyword">join</span> t_flow_packet_task <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_task_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">inner</span> <span class="token keyword">join</span> t_flow_packet_sub_task_rel <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>packet_sub_task_id<span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在数据库一跑，直接报错</p><pre class="line-numbers language-shell"><code class="language-shell">[Error Code: 1064, SQL State: 42000]  You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as "packetInstanceId"from t_flow_packet_sub_task a inner ' at line 19Code: 1064 SQL State: 42000 --- You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as "packetInstanceId"from t_flow_packet_sub_task a inner ' at line 19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回头一看，<strong>发现少了个逗号</strong>，加上个逗号就跑通了，然后就是粘贴到mapper.xml上啦</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    a.id as "id",    a.packet_task_id as "packetTaskId",    a.packet_define_id as "packetDefineId",    a.total_packet_count as "totalPacketCount",    a.packeted_count as "packetdCount",    a.status as "status",    a.start_packet_time as "startPacketTime",    a.end_packet_time as "endPacketTime",    a.packet_user as "packetUser",    a.create_user as "createUser",    a.create_time as "createTime",    a.last_user as "lastUser",    a.last_time as "lastTime",    a.delete_flag as "deleteFlag",    b.name as "packetName",    c.audit_user as "auditUser",    c.audit_time as "auditTime",    b.serial_number as "serialNumber"    d.packet_instance_id as "packetInstanceId"    from    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    a    inner join t_basic_packet b on a.packet_define_id = b.id    inner join t_flow_packet_task c on a.packet_task_id = c.id    inner join t_flow_packet_sub_task_rel d on a.id = d.packet_sub_task_id    where a.delete_flag = 0    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>condition_sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listmap_and_countmap_oneday_keyword_condition<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> _sort !<span class="token punctuation">=</span>null and _sort !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      order by ${_sort}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_order !<span class="token punctuation">=</span>null and _order !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ${_order}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后发布到测试服务器，一测试直接报500系统异常。</p><p>然后我就去日志文件里看，发现也是报的SQLSyntaxErrorException，但是日志里边很多<code>/n</code>等符号，我是看的一面蒙蔽不知道它到底哪里错了,就比如下面这样，有很多斜杠看得我人都傻了：</p><pre class="line-numbers language-shell"><code class="language-shell">{    "code": "500",    "msg": "系统异常",    "data": {        "busiCode": "0",        "msg": "\r\n### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as \"packetInstanceId\"\n    from\n     t_flow_packet_sub_task ' at line 20\r\n### The error may exist in file [D:\\workplace\\sterilization_supplement_department\\target\\classes\\mapper\\mysql\\TFlowPacketSubTaskMapper.xml]\r\n### The error may involve cn.wisefly.ssd.flow.mapper.TFlowPacketSubTaskMapper.listMap-Inline\r\n### The error occurred while setting parameters\r\n### SQL: select     a.id as \"id\",     a.packet_task_id as \"packetTaskId\",     a.packet_define_id as \"packetDefineId\",     a.total_packet_count as \"totalPacketCount\",     a.packeted_count as \"packetdCount\",     a.status as \"status\",     a.start_packet_time as \"startPacketTime\",     a.end_packet_time as \"endPacketTime\",     a.packet_user as \"packetUser\",     a.create_user as \"createUser\",     a.create_time as \"createTime\",     a.last_user as \"lastUser\",     a.last_time as \"lastTime\",     a.delete_flag as \"deleteFlag\",     b.name as \"packetName\",     c.audit_user as \"auditUser\",     c.audit_time as \"auditTime\",     b.serial_number as \"serialNumber\"     d.packet_instance_id as \"packetInstanceId\"     from      t_flow_packet_sub_task      a     inner join t_basic_packet b on a.packet_define_id = b.id     inner join t_flow_packet_task c on a.packet_task_id = c.id     inner join t_flow_packet_sub_task_rel d on a.id = d.packet_sub_task_id     where a.delete_flag = 0                                                  and a.status = ?                                                                                                   order by a.create_time                 desc limit 0,20\r\n### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as \"packetInstanceId\"\n    from\n     t_flow_packet_sub_task ' at line 20\n; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as \"packetInstanceId\"\n    from\n     t_flow_packet_sub_task ' at line 20"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没办法，只能在本地环境debug了，打开idea的源码debug起来，用postman模拟了一个请求发到本地环境</p><pre class="line-numbers language-shell"><code class="language-shell">### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as "packetInstanceId"    from     t_flow_packet_sub_task ' at line 20### The error may exist in file [D:\workplace\sterilization_supplement_department\target\classes\mapper\mysql\TFlowPacketSubTaskMapper.xml]### The error may involve cn.wisefly.ssd.flow.mapper.TFlowPacketSubTaskMapper.listMap-Inline### The error occurred while setting parameters### SQL: select     a.id as "id",     a.packet_task_id as "packetTaskId",     a.packet_define_id as "packetDefineId",     a.total_packet_count as "totalPacketCount",     a.packeted_count as "packetdCount",     a.status as "status",     a.start_packet_time as "startPacketTime",     a.end_packet_time as "endPacketTime",     a.packet_user as "packetUser",     a.create_user as "createUser",     a.create_time as "createTime",     a.last_user as "lastUser",     a.last_time as "lastTime",     a.delete_flag as "deleteFlag",     b.name as "packetName",     c.audit_user as "auditUser",     c.audit_time as "auditTime",     b.serial_number as "serialNumber"     d.packet_instance_id as "packetInstanceId"     from      t_flow_packet_sub_task      a     inner join t_basic_packet b on a.packet_define_id = b.id     inner join t_flow_packet_task c on a.packet_task_id = c.id     inner join t_flow_packet_sub_task_rel d on a.id = d.packet_sub_task_id     where a.delete_flag = 0                                                  and a.status = ?                                                                                                   order by a.create_time                 desc limit 0,20### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as "packetInstanceId"    from     t_flow_packet_sub_task ' at line 20; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'd.packet_instance_id as "packetInstanceId"    from     t_flow_packet_sub_task ' at line 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以看出在idea的console里边就没有/n等转义符</strong>，这点确实比在日志看好。</p><p>看报错可以看出又是 d.packet_instance_id as “packetInstanceId” 的问题，去mapper.xml一看发现<strong>又是没加逗号</strong>，怪不得在数据库跑的通而在测试环境报错。</p><p>回头看发现自己真的逗…</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>别贪方便只在日志里看报错信息，固然日志里的报错信息非常全面，有时候日志里看的不明白的话，去idea里debug是个很好的选择。</li><li>报SQLSyntaxErrorException错的话多半是逗号的错（执念）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程式事务（programmatic transaction）</title>
      <link href="2021/01/06/java/spring-transaction-programmatic-transaction/"/>
      <url>2021/01/06/java/spring-transaction-programmatic-transaction/</url>
      
        <content type="html"><![CDATA[<h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p>Spring提供两种方式的编程式事务管理，分别是：使用<strong>TransactionTemplate</strong>和直接使用<strong>PlatformTransactionManager</strong>。</p><h3 id="使用TransactionTemplate"><a href="#使用TransactionTemplate" class="headerlink" title="使用TransactionTemplate"></a>使用TransactionTemplate</h3><p>采用TransactionTemplate和采用其他Spring模板，如JdbcTempalte和HibernateTemplate是一样的方法。</p><p>它使用回调方法，把应用程序从处理取得和释放资源中解脱出来。如同其他模板，TransactionTemplate是<strong>线程安全</strong>的。代码片段：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>TransactionCallback action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>          TransactionStatus status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>          Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              result <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">doInTransaction</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// transactional code threw application exception -> rollback  </span>            <span class="token function">rollbackOnException</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// transactional code threw error -> rollback  </span>            <span class="token function">rollbackOnException</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> err<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用TransactionTempale如下</p><pre class="line-numbers language-java"><code class="language-java">    TransactionTemplate tt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新建一个TransactionTemplate</span>    Object result <span class="token operator">=</span> tt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">public</span> Object <span class="token function">doTransaction</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token function">updateOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token function">resultOfUpdateOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行execute方法进行事务管理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用TransactionCallback（）可以返回一个值。如果使用TransactionCallbackWithoutResult则没有返回值。</p><h3 id="使用PlatformTransactionManager"><a href="#使用PlatformTransactionManager" class="headerlink" title="使用PlatformTransactionManager"></a>使用PlatformTransactionManager</h3><p>Spring的事务处理中，通用的事务处理流程框架是由抽象事务管理器AbstractPlatformTransactionManager来提供的，而具体的底层事务处理实现，由PlatformTransactionManager的具体实现类来实现，如 DataSourceTransactionManager 、JtaTransactionManager和 HibernateTransactionManager等。</p><h4 id="AbstractPlatformTransactionManager抽象事物处理器"><a href="#AbstractPlatformTransactionManager抽象事物处理器" class="headerlink" title="AbstractPlatformTransactionManager抽象事物处理器"></a>AbstractPlatformTransactionManager抽象事物处理器</h4><p>它<strong>实现了PlatformTransactionManager平台事务管理器接口</strong>，提供了一系列设计好的事务模板方法，如事务提交、回滚等，这些模板方法的具体实现由具体的事务处理器来提供。</p><h4 id="DataSourceTransactionManager事务处理器的实现"><a href="#DataSourceTransactionManager事务处理器的实现" class="headerlink" title="DataSourceTransactionManager事务处理器的实现"></a>DataSourceTransactionManager事务处理器的实现</h4><p>针对JDBC连接提供的事务处理器实现，即数据源事务处理器<strong>把数据库Connection连接和当前线程进行绑定</strong>，通过直接调用数据库连接Connection的提交和回滚方法实现事务的提供和回滚处理。其部分源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span>        <span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> InitializingBean <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入数据源</span>    <span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据源事务处理器默认构造方法，创建一个数据源事务处理器实例，并设置允许嵌套事务</span>    <span class="token keyword">public</span> <span class="token function">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据给定数据源，创建一个数据源事务处理器实例</span>    <span class="token keyword">public</span> <span class="token function">DataSourceTransactionManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置数据源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDataSource</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSource <span class="token keyword">instanceof</span> <span class="token class-name">TransactionAwareDataSourceProxy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果数据源是一个事务包装数据源代理，则获取事务包装代理的目标数据源 </span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TransactionAwareDataSourceProxy<span class="token punctuation">)</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTargetDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取数据源</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数据源事务处理器对象构造方法的回调函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Property 'dataSource' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> Object <span class="token function">getResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建事务，对数据库而言，是由Connection来完成事务工作的。该方法把数据库的Connection对象放到一个ConnectionHolder对象中，然后封装到一个DataSourceTransactionObject对象中</span>    <span class="token keyword">protected</span> Object <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建数据源事务对象</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据源事务对象对嵌套事务使用保存点</span>        txObject<span class="token punctuation">.</span><span class="token function">setSavepointAllowed</span><span class="token punctuation">(</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从事务管理容器中获取存放数据库Connection的对象</span>        ConnectionHolder conHolder <span class="token operator">=</span>            <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>conHolder<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> txObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断是否已经存在事务</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isExistingTransaction</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据存放数据库连接的ConnectionHolder的isTransactionActive属性来判断</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理事务开始的方法</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">,</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果数据源事务对象的ConnectionHolder为null或者是事务同步的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取当前数据源的数据库连接</span>                Connection newCon <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Acquired Connection ["</span> <span class="token operator">+</span> newCon <span class="token operator">+</span> <span class="token string">"] for JDBC transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//为数据源事务对象设置ConnectionHolder</span>                txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>newCon<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置数据源事务对象的事务同步    txObject.getConnectionHolder().setSynchronizedWithTransaction(true);</span>            <span class="token comment" spellcheck="true">//获取数据源事务对象的数据库连接</span>            con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//根据数据连接和事务属性，获取数据库连接的事务隔离级别</span>            Integer previousIsolationLevel <span class="token operator">=</span> DataSourceUtils<span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为数据源事务对象设置事务隔离级别</span>    txObject<span class="token punctuation">.</span><span class="token function">setPreviousIsolationLevel</span><span class="token punctuation">(</span>previousIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果数据库连接设置了自动事务提交属性，则关闭自动提交</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//保存数据库连接设置的自动连接到数据源事务对象中</span>                txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Switching JDBC Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"] to manual commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//设置数据库连接自动事务提交属性为false，即禁止自动事务提交</span>                con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//激活当前数据源事务对象的事务配置</span>            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取事务配置的超时时长</span><span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果事务配置的超时时长不等于事务的默认超时时长</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数据源事务对象设置超时时长</span>        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//把当前数据库Connection和线程绑定</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            DataSourceUtils<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">"Could not open JDBC Connection for transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事务挂起</span>    <span class="token keyword">protected</span> Object <span class="token function">doSuspend</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将事务对象中的ConnectionHolders设置为null</span>        txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConnectionHolder conHolder <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//解除事务对象和当前线程的绑定    TransactionSynchronizationManager.unbindResource(this.dataSource);</span>        <span class="token keyword">return</span> conHolder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事务恢复</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doResume</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">,</span> Object suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取已暂停事务的ConnectionHolder</span>        ConnectionHolder conHolder <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span> suspendedResources<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重新将事务对象和当前线程绑定</span>        TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">,</span> conHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事务提交</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doCommit</span><span class="token punctuation">(</span>DefaultTransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过事务对象获取数据库连接</span>        Connection con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Committing JDBC transaction on Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用数据库连接手动进行事务提交</span>            con<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionSystemException</span><span class="token punctuation">(</span><span class="token string">"Could not commit JDBC transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事务回滚</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRollback</span><span class="token punctuation">(</span>DefaultTransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过事务对象获取数据库连接</span>        Connection con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Rolling back JDBC transaction on Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过调用数据库连接的回滚方法完成事务回滚操作</span>            con<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionSystemException</span><span class="token punctuation">(</span><span class="token string">"Could not roll back JDBC transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置回滚</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doSetRollbackOnly</span><span class="token punctuation">(</span>DefaultTransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Setting JDBC transaction ["</span> <span class="token operator">+</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"] rollback-only"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        txObject<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//操作完成之后清除操作</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doCleanupAfterCompletion</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移除当前线程绑定的ConnectionHolder</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Connection con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果事务对象保存了自动事务提交属性，则设置数据库连接的自动事务提交属性</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//事务结束后重置数据库连接</span>            DataSourceUtils<span class="token punctuation">.</span><span class="token function">resetConnectionAfterTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getPreviousIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Could not reset JDBC Connection after transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果事务对象中有新的ConnectionHolder </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Releasing JDBC Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"] after transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//释放数据库连接</span>            DataSourceUtils<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//清除事务对象的ConnectionHolder</span>        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数据源事务对象，内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionObject</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcTransactionObjectSupport</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//是否有新的ConnectionHolder</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> newConnectionHolder<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否保存自动提交</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> mustRestoreAutoCommit<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置ConnectionHolder</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>ConnectionHolder connectionHolder<span class="token punctuation">,</span> <span class="token keyword">boolean</span> newConnectionHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//为父类JdbcTransactionObjectSupport设置ConnectionHolder</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>connectionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>newConnectionHolder <span class="token operator">=</span> newConnectionHolder<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newConnectionHolder<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用父类JdbcTransactionObjectSupport的相关方法，查询收费存在事务</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置是否保存自动提交</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mustRestoreAutoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mustRestoreAutoCommit <span class="token operator">=</span> mustRestoreAutoCommit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mustRestoreAutoCommit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置数据库连接在操作失败是，是否只回滚处理</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述对数据源事务处理器的源码分析，我们看到，事务的提交、回滚等操作是通过直接调用数据库连接 Connection 的提交和回滚方法实现的，由于自动事务提交对应用程序性能影响很大，因此在进行事务提交时，我们首先禁止数据库连接的自动事务提交，事务提供操作通过手动实现。</p><h4 id="HibernateTransactionManager事务处理器的实现"><a href="#HibernateTransactionManager事务处理器的实现" class="headerlink" title="HibernateTransactionManager事务处理器的实现"></a>HibernateTransactionManager事务处理器的实现</h4><p>相对于数据源的事务处理器来说，Hibernate的事务处理器相对要复杂一些，它是通过对Hibernate的会话Session的管理来完成事务处理实现的。Hibernate事务处理器的事务处理相关源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HibernateTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPlatformTransactionManager</span>        <span class="token keyword">implements</span> <span class="token class-name">ResourceTransactionManager</span><span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> InitializingBean <span class="token punctuation">{</span>    ……    <span class="token comment" spellcheck="true">//获取Hibernate事务</span>    <span class="token keyword">protected</span> Object <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Hibernate事务对象</span>        HibernateTransactionObject txObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HibernateTransactionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据是否允许嵌套事务设置事务对象是否允许保存点</span>        txObject<span class="token punctuation">.</span><span class="token function">setSavepointAllowed</span><span class="token punctuation">(</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从线程中获取SessionHolder,SessionHolder是在事务开始时与线程绑定的。</span>        SessionHolder sessionHolder <span class="token operator">=</span>                <span class="token punctuation">(</span>SessionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果获取到的SessionHolder不为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Found thread-bound Session ["</span> <span class="token operator">+</span>                SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sessionHolder<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] for Hibernate transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//把获取到的SessionHolder设置到Hibernate事务对象中</span>            txObject<span class="token punctuation">.</span><span class="token function">setSessionHolder</span><span class="token punctuation">(</span>sessionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果当前Hibernate事务处理器有被管理的Hibernate Session</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hibernateManagedSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取当前的Hibernate Session</span>                Session session <span class="token operator">=</span> <span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Found Hibernate-managed Session ["</span> <span class="token operator">+</span>                            SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] for Spring-managed transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//设置Hibernate事务对象已经存在指定的Session</span>                txObject<span class="token punctuation">.</span><span class="token function">setExistingSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HibernateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DataAccessResourceFailureException</span><span class="token punctuation">(</span>                        <span class="token string">"Could not obtain Hibernate-managed Session for Spring-managed transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果获取到的数据源不为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将获取到的数据源和当前线程绑定</span>            ConnectionHolder conHolder <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span>    TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>conHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> txObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//是否已存在事务</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isExistingTransaction</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HibernateTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>HibernateTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据事务对象是否存在Spring管理的事务，或者通过判断是否存在Hibernate //Session或者事务对象中有被Hibernate管理的事务</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">hasSpringManagedTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hibernateManagedSession <span class="token operator">&amp;&amp;</span> txObject<span class="token punctuation">.</span><span class="token function">hasHibernateManagedTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理事务开始</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">,</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取事务对象</span>        HibernateTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>HibernateTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果事务对象有ConnectionHolder，且事务对象的数据库连接不是事务同步的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Pre-bound JDBC Connection found! HibernateTransactionManager does not support "</span> <span class="token operator">+</span>                    <span class="token string">"running within DataSourceTransactionManager if told to manage the DataSource itself. "</span> <span class="token operator">+</span>                    <span class="token string">"It is recommended to use a single HibernateTransactionManager for all transactions "</span> <span class="token operator">+</span>                    <span class="token string">"on a single DataSource, no matter whether Hibernate or JDBC access."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Session session <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果事务对象的SessionHolder为null，或者事务对象Hibernate</span>            <span class="token comment" spellcheck="true">//Session是事务同步的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取Hibernate事务处理器中的实体拦截器</span>                Interceptor entityInterceptor <span class="token operator">=</span> <span class="token function">getEntityInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取Hibernate Session，如果实体拦截器不为null，则打开指定</span><span class="token comment" spellcheck="true">//实体拦截器的Session，如果实体拦截器为null，则打开新Session</span>                Session newSession <span class="token operator">=</span> <span class="token punctuation">(</span>entityInterceptor <span class="token operator">!=</span> null <span class="token operator">?</span>                    <span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>entityInterceptor<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Opened new Session ["</span> <span class="token operator">+</span> SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>newSession<span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">"] for Hibernate transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//将获取的Hibernate Session设置到事务对象中</span>                txObject<span class="token punctuation">.</span><span class="token function">setSession</span><span class="token punctuation">(</span>newSession<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果Hibernate事务处理器中的SessionHolder不为null，则</span><span class="token comment" spellcheck="true">//获取SessionHolder中已有的Hibernate Session</span>            session <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//允许为JDBC连接改变事务设置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>prepareConnection <span class="token operator">&amp;&amp;</span> <span class="token function">isSameConnectionForEntireSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>                            <span class="token string">"Preparing JDBC Connection of Hibernate Session ["</span> <span class="token operator">+</span> SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//获取Session连接</span>                Connection con <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取事务的隔离级别</span>                Integer previousIsolationLevel <span class="token operator">=</span> DataSourceUtils<span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置事务对象的事务隔离级别    txObject.setPreviousIsolationLevel(previousIsolationLevel);</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不允许为JDBC连接改成事务设置</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果事务隔离级别不是默认事务隔离级别</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>ISOLATION_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidIsolationLevelException</span><span class="token punctuation">(</span>                            <span class="token string">"HibernateTransactionManager is not allowed to support custom isolation levels: "</span> <span class="token operator">+</span>                            <span class="token string">"make sure that its 'prepareConnection' flag is on (the default) and that the "</span> <span class="token operator">+</span>                            <span class="token string">"Hibernate connection release mode is set to 'on_close' (SpringTransactionFactory's default). "</span> <span class="token operator">+</span>                            <span class="token string">"Make sure that your LocalSessionFactoryBean actually uses SpringTransactionFactory: Your "</span> <span class="token operator">+</span>                            <span class="token string">"Hibernate properties should *not* include a 'hibernate.transaction.factory_class' property!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>                            <span class="token string">"Not preparing JDBC Connection of Hibernate Session ["</span> <span class="token operator">+</span> SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果事务是只读，且事务对象是新的Hibernate Session</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> txObject<span class="token punctuation">.</span><span class="token function">isNewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//设置Hibernate Session刷新模式为手动</span>                session<span class="token punctuation">.</span><span class="token function">setFlushMode</span><span class="token punctuation">(</span>FlushMode<span class="token punctuation">.</span>MANUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果事务是非只读的，且事务对象不是新Hibernate Session</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">isNewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//或者Hibernate的刷新模式</span>                FlushMode flushMode <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getFlushMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置Session的刷新模式</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flushMode<span class="token punctuation">.</span><span class="token function">lessThan</span><span class="token punctuation">(</span>FlushMode<span class="token punctuation">.</span>COMMIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    session<span class="token punctuation">.</span><span class="token function">setFlushMode</span><span class="token punctuation">(</span>FlushMode<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//为事务对象设置刷新模式    txObject.getSessionHolder().setPreviousFlushMode(flushMode);</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Transaction hibTx<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取事务超时时长</span>            <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果事务配置的超时时长不是事务默认超时时长</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取Hibernate Session事务</span>                hibTx <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//为事务对象设置超时时长</span>                hibTx<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//开启事务</span>                hibTx<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果事务配置的超时时长是默认超时时长</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//通过Hibernate Session直接开启事务</span>                hibTx <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//把事务设置到事务对象的SessionHolder中，并且线程绑定</span>            txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransaction</span><span class="token punctuation">(</span>hibTx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果数据源不为null，即设置了数据源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用Hibernate Session打开数据库连接</span>                Connection con <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建ConnectionHolder</span>                ConnectionHolder conHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置超时时长</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    conHolder<span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Exposing Hibernate transaction as JDBC transaction ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//将数据源和JDBC ConnectionHolder绑定到当前线程    TransactionSynchronizationManager.bindResource(getDataSource(), conHolder);</span>                <span class="token comment" spellcheck="true">//将创建的JDBC ConnectionHolder设置到事务对象中</span>                txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>conHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果事务对象中的SessionHolder是新的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当SessionHolder和当前线程绑定起来    TransactionSynchronizationManager.bindResource(getSessionFactory(), txObject.getSessionHolder());</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置事务对象中的SessionHolder是事务同步的    txObject.getSessionHolder().setSynchronizedWithTransaction(true);</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//事务开启过程中异常处理</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果Session的事务上激活的，回滚Session的事务</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        session<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Could not rollback Session after failed transaction begin"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//关闭Session</span>                    SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">closeSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">"Could not open Hibernate Session for transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事务挂起</span>    <span class="token keyword">protected</span> Object <span class="token function">doSuspend</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HibernateTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>HibernateTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把当前的SessionHolder从线程中和事务对象中释放</span>        txObject<span class="token punctuation">.</span><span class="token function">setSessionHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析SessionHolder和线程的绑定</span>        SessionHolder sessionHolder <span class="token operator">=</span>                <span class="token punctuation">(</span>SessionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConnectionHolder connectionHolder <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解除数据源和线程的绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            connectionHolder <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuspendedResourcesHolder</span><span class="token punctuation">(</span>sessionHolder<span class="token punctuation">,</span> connectionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事务恢复</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doResume</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">,</span> Object suspendedResources<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SuspendedResourcesHolder resourcesHolder <span class="token operator">=</span> <span class="token punctuation">(</span>SuspendedResourcesHolder<span class="token punctuation">)</span> suspendedResources<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果事务管理器中有SessionFactory</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">hasResource</span><span class="token punctuation">(</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//解除SessionFactory和当前线程的绑定</span>    TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">unbindResource</span><span class="token punctuation">(</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果事务管理器中没有SessionFactory，则将Session和当前线程绑定    TransactionSynchronizationManager.bindResource(getSessionFactory(), resourcesHolder.getSessionHolder());</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resourcesHolder<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//准备提交</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareForCommit</span><span class="token punctuation">(</span>DefaultTransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果事务配置为FlushBeforeCommit，并且是新事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyFlushBeforeCommit <span class="token operator">&amp;&amp;</span> status<span class="token punctuation">.</span><span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取事务对象</span>            HibernateTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>HibernateTransactionObject<span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//回去事务对象中的Session</span>            Session session <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果Session的刷新模式不低于COMMIT</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>session<span class="token punctuation">.</span><span class="token function">getFlushMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lessThan</span><span class="token punctuation">(</span>FlushMode<span class="token punctuation">.</span>COMMIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Performing an early flush for Hibernate transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//刷新Session</span>                    session<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HibernateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token function">convertHibernateAccessException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//把Session的刷新模式设置为MANUAL</span>                    session<span class="token punctuation">.</span><span class="token function">setFlushMode</span><span class="token punctuation">(</span>FlushMode<span class="token punctuation">.</span>MANUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提交处理</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doCommit</span><span class="token punctuation">(</span>DefaultTransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前的Hibernate事务对象</span>        HibernateTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>HibernateTransactionObject<span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Committing Hibernate transaction on Session ["</span> <span class="token operator">+</span>SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过Hibernate事务完成提交</span>            txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>TransactionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionSystemException</span><span class="token punctuation">(</span><span class="token string">"Could not commit Hibernate transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HibernateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">convertHibernateAccessException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//回滚处理</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRollback</span><span class="token punctuation">(</span>DefaultTransactionStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Hibernate事务对象</span>        HibernateTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>HibernateTransactionObject<span class="token punctuation">)</span> status<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Rolling back Hibernate transaction on Session ["</span><span class="token operator">+</span>SessionFactoryUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过Hibernate事务执行回滚操作</span>            txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>TransactionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionSystemException</span><span class="token punctuation">(</span><span class="token string">"Could not roll back Hibernate transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HibernateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">convertHibernateAccessException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">isNewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hibernateManagedSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//清除事务对象中的Hibernate Session</span>                txObject<span class="token punctuation">.</span><span class="token function">getSessionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>……    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面对 Hibernate 事务处理器的分析，我们看到真正执行提交、回滚等事务操作的还是 Hibernate Transaction 事务对象，这与单独直接使用 Hibernate 没有什么区别，只是 Spring 将其做了通用封装，更加方便使用。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务的传播属性和声明式事务的配置方式</title>
      <link href="2021/01/06/java/spring-transaction-propagation/"/>
      <url>2021/01/06/java/spring-transaction-propagation/</url>
      
        <content type="html"><![CDATA[<p>Spring事务管理的实现有许多细节，如果对整个接口框架有个大体了解会非常有利于我们理解事务，Spring事务管理涉及的接口的联系如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-9.png" alt></p><p><strong>PlatfromTransactionManager是spring事务管理的核心接口</strong></p><h2 id="事务的传播性"><a href="#事务的传播性" class="headerlink" title="事务的传播性"></a>事务的传播性</h2><p>getPropagationBehavior（）返回事务的传播行为，由是否有一个活动的事务来决定一个事务调用。 在TransactionDefinition接口中定义了七个事务传播行为。</p><p>配置方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//默认方式，跟@Transactional同效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p><strong>PROPAGATION_REQUIRED</strong> 表示业务方法需要在一个事务中处理，如果业务方法执行时已经在一个事务中，则加入该事务，否则重新开启一个事务。这也是默认的事务传播行为；</p></li><li><p><strong>PROPAGATION_SUPPORTS</strong> 该属性指定，如果业务方法在一个既有的事务中进行，则加入该事务；否则，业务方法将在一个没有事务的环境下进行；但是对于事务同步的事务管理器，PROPAGATION_SUPPORTS与不使用事务有少许不同。 </p></li><li><p><strong>PROPAGATION_MANDATORY</strong>（mandatory，强制的） 该属性指定业务方法只能在一个已经存在的事务中进行，业务方法不能发起自己的事务；如果业务方法没有在一个既有的事务中进行，容器将抛出异常； </p></li><li><p><strong>PROPAGATION_REQUIRES_NEW</strong> 表明业务方法需要在一个单独的事务中进行，如果业务方法进行时已经在一个事务中，则这个事务被挂起，并重新开启一个事务来执行这个业务方法，业务方法执行完毕后，原来的事务恢复进行；</p></li><li><p><strong>PROPAGATION_NOT_SUPPORTED</strong>  总是非事务地执行，并挂起任何存在的事务。 </p></li><li><p><strong>PROPAGATION_NEVER</strong> 总是非事务地执行，如果存在一个活动事务，则抛出异常。</p></li><li><p><strong>PROPAGATION_NESTED</strong> 该属性指定，如果业务方法在一个既有的事务中执行，则该业务方法将在一个嵌套的事务中进行；否则，按照TransactionDefinition.PROPAGATION_REQUIRED来对待。它使用一个单独的事务，这个事务可以有多个rollback点，内部事务的rollback对外部事务没有影响，但外部事务的rollback会导致内部事务的rollback。这个行为只对DataSourceTransactionManager有效。</p></li></ol><h3 id="1-1-PROPAGATION-REQUIRED"><a href="#1-1-PROPAGATION-REQUIRED" class="headerlink" title="1.1 PROPAGATION_REQUIRED"></a>1.1 PROPAGATION_REQUIRED</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodA<span class="token punctuation">{</span>     ……    <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodB<span class="token punctuation">{</span>    …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单独调用MethodB时，Spring保证在methodB方法中所有的调用都获得到一个相同的连接。在调用methodB时，没有一个存在的事务，所以获得一个新的连接，开启了一个新的事务。 </p><p>调用MethodA时，环境中没有事务，所以开启一个新的事务. 当在MethodA中调用MethodB时，环境中已经有了一个事务，所以methodB就加入当前事务。 相当于把B方法直接移到A方法中，同时回滚或者同时提交。</p><h3 id="1-2-PROPAGATION-SUPPORTS"><a href="#1-2-PROPAGATION-SUPPORTS" class="headerlink" title="1.2 PROPAGATION_SUPPORTS"></a>1.2 PROPAGATION_SUPPORTS</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodA<span class="token punctuation">{</span>     ……    <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//事务属性 PROPAGATION_SUPPORTS</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">)</span>methodB<span class="token punctuation">{</span>    …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单独调用MethodB时，methodB方法是非事务的执行的。  </p><p>调用MethodA时，methodB则加入到了methodA的事务中,事务地执行。 </p><h3 id="1-3-PROPAGATION-MANDATORY"><a href="#1-3-PROPAGATION-MANDATORY" class="headerlink" title="1.3 PROPAGATION_MANDATORY"></a>1.3 PROPAGATION_MANDATORY</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodA<span class="token punctuation">{</span>     ……    <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    …… <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//事务属性 PROPAGATION_MANDATORY</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>MANDATORY<span class="token punctuation">)</span>methodB<span class="token punctuation">{</span>    …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当单独调用methodB时，因为<strong>当前没有一个活动的事务</strong>，则会抛出异常 <code>throw new IllegalTransactionStateException(&quot;Transactionpropagation &#39;mandatory&#39; but no existing transaction found&quot;)</code>; </p><p>当调用methodA时，methodB则加入到methodA的事务中，事务地执行。</p><h3 id="1-4-PROPAGATION-REQUIRES-NEW"><a href="#1-4-PROPAGATION-REQUIRES-NEW" class="headerlink" title="1.4 PROPAGATION_REQUIRES_NEW"></a>1.4 PROPAGATION_REQUIRES_NEW</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodA<span class="token punctuation">{</span>     <span class="token function">doSomeThingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doSomeThingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRES_NEW</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span>methodB<span class="token punctuation">{</span>    …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当单独调用methodB时，相当于把methodB声明为REQUIRED。开启一个新的事务，事务地执行。 </p><p>当调用methodA时，类似如下效果：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TransactionManager tm <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获得一个JTA事务管理器</span>        tm <span class="token operator">=</span> <span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         tm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启一个新的事务</span>        Transaction ts1 <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tm<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//挂起当前事务</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            tm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新开启第二个事务</span>            Transaction ts2 <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ts2<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交第二个事务</span>        <span class="token punctuation">}</span><span class="token function">Catch</span><span class="token punctuation">(</span>RunTimeException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            ts2<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回滚第二个事务</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//释放资源</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//methodB执行完后，恢复第一个事务</span>        tm<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>ts1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doSomeThingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts1<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交第一个事务</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>RunTimeException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        ts1<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回滚第一个事务</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我把ts1称为外层事务，ts2称为内层事务。从上面的代码可以看出，ts2与ts1是两个独立的事务，互不相干。Ts2是否成功并不依赖于ts1。如果methodA方法在调用methodB方法后的doSomeThingB方法失败了,而methodB方法所做的结果依然被提交。而除了methodB之外的其它代码导致的结果却被回滚了。 </p><p><strong>使用PROPAGATION_REQUIRES_NEW,需要使用JtaTransactionManager作为事务管理器</strong>。 </p><p>注意：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"save 抛异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后，发现数据并没有插入数据库。查看日志内容。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-4.jpg" alt></p><p>从日志内容可以看出，其实两个方法都是处于同一个事务中，method1 方法并没有创建一个新的事务。根据 Spring 官方文档：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-5.png" alt></p><blockquote><p>In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual transaction at runtime even if the invoked method is marked with @Transactional.</p></blockquote><p>大概意思：<strong>在默认的代理模式下，只有目标方法由外部调用，才能被 Spring 的事务拦截器拦截。在同一个类中的两个方法直接调用，是不会被 Spring 的事务拦截器拦截</strong>，就像上面的 save 方法直接调用了同一个类中的 method1方法，method1 方法不会被 Spring 的事务拦截器拦截。可以使用 AspectJ 取代 Spring AOP 代理来解决这个问题，但是这里暂不讨论。</p><p>为了解决这个问题，我们可以新建一个类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OtherService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"XXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 save 方法中调用 otherService.method1 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> OtherService otherService<span class="token punctuation">;</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    otherService<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"YYYYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"save 抛异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这下，otherService.method1 方法的数据插入成功，save 方法的数据未插入，事务回滚。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-6.jpg" alt></p><p>从日志可以看出，首先创建了 save 方法的事务，由于 otherService.method1 方法的 @Transactional 的 propagation 属性为 Propagation.REQUIRES_NEW ，所以接着暂停了 save 方法的事务，重新创建了 otherService.method1 方法的事务，接着 otherService.method1 方法的事务提交，接着 save 方法的事务回滚。这就印证了<strong>只有目标方法由外部调用，才能被 Spring 的事务拦截器拦截</strong>。</p><h3 id="1-5-PROPAGATION-NOT-SUPPORTED"><a href="#1-5-PROPAGATION-NOT-SUPPORTED" class="headerlink" title="1.5 PROPAGATION_NOT_SUPPORTED"></a>1.5 PROPAGATION_NOT_SUPPORTED</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodA<span class="token punctuation">{</span>     <span class="token function">doSomeThingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doSomeThingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//事务属性 PROPAGATION_NOT_SUPPORTED</span><span class="token function">Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>NOT_SUPPORTED<span class="token punctuation">)</span>methodB<span class="token punctuation">{</span>    …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当单独调用methodB时，不启用任何事务机制，非事务地执行。 </p><p>当调用methodA时，相当于下面的效果:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TransactionManager tm <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获得一个JTA事务管理器</span>        tm <span class="token operator">=</span> <span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启一个新的事务</span>        Transaction ts1 <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doSomeThingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tm<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//挂起当前事务</span>        <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//methodB执行完后，恢复第一个事务</span>        tm<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>ts1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doSomeThingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts1<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交第一个事务</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>RunTimeException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        ts1<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回滚第一个事务</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用PROPAGATION_NOT_SUPPORTED,也需要使用JtaTransactionManager作为事务管理器。</p><h3 id="1-6-PROPAGATION-NEVER"><a href="#1-6-PROPAGATION-NEVER" class="headerlink" title="1.6 PROPAGATION_NEVER"></a>1.6 PROPAGATION_NEVER</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodA<span class="token punctuation">{</span>     <span class="token function">doSomeThingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doSomeThingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//事务属性 PROPAGATION_NEVER</span><span class="token function">Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>NEVER<span class="token punctuation">)</span>methodB<span class="token punctuation">{</span>    …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单独调用methodB，则非事务的执行。 </p><p>调用methodA则会抛出异常<code>throw new IllegalTransactionStateException(&quot;Transaction propagation &#39;never&#39; butexisting transaction found&quot;)</code>; </p><h3 id="1-7-PROPAGATION-NESTED"><a href="#1-7-PROPAGATION-NESTED" class="headerlink" title="1.7 PROPAGATION_NESTED"></a>1.7 PROPAGATION_NESTED</h3><p>这是一个嵌套事务,使用JDBC 3.0驱动时,仅仅支持DataSourceTransactionManager作为事务管理器。需要JDBC 驱动的java.sql.Savepoint类。有一些JTA的事务管理器实现可能也提供了同样的功能。 </p><p>使用PROPAGATION_NESTED，还需要把PlatformTransactionManager的nestedTransactionAllowed属性设为true; 而nestedTransactionAllowed属性值默认为false; </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//事务属性 PROPAGATION_REQUIRED</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>methodA<span class="token punctuation">{</span>     <span class="token function">doSomeThingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doSomeThingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//事务属性 PROPAGATION_NESTED</span><span class="token function">Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>NESTED<span class="token punctuation">)</span>methodB<span class="token punctuation">{</span>    …… <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果单独调用methodB方法，则按REQUIRED属性执行。 </p><p>如果调用methodA方法，相当于下面的效果：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    Savepoint savepoint <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        con <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doSomeThingA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        savepoint <span class="token operator">=</span> con2<span class="token punctuation">.</span><span class="token function">setSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>RuntimeException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>            con<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>savepoint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放资源</span>        <span class="token punctuation">}</span>        <span class="token function">doSomeThingB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>RuntimeException ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        con<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当methodB方法调用之前，调用setSavepoint方法，保存当前的状态到savepoint。如果methodB方法调用失败，则恢复到之前保存的状态。但是需要注意的是，这时的事务并没有进行提交，如果后续的代码（doSomeThingB（）方法）调用失败，则回滚包括methodB方法的所有操作。 </p><p>嵌套事务一个非常重要的概念就是内层事务依赖于外层事务。外层事务失败时，会回滚内层事务所做的动作。而内层事务操作失败并不会引起外层事务的回滚。</p><h3 id="PROPAGATION-NESTED与PROPAGATION-REQUIRES-NEW的区别"><a href="#PROPAGATION-NESTED与PROPAGATION-REQUIRES-NEW的区别" class="headerlink" title="PROPAGATION_NESTED与PROPAGATION_REQUIRES_NEW的区别:"></a>PROPAGATION_NESTED与PROPAGATION_REQUIRES_NEW的区别:</h3><ul><li><p>相同点：都是一个嵌套事务，如果不存在一个活动的事务，都会开启一个新的事务。使用PROPAGATION_REQUIRES_NEW时，内层事务与外层事务就像两个独立的事务一样，一旦内层事务进行了提交后，外层事务不能对其进行回滚。两个事务互不影响。两个事务不是一个真正的嵌套事务。同时它需要JTA事务管理器的支持。 </p></li><li><p>不同点：<strong>使用PROPAGATION_NESTED时，外层事务的回滚可以引起内层事务的回滚</strong>。<strong>而内层事务的异常并不会导致外层事务的回滚，它是一个真正的嵌套事务</strong>。DataSourceTransactionManager使用savepoint支持PROPAGATION_NESTED时，需要JDBC 3.0以上驱动及1.4以上的JDK版本支持。其它的JTA TrasactionManager实现可能有不同的支持方式。 </p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>　　1、Transactional的异常控制，默认是Check Exception 不回滚，unCheck Exception回滚；</p><p>　　2、如果配置了rollbackFor 和 noRollbackFor 且两个都是用同样的异常，那么遇到该异常，还是回滚；</p><p>　　3、rollbackFor 和noRollbackFor 配置也许不会含盖所有异常，对于遗漏的按照Check Exception 不回滚，unCheck Exception回滚；</p><p>　　4、@Transactional<strong>只能被应用到public方法上</strong>, 对于其它非public的方法,如果标记了@Transactional也不会报错,但方法没有事务功能.</p><p>　　5、Spring使用声明式事务处理，默认情况下，如果被注解的数据库操作方法中发生了unchecked异常，所有的数据库操作将rollback；如果发生的异常是checked异常，默认情况下数据库操作还是会提交的。这种默认的行为是可以改变的。使用@Transactional注解的noRollbackFor和rollbackFor属性：</p><p>如：@Transactional（rollbackFor=Exception.class）可以使checked异常发生时，数据库操作也rollback、@Transactional（noRollbackFor=RuntimeException.class）可以使unchecked异常发生时也提交数据库操作。</p><p>　　6、可以使用noRollbackForClassName、rollbackForClassName属性来指定一个异常类名的String数组来改变默认的行为。</p><p>　　7、读取数据库中的数据时是不需要事务管理的，这种情况下可以使用事务的传播行为来告诉Spring不需要开启事务，如：@Transactional（propagation =Propagation.NOT_SUPPORTED）。</p><h2 id="声明式事务的配置方式"><a href="#声明式事务的配置方式" class="headerlink" title="声明式事务的配置方式"></a>声明式事务的配置方式</h2><p>根据代理机制的不同，总结了五种Spring事务的配置方式，配置文件如下：</p><h3 id="1、XML配置每个Bean都有一个代理："><a href="#1、XML配置每个Bean都有一个代理：" class="headerlink" title="1、XML配置每个Bean都有一个代理："></a>1、XML配置每个Bean都有一个代理：</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd           http://www.springframework.org/schema/context           http://www.springframework.org/schema/context/spring-context-2.5.xsd           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:hibernate.cfg.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configurationClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.cfg.AnnotationConfiguration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 定义事务管理器（声明式的事务） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置DAO --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoTarget<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bluesky.spring.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.interceptor.TransactionProxyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoTarget<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyInterfaces<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bluesky.spring.dao.GeneratorDao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置事务属性 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PROPAGATION_REQUIRED<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、XML所有Bean共享一个代理基类："><a href="#2、XML所有Bean共享一个代理基类：" class="headerlink" title="2、XML所有Bean共享一个代理基类："></a>2、XML所有Bean共享一个代理基类：</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd           http://www.springframework.org/schema/context           http://www.springframework.org/schema/context/spring-context-2.5.xsd           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:hibernate.cfg.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configurationClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.cfg.AnnotationConfiguration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 定义事务管理器（声明式的事务） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    　　 <span class="token comment" spellcheck="true">&lt;!-- 此处所有transactionBase所有Bean共用 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionBase<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.interceptor.TransactionProxyFactoryBean<span class="token punctuation">"</span></span>              <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置事务属性 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PROPAGATION_REQUIRED<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置DAO --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoTarget<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bluesky.spring.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionBase<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoTarget<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、XML配置拦截器："><a href="#3、XML配置拦截器：" class="headerlink" title="3、XML配置拦截器："></a>3、XML配置拦截器：</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd           http://www.springframework.org/schema/context           http://www.springframework.org/schema/context/spring-context-2.5.xsd           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:hibernate.cfg.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configurationClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.cfg.AnnotationConfiguration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 定义事务管理器（声明式的事务） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionInterceptor<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.interceptor.TransactionInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 配置事务属性 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionAttributes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PROPAGATION_REQUIRED<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*Dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interceptorNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>transactionInterceptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置DAO --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bluesky.spring.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、XML使用tx标签配置AOP切面："><a href="#4、XML使用tx标签配置AOP切面：" class="headerlink" title="4、XML使用tx标签配置AOP切面："></a>4、XML使用tx标签配置AOP切面：</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd           http://www.springframework.org/schema/context           http://www.springframework.org/schema/context/spring-context-2.5.xsd           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bluesky<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:hibernate.cfg.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configurationClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.cfg.AnnotationConfiguration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 定义事务管理器（声明式的事务） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interceptorPointCuts<span class="token punctuation">"</span></span>            <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.bluesky.spring.dao.*.*(..))<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span>            <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interceptorPointCuts<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、全注解方式："><a href="#5、全注解方式：" class="headerlink" title="5、全注解方式："></a>5、全注解方式：</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd           http://www.springframework.org/schema/context           http://www.springframework.org/schema/context/spring-context-2.5.xsd           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bluesky<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.LocalSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:hibernate.cfg.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configurationClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.hibernate.cfg.AnnotationConfiguration<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 定义事务管理器（声明式的事务） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者SpringBoot在Application启动类通过注解开启事务管理：</p><pre class="line-numbers language-xml"><code class="language-xml">@EnableTransactionManagement // 启注解事务管理，等同于xml配置方式的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在具体的DAO类中添加注解@Transaction</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bluesky<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>SessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>hibernate3<span class="token punctuation">.</span>support<span class="token punctuation">.</span>HibernateDaoSupport<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bluesky<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">HibernateDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">"from User"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消毒供应室项目业务流程图</title>
      <link href="2021/01/05/project/ssd-pic/"/>
      <url>2021/01/05/project/ssd-pic/</url>
      
        <content type="html"><![CDATA[<p>用的是 <em>ProcessOn</em> 画的业务流程图，项目是消毒供应室（ sterilization_supplement_department ）。</p><p>这个图刚入职的时候为了熟悉业务流程画的，很早就画好了,就放几张重要的版本。</p><p>这张是第一天画的版本，很粗略，没有画出并发核心模块的操作流程。</p><p><strong>点击看大图</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ssd-pic-3.0.jpg" alt></p><p>这张就是最终修订版：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ssd-pic-4.2.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ssd-pic-1.0.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空指针异常NullPointerException</title>
      <link href="2021/01/05/project/nullpointerexception/"/>
      <url>2021/01/05/project/nullpointerexception/</url>
      
        <content type="html"><![CDATA[<h2 id="直接从Map里拿字段信息"><a href="#直接从Map里拿字段信息" class="headerlink" title="直接从Map里拿字段信息"></a>直接从Map里拿字段信息</h2><p>用Mybatis从数据库中查询到Map&lt;String,Object&gt;结果集后，直接调用get方法。</p><p>栗子：</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> entityMap <span class="token operator">=</span> xxxMapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> entityMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">(</span>entityMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容易犯错的问题：如果entityMap中key为name的value为null。则该语句会爆空指针异常。</p><p>正确例子：</p><pre class="line-numbers language-java"><code class="language-java">String name <span class="token operator">=</span> entityMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token operator">==</span>null <span class="token operator">?</span> null <span class="token operator">:</span> entityMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所有从Map中获取的对象都必须进行空值判断，否则会出现在特定的数据下，突然时不时的给你爆个空指针异常。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务的配置、参数详情及其原理介绍 （Transactional）</title>
      <link href="2020/12/31/java/spring-transaction/"/>
      <url>2020/12/31/java/spring-transaction/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h2><p>Spring 事务管理分为<strong>编程式</strong>和<strong>声明式</strong>的两种方式。</p><ol><li>编程式事务指的是<strong>通过编码方式实现事务</strong>；声明式事务<strong>基于 AOP,将具体业务逻辑与事务处理解耦</strong>。</li><li>声明式事务管理使业务代码逻辑不受污染, 因此在实际使用中声明式事务用的比较多。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-1.png" alt></p><p>参考整理于：<a href="https://blog.csdn.net/trigl/article/details/50968079" target="_blank" rel="noopener">https://blog.csdn.net/trigl/article/details/50968079</a> | <a href="https://www.cnblogs.com/jing99/p/11495252.html" target="_blank" rel="noopener">https://www.cnblogs.com/jing99/p/11495252.html</a> | <a href="https://www.it610.com/article/4944062.htm" target="_blank" rel="noopener">https://www.it610.com/article/4944062.htm</a></p><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p>请跳转：<a href="http://arthurjq.com/2021/01/06/spring-transaction-programmatic-transaction/">http://arthurjq.com/2021/01/06/spring-transaction-programmatic-transaction/</a></p><blockquote><p>本来我是放在这边的，但是这篇博文太大了就很卡，我就把这篇分成了三篇发了。</p></blockquote><h2 id="声明式事务有两种方式"><a href="#声明式事务有两种方式" class="headerlink" title="声明式事务有两种方式"></a>声明式事务有两种方式</h2><ol><li>一种是在配置文件（xml）中做相关的事务规则声明</li><li>另一种是基于 @Transactional 注解的方式</li></ol><p>具体的声明书事务配置方式有五种，在另一篇文章的后边：<a href="http://arthurjq.com/2021/01/06/spring-transaction-propagation/">http://arthurjq.com/2021/01/06/spring-transaction-propagation/</a></p><p>需要明确几点：</p><ol><li><p>默认配置下 Spring 只会回滚运行时、未检查异常（继承自 RuntimeException 的异常）或者 Error。</p></li><li><p>@Transactional 注解只能应用到 public 方法才有效。</p></li><li><p>@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。然而仅仅 @Transactional 注解的出现不足以开启事务行为，它仅仅是一种元数据，能够被可以识别 @Transactional 注解和上述的配置适当的具有事务行为的beans所使用。其实是 <code>&lt;tx:annotation-driven/&gt;</code>元素的出现开启了事务行为。</p></li><li><p>注解不可以继承，建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。当然可以在接口上使用 @Transactional 注解，但是这将只有当你设置了基于接口的代理时它才生效。</p></li></ol><blockquote><p>Spring配置文件中关于事务配置总是由三个组成部分，分别是<strong>DataSource、TransactionManager和代理机制</strong>这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。</p><p>DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用Hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为HibernateTransactionManager。</p></blockquote><p>具体如下图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-2.png" alt></p><p>事务的TransactionManager事务管理器总共有5种，与DataSource关联关系如图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-3.png" alt></p><h2 id="Spring事务属性配置（注解示例）"><a href="#Spring事务属性配置（注解示例）" class="headerlink" title="Spring事务属性配置（注解示例）"></a>Spring事务属性配置（注解示例）</h2><p>我们在使用Spring声明式事务时，有一个非常重要的概念就是事务属性。事务属性通常由事务的传播行为，事务的隔离级别，事务的超时值和事务只读标志组成。我们在进行事务划分时，需要进行事务定义，也就是配置事务的属性。 </p><p>Spring在TransactionDefinition接口中定义这些属性,以供PlatfromTransactionManager使用。</p><p><strong>PlatfromTransactionManager是spring事务管理的核心接口</strong></p><pre class="line-numbers language-java"><code class="language-java">TransactionDefinition  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//事务的传播性</span>    <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//事务的隔离性 </span>    <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//超时</span>    <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只读</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring事务管理的实现有许多细节，如果对整个接口框架有个大体了解会非常有利于我们理解事务，Spring事务管理涉及的接口的联系如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-9.png" alt></p><p><strong>PlatfromTransactionManager是spring事务管理的核心接口</strong></p><h3 id="事务的传播性"><a href="#事务的传播性" class="headerlink" title="事务的传播性"></a>事务的传播性</h3><p>getPropagationBehavior（）返回事务的传播行为，由是否有一个活动的事务来决定一个事务调用。 在TransactionDefinition接口中定义了七个事务传播行为。</p><p>详细的话请跳转：<a href="http://arthurjq.com/2021/01/06/spring-transaction-propagation/">http://arthurjq.com/2021/01/06/spring-transaction-propagation/</a></p><h3 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h3><p>这个之前总结过了，这里就放张图，可以跳转：<a href="http://arthurjq.com/2020/12/25/acid-isolation/">http://arthurjq.com/2020/12/25/acid-isolation/</a></p><p>使用@Transactional的Isolation属性可以指定事务的隔离级别。但事务的隔离级别是由底层的数据库实现的，并不是由Spring来实现。</p><p>注意：在MySQL的众多存储引擎中，<strong>只有InnoDB支持事务</strong>，所以说的事务隔离级别指的是InnoDB下的事务隔离级别。隔离级别引发的读问题如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-7.png" alt></p><h3 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h3><p>设置事务超时时间</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span> <span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Spring事务超时 = 事务开始时到最后一个Statement创建时时间 + 最后一个Statement的执行时超时时间（即其queryTimeout）。</p><p>设置了超时时间，如DataSourceTransactionManager首先开启事物会调用其doBegin方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>      txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<strong>determineTimeout用来获取我们设置的事务超时时间</strong>；然后设置到ConnectionHolder对象上（其是ResourceHolder子类），接着看ResourceHolderSupport的setTimeoutInSeconds实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeoutInMillis</span><span class="token punctuation">(</span>seconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//判断事务超时时间</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimeoutInMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deadline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> millis<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，其会设置一个deadline时间，用来判断事务超时时间的；</p><p>在JdbcTemplate中，执行sql之前，会调用其applyStatementSettings：其会调用DataSourceUtils.applyTimeout（stmt, getDataSource（）, getQueryTimeout（））;设置超时时间；</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">applyTimeout</span><span class="token punctuation">(</span>Statement stmt<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>      Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> <span class="token string">"No Statement specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"No DataSource specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ConnectionHolder holder <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectionHolder<span class="token punctuation">)</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>holder <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> holder<span class="token punctuation">.</span><span class="token function">hasTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Remaining transaction timeout overrides specified value.  </span>        stmt<span class="token punctuation">.</span><span class="token function">setQueryTimeout</span><span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getTimeToLiveInSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// No current transaction timeout -> apply specified value.  </span>        stmt<span class="token punctuation">.</span><span class="token function">setQueryTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在调用getTimeToLiveInSeconds和getTimeToLiveInMillis，会检查是否超时</strong>，如果超时设置事务回滚，并抛出TransactionTimedOutException异常：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTimeToLiveInSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">double</span> diff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token function">getTimeToLiveInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> secs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">checkTransactionTimeout</span><span class="token punctuation">(</span>secs <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> secs<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimeToLiveInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionTimedOutException<span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deadline <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No timeout specified for this resource holder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">long</span> timeToLive <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deadline<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">checkTransactionTimeout</span><span class="token punctuation">(</span>timeToLive <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> timeToLive<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkTransactionTimeout</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> deadlineReached<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionTimedOutException <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>deadlineReached<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransactionTimedOutException</span><span class="token punctuation">(</span><span class="token string">"Transaction timed out: deadline was "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，在请求之后sleep并不会超时。如代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//放在此处会发生timeout</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>3000L<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      JdbcTemplate jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>      jdbcTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">" update test set hobby = hobby || '1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//放在此处并不会发生timeout</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>3000L<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务的只读-ReadOnly"><a href="#事务的只读-ReadOnly" class="headerlink" title="事务的只读 ReadOnly"></a>事务的只读 ReadOnly</h3><p>readOnly=true只读,不能更新,删除</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span> <span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：<strong>一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务。</strong></p><p>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p><ol><li><p>在JDBC中，指定只读事务的办法为： <code>connection.setReadOnly(true)</code>;</p></li><li><p>在Hibernate中，指定只读事务的办法为： <code>session.setFlushMode(FlushMode.NEVER)</code>; 此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p></li><li><p>在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”，或者用注解方式<code>@Transactional(readOnly=true)</code></p></li></ol><p>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER, and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式。</p><h2 id="Transactional-事务实现机制"><a href="#Transactional-事务实现机制" class="headerlink" title="@Transactional 事务实现机制"></a>@Transactional 事务实现机制</h2><p>在应用系统调用声明了 @Transactional 的目标方法时，Spring Framework 默认使用 AOP 代理，<strong>在代码运行时生成一个代理对象</strong></p><p>根据 @Transactional 的属性配置信息，这个代理对象决定该声明 @Transactional 的目标方法是否由拦截器 TransactionInterceptor 来使用拦截</p><p>在 TransactionInterceptor 拦截时，会在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑, 最后根据执行情况是否出现异常，利用抽象事务管理器 AbstractPlatformTransactionManager 操作数据源 DataSource 提交或回滚事务。</p><p>Spring AOP 代理有 <strong>CglibAopProxy 和 JdkDynamicAopProxy</strong> 两种，以 CglibAopProxy 为例，对于 CglibAopProxy，需要调用其内部类的 DynamicAdvisedInterceptor 的 intercept 方法。对于 JdkDynamicAopProxy，需要调用其 invoke 方法。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-8.png" alt></p><p>点击看全图。</p><p>正如上文提到的，事务管理的框架是由<strong>抽象事务管理器</strong> AbstractPlatformTransactionManager 来提供的，而具体的底层事务处理实现，由 PlatformTransactionManager 的具体实现类来实现，如事务管理器 DataSourceTransactionManager。不同的事务管理器管理不同的数据资源 DataSource，比如 DataSourceTransactionManager 管理 JDBC 的 Connection。</p><p><strong>PlatfromTransactionManager是spring事务管理的核心接口</strong>（复读机）</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-9.png" alt></p><h2 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h2><p>关于事务管理器，不管是JPA还是JDBC等<strong>都实现自接口 PlatformTransactionManager</strong> </p><ol><li><p>如果你添加的是 spring-boot-starter-jdbc 依赖，框架会默认注入 DataSourceTransactionManager 实例。</p></li><li><p>如果你添加的是 spring-boot-starter-data-jpa 依赖，框架会默认注入 JpaTransactionManager 实例。</p></li></ol><p>PlatformTransactionManager代码如下：</p><pre class="line-numbers language-java"><code class="language-java">Public <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 由TransactionDefinition得到TransactionStatus对象</span>    TransactionStatus <span class="token function">getTransaction</span><span class="token punctuation">(</span>TransactionDefinition definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 提交</span>    Void <span class="token function">commit</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 回滚</span>    Void <span class="token function">rollback</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这里可知<strong>具体的事务管理机制对Spring来说是透明的</strong>，所以Spring事务管理的一个优点就是为不同的事务API提供一致的编程模型，如JTA、JDBC、Hibernate、JPA。下面分别介绍各个平台框架实现事务管理的机制。</p><h3 id="1-JDBC事务"><a href="#1-JDBC事务" class="headerlink" title="1. JDBC事务"></a>1. JDBC事务</h3><p>如果应用程序中直接使用JDBC来进行持久化，DataSourceTransactionManager会为你处理事务边界。为了使用DataSourceTransactionManager，你需要使用如下的XML将其装配到应用程序的上下文定义中：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际上，DataSourceTransactionManager是通过调用java.sql.Connection来管理事务，而后者是通过DataSource获取到的。通过调用连接的commit（）方法来提交事务，同样，事务失败则通过调用rollback（）方法进行回滚。</p><h3 id="2-Hibernate事务"><a href="#2-Hibernate事务" class="headerlink" title="2. Hibernate事务"></a>2. Hibernate事务</h3><p>如果应用程序的持久化是通过Hibernate实现的，那么你需要使用HibernateTransactionManager。对于Hibernate3，需要在Spring上下文定义中添加如下的<code>&lt;bean&gt;</code>声明：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sessionFactory属性需要装配一个Hibernate的session工厂，HibernateTransactionManager的实现细节是<strong>它将事务管理的职责委托给org.hibernate.Transaction对象，而后者是从Hibernate Session中获取到的</strong>。当事务成功完成时，HibernateTransactionManager将会调用Transaction对象的commit（）方法，反之，将会调用rollback（）方法。</p><h3 id="3-Java持久化API事务（JPA）"><a href="#3-Java持久化API事务（JPA）" class="headerlink" title="3. Java持久化API事务（JPA）"></a>3. Java持久化API事务（JPA）</h3><p>Hibernate多年来一直是事实上的Java持久化标准，但是现在Java持久化API作为真正的Java持久化标准进入大家的视野。如果你计划使用JPA的话，那你需要使用Spring的JpaTransactionManager来处理事务。你需要在Spring中这样配置JpaTransactionManager：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.orm.jpa.JpaTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JpaTransactionManager只需要装配一个JPA实体管理工厂（javax.persistence.EntityManagerFactory接口的任意实现）。JpaTransactionManager将与由工厂所产生的JPA EntityManager合作来构建事务。</p><h3 id="4-Java原生API事务"><a href="#4-Java原生API事务" class="headerlink" title="4. Java原生API事务"></a>4. Java原生API事务</h3><p>如果你没有使用以上所述的事务管理，或者是跨越了多个事务管理源（比如两个或者是多个不同的数据源），你就需要使用JtaTransactionManager：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.jta.JtaTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManagerName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java:/TransactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JtaTransactionManager将事务管理的责任委托给javax.transaction.UserTransaction和javax.transaction.TransactionManager对象，其中事务成功完成通过UserTransaction.commit（）方法提交，事务失败通过UserTransaction.rollback（）方法回滚。</p><h3 id="指定事务管理器"><a href="#指定事务管理器" class="headerlink" title="指定事务管理器"></a>指定事务管理器</h3><p>可以在启动类中添加如下方法，Debug测试，就能知道自动注入的是 PlatformTransactionManager 接口的哪个实现类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span> <span class="token comment" spellcheck="true">// 启注解事务管理，等同于xml配置方式的 &lt;tx:annotation-driven /></span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfiledemoApplication</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Object <span class="token function">testBean</span><span class="token punctuation">(</span>PlatformTransactionManager platformTransactionManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>"</span> <span class="token operator">+</span> platformTransactionManager<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProfiledemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在启动项目时，指定事务管理器，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfiledemoApplication</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 其中 dataSource 框架会自动为我们注入</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">txManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Object <span class="token function">testBean</span><span class="token punctuation">(</span>PlatformTransactionManager platformTransactionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>"</span> <span class="token operator">+</span> platformTransactionManager<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProfiledemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Spring容器中，我们手工注解@Bean 将被优先加载，框架不会重新实例化其他的 PlatformTransactionManager 实现类。</p><p>然后在Service中，被 @Transactional 注解的方法，将支持事务。如果注解在类上，则整个类的所有方法都默认支持事务。</p><h3 id="同一个工程中存在多个事务管理器"><a href="#同一个工程中存在多个事务管理器" class="headerlink" title="同一个工程中存在多个事务管理器"></a>同一个工程中存在多个事务管理器</h3><p>对于同一个工程中存在多个事务管理器要怎么处理，请看下面的实例，具体说明请看代码中的注释。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span> <span class="token comment" spellcheck="true">// 开启注解事务管理，等同于xml配置文件中的 &lt;tx:annotation-driven /></span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfiledemoApplication</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionManagementConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"txManager2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> PlatformTransactionManager txManager2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建事务管理器1</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"txManager1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">txManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建事务管理器2</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"txManager2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">txManager2</span><span class="token punctuation">(</span>EntityManagerFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现接口 TransactionManagementConfigurer 方法，其返回值代表在拥有多个事务管理器的情况下默认使用的事务管理器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">annotationDrivenTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> txManager2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProfiledemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevSendMessage</span> <span class="token keyword">implements</span> <span class="token class-name">SendMessage</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用value具体指定使用哪个事务管理器</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"txManager1"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>Dev Send()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">send2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在存在多个事务管理器的情况下，如果使用value具体指定</span>    <span class="token comment" spellcheck="true">// 则默认使用方法 annotationDrivenTransactionManager() 返回的事务管理器</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>Dev Send2()&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务状态"><a href="#事务状态" class="headerlink" title="事务状态"></a>事务状态</h2><p>上面讲到的调用PlatformTransactionManager接口的getTransaction（）的方法得到的是TransactionStatus接口的一个实现，这个接口的内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否是新的事物</span>    <span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否有恢复点</span>    <span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置为只回滚</span>    <span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否为只回滚</span>    <span class="token keyword">boolean</span> isCompleted<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否已完成</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现这个接口描述的是一些处理事务提供简单的控制事务执行和查询事务状态的方法，在回滚或提交的时候需要应用对应的事务状态。</p><p>最后附送一张时序图（点击看原图）：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/spring%20transaction-10.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> 事务 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的explain</title>
      <link href="2020/12/30/database/mysql-explain/"/>
      <url>2020/12/30/database/mysql-explain/</url>
      
        <content type="html"><![CDATA[<h2 id="Sql的编写过程和解析过程"><a href="#Sql的编写过程和解析过程" class="headerlink" title="Sql的编写过程和解析过程"></a>Sql的编写过程和解析过程</h2><p>编写过程：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> dinstinct  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">join</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">limit</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解析过程：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">on</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">join</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">select</span> dinstinct <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">limit</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Mysql中explain"><a href="#Mysql中explain" class="headerlink" title="Mysql中explain"></a>Mysql中explain</h2><p><strong>explain</strong>  ：可以模拟SQL优化器执行SQL语句，从而让 开发人员 知道自己编写的SQL状况</p><p>比如下边的sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_flow_sterilize_batch <span class="token number">a</span> <span class="token keyword">join</span> ssd_dev<span class="token punctuation">.</span>t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html>  <body>    <table class="data" cellspacing="0">      <tr>        <th>id</th>        <th>select_type</th>        <th>table</th>        <th>partitions</th>        <th>type</th>        <th>possible_keys</th>        <th>key</th>        <th>key_len</th>        <th>ref</th>        <th>rows</th>        <th>filtered</th>        <th>Extra</th>      </tr>      <tr class="even">        <td align="right">1</td>        <td>SIMPLE</td>        <td>b</td>        <td>(null)</td>        <td>ALL</td>        <td>(null)</td>        <td>(null)</td>        <td>(null)</td>        <td>(null)</td>        <td align="right">8</td>        <td align="right">100.0</td>        <td>Using where</td>      </tr>      <tr class="odd">        <td align="right">1</td>        <td>SIMPLE</td>        <td>a</td>        <td>(null)</td>        <td>eq_ref</td>        <td>PRIMARY</td>        <td>PRIMARY</td>        <td>130</td>        <td>ssd_dev.b.sterilize_batch_id</td>        <td align="right">1</td>        <td align="right">100.0</td>        <td>(null)</td>      </tr>    </table>  </body></html><blockquote><p>id : 优先级，id值越大越优先；id值相同，从上往下 顺序执行<br>select_type ：查询类型<br>table ：表<br>type   ：索引类型<br>possible_keys ：预测用到的索引<br>key  ：实际使用的索引<br>key_len ：实际使用索引的长度<br>ref  :表之间的引用，指明当前表所 参照的 字段<br>rows ：通过索引查询到的数据量                                                                                                     filtered：返回结果的行占需要读取的行（rows列的值）的百分比，就是百分比越高，说明需要查询到数据越精确，百分比越小，说明查询到的数据量大，而结果集很少<br>Extra ： 额外的信息</p></blockquote><p>下边对比较重要的字段进行说明：</p><h3 id="select-type字段"><a href="#select-type字段" class="headerlink" title="select_type字段"></a>select_type字段</h3><ol><li>simple:简单查询（不包含子查询、union）</li><li>PRIMARY:包含子查询SQL中的 主查询 （最外层）</li><li>SUBQUERY：包含子查询SQL中的 子查询 （非最外层）</li><li>derived:衍生查询（使用到了临时表，union）</li><li>union:使用了union</li><li>union result :告知开发人员，那些表之间存在union查询</li></ol><p>在from子查询中， 如果有table1 union table2 ，则table1 就是derived,table2就是union，例如下边：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span>  <span class="token keyword">select</span>  cr<span class="token punctuation">.</span>cname  <span class="token keyword">from</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> tid <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">union</span>       <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course <span class="token keyword">where</span> tid <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span> cr <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="type字段"><a href="#type字段" class="headerlink" title="type字段"></a>type字段</h3><blockquote><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; all</p><p>一般用不到上边这么多。</p></blockquote><p>常见的索引类型：<strong>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</strong>   ，要对type进行优化的前提：有索引</p><p>其中：system,const只是理想情况；实际能达到 ref&gt;range</p><p><strong>system</strong>（忽略）: <strong>只有一条数据的系统表</strong> 或 衍生表只有一条数据的主查询</p><p><strong>const</strong>：仅仅能查到一条数据的SQL，通过索引一次命中 ,用于Primary key 或unique索引</p><p><strong>eq_ref</strong>：<strong>唯一性索引</strong>：对于每个索引键的查询，返回<strong>匹配唯一行</strong>数据（<strong>有且只有1个</strong>，不能多 、不能0），常见于唯一索引 和 主键索引，有可能需要回表</p><p><strong>ref</strong>：<strong>非唯一性索引</strong>，对于每个索引键的查询，返回匹配的所有行（0，多），有可能需要回表</p><p><strong>range</strong>：检索<strong>指定范围</strong>的行 ,where后面是一个范围查询（<code>between   ,&gt; &lt; &gt;=</code>,     特殊:in有时候会失效 ，从而转为 无索引 all）</p><p><strong>index</strong>：查询<strong>全部索引</strong>中数据，只遍历索引树</p><p><strong>all</strong>：全表扫描</p><blockquote><p>system/const: 结果只有一条数据<br>eq_ref:结果多条；但是每条数据是唯一的 ；<br>ref：结果多条；但是每条数据是是0或多条 ；</p></blockquote><h3 id="key-len字段"><a href="#key-len字段" class="headerlink" title="key_len字段"></a>key_len字段</h3><p>作用：用于判断复合索引是否被完全使用。</p><ol><li>如果索引字段<strong>可以为Null</strong>，则会多加1个字节用于标识。</li><li>如果索引字段是<strong>可变长度</strong>的，会多加2个字节标识可变长度。</li></ol><p>不同的编码一个字符的字节数不同：</p><blockquote><p>utf8:1个字符3个字节<br>gbk:1个字符2个字节<br>latin:1个字符1个字节</p></blockquote><h3 id="Extra字段"><a href="#Extra字段" class="headerlink" title="Extra字段"></a>Extra字段</h3><p><strong>using filesort</strong> ：没有走索引排序，性能消耗大；需要“额外”的一次排序（查询）  。常见于 order by 语句中。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span> <span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a2</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--using filesort</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>对于单索引， 如果排序和查找是同一个字段，则不会出现using filesort；如果排序和查找不是同一个字段，则会出现using filesort；</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> test02 <span class="token keyword">add</span> <span class="token keyword">index</span> idx_a1_a2_a3 <span class="token punctuation">(</span><span class="token number">a1</span><span class="token punctuation">,</span><span class="token number">a2</span><span class="token punctuation">,</span><span class="token number">a3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span><span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a3</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--using filesort</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a2</span><span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a3</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--using filesort</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span><span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a2</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--没有using filesort</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a2</span><span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--using filesort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上边是复合索引的情况。</p><p>小结： where和order by 按照复合索引的顺序使用，不要跨列或无序使用。</p></blockquote><p><strong>using temporary</strong>:性能损耗大 ，用到了<strong>临时表</strong>。一般出现在group by 语句中。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">a1</span> <span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--没有using temporary</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">a1</span> <span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a2</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--using temporary</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>避免：查询那些列，就根据那些列 group by</p><p><strong>using index</strong> :性能提升; <strong>索引覆盖</strong>（覆盖索引）。原因：不读取原文件，<strong>只从索引文件中获取数据</strong> （不需要回表查询）</p><p>例如：test02表中有一个复合索引（a1,a2）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">a1</span><span class="token punctuation">,</span><span class="token number">a2</span> <span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span><span class="token operator">=</span><span class="token string">''</span> <span class="token operator">or</span> <span class="token number">a2</span><span class="token operator">=</span> <span class="token string">''</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--using index</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">a1</span><span class="token punctuation">,</span><span class="token number">a3</span> <span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span><span class="token operator">=</span><span class="token string">''</span> <span class="token operator">or</span> <span class="token number">a3</span><span class="token operator">=</span> <span class="token string">''</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--没有索引覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>using where</strong> （<strong>需要回表查询</strong>）</p><p>假设age是索引列</p><p>但查询语句<code>select age,name from ... where age =...</code>,此语句中必须回原表查Name，因此会显示using where</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">a1</span><span class="token punctuation">,</span><span class="token number">a3</span> <span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a3</span> <span class="token operator">=</span> <span class="token string">''</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--a3需要回原表查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>impossible where</strong> ： where子句永远为false</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test02 <span class="token keyword">where</span> <span class="token number">a1</span><span class="token operator">=</span><span class="token string">'x'</span> <span class="token operator">and</span> <span class="token number">a1</span><span class="token operator">=</span><span class="token string">'y'</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--a1不可能又是x又是y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="explain的两种格式"><a href="#explain的两种格式" class="headerlink" title="explain的两种格式"></a>explain的两种格式</h2><p>Mysql中explain有两种格式，分别是</p><ol><li>format=tree</li><li>format=json，返回json格式的explain</li></ol><p>举个栗子：</p><h3 id="format-tree"><a href="#format-tree" class="headerlink" title="format = tree"></a>format = tree</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> format<span class="token operator">=</span>tree <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_flow_sterilize_batch <span class="token number">a</span> <span class="token keyword">join</span> ssd_dev<span class="token punctuation">.</span>t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><pre><code>-&gt; Nested loop inner join  (cost=3.85 rows=8)    -&gt; Filter: (b.sterilize_batch_id is not null)  (cost=1.05 rows=8)        -&gt; Table scan on b  (cost=1.05 rows=8)    -&gt; Single-row index lookup on a using PRIMARY (id=b.sterilize_batch_id)  (cost=0.26 rows=1)</code></pre><h3 id="format-json"><a href="#format-json" class="headerlink" title="format = json"></a>format = json</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> format<span class="token operator">=</span>json <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_flow_sterilize_batch <span class="token number">a</span> <span class="token keyword">join</span> ssd_dev<span class="token punctuation">.</span>t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query_block"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"select_id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"cost_info"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query_cost"</span><span class="token operator">:</span> <span class="token string">"3.85"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"nested_loop"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"table"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"table_name"</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>          <span class="token property">"access_type"</span><span class="token operator">:</span> <span class="token string">"ALL"</span><span class="token punctuation">,</span>          <span class="token property">"rows_examined_per_scan"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          <span class="token property">"rows_produced_per_join"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          <span class="token property">"filtered"</span><span class="token operator">:</span> <span class="token string">"100.00"</span><span class="token punctuation">,</span>          <span class="token property">"cost_info"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"read_cost"</span><span class="token operator">:</span> <span class="token string">"0.25"</span><span class="token punctuation">,</span>            <span class="token property">"eval_cost"</span><span class="token operator">:</span> <span class="token string">"0.80"</span><span class="token punctuation">,</span>            <span class="token property">"prefix_cost"</span><span class="token operator">:</span> <span class="token string">"1.05"</span><span class="token punctuation">,</span>            <span class="token property">"data_read_per_join"</span><span class="token operator">:</span> <span class="token string">"8K"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"used_columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"id"</span><span class="token punctuation">,</span>            <span class="token string">"sterilize_task_id"</span><span class="token punctuation">,</span>            <span class="token string">"packet_instance_id"</span><span class="token punctuation">,</span>            <span class="token string">"sterilize_batch_id"</span><span class="token punctuation">,</span>            <span class="token string">"create_user"</span><span class="token punctuation">,</span>            <span class="token string">"create_time"</span><span class="token punctuation">,</span>            <span class="token string">"last_user"</span><span class="token punctuation">,</span>            <span class="token string">"last_time"</span><span class="token punctuation">,</span>            <span class="token string">"delete_flag"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"attached_condition"</span><span class="token operator">:</span> <span class="token string">"(`ssd_dev`.`b`.`sterilize_batch_id` is not null)"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"table"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"table_name"</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>          <span class="token property">"access_type"</span><span class="token operator">:</span> <span class="token string">"eq_ref"</span><span class="token punctuation">,</span>          <span class="token property">"possible_keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"PRIMARY"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>          <span class="token property">"used_key_parts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"id"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"key_length"</span><span class="token operator">:</span> <span class="token string">"130"</span><span class="token punctuation">,</span>          <span class="token property">"ref"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"ssd_dev.b.sterilize_batch_id"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"rows_examined_per_scan"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"rows_produced_per_join"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          <span class="token property">"filtered"</span><span class="token operator">:</span> <span class="token string">"100.00"</span><span class="token punctuation">,</span>          <span class="token property">"cost_info"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"read_cost"</span><span class="token operator">:</span> <span class="token string">"2.00"</span><span class="token punctuation">,</span>            <span class="token property">"eval_cost"</span><span class="token operator">:</span> <span class="token string">"0.80"</span><span class="token punctuation">,</span>            <span class="token property">"prefix_cost"</span><span class="token operator">:</span> <span class="token string">"3.85"</span><span class="token punctuation">,</span>            <span class="token property">"data_read_per_join"</span><span class="token operator">:</span> <span class="token string">"13K"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"used_columns"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"id"</span><span class="token punctuation">,</span>            <span class="token string">"box_id"</span><span class="token punctuation">,</span>            <span class="token string">"batch_no_day"</span><span class="token punctuation">,</span>            <span class="token string">"load_count"</span><span class="token punctuation">,</span>            <span class="token string">"status"</span><span class="token punctuation">,</span>            <span class="token string">"load_user"</span><span class="token punctuation">,</span>            <span class="token string">"load_start_time"</span><span class="token punctuation">,</span>            <span class="token string">"load_end_time"</span><span class="token punctuation">,</span>            <span class="token string">"sterilize_user"</span><span class="token punctuation">,</span>            <span class="token string">"sterilize_start_time"</span><span class="token punctuation">,</span>            <span class="token string">"sterilize_end_time"</span><span class="token punctuation">,</span>            <span class="token string">"sterilize_program_id"</span><span class="token punctuation">,</span>            <span class="token string">"batch_no_month"</span><span class="token punctuation">,</span>            <span class="token string">"expected_time"</span><span class="token punctuation">,</span>            <span class="token string">"create_user"</span><span class="token punctuation">,</span>            <span class="token string">"create_time"</span><span class="token punctuation">,</span>            <span class="token string">"last_user"</span><span class="token punctuation">,</span>            <span class="token string">"last_time"</span><span class="token punctuation">,</span>            <span class="token string">"delete_flag"</span><span class="token punctuation">,</span>            <span class="token string">"valid_num"</span><span class="token punctuation">,</span>            <span class="token string">"valid_unit"</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> mysql </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 的Join及底层实现原理</title>
      <link href="2020/12/30/database/mysql-join/"/>
      <url>2020/12/30/database/mysql-join/</url>
      
        <content type="html"><![CDATA[<p>Mysql只支持一种join算法：Nested-Loop Join（嵌套循环连接），但Nested-Loop Join有三种变种：</p><p>转载：<a href="https://blog.csdn.net/qq_37050329/article/details/88777937" target="_blank" rel="noopener">https://blog.csdn.net/qq_37050329/article/details/88777937</a></p><h2 id="一、Simple-Nested-Loop-Join"><a href="#一、Simple-Nested-Loop-Join" class="headerlink" title="一、Simple Nested-Loop Join"></a>一、Simple Nested-Loop Join</h2><p>如下图，r为驱动表，s为匹配表，可以看到从r中分别取出r1、r2、……、rn去匹配s表的左右列，然后再合并数据，<strong>对s表进行了rn次访问</strong>，对数据库开销大</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-nestedloop1.png" alt></p><h2 id="二、Index-Nested-Loop-Join（索引嵌套）"><a href="#二、Index-Nested-Loop-Join（索引嵌套）" class="headerlink" title="二、Index Nested-Loop Join（索引嵌套）"></a>二、Index Nested-Loop Join（索引嵌套）</h2><p>这个要求非驱动表（匹配表s）上有索引，可以通过索引来减少比较，加速查询。</p><p>在查询时，驱动表（r）会根据关联字段的索引进行查找，挡在索引上找到符合的值，再回表进行查询，也就是只有当匹配到索引以后才会进行回表查询。</p><p>如果非驱动表（s）的关联健是主键的话，性能会非常高，如果不是主键，要进行多次回表查询，先关联索引，然后根据二级索引的主键ID进行回表操作，性能上比索引是主键要慢。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-nestedloop2.png" alt></p><h2 id="三、Block-Nested-Loop-Join"><a href="#三、Block-Nested-Loop-Join" class="headerlink" title="三、Block Nested-Loop Join"></a>三、Block Nested-Loop Join</h2><p>如果有索引，会选取第二种方式进行join，但如果join列没有索引，就会采用Block Nested-Loop Join。</p><p>可以看到中间有个join buffer缓冲区，是将驱动表的所有join相关的列都先缓存到join buffer中，然后批量与匹配表进行匹配，将<strong>第一种多次比较合并为一次</strong>，<strong>降低了非驱动表（s）的访问频率</strong>。</p><p>默认情况下join_buffer_size=256K，在查找的时候MySQL会将所有的需要的列缓存到 join buffer 当中，包括select的列，而不是仅仅只缓存关联列。在一个有N个JOIN关联的SQL当中会在执行时候分配N-1个join buffer。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-nestedloop3.png" alt></p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>假设两张表a 和 b</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># a表结构</span>comments_id      <span class="token keyword">bigInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  Pfor_comments_if  <span class="token keyword">mediumint</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>product_id       <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>order_id         <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b表结构</span>id               <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     Pcomments_id      <span class="token keyword">bigInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>product_id       <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中b的关联有comments_id，所以有索引。</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">join</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>comments_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>comments_id<span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>comments_id<span class="token operator">=</span> <span class="token number">2056</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用的是Index Nested-Loop Join，先对驱动表a的主键筛选，得到一条，然后对非驱动表b的索引进行seek匹配，预计得到一条数据。</p><p>下面这种情况没用到索引：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">join</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>order_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>product_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用Block Nested-Loop Join，如果b表数据少，作为驱动表，将b的需要的数据缓存到join buffer中，批量对a表扫描</p><h3 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">join</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>comments_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>comments_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里用到了索引，所以会采用Index Nested-Loop Join，因为没有筛选条件，会选择一张表作为驱动表去进行join，去关联非驱动表的索引。</p><p>如果加了条件:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">join</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>comments_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>comments_id<span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>comments_id <span class="token operator">=</span> <span class="token number">2056</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就会从驱动表筛选出一条来进行对非驱动表的匹配。</p><h2 id="Hash-Join"><a href="#Hash-Join" class="headerlink" title="Hash Join"></a>Hash Join</h2><p>未完待续</p><p><a href="https://zhuanlan.zhihu.com/p/88900956" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/88900956</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL的各种连接Join详解</title>
      <link href="2020/12/30/database/sql-join/"/>
      <url>2020/12/30/database/sql-join/</url>
      
        <content type="html"><![CDATA[<p>SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。</p><p>最常见的 JOIN 类型：SQL INNER JOIN（简单的 JOIN）、SQL LEFT JOIN、SQL  RIGHT JOIN、SQL FULL JOIN，其中前一种是内连接，后三种是外链接。</p><p>假设我们有两张表，Table A是左边的表，Table B是右边的表。</p><table style="height: 132px; float: left; width: 145px" border="0"><tbody><tr><td style="text-align: center">id</td><td style="text-align: center">name</td></tr><tr><td style="text-align: left">1</td><td>Google</td></tr><tr><td style="text-align: left">2</td><td>淘宝</td></tr><tr><td style="text-align: left">3</td><td>微博</td></tr><tr><td style="text-align: left">4</td><td>Facebook</td></tr></tbody></table><table style="float: left; height: 132px; width: 149px" border="0"><tbody><tr><td style="text-align: center">id</td><td style="text-align: center">address</td></tr><tr><td>1</td><td>美国</td></tr><tr><td>5</td><td>中国</td></tr><tr><td>3</td><td>中国</td></tr><tr><td>6</td><td>美国</td></tr></tbody></table><br><br><br><br><br><br><br><br><br><br><br><br><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><p>内连接是最常见的一种连接，只连接匹配的行。</p><p>inner join语法</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token number">1</span><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token keyword">table</span> <span class="token number">2</span><span class="token keyword">ON</span><span class="token keyword">table</span> <span class="token number">1</span><span class="token punctuation">.</span>column_name<span class="token operator">=</span><span class="token keyword">table</span> <span class="token number">2</span><span class="token punctuation">.</span>column_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释：<strong>INNER JOIN与JOIN是相同</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-inner%20join.png" alt></p><p>INNER JOIN产生的结果集中，是1和2的交集。</p><p>用上边的Table A和Table B举个栗子：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">Table</span> A <span class="token keyword">inner</span> <span class="token keyword">join</span> <span class="token keyword">Table</span> B<span class="token keyword">on</span> <span class="token keyword">Table</span> A<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token keyword">Table</span> B<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果如下：</p><table style="float: left; height: 118px; width: 173px" border="0"><tbody><tr><td style="text-align: center">id</td><td style="text-align: center">name</td><td style="text-align: center">address</td></tr><tr><td>1</td><td>Google</td><td>美国</td></tr><tr><td>3</td><td>微博</td><td>中国</td></tr></tbody></table><br><br><br><br><br><br><br><br><h2 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h2><p>LEFT JOIN返回<strong>左表的全部行和右表满足ON条件的行</strong>，如果左表的行在右表中没有匹配，那么这一行右表中对应数据用NULL代替。</p><p>LEFT JOIN 语法</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token number">1</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token keyword">table</span> <span class="token number">2</span><span class="token keyword">ON</span> <span class="token keyword">table</span> <span class="token number">1</span><span class="token punctuation">.</span>column_name<span class="token operator">=</span><span class="token keyword">table</span> <span class="token number">2</span><span class="token punctuation">.</span>column_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注释：在某些数据库中，LEFT JOIN 称为LEFT OUTER JOIN</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-left%20join.png" alt></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">Table</span> A <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token keyword">Table</span> B<span class="token keyword">on</span> <span class="token keyword">Table</span> A<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token keyword">Table</span> B<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行以上SQL输出结果如下：</p><table style="float: left; height: 88px; width: 178px" border="0"><tbody><tr><td style="text-align: center">id</td><td style="text-align: center">name</td><td style="text-align: center">address</td></tr><tr><td>1</td><td>Google</td><td>美国</td></tr><tr><td>2</td><td>淘宝</td><td>null</td></tr><tr><td>3</td><td>微博</td><td>中国</td></tr><tr><td>4</td><td>Facebook</td><td>null</td></tr></tbody></table><br><br><br><br><br><br><br><br><br><br><br><br><h2 id="RIGHT-OUTER-JOIN"><a href="#RIGHT-OUTER-JOIN" class="headerlink" title="RIGHT [OUTER] JOIN"></a>RIGHT [OUTER] JOIN</h2><p>RIGHT OUTERJOIN 是后面的表为基础，与LEFT OUTER JOIN用法类似。这里不介绍了。</p><h2 id="FULL-OUTER-JOIN"><a href="#FULL-OUTER-JOIN" class="headerlink" title="FULL OUTER JOIN"></a>FULL OUTER JOIN</h2><p>FULL JOIN 会从 左表 和 右表 那里返回所有的行。如果其中一个表的数据行在另一个表中没有匹配的行，那么对面的数据用NULL代替。</p><p>FULL OUTER JOIN语法</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token number">1</span><span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> <span class="token keyword">table</span> <span class="token number">2</span><span class="token keyword">ON</span> <span class="token keyword">table</span> <span class="token number">1</span><span class="token punctuation">.</span>column_name<span class="token operator">=</span><span class="token keyword">table</span> <span class="token number">2</span><span class="token punctuation">.</span>column_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-full%20outer%20join.png" alt></p><p>FULL OUTER JOIN产生1和2的并集。但是需要注意的是，对于没有匹配的记录，则会以null做为值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">Table</span> A <span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> <span class="token keyword">Table</span> B<span class="token keyword">on</span> <span class="token keyword">Table</span> A<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token keyword">Table</span> B<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行以上SQL输出结果如下：</p><table style="height: 132px; float: left; width: 165px" border="0"><tbody><tr><td>id</td><td>name</td><td>address</td></tr><tr><td>1</td><td>Google</td><td>美国</td></tr><tr><td>2</td><td>淘宝</td><td>null</td></tr><tr><td>3</td><td>微博</td><td>中国</td></tr><tr><td>4</td><td>Facebook</td><td>null</td></tr><tr><td>5</td><td>null</td><td>中国</td></tr><tr><td>6</td><td>null</td><td>美国</td></tr></tbody></table><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><h2 id="UNION-与-UNION-ALL"><a href="#UNION-与-UNION-ALL" class="headerlink" title="UNION 与 UNION ALL"></a>UNION 与 UNION ALL</h2><p>参考整理：<a href="https://zhuanlan.zhihu.com/p/59656673" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/59656673</a></p><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>请注意，<strong>UNION 内部的 SELECT 语句必须拥有相同数量的列</strong>。列也必须拥有相似的数据类型。同时，<strong>每条 SELECT 语句中的列的顺序必须相同</strong>。UNION 只选取记录，而UNION ALL会列出所有记录。</p><p>举个栗子，左边为TableA，右边为TableB：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-table.jpg" alt></p><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> TableA <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> TableB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果为：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-union.jpg" alt></p><p><strong>UNION选取不同值</strong></p><h3 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> TableA <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> TableB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果为：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-union%20all.jpg" alt></p><p><strong>UNION ALL把所有记录全部列出来</strong></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TableA <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TableB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果为：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-union2.jpg" alt></p><p>由于 id 1 Pirate 与 id 2 Pirate 并不相同，不合并</p><h2 id="笛卡尔积（cross-join）"><a href="#笛卡尔积（cross-join）" class="headerlink" title="笛卡尔积（cross join）"></a>笛卡尔积（cross join）</h2><p>还需要注册的是我们还有一个是“交差集” cross join, 这种Join没有办法用文式图表示，因为其就是把表A和表B的数据进行一个N*M的组合，即笛卡尔积。表达式如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TableA <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> TableB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个笛卡尔乘积会产生 4 x 4 = 16 条记录，一般来说，我们很少用到这个语法。但是我们得小心，<strong>如果不是使用嵌套的select语句，一般系统都会产生笛卡尔乘积然再做过滤</strong>。这是对于性能来说是非常危险的，尤其是表很大的时候。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/join-sql%20join.png" alt></p><h2 id="Hash-Join"><a href="#Hash-Join" class="headerlink" title="Hash Join"></a>Hash Join</h2><p>这是join底层实现，有兴趣的话可以跳转学习：</p><p>MySQL 8.0 新特性之哈希连接：<a href="https://zhuanlan.zhihu.com/p/88900956" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/88900956</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>in和exists的区别</title>
      <link href="2020/12/30/database/sql-exists-in/"/>
      <url>2020/12/30/database/sql-exists-in/</url>
      
        <content type="html"><![CDATA[<h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><p>查询中涉及到的两个表，一个user和一个order表，具体表的内容如下：</p><p>user表：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-table.png" alt></p><p>order表：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-table2.png" alt></p><p>转载： <a href="https://www.cnblogs.com/zhuyeshen/p/10955417.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuyeshen/p/10955417.html</a></p><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><p>确定给定的值是否与子查询或列表中的值相匹配。in在查询的时候，<strong>首先查询子查询的表</strong>，然后<strong>将内表和外表做一个笛卡尔积</strong>，然后<strong>按照条件进行筛选</strong>。所以相对内表比较小的时候，in的速度较快。</p><p>具体sql语句如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token operator">*</span><span class="token keyword">FROM</span>    <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">WHERE</span>    <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">.</span>id <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span class="token punctuation">.</span>user_id        <span class="token keyword">FROM</span>            <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条语句很简单，通过子查询查到的user_id 的数据，去匹配user表中的id然后得到结果。该语句执行结果如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-1.png" alt></p><p>它的执行流程是什么样子的呢？让我们一起来看一下。</p><p>首先，在数据库内部，查询子查询，执行如下代码：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span class="token punctuation">.</span>user_id<span class="token keyword">FROM</span>    <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行完毕后，得到结果如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-2.png" alt></p><p>此时，将查询到的结果和原有的user表<strong>做一个笛卡尔积</strong>，结果如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-3.png" alt></p><p>此时，再根据我们的<code>user.id IN order.user_id</code>的条件，将结果进行筛选（既比较id列和user_id 列的值是否相等，将不相等的删除）。最后，得到两条符合条件的数据。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-1.png" alt></p><h2 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h2><p>将主查询的结果，放到子查需结果中进行条件校验， 如果符合校验，则保留数据。</p><p>具体sql语句如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span>    <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">WHERE</span>    <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span class="token punctuation">.</span>user_id        <span class="token keyword">FROM</span>            <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span>        <span class="token keyword">WHERE</span>            <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span class="token punctuation">.</span>user_id    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条sql语句的执行结果和上面的in的执行结果是一样的。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-1.png" alt></p><p>但是，不一样的是<strong>它们的执行流程完全不一样</strong>：使用exists关键字进行查询的时候，首先，我们先查询的不是子查询的内容，而是<strong>查我们的主查询的表</strong>，也就是说，我们先执行的sql语句是：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span>    <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到的结果如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/exists-4.png" alt></p><p>然后，根据表的每一条记录，执行以下语句，依次去判断where后面的条件是否成立：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXISTS</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span class="token punctuation">.</span>user_id        <span class="token keyword">FROM</span>            <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span>        <span class="token keyword">WHERE</span>            <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span><span class="token punctuation">.</span>user_id    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果成立则返回true，不成立则返回false。如果返回的是true的话，则该行结果保留，如果返回的是false的话，则删除该行，最后将得到的结果返回。</p><h2 id="区别及应用场景"><a href="#区别及应用场景" class="headerlink" title="区别及应用场景"></a>区别及应用场景</h2><p>in 和 exists的区别: 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in, 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。</p><p>其实我们区分in和exists主要是造成了<strong>驱动顺序的改变</strong>（这是性能变化的关键），<strong>如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询</strong>，所以我们会以驱动表的快速返回为目标，那么就会考虑到索引及结果集的关系了 ，另外IN是不对NULL进行处理。</p><p><strong>in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询</strong>。一直以来认为exists比in效率高的说法是不准确的。</p><blockquote><p>Hash join（哈希连接）， 即首先对A表所有记录的id进行hash计算，最终形成一个hash表，然后join时，遍历B表，对B表每条记录的id进行hash运算，然后在A的Hash表中验证是否一致，最后得出结果。</p></blockquote><h2 id="not-in-和not-exists"><a href="#not-in-和not-exists" class="headerlink" title="not in 和not exists"></a>not in 和not exists</h2><p>如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论哪个表大，<strong>用not exists都比not in要快</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IM项目</title>
      <link href="2020/12/29/project/im/"/>
      <url>2020/12/29/project/im/</url>
      
        <content type="html"><![CDATA[<h2 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h2><p> <a href="https://github.com/crossoverJie/cim" target="_blank" rel="noopener">https://github.com/crossoverJie/cim</a></p><h2 id="使用的框架"><a href="#使用的框架" class="headerlink" title="使用的框架"></a>使用的框架</h2><p>轻量级、高性能的WebSocket框架：</p><p><a href="https://github.com/YeautyYE/netty-websocket-spring-boot-starter" target="_blank" rel="noopener">https://github.com/YeautyYE/netty-websocket-spring-boot-starter</a></p><p>在spring-boot中使用Netty来开发WebSocket服务器，并像spring-websocket的注解开发一样简单，很贴心，还有中文markdown。</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ol><li>Netty WebSocket通信协议</li><li>nacos服务发现、服务治理、配置中心</li><li>gateway网关、服务负载均衡、服务路由</li><li>Kafka消息订阅发布、分布式消息队列 + Kafka-manager分布式队列监控</li><li>Redis缓存 + Mysql持久化</li><li>ElasticSearch 搜索引擎、日志存储、非关系型数据存储</li><li>Logstash数据收集、转化、传输、加载 + DataX分布式ETL</li><li>Kibana操作日志、系统日志、链路日志分析、基于ES的数据分析</li></ol><h2 id="通讯流程"><a href="#通讯流程" class="headerlink" title="通讯流程"></a>通讯流程</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/IM-flow.jpg" alt></p><p>1：客户端携带授权token向服务集群发起connect请求，请求会被⽹关转发到具体的某⼀个WebSocket节点中去。</p><p>2：WebSocket服务针对connect进⾏鉴权，并且将该连接会话缓存在服务内。返回连接成功。</p><p>3：客户端定时像服务端发送WebSocket心跳ping请求。服务端返回ping报文。</p><p>4：客户端需要发送消息时，通过WebSocket发送报文。对应的WebSocket服务端接收到报文信息后，直接发布到消息队列的主题中。</p><p>5：所有的WebSocket服务均监听消息队列主题，收到主题消息后，根据busiCode类型、toUserId、groupId等寻找到对应的⽤户id。再通过⽤户id获取到该服务节点中的会话，通过该会话进⾏消息推送。</p><p>6：另外⼀组队列监听程序，负责持久化消息。</p><h2 id="其他支撑接口"><a href="#其他支撑接口" class="headerlink" title="其他支撑接口"></a>其他支撑接口</h2><p>提供Rest服务提供客户端获取历史数据</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> netty </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Bean 的生命周期</title>
      <link href="2020/12/29/java/spring-bean-life-cycle/"/>
      <url>2020/12/29/java/spring-bean-life-cycle/</url>
      
        <content type="html"><![CDATA[<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>我们知道对于普通的java对象来说，它们的生命周期就是</p><ol><li>实例化</li><li>不再使用的时候通过垃圾回收机制进行回收</li></ol><p>参考整理：<a href="https://juejin.cn/post/6844904065457979405" target="_blank" rel="noopener">https://juejin.cn/post/6844904065457979405</a></p><p>但是对于Bean来说却不是这样。Bean的生命周期如下图所示</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/bean-life%20cycle.jpg" alt></p><p>Bean 的生命周期概括起来就是 4 个阶段：</p><ul><li><strong>实例化</strong>（Instantiation）</li><li><strong>属性赋值</strong>（Populate）</li><li><strong>初始化</strong>（Initialization）</li><li><strong>销毁</strong>（Destruction）</li></ul><ol><li>实例化：第 1 ~ 3 步，实例化一个 bean 对象；</li><li>属性赋值：第 4 ~ 5 步，为 bean 设置相关属性和依赖；</li><li>初始化：第 6 ~ 11 步，步骤较多，其中第 9 ~ 10 步为初始化操作，第 6 ~ 8 步为在初始化前执行，第 11 步在初始化后执行，该阶段结束，才能被用户使用；</li><li>销毁：第 13 ~ 14 步，其实在12步前还有一步：<strong>注册Destruction相关回调接口</strong>。这一步不是真正意义上的销毁（还没使用呢），而是先在使用前注册了销毁的相关调用接口，为了后面第13、14步真正销毁 bean 时再执行相应的方法。</li></ol><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="doCreateBean方法"><a href="#doCreateBean方法" class="headerlink" title="doCreateBean方法"></a>doCreateBean方法</h3><p>下面我们结合代码来直观的看下，在 doCreateBean（） 方法中能看到依次执行了这 4 个阶段：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractAutowireCapableBeanFactory.java</span><span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 实例化</span>    BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 属性赋值</span>        <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 初始化</span>        exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 销毁-注册回调接口</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="initializeBean方法"><a href="#initializeBean方法" class="headerlink" title="initializeBean方法"></a>initializeBean方法</h3><p>由于初始化包含了第 6 ~ 11 步，较复杂，所以我们进到 initializeBean（） 方法里具体看下其过程（注释的序号对应图中序号）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractAutowireCapableBeanFactory.java</span><span class="token keyword">protected</span> Object <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> Object bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 6~7. 检查 Aware 相关接口并设置相关依赖</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// SecurityManager用来保障程序安全的。负责找出不安全的和敏感的指令并加以制止，并报告用户。</span>        AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 8. BeanPostProcessor 前置处理</span>    Object wrappedBean <span class="token operator">=</span> bean<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 9. 若实现 InitializingBean 接口，调用 afterPropertiesSet() 方法</span>    <span class="token comment" spellcheck="true">// 10. 若配置自定义的 init-method方法，则执行</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>mbd <span class="token operator">!=</span> null <span class="token operator">?</span> mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>            beanName<span class="token punctuation">,</span> <span class="token string">"Invocation of init method failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 11. BeanPostProceesor 后置处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="destroy方法"><a href="#destroy方法" class="headerlink" title="destroy方法"></a>destroy方法</h3><p>在 invokInitMethods（） 方法中会检查 InitializingBean 接口和 init-method 方法，销毁的过程也与其类似：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DisposableBeanAdapter.java</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 13. 若实现 DisposableBean 接口，则执行 destory()方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>invokeDisposableBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedExceptionAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>DisposableBean<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>DisposableBean<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 14. 若配置自定义的 detory-method 方法，则执行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>destroyMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">invokeCustomDestroyMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>destroyMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>destroyMethodName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Method methodToInvoke <span class="token operator">=</span> <span class="token function">determineDestroyMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodToInvoke <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">invokeCustomDestroyMethod</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getInterfaceMethodIfPossible</span><span class="token punctuation">(</span>methodToInvoke<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从 Spring 的源码我们可以直观的看到其执行过程，而我们记忆其过程便可以从这 4 个阶段出发，实例化、属性赋值、初始化、销毁。其中细节较多的便是初始化，涉及了 Aware、BeanPostProcessor、InitializingBean、init-method 的概念。这些都是 Spring 提供的扩展点，其具体作用将在下一节讲述。</p><h2 id="扩展点的作用"><a href="#扩展点的作用" class="headerlink" title="扩展点的作用"></a>扩展点的作用</h2><h3 id="Aware-接口"><a href="#Aware-接口" class="headerlink" title="Aware 接口"></a>Aware 接口</h3><p>若 Spring 检测到 bean 实现了 Aware 接口，则会为其注入相应的依赖。所以通过让bean 实现 Aware 接口，则能在 bean 中获得相应的 Spring 容器资源。</p><p>Spring 中提供的 Aware 接口有：</p><ol><li>BeanNameAware：注入当前 bean 对应 <strong>beanName</strong>；</li><li>BeanClassLoaderAware：注入加载当前 bean 的 <strong>ClassLoader</strong>；</li><li>BeanFactoryAware：注入 <strong>当前BeanFactory容器</strong> 的引用。</li></ol><p>其代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractAutowireCapableBeanFactory.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Aware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>BeanNameAware<span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>BeanClassLoaderAware<span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span>bcl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>BeanFactoryAware<span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span>AbstractAutowireCapableBeanFactory<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以上是针对 BeanFactory 类型的容器</strong>，而对于 ApplicationContext 类型的容器，也提供了 Aware 接口，只不过这些 Aware 接口的注入实现，是通过 BeanPostProcessor 的方式注入的，但其作用仍是注入依赖。</p><ol><li>EnvironmentAware：注入 Enviroment，一般用于获取配置属性；</li><li>EmbeddedValueResolverAware：注入 EmbeddedValueResolver（Spring EL解析器），一般用于参数解析；</li><li>ApplicationContextAware（ResourceLoader、ApplicationEventPublisherAware、MessageSourceAware）：注入 <strong>ApplicationContext</strong> 容器本身。</li></ol><p>其代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ApplicationContextAwareProcessor.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeAwareInterfaces</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>EnvironmentAware<span class="token punctuation">)</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>EmbeddedValueResolverAware<span class="token punctuation">)</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ResourceLoaderAware<span class="token punctuation">)</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ApplicationEventPublisherAware<span class="token punctuation">)</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">MessageSourceAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>MessageSourceAware<span class="token punctuation">)</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessageSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ApplicationContextAware<span class="token punctuation">)</span>bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>BeanPostProcessor 是 Spring 为修改 bean提供的强大<strong>扩展点</strong>，<strong>其可作用于容器中所有 bean</strong>，其定义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化前置处理</span>    <span class="token keyword">default</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化后置处理</span>    <span class="token keyword">default</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用场景有：</p><ol><li><p><strong>对于标记接口的实现类，进行自定义处理</strong>。例如上一节中所说的ApplicationContextAwareProcessor，为其注入相应依赖；再举个例子，自定义对实现解密接口的类，将对其属性进行解密处理；</p></li><li><p><strong>为当前对象提供代理实现</strong>。例如 Spring AOP 功能，生成对象的代理类，然后返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// AbstractAutoProxyCreator.java</span><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span> TargetSource targetSource <span class="token operator">=</span> <span class="token function">getCustomTargetSource</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetSource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>     Object proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 返回代理类</span>     <span class="token keyword">return</span> proxy<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="InitializingBean-和-init-method"><a href="#InitializingBean-和-init-method" class="headerlink" title="InitializingBean 和 init-method"></a>InitializingBean 和 init-method</h3><p>InitializingBean 和 init-method 是 Spring 为 bean <strong>初始化提供的扩展点</strong>。</p><p>InitializingBean接口 的定义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 afterPropertiesSet（） 方法<strong>写初始化逻辑</strong>。</p><blockquote><p>InitializingBean.afterPropertiesSet方法，初始化bean的时候执行，<strong>可以针对某个具体的bean进行配置</strong>。afterPropertiesSet 必须实现 InitializingBean接口。实现 InitializingBean接口必须实现afterPropertiesSet方法。</p></blockquote><p>指定 init-method 方法，指定初始化方法：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.chaycao.Demo<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DisposableBean 和 destory-method 与上述类似，就不描述了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结下如何记忆 Spring Bean 的生命周期：</p><ol><li>首先是实例化、属性赋值、初始化、销毁这 4 个大阶段；</li><li>再是初始化的具体操作，有 Aware 接口的依赖注入、BeanPostProcessor 在初始化前后的处理以及 InitializingBean 和 init-method 的初始化操作；</li><li>销毁的具体操作，有注册相关销毁回调接口，最后通过DisposableBean 和 destory-method 进行销毁。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一致性Hash原理与实现</title>
      <link href="2020/12/28/java/consistent-hashing/"/>
      <url>2020/12/28/java/consistent-hashing/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis集群的使用"><a href="#Redis集群的使用" class="headerlink" title="Redis集群的使用"></a>Redis集群的使用</h2><p>我们在使用Redis的过程中，为了保证Redis的高可用，我们一般会对Redis做主从复制，组成Master-Master或者Master-Slave的形式，进行数据的读写分离，如下图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-master-slave.png" alt></p><p>当缓存数据量超过一定的数量时，我们就要对Redis集群做分库分表的操作。</p><p>转载：<a href="https://www.jianshu.com/p/528ce5cd7e8f" target="_blank" rel="noopener">https://www.jianshu.com/p/528ce5cd7e8f</a></p><p>来个栗子，我们有一个电商平台，需要使用Redis存储商品的图片资源，存储的格式为键值对，key值为图片名称，Value为该图片所在的文件服务器的路径，我们需要根据文件名，查找到文件所在的文件服务器上的路径，我们的图片数量大概在3000w左右，按照我们的规则进行分库，规则就是随机分配的，我们以每台服务器存500w的数量，部署12台缓存服务器，并且进行主从复制，架构图如下图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-redis.png" alt></p><p>由于我们定义的规则是<strong>随机</strong>的，所以我们的数据有可能存储在任何一组Redis中，比如我们需要查询”product.png”的图片，由于规则的随机性，我们<strong>需要遍历所有Redis服务器，才能查询得到</strong>。这样的结果显然不是我们所需要的。所以我们会想到按某一个字段值进行Hash值、取模。所以我们就看看使用Hash的方式是怎么进行的。</p><h2 id="使用Hash的Redis集群"><a href="#使用Hash的Redis集群" class="headerlink" title="使用Hash的Redis集群"></a>使用Hash的Redis集群</h2><p>如果我们使用Hash的方式，每一张图片在进行分库的时候都可以定位到特定的服务器，示意图如图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-redis2.png" alt></p><p>从上图中，我们需要查询的是图product.png，由于我们有6台主服务器，所以计算的公式为：hash（product.png） % 6 = 5, 我们就可以定位到是5号主从，这们就省去了遍历所有服务器的时间，从而大大提升了性能。</p><h3 id="使用Hash时遇到的问题"><a href="#使用Hash时遇到的问题" class="headerlink" title="使用Hash时遇到的问题"></a>使用Hash时遇到的问题</h3><p>在上述hash取模的过程中，我们虽然不需要对所有Redis服务器进行遍历而提升了性能。但是，使用Hash算法缓存时会出现一些问题，Redis服务器变动时，所有缓存的位置都会发生改变。</p><p>比如，现在我们的Redis缓存服务器增加到了8台，我们计算的公式从hash（product.png） % 6 = 5变成了hash（product.png） % 8 = ? 结果肯定不是原来的5了。</p><p>再者，6台的服务器集群中，当某个主从群出现故障时，无法进行缓存，那我们需要把故障机器移除，所以取模数又会从6变成了5。我们计算的公式也会变化。</p><p>由于上面hash算法是使用取模来进行缓存的，为了规避上述情况，Hash一致性算法就诞生了！！</p><h2 id="一致性Hash算法原理"><a href="#一致性Hash算法原理" class="headerlink" title="一致性Hash算法原理"></a>一致性Hash算法原理</h2><p>一致性Hash算法也是使用取模的方法，不过，上述的取模方法是对服务器的数量进行取模，而一致性的Hash算法是对2的32方取模。即，一致性Hash算法将整个Hash空间组织成一个虚拟的圆环，Hash函数的值空间为0 ~ 2^32 - 1（一个32位无符号整型），整个哈希环如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-theory.png" alt></p><p>整个圆环以顺时针方向组织，圆环正上方的点代表0，0点右侧的第一个点代表1，以此类推。<br>第二步，我们将各个服务器使用Hash进行一个哈希，具体可以选择服务器的IP或主机名作为关键字进行哈希，这样每台服务器就确定在了哈希环的一个位置上，比如我们有三台机器，使用IP地址哈希后在环空间的位置如图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-theory2.png" alt></p><p>现在，我们使用以下算法定位数据访问到相应的服务器：<br>将数据Key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，<strong>从此位置沿环顺时针查找，遇到的服务器就是其应该定位到的服务器</strong>。</p><p>例如，现在有ObjectA，ObjectB，ObjectC三个数据对象，经过哈希计算后，在环空间上的位置如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-theory3.png" alt></p><p>根据一致性算法，Object -&gt; NodeA，ObjectB -&gt; NodeB, ObjectC -&gt; NodeC</p><h2 id="一致性Hash算法的容错性和可扩展性"><a href="#一致性Hash算法的容错性和可扩展性" class="headerlink" title="一致性Hash算法的容错性和可扩展性"></a>一致性Hash算法的容错性和可扩展性</h2><p>现在，假设我们的Node C宕机了，我们从图中可以看到，A、B不会受到影响，只有Object C对象被重新定位到Node A。所以我们发现，在一致性Hash算法中，如果一台服务器不可用，受影响的数据仅仅是此服务器到其环空间前一台服务器之间的数据（这里为Node C到Node B之间的数据），其他不会受到影响。</p><p>另外一种情况，现在我们系统增加了一台服务器Node X，如图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-theory4.png" alt></p><p>此时对象ObjectA、ObjectB没有受到影响，只有Object C重新定位到了新的节点X上。</p><p>如上所述：一致性Hash算法对于节点的增减都<strong>只需重定位环空间中的一小部分数据</strong>，有很好的容错性和可扩展性。</p><h2 id="数据倾斜问题"><a href="#数据倾斜问题" class="headerlink" title="数据倾斜问题"></a>数据倾斜问题</h2><p>在一致性Hash算法服务节点太少的情况下，容易因为节点分布不均匀面造成数据倾斜（被缓存的对象大部分缓存在某一台服务器上）问题，如图特例：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-theory5.png" alt></p><p>这时我们发现有大量数据集中在节点A上，而节点B只有少量数据。为了解决数据倾斜问题，一致性Hash算法引入了<strong>虚拟节点机制</strong>，即对每一个服务器节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。</p><p>具体操作可以为服务器IP或主机名后加入编号来实现，实现如图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-theory6.png" alt></p><p>数据定位算法不变，只需要增加一步：虚拟节点到实际点的映射。</p><p>所以加入虚拟节点之后，即使在服务节点很少的情况下，也能做到数据的均匀分布。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="算法接口类"><a href="#算法接口类" class="headerlink" title="算法接口类"></a>算法接口类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHashService</span> <span class="token punctuation">{</span>    Long <span class="token function">hash</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="算法接口实现类"><a href="#算法接口实现类" class="headerlink" title="算法接口实现类"></a>算法接口实现类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashService</span> <span class="token keyword">implements</span> <span class="token class-name">IHashService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * MurMurHash算法,性能高,碰撞率低     *     * @param key String     * @return Long     */</span>    <span class="token keyword">public</span> Long <span class="token function">hash</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0x1234ABCD</span><span class="token punctuation">;</span>        ByteOrder byteOrder <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>ByteOrder<span class="token punctuation">.</span>LITTLE_ENDIAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> 0xc6a4a7935bd1e995L<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">47</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> h <span class="token operator">=</span> seed <span class="token operator">^</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> k<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">*=</span> m<span class="token punctuation">;</span>            k <span class="token operator">^=</span> k <span class="token operator">>>></span> r<span class="token punctuation">;</span>            k <span class="token operator">*=</span> m<span class="token punctuation">;</span>            h <span class="token operator">^=</span> k<span class="token punctuation">;</span>            h <span class="token operator">*=</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ByteBuffer finish <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>ByteOrder<span class="token punctuation">.</span>LITTLE_ENDIAN<span class="token punctuation">)</span><span class="token punctuation">;</span>            finish<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            h <span class="token operator">^=</span> finish<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            h <span class="token operator">*=</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        h <span class="token operator">^=</span> h <span class="token operator">>>></span> r<span class="token punctuation">;</span>        h <span class="token operator">*=</span> m<span class="token punctuation">;</span>        h <span class="token operator">^=</span> h <span class="token operator">>>></span> r<span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>byteOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模拟机器节点"><a href="#模拟机器节点" class="headerlink" title="模拟机器节点"></a>模拟机器节点</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIp</span><span class="token punctuation">(</span>String ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用IP当做hash的Key     *     * @return String     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一致性Hash操作"><a href="#一致性Hash操作" class="headerlink" title="一致性Hash操作"></a>一致性Hash操作</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsistentHash</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Hash函数接口</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IHashService iHashService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每个机器节点关联的虚拟节点数量</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span>          numberOfReplicas<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 环形虚拟节点</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> SortedMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> T<span class="token operator">></span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConsistentHash</span><span class="token punctuation">(</span>IHashService iHashService<span class="token punctuation">,</span> <span class="token keyword">int</span> numberOfReplicas<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iHashService <span class="token operator">=</span> iHashService<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfReplicas <span class="token operator">=</span> numberOfReplicas<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T node <span class="token operator">:</span> nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 增加真实机器节点     *     * @param node T     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>T node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfReplicas<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            circle<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iHashService<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除真实机器节点     *     * @param node T     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>T node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfReplicas<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            circle<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iHashService<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>circle<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">long</span> hash <span class="token operator">=</span> iHashService<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 沿环的顺时针找到一个虚拟节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>circle<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SortedMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> T<span class="token operator">></span> tailMap <span class="token operator">=</span> circle<span class="token punctuation">.</span><span class="token function">tailMap</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>            hash <span class="token operator">=</span> tailMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> circle<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> tailMap<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> circle<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHashCircle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 机器节点IP前缀</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IP_PREFIX <span class="token operator">=</span> <span class="token string">"192.168.0."</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每台真实机器节点上保存的记录条数</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 真实机器节点, 模拟10台</span>        List<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>String<span class="token operator">>></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>IP_PREFIX <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化记录</span>            Node<span class="token operator">&lt;</span>String<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>IP_PREFIX <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"node"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        IHashService iHashService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每台真实机器引入100个虚拟节点</span>        ConsistentHash<span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>String<span class="token operator">>></span> consistentHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsistentHash</span><span class="token operator">&lt;</span>Node<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span>iHashService<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将5000条记录尽可能均匀的存储到10台机器节点上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 产生随机一个字符串当做一条记录，可以是其它更复杂的业务对象,比如随机字符串相当于对象的业务唯一标识</span>            String data <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过记录找到真实机器节点</span>            Node<span class="token operator">&lt;</span>String<span class="token operator">></span> node <span class="token operator">=</span> consistentHash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再这里可以能过其它工具将记录存储真实机器节点上，比如MemoryCache等</span>            <span class="token comment" spellcheck="true">// ...</span>            <span class="token comment" spellcheck="true">// 每台真实机器节点上保存的记录条数加1</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 打印每台真实机器节点保存的记录条数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>IP_PREFIX <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"节点记录条数："</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>IP_PREFIX <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果如下："><a href="#运行结果如下：" class="headerlink" title="运行结果如下："></a>运行结果如下：</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/consistenthash-test.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> redis </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN（Content Delivery Network）</title>
      <link href="2020/12/28/web/cdn/"/>
      <url>2020/12/28/web/cdn/</url>
      
        <content type="html"><![CDATA[<p>淘宝的图片访问，有98%的流量都走了CDN缓存。只有2%会回源到源站，节省了大量的服务器资源。但是，如果在用户访问高峰期，图片内容大批量发生变化，大量用户的访问就会穿透cdn，对源站造成巨大的压力。</p><h2 id="CDN工作原理和基础架构"><a href="#CDN工作原理和基础架构" class="headerlink" title="CDN工作原理和基础架构"></a>CDN工作原理和基础架构</h2><p>内容分发网络（Content Delivery Network，简称CDN）是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。</p><p>CDN应用广泛，支持多种行业、多种场景内容加速，例如：图片小文件、大文件下载、视音频点播、直播流媒体、全站加速、安全加速。</p><p>最简单的CDN网络由一个DNS服务器和几台缓存服务器组成：</p><ol><li>当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</li><li>CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</li><li>用户向CDN的全局负载均衡设备发起内容URL访问请求。</li><li>CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</li><li>区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</li><li>全局负载均衡设备把服务器的IP地址返回给用户。</li><li>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-example2.jpg" alt></p><p>转载于阿里巴巴淘系技术<br>：<a href="https://www.zhihu.com/question/36514327/answer/1604554133" target="_blank" rel="noopener">https://www.zhihu.com/question/36514327/answer/1604554133</a></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-example.jpg" alt></p><p>借用阿里云官网的例子，来简单介绍CDN的工作原理。</p><p>假设通过CDN加速的域名为<code>www.a.com</code>，接入CDN网络，开始使用加速服务后，当终端用户（北京）发起HTTP请求时，处理流程如下：</p><ol><li>当终端用户（北京）向<code>www.a.com</code>下的指定资源发起请求时，首先向LDNS（本地DNS）发起域名解析请求。</li><li>LDNS检查缓存中是否有<code>www.a.com</code>的IP地址记录。如果有，则直接返回给终端用户；如果没有，则向授权DNS查询。</li><li>当授权DNS解析<code>www.a.com</code>时，返回域名CNAME <code>www.a.tbcdn.com</code>对应IP地址。</li><li>域名解析请求发送至阿里云DNS调度系统，并为请求分配最佳节点IP地址。</li><li>LDNS获取DNS返回的解析IP地址。</li><li>用户获取解析IP地址。</li><li>用户向获取的IP地址发起对该资源的访问请求。</li><li>如果该IP地址对应的节点已缓存该资源，则会将数据直接返回给用户，例如，图中步骤7和8，请求结束。</li><li>如果该IP地址对应的节点未缓存该资源，则节点向源站发起对该资源的请求。获取资源后，结合用户自定义配置的缓存策略，将资源缓存至节点，例如，图中的北京节点，并返回给用户，请求结束。</li></ol><p>从这个例子可以了解到：</p><ol><li>CDN的加速资源是<strong>跟域名绑定的</strong>。</li><li>通过域名访问资源，首先是<strong>通过DNS分查找离用户最近的CDN节点（边缘服务器）的IP</strong></li><li>通过IP访问实际资源时，如果CDN上并没有缓存资源，则会到源站请求资源，并缓存到CDN节点上，这样，用户下一次访问时，该CDN节点就会有对应资源的缓存了。</li></ol><blockquote><p>LDNS是Local DNS的简写，就是本地 DNS 服务器。<br>一般是由ISP提供，例如电信、联通和移动提供分配的本机的DNS，另外还有Google的8.8.8.8，以及114.114.114.114也属于公共的Local DNS</p></blockquote><blockquote><p>用户发起http请求的处理流程中，网站授权DNS的处理流程：</p><p>a）本机向Local DNS请求域名<a href="http://www.a.com的解析" target="_blank" rel="noopener">http://www.a.com的解析</a></p><p>b）Local DNS向根域.进行请求，根域.返回com.域的服务器和ip地址</p><p>c）向com.域请求<a href="http://www.a.com的解析，com.域返回a.com.域的服务器和ip地址" target="_blank" rel="noopener">http://www.a.com的解析，com.域返回a.com.域的服务器和ip地址</a></p><p>d）向a.com.域请求<a href="http://a.com的解析，a.com.域返回http://a.com的ip地址" target="_blank" rel="noopener">http://a.com的解析，a.com.域返回http://a.com的ip地址</a></p><p>e）Local DNS返回<a href="http://www.a.com的解析记录" target="_blank" rel="noopener">http://www.a.com的解析记录</a></p></blockquote><h3 id="CDN关键组件"><a href="#CDN关键组件" class="headerlink" title="CDN关键组件"></a>CDN关键组件</h3><ul><li><p><strong>LVS做四层均衡负载</strong></p><p>  DR模式</p><p>  双LVS做Active-Active互备</p><p>  负载均衡算法采用wrr</p></li><li><p><strong>Tengine做七层负载均衡</strong></p><p>  阿里基于Nginx开发的高性能HTTP服务器</p><p>  主动健康检查</p><p>  SPDY v3支持</p></li><li><p><strong>Swift做HTTP缓存</strong></p><p>  高性能Cache</p><p>  磁盘（SSD/SATA）</p></li></ul><p><strong>CDN基础架构</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-infrastructure.jpg" alt></p><p><strong>CDN部署架构</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-deployment%20architecture.jpg" alt></p><h3 id="为什么要使用CDN"><a href="#为什么要使用CDN" class="headerlink" title="为什么要使用CDN"></a>为什么要使用CDN</h3><p>使用CDN的第一个也是最重要的原因：<strong>为了加速网站的访问</strong><br>除此之外，CDN还有一些作用：</p><ol><li><strong>为了实现跨运营商、跨地域的全网覆盖</strong><br>互联不互通、区域ISP地域局限、出口带宽受限制等种种因素都造成了网站的区域性无法访问。CDN加速可以覆盖全球的线路，通过和运营商合作，部署IDC资源，在全国骨干节点商，合理部署CDN边缘分发存储节点，充分利用带宽资源，平衡源站流量。阿里云在国内有500+节点，海外300+节点，覆盖主流国家和地区不是问题，可以确保CDN服务的稳定和快速。</li><li><strong>为了保障你的网站安全</strong><br>CDN的负载均衡和分布式存储技术，可以加强网站的可靠性，相当无无形中给你的网站添加了一把保护伞，应对绝大部分的互联网攻击事件。防攻击系统也能避免网站遭到恶意攻击。</li><li><strong>为了异地备援</strong><br>当某个服务器发生意外故障时，系统将会调用其他临近的健康服务器节点进行服务，进而提供接近100%的可靠性，这就让你的网站可以做到永不宕机。</li><li><strong>为了节约成本</strong><br>投入使用CDN加速可以实现网站的全国铺设，你根据不用考虑购买服务器与后续的托管运维，服务器之间镜像同步，也不用为了管理维护技术人员而烦恼，节省了人力、精力和财力。</li><li><strong>为了让你更专注业务本身</strong><br>CDN加速厂商一般都会提供一站式服务，业务不仅限于CDN，还有配套的云存储、大数据服务、视频云服务等，而且一般会提供7x24运维监控支持，保证网络随时畅通，你可以放心使用。并且将更多的精力投入到发展自身的核心业务之上。</li></ol><h2 id="淘宝鹿班图片业务背景"><a href="#淘宝鹿班图片业务背景" class="headerlink" title="淘宝鹿班图片业务背景"></a>淘宝鹿班图片业务背景</h2><p>商品的主图贯穿整个导购和交易链路，相比文字，图片更能吸引眼球，主图对消费者的购物决策有很大的影响。主图上表达的内容各式各样，但其中一定少不了的一定是价格的表达。</p><p>长期以来，主图上的价格表达都是商家自己维护，商品价格发生变化后，手动去换图。这样做，会带来3个问题：</p><ol><li>价格的准确性：商家手动填写的图片价格，跟实际的购买价可能不一致，造成不好的用户体验。</li><li>价格更新的及时性：有时候，由于优惠券/品类券的生效失效，会导致商品的价格变化会很频繁，商家根本来不及换图。</li><li>商家的操作成本：手动修改图片的价格，成本还是很高的，需要通过ps等软件修改图片，重新上传，编辑商品。</li></ol><p>今年双11，淘宝鹿班团队，试图通过技术手段来解决这些问题。当商品价格发生变化后，系统自动计算新的价格，自动合成图片，然后更新商品主图。</p><p>我们知道，淘宝网有上亿的商品，光大促商品就有几千万，因此，价格变化导致的图片变化频率非常高。最高的就是在双11的0点，全部大促商品的价格都会由日常价格变成大促价格。</p><p>这就意味着，大促高峰期，有上千万的图片刚生成就会被用户访问。那这个情况会产生什么问题呢，让我们先了解下淘宝的图片空间和CDN的架构，就清楚了。</p><h2 id="淘宝图片空间和CDN的架构"><a href="#淘宝图片空间和CDN的架构" class="headerlink" title="淘宝图片空间和CDN的架构"></a>淘宝图片空间和CDN的架构</h2><p>淘宝整个图片的访问链路有三级缓存（客户端本地、CDN L1、CDN L2），所有图片都持久化的存储到OSS中。真正处理图片的是img-picasso系统，它的功能比较复杂，包括从OSS读取文件，对图片尺寸进行缩放，编解码，所以机器成本比较高。</p><p>CDN的缓存分成2级，合理的分配L1和L2的比例，一方面，可以通过<strong>一致性hash</strong>的手段，在同等资源的情况下，缓存更多内容，提升整体缓存命中率；另一方面，可以平衡计算和IO，充分利用不同配置的机器的能力。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-cache.jpg" alt></p><p>用户访问图片的过程如下：</p><ol><li>用户通过手机淘宝来搜索商品或者查看宝贝详情。</li><li>详情/搜索/推荐通过调用商品中心返回商品的图片URL。</li><li>客户端本地如果有该图片的缓存，则直接渲染图片，否则执行下一步。</li><li>从CDN L1回源图片，如果L1有该图片的缓存，则客户端渲染图片，同时缓存到本地，如果L1没有缓存，则执行下一步。</li><li>从CDN L2回源图片，如果L2有该图片的缓存，则客户端渲染图片，<strong>同时CDN L1及客户端缓存图片内容</strong>，如果CDN L2没有缓存该图片，则执行下一步。</li><li>从图片空间回源图片，图片空间会从OSS拉取图片源文件，按要求进行尺寸缩放，然后执行编解码，返回客户端能够支持的图片内容，之后客户端就可以渲染图片，同时CDN的L1、L2以及客户端<strong>都</strong>会缓存图片内容。</li></ol><h2 id="频繁换图带来的技术挑战"><a href="#频繁换图带来的技术挑战" class="headerlink" title="频繁换图带来的技术挑战"></a>频繁换图带来的技术挑战</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-cachemiss.jpg" alt></p><p>当商品的价格发生变化时，我们会使用新的价格重新合成图片，更新商品中心中存储的图片URL。</p><p>这样会带来2个问题：</p><ol><li>CDN及手机淘宝原本缓存的图片内容失效了，用户访问图片会<strong>全部回源到img-picasso</strong>。</li><li>由于更改了商品的字段，交易的核心应用（购物车和商品中心）的缓存也失效了，用户浏览及购物时，<strong>对商品的访问会走到db</strong>。</li></ol><p>源站img-picasso处理图片，以及查询商品DB，都是非常消耗资源的。CDN及商品的缓存命中率降低后，对源站img-picsasso以及db会产生巨大的压力。</p><p>拿CDN缓存为例，简单计算一下，CDN平时的命中率是98%，假设命中率降低1个点，对源站的压力就会增加1/3（原本承担2%的流量，现在需要承担3%的流量），意味着img-picasso需要扩容1/3。如果全网一半的图片都同时变化，cdn的命中率降到50%，对img-picasso的访问量就会增加25倍，这个扩容成本肯定没法接受。</p><p>解决这2个问题，对应的有2个办法：</p><ol><li>改图保持图片URL不变，可以避免商品链路的缓存失效。</li><li>在访问高峰到来之前，提前预热图片到CDN，可以避免CDN缓存失效对源站的压力。</li></ol><p>下面，介绍下我们具体是怎么做到这2点的。</p><h2 id="频繁换图的应对方案"><a href="#频繁换图的应对方案" class="headerlink" title="频繁换图的应对方案"></a>频繁换图的应对方案</h2><p><strong>改图保持图片URL不变</strong><br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-cachemiss2.jpg" alt></p><p>图片内容发生变化时，执行下面2个操作：</p><ol><li>更新OSS内容：使用新的图片内容替换OSS中老的图片内容</li><li>刷新CDN缓存：清除CDN之前缓存的图片内容</li></ol><p>这样，用户再次访问图片时，发现CDN没有缓存，就会回源到img-picasso，从OSS拉取新的图片内容。</p><p>由于图片URL没有变化，就不必去更新商品中心的图片链接，这样商品链路的缓存可以保持不变。</p><p>在真正实施这个方案的过程中，遇到了几个问题，简单跟大家分享下：</p><h3 id="OSS三地同步"><a href="#OSS三地同步" class="headerlink" title="OSS三地同步"></a>OSS三地同步</h3><p>淘宝的图片空间，承载了淘系所有图片的上下行稳定性保障，为了保障高可用，<strong>一份资源会存储到三地OSS</strong>。图片上传时，默认只上传一地，利用OSS的能力，自动同步到另外两地。</p><p>但是使用URL不变方案，CDN缓存已经清除完成后，如果另外2地的OSS还未同步完成，用户访问后，就会回源到旧的图片内容，发现图片内容没有变化。</p><p>针对该问题，我们<strong>将异步同步OSS软链的模式，改成三地同步建软链，三地都返回成功后，再去清除CDN缓存</strong>，这就保证了用户访问的图片一定是最新的内容。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-cachemiss3.jpg" alt></p><h3 id="图片尺寸收敛"><a href="#图片尺寸收敛" class="headerlink" title="图片尺寸收敛"></a>图片尺寸收敛</h3><p>同一张商品图片会用于不同的场景坑位展现，不同的坑位对图片的尺寸有不同的要求。为此，图片空间提供了一项功能，可以方便的生成不同尺寸的缩率图。只需要访问图片时，给图片增加不同的后缀，img-picasso源站就可以按要求进行图片进行缩放。</p><p>由于历史原因，之前对缩放的尺寸种类没有限制，导致CDN上的图片后缀格式多达2400种+，TOP6格式覆盖率46%，TOP15格式覆盖率64%。这意味着，一张图片，在cdn上最多可能有2400+个不同的url，当图片内容变化后，要把这些缓存全部清掉，才能保证所有用户看到的图片都是新内容。</p><p>为了解决这个问题，我们对域名格式进行了收敛。</p><p>图片空间对于图片质量压缩参数的规则如下：</p><ul><li>图片质量参数常见有一下8种形式：Q90、Q75、Q50、Q30、q90、q75、q50、q30</li><li>图片锐化参数常见有一下3种形式：s100，s150，s200</li></ul><p>我们重新将图片质量定义为高质量图片和低质量图片，收敛格式为 q90 和 p50s150<br>这样，就可以把2000多种格式收敛到6种主要格式，CDN清除缓存才变得可行。</p><h3 id="多副本清除CDN缓存"><a href="#多副本清除CDN缓存" class="headerlink" title="多副本清除CDN缓存"></a>多副本清除CDN缓存</h3><p>通过图片尺寸收敛，每张图片只需要清除6个不同的url就可以了，那能不能进一步提升刷新效率呢？</p><p>为此，阿里云CDN为我们提供了多副本刷新的解决方案：每种不同后缀的图片，作为图片的一个副本，<strong>在CDN的swift层增加一层KV结构，存储url和不同副本的映射关系</strong>，清除缓存时，可以通过该结构找到所有副本，实现快速清除所有副本。这样，每张图片，我们只需要调用一次CDN清除缓存接口就可以了，极大提升了CDN缓存刷新效率。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-cachemiss4.jpg" alt></p><h3 id="图片域名收敛"><a href="#图片域名收敛" class="headerlink" title="图片域名收敛"></a>图片域名收敛</h3><p>淘系的图片域名有300多种，主要有下面2个原因：</p><ol><li>图片完整的链接太长，所以存储时经常只存最后一段，业务自己来拼域名，很多业务就自己申请了一个图片域名来拼。</li><li>PC时代，浏览器对同一域名下的并发请求数是有限制的，不同浏览器不一样，一般6个左右。</li></ol><p>为了突破该限制，一些业务就会申请多个域名，随机的拼不同的域名。</p><p>前面我们讲过，CDN的缓存是跟域名绑定的，不管是缓存命中还是缓存清除，都只能针对一个域名。</p><p>我们显然不可能改一张图，就去对300个域名调用CDN刷新。于是我们考虑对图片域名进行收敛，使得用户对图片的访问都路由到同一个域名，我们希望将所有的图片访问统一收敛到<code>http://picasso.alicdn.com</code>，具体实现方式如下：</p><ol><li>对于手淘和猫客客户端，图片访问都收口在图片库，我们推进图片库进行改造，符合一定规则的url，统一收敛到<code>http://picasso.alicdn.com</code>，实现了域名的一刀切。</li><li>对于PC浏览器端，就比较麻烦了，没有统一收口的地方。我们只能退而求其次，针对访问最多的6大域名，在cdn上配置域名转发规则，重定向到picasso域名。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-cachemiss5.jpg" alt></p><p>通过这种方式，我们实现了全网99%以上的图片访问流量都路由到picasso域名，图片内容发生变化时，通过清除picasso域名的cdn缓存，就能保证基本所有的场景都能看到新的图片内容。</p><h2 id="客户端及浏览器缓存"><a href="#客户端及浏览器缓存" class="headerlink" title="客户端及浏览器缓存"></a>客户端及浏览器缓存</h2><p>通过多副本和图片域名收敛，cdn的缓存问题得到了解决。但在cdn之上，用户图片访问首先是来自客户端或者浏览器，这里也会有一层缓存。</p><p>大家知道，浏览器的缓存都遵循标准的http max-age协议，指定该header后，到了时间图片就会失效，访问到新的图片。所以我们可以在源站img-picasso回源给cdn时，添加max-age协议头，值为1分钟，cdn会原封不动的透给浏览器，这样浏览器就可以实现1分钟内图片缓存失效，重新到cdn拉新的图片资源。</p><p>对于手机淘宝客户端，我们在原有的LRU缓存机制之上，另外支持标准的http协议。这样，手机淘宝也实现了1分钟内图片缓存失效。</p><h3 id="提前预热CDN图片"><a href="#提前预热CDN图片" class="headerlink" title="提前预热CDN图片"></a>提前预热CDN图片</h3><p>通过改图保持图片URL不变，我们解决了改图对商品链路缓存的影响。但是，图片变化时，虽然URL没有变，但我们清除了CDN缓存，导致用户访问时还是会回源到img-picasso源站，所以对图片源站的压力依然存在。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/cdn-cachemiss6.jpg" alt></p><p>我们发现，商品的价格变化大部分发生在大促节奏变化的时刻，基于这个特点，我们通过提前合成图片，提前预热到CDN，可以实现图片切换瞬间生效，同时对源站没有压力。</p><p>具体方案如下：</p><ol><li>提前合成多波段图片：我们知道大促期间商家集中换图的时间点后，按这些时间点把图片的展示分成多个波段，每个波段图片提前合成，并提前将图片URL写入到商品中心扩展结构中。</li><li>图片访问路由：营销系统根据配置的大促氛围切换计划，告诉鹿班图片二方包，当前是哪个波段，鹿班根据当前波段及场景，返回正确的图片URL给各个场景。</li><li>图片渲染：各个场景拿到图片URL后，结合自身的业务逻辑，决定是否要展现该图片。</li><li>CDN图片预热：为了避免图片集中切换时，把源站击垮，我们会在集中切换前把这些冷图片内容预热到CDN。</li><li>波段内图片变化：提前合成各个波段图片后，商家可能会临时发券/改价，导致商品价格再次变化，对于这类换图需求，为了避免更新商品中心的图片URL，我们通过本文上一章节刷CDN缓存的方式实现。</li></ol><h2 id="总结和展望"><a href="#总结和展望" class="headerlink" title="总结和展望"></a>总结和展望</h2><p>CDN技术广泛应用于互联网的各个场景，如今的CDN服务商，都提供了非常简单的业务接入方式，而且CDN的费用每年都在降低，这一切使得CDN的接入和使用成本越来越低。</p><p>本文通过淘宝图片业务的例子，为大家阐述了使用CDN过程中可能遇到的问题和解决思路。</p><p>淘宝的图片业务除了访问量大，还会面临更新频繁的问题。图片的频繁更新，一方面会由于商品上的图片url变化，导致商品缓存失效，另一方面会大幅降低CDN的图片访问缓存命中率。</p><p>针对图片url变化导致商品缓存失效的问题，我们通过刷新cdn缓存，用户访问时重新回源的方式，实现了改图保持图片url不变，这个过程中了，我们解决了一些列的问题，包括：OSS三地同步更新、图片尺寸收敛、图片域名收敛、客户端及浏览器本地缓存。</p><p>针对改图降低CDN图片缓存命中率的问题，我们根据业务的特点，提前合成不同波段的图片，并预热到CDN，保障了源站的安全。</p><p>目前，淘宝上用户看到的图片，都是提前合成好的。未来，我们考虑在用户访问图片时，实时合成图片。通过这项技术，可以实时感知业务更多的实时信息，可以根据这些信息，在图片上合成当前用户或者环境更匹配的文案/元素等内容，给用户带来更多的惊喜。</p><p>当然，实时合图也会面临更多的挑战，如：计算能力、合图性能。此外，对于CDN而言，由于每次用户访问的内容是临时合成的，CDN的缓存策略也是一个很大的挑战。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
            <tag> 网络构建方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet的本质是什么，它是如何工作的</title>
      <link href="2020/12/28/web/servlet/"/>
      <url>2020/12/28/web/servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet-是什么"><a href="#Servlet-是什么" class="headerlink" title="Servlet 是什么"></a>Servlet 是什么</h2><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的<strong>中间层</strong>。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>参考整理：<a href="https://www.zhihu.com/question/21416727" target="_blank" rel="noopener">https://www.zhihu.com/question/21416727</a></p><h2 id="servlet就是一个Java接口"><a href="#servlet就是一个Java接口" class="headerlink" title="servlet就是一个Java接口"></a>servlet就是一个Java接口</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/servlet-idea.jpg" alt></p><p><strong>所以说网络协议、http什么的，servlet根本不管！也管不着！</strong></p><p>那servlet是干嘛的？很简单，接口的作用是什么？规范呗！</p><p>servlet接口定义的是一套处理网络请求的规范，所有实现servlet的类，都需要实现它那五个方法，其中最主要的是两个生命周期方法 <strong>init（）</strong>和<strong>destroy（）</strong>，还有一个处理请求的<strong>service（）</strong>，也就是说，所有实现servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：</p><ol><li>你初始化时要做什么</li><li>你销毁时要做什么</li><li>你接受到请求时要做什么</li></ol><p>这是Java给的一种<strong>规范</strong>！就像阿西莫夫的机器人三大定律、行尸走肉里Rick的那三个问题一样，规范！</p><p>servlet是一个规范，那实现了servlet的类，就能处理请求了吗？</p><p>答案是，不能。</p><p>你可以随便谷歌一个servlet的hello world教程，里面都会让你写一个servlet，相信我，你从来不会在servlet中写什么监听8080端口的代码，<strong>servlet不会直接和客户端打交道</strong>！</p><p>那请求怎么来到servlet呢？答案是servlet容器，比如我们最常用的tomcat，同样，你可以随便谷歌一个servlet的hello world教程，里面肯定会让你把servlet部署到一个容器中，不然你的servlet压根不会起作用。</p><p><strong>tomcat才是与客户端直接打交道的家伙</strong>，他监听了端口，请求过来后，根据url等信息，确定要将请求交给哪个servlet去处理，然后调用那个servlet的service方法，service方法返回一个response对象，tomcat再把这个response返回给客户端。</p><h2 id="socket-和-servlet"><a href="#socket-和-servlet" class="headerlink" title="socket 和 servlet"></a>socket 和 servlet</h2><p>socket是一个<strong>tcp连接协议的java实现</strong>，有了这个就能建立tcp连接收发任何基于tcp层消息。而servlet是在http容器（比如tomcat）在建立tcp连接并接收到并解析完http消息后，<strong>将http消息的内容封装成servlet request</strong>交给你实现的servlet处理的，也就是说你想处理一个tomcat接收来的http消息，你按它要求实现了一个servlet，并加上映射，tomcat就能把它接到的http消息内容送到你的处理器（你实现的servlet）去处理你的逻辑，期间的网络连接内容解析什么的它都帮你搞了。</p><h2 id="SpringBoot中的Bean初始化方法"><a href="#SpringBoot中的Bean初始化方法" class="headerlink" title="SpringBoot中的Bean初始化方法"></a>SpringBoot中的Bean初始化方法</h2><p><strong>@PostConstruct详解</strong></p><blockquote><p>从Java EE 5规范开始，Servlet中增加了两个影响Servlet生命周期的注解：@PostConstruct和@PreDestroy。这<strong>两个注解只会被服务器调用一次</strong>。这两个注解被用来修饰一个非静态的void（）方法 。写法两种方式，说一下下面这种常用方式。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span>Public <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是初始化的顺序问题：</p><p>执行顺序： <strong>父类静态变量或静态语句块–&gt;子类静态变量或静态语句块-&gt;父类实例变量或初始化语句块–&gt;父类构造方法-&gt;子类实例变量或初始化语句块-&gt;子类构造方法–&gt; @Autowired -&gt; @PostConstruct….-&gt; destroy -&gt; @PreDestroy</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/servlet-postconstruct.png" alt></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="1-spring项目加载数据字典"><a href="#1-spring项目加载数据字典" class="headerlink" title="1.spring项目加载数据字典"></a>1.spring项目加载数据字典</h4><p>@PostConstruct注解的方法在项目启动的时候执行这个方法，也可以理解为在spring容器启动的时候执行，可作为一些<strong>数据的常规化加载</strong>，比如<strong>数据字典</strong>之类的。</p><h4 id="2-spring项目的定时任务"><a href="#2-spring项目的定时任务" class="headerlink" title="2.spring项目的定时任务"></a>2.spring项目的定时任务</h4><p>spring自带的<strong>@schedule</strong>，没有开关，项目启动总会启动一个线程；做项目的时候就使用Java的timer，这个<strong>设置开关即可自由的控制</strong>，关闭的时候，<strong>不会启动线程</strong>；</p><p>Java的timer也需要找到一个启动类，可以放到main函数里面启动，这样的话，代码的耦合性太高了，而使用PostConstruct是很干净的。</p><p>如以下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Scheduler scheduler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>ScheduleJobEntity<span class="token operator">></span> scheduleJobList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ScheduleJobEntity scheduleJob <span class="token operator">:</span> scheduleJobList<span class="token punctuation">)</span><span class="token punctuation">{</span>            CronTrigger cronTrigger <span class="token operator">=</span> ScheduleUtils<span class="token punctuation">.</span><span class="token function">getCronTrigger</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">,</span> scheduleJob<span class="token punctuation">.</span><span class="token function">getJobId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cronTrigger <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ScheduleUtils<span class="token punctuation">.</span><span class="token function">createScheduleJob</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">,</span> scheduleJob<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                ScheduleUtils<span class="token punctuation">.</span><span class="token function">updateScheduleJob</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">,</span> scheduleJob<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引失效的十大杂症</title>
      <link href="2020/12/26/database/index-missing/"/>
      <url>2020/12/26/database/index-missing/</url>
      
        <content type="html"><![CDATA[<h2 id="一、查询条件包含or，索引失效"><a href="#一、查询条件包含or，索引失效" class="headerlink" title="一、查询条件包含or，索引失效"></a>一、查询条件包含or，索引失效</h2><p>新建一个user表，它有一个普通索引userId，结构如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_userId<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>userId<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转载参考：<a href="https://juejin.cn/post/6844904015872917517" target="_blank" rel="noopener">https://juejin.cn/post/6844904015872917517</a></p><ol><li><p>执行一条查询sql，它是会走索引的，如下图所示：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-or.jpg" alt></p></li><li><p>把or条件+没有索引的age加上，并不会走索引，如图：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-or2.jpg" alt></p></li></ol><blockquote><p>explain结果字段介绍说明：</p><p> id : 优先级，id值越大越优先；id值相同，从上往下 顺序执行<br> select_type ：查询类型<br> table ：表<br> type   ：索引类型<br> possible_keys ：预测用到的索引<br> key  ：实际使用的索引<br> key_len ：实际使用索引的长度<br> ref  :表之间的引用，指明当前表所 参照的 字段<br> rows ：通过索引查询到的数据量<br> Extra ： 额外的信息</p></blockquote><h3 id="分析-amp-结论"><a href="#分析-amp-结论" class="headerlink" title="分析&amp;结论"></a>分析&amp;结论</h3><ol><li>对于or+没有索引的age这种情况，假设它走了userId的索引，但是走到age查询条件时，它还得<strong>全表扫描</strong>，也就是需要三步过程： 全表扫描+索引扫描+合并</li><li>如果它一开始就走全表扫描，直接一遍扫描就完事。</li><li>mysql是有优化器的，处于效率与成本，遇到or条件，索引可能失效，看起来也合情合理。</li><li>用or导致or左侧的userid索引失效</li></ol><p>注意: 如果or条件的列都加了索引，索引可能会走的。</p><h2 id="二、如果字段类型是字符串，where时一定用引号括起来"><a href="#二、如果字段类型是字符串，where时一定用引号括起来" class="headerlink" title="二、如果字段类型是字符串，where时一定用引号括起来"></a>二、如果字段类型是字符串，where时一定用引号括起来</h2><p>假设demo表结构如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_userId<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>userId<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>userId为字符串类型，是B+树的普通索引，<strong>如果查询条件传了一个数字过去，它是不走索引的</strong>，如图所示：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-str-digit.jpg" alt></p><p>如果给数字加上’ ‘,也就是传一个字符串呢，当然是走索引，如下图：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-str-digit2.jpg" alt></p><h3 id="分析与结论"><a href="#分析与结论" class="headerlink" title="分析与结论"></a>分析与结论</h3><p>为什么第一条语句未加单引号就不走索引了呢？ 这是<strong>因为不加单引号时，是字符串跟数字的比较</strong>，它们类型不匹配，<strong>MySQL会做隐式的类型转换，把它们转换为浮点数再做比较</strong>。</p><h2 id="三、like通配符可能导致索引失效"><a href="#三、like通配符可能导致索引失效" class="headerlink" title="三、like通配符可能导致索引失效"></a>三、like通配符可能导致索引失效</h2><p>并不是用了like通配符，索引一定失效，而是<strong>like查询是以%开头</strong>，才会导致索引失效。</p><p>表结构：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_userId<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>userId<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>like查询以%开头，索引失效，如图：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-like.jpg" alt></p><p>把%放后面，发现索引还是正常走的，如下：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-like2.jpg" alt></p><p>把%加回来，改为只查索引的字段（<strong>覆盖索引</strong>），发现还是走索引，惊不惊喜，意不意外<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-like3.jpg" alt></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>like查询以%开头，会导致索引失效。可以有两种方式优化：</p><ol><li>使用<strong>覆盖索引</strong>，覆盖索引包含所有满足查询需要的数据的索引</li><li>把 % 放后面</li></ol><h2 id="四、联合索引不要跨列或无序使用"><a href="#四、联合索引不要跨列或无序使用" class="headerlink" title="四、联合索引不要跨列或无序使用"></a>四、联合索引不要跨列或无序使用</h2><p>表结构：（有一个联合索引idx_userid_age，userId在前，age在后）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_userid_age<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>userId<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在联合索引中，查询条件满足<strong>最左匹配原则</strong>时，索引是正常生效的。请看demo：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-composite%20index.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-compositeindex2.jpg" alt></p><p>如果条件列不是联合索引中的第一个列，索引失效，如下：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-composite%20index3.jpg" alt></p><h3 id="分析与结论-1"><a href="#分析与结论-1" class="headerlink" title="分析与结论"></a>分析与结论</h3><ol><li>当我们创建一个联合索引的时候，如<code>(k1,k2,k3)</code>，相当于创建了（k1）、（k1,k2）和（k1,k2,k3）三个索引，这就是最左匹配原则。</li><li>联合索引不满足最左前缀原则，索引一般会失效，但是这个还跟Mysql优化器有关的。</li><li>复合索引，尽量使用<strong>全索引匹配</strong></li></ol><h2 id="五、在索引列上使用mysql的内置函数，索引失效"><a href="#五、在索引列上使用mysql的内置函数，索引失效" class="headerlink" title="五、在索引列上使用mysql的内置函数，索引失效"></a>五、在索引列上使用mysql的内置函数，索引失效</h2><p>表结构：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>loginTime<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_userId<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>userId<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_login_time<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>loginTime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然loginTime加了索引，但是因为使用了mysql的内置函数Date_ADD（），索引直接GG，如图：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-mysqlfunction.jpg" alt></p><h2 id="六、对索引列运算（如，-、-、-、-），索引失效"><a href="#六、对索引列运算（如，-、-、-、-），索引失效" class="headerlink" title="六、对索引列运算（如，+、-、*、/ ），索引失效"></a>六、对索引列运算（如，+、-、*、/ ），索引失效</h2><p>表结构：</p><pre class="line-numbers language-java"><code class="language-java">CREATE TABLE `user` <span class="token punctuation">(</span>  `id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT<span class="token punctuation">,</span>  `userId` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">,</span>  `age` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> DEFAULT NULL<span class="token punctuation">,</span>  PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>  KEY `idx_age` <span class="token punctuation">(</span>`age`<span class="token punctuation">)</span> USING BTREE<span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>InnoDB AUTO_INCREMENT<span class="token operator">=</span><span class="token number">2</span> DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然age加了索引，但是<strong>因为它进行运算，索引直接迷路了</strong>。。。 如图：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-compute.jpg" alt></p><h2 id="七、索引字段上使用（！-或者-lt-gt-，not-in）时，可能会导致索引失效"><a href="#七、索引字段上使用（！-或者-lt-gt-，not-in）时，可能会导致索引失效" class="headerlink" title="七、索引字段上使用（！= 或者 &lt; &gt;，not in）时，可能会导致索引失效"></a>七、索引字段上使用（！= 或者 &lt; &gt;，not in）时，可能会导致索引失效</h2><p>表结构：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_age<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然age加了索引，但是使用了！= 或者 &lt; &gt;，not in这些时，索引如同虚设。如下：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-compute2.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-compute3.jpg" alt></p><blockquote><p>！= 和 &lt; &gt;两者都是不等于的意思，查阅网上资料说是！=是以前sql标准，&lt;&gt;是现在使用的sql标准，推荐使用&lt;&gt;。</p><p>复合索引不能使用不等于（!=  &lt;&gt;）或is null （is not null），否则自身以及右侧所有全部失效。复合索引中如果有&gt;，则自身和右侧索引全部失效。</p></blockquote><h2 id="八、索引字段上使用is-null，-is-not-null，可能导致索引失效"><a href="#八、索引字段上使用is-null，-is-not-null，可能导致索引失效" class="headerlink" title="八、索引字段上使用is null， is not null，可能导致索引失效"></a>八、索引字段上使用is null， is not null，可能导致索引失效</h2><p>表结构:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>card<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_card<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>card<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单个name字段加上索引，并查询name为非空的语句，其实会走索引的，如下:<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-isnotnull.jpg" alt></p><p>单个card字段加上索引，并查询name为非空的语句，其实会走索引的，如下:<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-isnotnull2.jpg" alt></p><p>但是<strong>它两用or连接起来，索引就失效了</strong>，如下：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-isnotnull3.jpg" alt></p><h2 id="九、左连接查询或者右连接查询查询关联的字段编码格式不一样"><a href="#九、左连接查询或者右连接查询查询关联的字段编码格式不一样" class="headerlink" title="九、左连接查询或者右连接查询查询关联的字段编码格式不一样"></a>九、左连接查询或者右连接查询查询关联的字段编码格式不一样</h2><p>可能导致索引失效。</p><p>新建两个表，一个user，一个user_job：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_job<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>userId<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>job<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>user 表的name字段编码是utf8mb4，而user_job表的name字段编码为utf8。<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-leftrightformat.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-leftrightformat2.jpg" alt></p><p>执行左外连接查询,user_job表还是走全表扫描，如下：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-leftrightformat3.jpg" alt></p><p>如果把它们改为name字段编码一致，还是会走索引。<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-leftrightformat4.jpg" alt></p><h2 id="十、mysql估计使用全表扫描要比使用索引快-则不使用索引"><a href="#十、mysql估计使用全表扫描要比使用索引快-则不使用索引" class="headerlink" title="十、mysql估计使用全表扫描要比使用索引快,则不使用索引"></a>十、mysql估计使用全表扫描要比使用索引快,则不使用索引</h2><ol><li><p>当表的索引被查询，会使用最好的索引，除非优化器使用全表扫描更有效。优化器优化成全表扫描取决与使用最好索引查出来的数据是否超过表的30%的数据。</p></li><li><p>不要给’性别’等增加索引。如果某个数据列里包含了均是”0/1”或“Y/N”等值，即包含着许多重复的值，就算为它建立了索引，索引效果不会太好，还可能导致全表扫描。</p></li></ol><p>Mysql出于效率与成本考虑，估算全表扫描与使用索引，哪个执行快。这跟它的优化器有关，来看一下它的逻辑架构图吧（图片来源网上）<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/indexmissing-optimizer.jpg" alt></p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>模拟的表结构与肇事sql如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_session<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>device_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>device_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">explain</span> <span class="token keyword">update</span> user_session <span class="token keyword">set</span> <span class="token keyword">status</span> <span class="token operator">=</span><span class="token number">1</span><span class="token keyword">where</span>  <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">and</span> <span class="token punctuation">`</span>device_id<span class="token punctuation">`</span><span class="token operator">!=</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token operator">!=</span> <span class="token string">'1'</span> <span class="token operator">and</span> <span class="token punctuation">`</span>device_id<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>执行的sql，使用了or条件，因为组合主键(user_id,device_id)，看起来像是每一列都加了索引，索引会生效。</li><li>但是出现!=,可能导致索引失效。也就是or+!=两大综合症，导致了慢更新sql。</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>那么，怎么解决呢？我们是把or条件拆掉，分成两条执行。同时给device_id加一个普通索引。</p><p>最后，总结了索引失效的十大杂症，希望大家在工作学习中，参考这十大杂症，<strong>多点结合执行计划expain和场景</strong>，具体分析 ，而不是按部就班，墨守成规，认定哪个情景一定索引失效。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> index </tag>
            
            <tag> mysql </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Isolation：隔离级别和脏读、脏写、不可重复读、更新丢失和幻读</title>
      <link href="2020/12/25/database/isolation/"/>
      <url>2020/12/25/database/isolation/</url>
      
        <content type="html"><![CDATA[<h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><p>隔离性是指，多个用户的并发事务访问同一个数据库时，一个用户的事务不应该被其他用户的事务干扰，多个并发事务之间要相互隔离。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ol><li><p>读未提交（Read uncommitted）：这种事务隔离级别下，select语句不加锁。此时，可能读取到不一致的数据，即“读脏 ”。这是并发最高，一致性最差的隔离级别。</p></li><li><p>读已提交（Read committed）：从数据库读取时，只能看到已提交的数据（不脏读）。写入数据库时，只会覆盖已经提交的写入数据（不脏写）。可能会造成不可重复读。 大多数数据库的默认级别就是Read committed,比如Sql Server ,Oracle。</p></li><li><p>可重复读（Repeatable read）：事务始终可以看到事务开始时数据库中的所有数据。即使这些数据随后被其他事务更改，这个事务也只能看到该特定时间点的旧数据。<strong>MySql默认隔离级别</strong>。可避免 脏读 、不可重复读 的发生。可能造成幻读。</p></li><li><p>串行化（Serializable ）：就是以<strong>锁表</strong>的方式（类似于Java多线程中的锁）使得其他的线程只能在锁外等待。可避免 脏读、不可重复读、幻读 的发生，但性能最低。</p></li></ol><h2 id="脏读、脏写"><a href="#脏读、脏写" class="headerlink" title="脏读、脏写"></a>脏读、脏写</h2><p>设想一个事务已经将一些数据写入数据库，但还没有提交。另一个事务可以看到未提交的数据吗？如果是的话，这就叫做<strong>脏读</strong>（Dirty Reads）。</p><p>如果两个事务尝试更新数据库中的相同数据，会发生什么情况？通常后面的写入会覆盖前面的写入。但是，如果先前的写入尚未提交，后面的写入又覆盖了这个尚未提交的值，会怎么样呢？这就叫做<strong>脏写</strong>。</p><p><strong>为了防止脏读，每次写入前，数据库都会记住旧值</strong>。 当前事务尚未提交时，其他事务的读取都会拿到旧值。当前事务提交后，其他事务才能读取到新值。</p><p>为了防止脏写，数据库一般用<strong>行锁</strong>。当事务想要修改特定的行时，必须先获得该行的锁。一次只有一个事务可持有任何给定行的锁。如果另一个事务要写入同一行，就必须等到第一个事务提交或回滚后。</p><blockquote><p>使用for update进行上锁，比如：select * from table_name where id =1 for update ;</p></blockquote><h2 id="不可重复读（读偏差）"><a href="#不可重复读（读偏差）" class="headerlink" title="不可重复读（读偏差）"></a>不可重复读（读偏差）</h2><p>小明有两个账户，账户A和账户B，每个存有500元，一共1000元。现在发起一笔转账，从账户A转100元到账户B。</p><p>发起转账交易后，小明马上查询两个账户的余额。不幸的是，对账户B的查询发生在转账事务提交前（显示500元），对账户A的查询发生在转账事务提交后（显示400元）—— 似乎有100元不翼而飞！</p><p>这种异常叫做读偏差（也叫不可重复读，Non-Repeatable Reads）。尽管听上去有些吹毛求疵，因为这看起来不会长期持续。如果用户几秒钟后再次刷新页面，就会看到正确的帐户余额。但是有些情况下，仍不能容忍这种暂时的不一致，比如：</p><ol><li><p>需要运行一个查询，扫描数据库中的所有账户。这个查询将会持续一段时间，在这个时间段又有多个转账事务被提交，那么我们始终无法读取到正确的数据。</p></li><li><p>备份操作需要复制整个数据库，这可能需要花费数小时才能完成。备份进行时，数据库依然接受写入操作。最终备份数据库中会包含一些旧的值和一些新的值。如果将来从这样的备份中恢复数据，那么不一致（比如消失的钱）就会变成永久的。</p></li></ol><p>很明显，造成不可容忍的读偏差的原因是——只读操作持续的时间太长了，而这段时间又提交了新的写入。</p><p>简单来说<strong>不可重复读就是读的前后两次结果不一致</strong>。</p><h2 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h2><p>两个用户同时编辑wiki页面，每个用户通过读取整个页面、编辑内容、然后发送整个页面到服务器的方式来保存其更改，覆写数据库中当前的任何内容。</p><p>到目前为止的<strong>读已提交</strong>和<strong>可重复读</strong>级别，<strong>可以保证只读事务在并发写入时可以看到什么，却忽略了两个事务并发写入的问题</strong>。如果两个写入事务同时执行，则其中一个的修改可能会丢失，因为第二个写入的内容并没有包括第一个事务的修改——这就是<strong>丢失更新</strong>（Lost Update）。</p><p>这是一个普遍的问题，目前的各种解决方案如下：</p><h3 id="原子写"><a href="#原子写" class="headerlink" title="原子写"></a>原子写</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> counter <span class="token keyword">SET</span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token keyword">value</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'whatever'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="for-update显式锁定"><a href="#for-update显式锁定" class="headerlink" title="for update显式锁定"></a>for update显式锁定</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">BEGIN</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># for update就是为这行数据加了锁，提交或回滚后释放</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'Eddie'</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 拿到数据后，应用程序做校验，然后...</span><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> money <span class="token operator">=</span> <span class="token string">'99999999'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'Eddie'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较并设置（CAS-Compare-And-Set）"><a href="#比较并设置（CAS-Compare-And-Set）" class="headerlink" title="比较并设置（CAS, Compare And Set）"></a>比较并设置（CAS, Compare And Set）</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> wiki_pages <span class="token keyword">SET</span> content <span class="token operator">=</span> <span class="token string">'新内容'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'007'</span> <span class="token operator">AND</span> content <span class="token operator">=</span> <span class="token string">'旧内容'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>根据数据库的实现，这可能也不安全</p><p>如果数据库允许WHERE子句从旧快照中读取，则此语句也无法保证防止丢失更新</p></blockquote><p>在应用层，还有一些其他的解决办法，比如为并发写入创建多个冲突的版本，并使用应用代码或特殊数据结构解决或合并这些版本。或者直接以最后写入为准（这并没有解决丢失更新，而是允许丢失更新）。</p><h2 id="幻读（写偏差）"><a href="#幻读（写偏差）" class="headerlink" title="幻读（写偏差）"></a>幻读（写偏差）</h2><p>幻读（Phantom Reads）就是读的时候发生了插入或删除，事务A根据相同条件第二次查询到事务B提交的新增数据，两次数据结果集不一致，好像出现了幻觉一样。幻读发生在范围查询中。</p><p>read commited级别下的事务在每次查询的开始都会生成一个独立的ReadView，所以才不可重复读，repeatable read级别在第一次读的时候生成一个ReadView，之后的读都复用之前的ReadView，所以可重复读，但ReadView只是针对查询操作，如果发生了插入或删除操作是会影响到查询操作，所以才出现了幻读。</p><p>参考整理：<a href="https://zhuanlan.zhihu.com/p/69380112" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/69380112</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一致性</title>
      <link href="2020/12/25/database/consistency/"/>
      <url>2020/12/25/database/consistency/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>强一致性、弱一致性、最终一致性、读写一致性、单调读、因果一致性 的区别与联系。提到分布式架构就一定绕不开“一致性”问题，而“一致性”其实又包含了数据一致性和事务一致性两种情况。</p><h2 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h2><p>复制是导致出现数据一致性问题的唯一原因。</p><p>如果只用一台数据库来处理所有的写入和读取请求，就一定不存在数据一致性的问题。 但在中大型项目中，我们却经常需要将一份数据存储在超过一台数据库中（即复制），原因有三：</p><ol><li><p>即使一部分数据库出现故障，系统也能正常工作（高可用）</p></li><li><p>使数据与用户在地理上接近（降低延迟）</p></li><li><p>扩展可以处理读请求的机器数量（可扩展性、提高读取吞吐量）</p></li></ol><p>本文假设数据集非常小，每台机器的空间都足够保存整个数据集，否则将会引入一个新的话题“分区”。本文假设使用单领导者的主从复制算法，即只有一台数据库可以处理写请求（称为领导者或主库），所有数据库都可以处理读请求（除主库外其他都是追随者或从库）。</p><p>参考整理：<a href="https://zhuanlan.zhihu.com/p/67949045" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/67949045</a></p><h2 id="强一致性-与-弱一致性"><a href="#强一致性-与-弱一致性" class="headerlink" title="强一致性 与 弱一致性"></a>强一致性 与 弱一致性</h2><p>其实只有两类数据一致性，强一致性与弱一致性。强一致性也叫做线性一致性，除此以外，<strong>所有其他的一致性都是弱一致性的特殊情况</strong>。所谓强一致性，即复制是<strong>同步</strong>的，弱一致性，即复制是<strong>异步</strong>的。</p><p>强一致性可以保证从库有与主库一致的数据。如果主库突然宕机，我们仍可以保证数据完整。但如果从库宕机或网络阻塞，主库就无法完成写入操作。</p><p>在实践中，我们通常<strong>使一个从库是同步的，而其他的则是异步的</strong>。如果这个同步的从库出现问题，则使另一个异步从库同步。这可以确保永远有两个节点拥有完整数据：主库和同步从库。 这种配置称为<strong>半同步</strong>。</p><h2 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h2><p>开篇提到，容忍节点故障只是需要复制的一个原因。另两个原因是可扩展性和降低延迟。</p><p>单领导者的主从复制算法要求所有写入都由单个节点处理，但只读查询可以由任何节点处理。对于读多写少的场景，我们往往创建很多从库，并将读请求分散到所有的从库上去。这样能减小主库的负载，并允许向最近的节点发送读请求。当然这只适用于异步复制——如果尝试同步复制，则单个节点故障将使整个系统无法写入。</p><p><strong>当用户从异步从库读取时，如果此异步从库落后，他可能会看到过时的信息</strong>。这种不一致只是一个暂时的状态——如果等待一段时间，从库最终会赶上并与主库保持一致。这称为最终一致性。</p><p>最终两个字用得很微妙，因为从写入主库到反映至从库之间的延迟，可能仅仅是几分之一秒，也可能是几个小时。</p><h2 id="读写一致性"><a href="#读写一致性" class="headerlink" title="读写一致性"></a>读写一致性</h2><p>手机刷虎扑的时候经常遇到，回复某人的帖子然后想马上查看，但我刚提交的回复可能尚未到达从库，看起来好像是刚提交的数据丢失了，很不爽。</p><p>在这种情况下，我们需要<strong>读写一致性</strong>，也称为读己之写一致性。它可以保证，<strong>如果用户刷新页面，他们总会看到自己刚提交的任何更新</strong>。它不会对其他用户的写入做出承诺，其他用户的更新可能稍等才会看到，但它保证用户自己提交的数据能马上被自己看到。</p><p>如何实现读写一致性？</p><p>最简单的方案，<strong>对于某些特定的内容，都从主库读</strong>。举个例子，知乎个人主页信息只能由用户本人编辑，而不能由其他人编辑。因此，永远从主库读取用户自己的个人主页，从从库读取其他用户的个人主页。</p><p>如果应用中的大部分内容都可能被用户编辑，那这种方法就没用了。在这种情况下可以使用其他标准来决定是否从主库读取，例如可以记录每个用户最后一次写入主库的时间，一分钟内都从主库读，同时监控从库的最后同步时间，任何超过一分钟没有更新的从库不响应查询。</p><p>还有一种更好的方法是，<strong>客户端可以在本地记住最近一次写入的时间戳，发起请求时带着此时间戳</strong>。从库提供任何查询服务前，需确保该时间戳前的变更都已经同步到了本从库中。如果当前从库不够新，则可以从另一个从库读，或者等待从库追赶上来。</p><h2 id="单调读"><a href="#单调读" class="headerlink" title="单调读"></a>单调读</h2><p>用户从某从库查询到了一条记录，再次刷新后发现此记录不见了，就像遇到<strong>时光倒流</strong>。如果用户从不同从库进行多次读取，就可能发生这种情况。</p><p>单调读可以保证这种异常不会发生。单调读意味着如果一个用户进行多次读取时，绝对不会遇到时光倒流，<strong>即如果先前读取到较新的数据，后续读取不会得到更旧的数据</strong>。<strong>单调读比强一致性更弱，比最终一致性更强</strong>。</p><p>实现单调读取的一种方式是<strong>确保每个用户总是从同一个节点进行读取</strong>（不同的用户可以从不同的节点读取），比如可以基于用户ID的哈希值来选择节点，而不是随机选择节点。</p><h2 id="因果一致性"><a href="#因果一致性" class="headerlink" title="因果一致性"></a>因果一致性</h2><p>在本文中阐述因果一致性可能并不是一个很好的时机，因为它往往发生在<strong>分区</strong>（也称为分片）的分布式数据库中。</p><p><strong>分区后，每个节点并不包含全部数据。不同的节点独立运行，因此不存在全局写入顺序</strong>。如果用户A提交一个问题，用户B提交了回答。问题写入了节点A，回答写入了节点B。因为同步延迟，发起查询的用户可能会先看到回答，再看到问题。</p><p>为了防止这种异常，需要另一种类型的保证：因果一致性。 即如果一系列写入按某个逻辑顺序发生，那么任何人读取这些写入时，会看见它们以正确的逻辑顺序出现。</p><p>这是一个听起来简单，实际却很难解决的问题。一种方案是应用保证将问题和对应的回答写入相同的分区。但并不是所有的数据都能如此轻易地判断因果依赖关系。如果有兴趣可以搜索向量时钟深入此问题。</p><p>向量时钟：<a href="https://blog.csdn.net/JKerving/article/details/102752439" target="_blank" rel="noopener">https://blog.csdn.net/JKerving/article/details/102752439</a></p><h2 id="事务一致性"><a href="#事务一致性" class="headerlink" title="事务一致性"></a>事务一致性</h2><h3 id="什么是ACID"><a href="#什么是ACID" class="headerlink" title="什么是ACID"></a>什么是ACID</h3><p>ACID是事务的四个特性，指的是atomicity，原子性；consistency，一致性；isolation，隔离性；durability，持久性。</p><ol><li>原子性: 指所有在事务中的操作要么都成功，要么都不成功，所有的操作都不可分割，没有中间状态。一旦某一步执行失败，就会全部回滚到初始状态。</li><li>一致性: 指的是逻辑上的一致性，即所有操作是符合现实当中的期望的。具体参考下一节</li><li>隔离性: 即不同事务之间的相互影响和隔离的程度。比如，不同的隔离级别，事务的并发程度也不同，最强的隔离状态是所有的事务都是串行化的（serializable）（即一个事务完成之后才能进行下一个事务），这样并发性也会降到最低，在保证了强一致性的情况下，性能也会受很大影响，所以在实际工程当中，往往会折中一下。</li><li>持久性: 可以简单地理解为事务执行完毕后数据不可逆并持久化存储于存储系统当中。</li></ol><h3 id="（ACID中的）一致性"><a href="#（ACID中的）一致性" class="headerlink" title="（ACID中的）一致性"></a>（ACID中的）一致性</h3><p>事务的一致性和本文一开始的数据一致性是两个概念，一毛钱关系都没有！</p><p>ACID中的一致性是什么意思呢？如果做一个财务系统，账户A转钱到账户B，那么账户A中减少的钱与账户B中增加的钱必须相等。通俗地讲就是要从一个正确的状态转换到另一个正确的状态。<strong>这并不是数据库可以保证的事情，而是应用程序来保证的</strong>。</p><p><strong>原子性，隔离性、持久性都是数据库的属性，而一致性是应用程序的属性</strong>。应用程序可以用原子性和隔离性来实现一致性，所以ACID中的C就是用来凑缩写单词的。</p><p>也就是说<strong>事务的一致性是由原子性、隔离性和持久性实现的</strong>！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins持续集成工具</title>
      <link href="2020/12/25/project/jenkins/"/>
      <url>2020/12/25/project/jenkins/</url>
      
        <content type="html"><![CDATA[<p>Jenkins介绍整理于：<a href="https://www.jianshu.com/p/5f671aca2b5a" target="_blank" rel="noopener">https://www.jianshu.com/p/5f671aca2b5a</a></p><h2 id="Jenkins是什么"><a href="#Jenkins是什么" class="headerlink" title="Jenkins是什么"></a>Jenkins是什么</h2><p>最近接触了jenkins这个东西，所以花点时间了解了下。它可以在代码上传仓库（如github,gitlab）后，在jenkins（一个网站界面）中通过获取代码仓库中最新代码，进行自动化部署，而省去手动打包、上传服务器、部署这一系列步骤，非常方便。</p><p>Jenkins是一个开源的、提供友好操作界面的持续集成（CI）工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。<strong>Jenkins用Java语言编写</strong>，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。</p><h2 id="CI-CD是什么"><a href="#CI-CD是什么" class="headerlink" title="CI/CD是什么"></a>CI/CD是什么</h2><p>在敏捷模式中，通常都是先开发一个小的模块，再逐渐和其他开发好的模块组合在一起来提高产品的完成度。这个过程称之为集成，通常由上传代码，构建应用，部署环境和测试等一系列步骤所组成。</p><p>但是如果这些步骤都由人手工来做的话，每次都会耗费大量的时间精力在重复的流程上面，所以就有人考虑把集成步骤交给工具来完成，然后不断的循环相同的流程，这个动作我们称之为持续集成。</p><p>CI（Continuous integration，中文意思是持续集成）是一种软件开发实践。持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。借用网络图片对CI加以理解。<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-continuous-integration.jpg" alt></p><p>CD（Continuous Delivery， 中文意思持续交付）是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境（类生产环境）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的Staging环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境。下图反应的是CI/CD 的大概工作模式。<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-continuous-delivery.jpg" alt></p><h2 id="为什么要持续集成"><a href="#为什么要持续集成" class="headerlink" title="为什么要持续集成"></a>为什么要持续集成</h2><p>想象一下这个场景，我们实际的项目中经常会遇到这种情况，客户临时提出一个需求，让我们短时间内做出一个产品原型，然后客户看了满意之后再在这个产品原型的基础上提出一些新的需求点，然后不断迭代这个过程。</p><p>如果我们按照原来的瀑布流程来开发产品肯定是无法完成这个任务的，首先就卡在需求上，因为客户无法提供完整的需求，我们就无法根据需求来开发一个完成度很高的产品，那么客户就会产生不满，公司拿不到项目会因此丢单。</p><p>其次，时间问题，无法短时间内完成一个高完成度的产品，如果赶工可能会存在产品有重大缺陷无法被发布之前就发现，导致公司由此蒙受损失。</p><p>为了避免以上这些风险，持续集成就成了一个很好的解决问题方案，它能保证团队开发人员提交代码的质量，减轻了软件发布时的压力；</p><blockquote><p>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</p></blockquote><h2 id="使用Jenkins进行测试、打包"><a href="#使用Jenkins进行测试、打包" class="headerlink" title="使用Jenkins进行测试、打包"></a>使用Jenkins进行测试、打包</h2><p>Jenkins是一个强大的CI工具，虽然本身使用Java开发，但也能用来做其他语言开发的项目CI。下面讲解如何使用Jenkins创建一个构建任务。</p><p> 登录Jenkins， 点击左侧的新建，创建新的构建任务。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-1.jpg" alt></p><p>然后输入任务名称，任务名称可以自行设定，但需要全局唯一。输入名称后选择构建一个自由风格的软件项目。并点击下方的确定按钮即创建了一个构建任务。之后会自动跳转到该job的配置页面。</p><p>下图是构建任务设置界面，可以看到上方的几个选项<strong>“General”, “源码管理”， “构建触发器”，”构建环境”， “构建”， “构建后操作”</strong>。下面逐一介绍。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-2.jpg" alt></p><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p>General是构建任务的一些基本配置。名称，描述之类的。</p><p><strong>描述:</strong> 对构建任务的描述。 </p><p><strong>丢弃旧的构建：</strong> 服务器资源是有限的，有时候保存了太多的历史构建，会导致Jenkins速度变慢，并且服务器硬盘资源也会被占满。当然下方的”保持构建天数” 和 保持构建的最大个数是可以自定义的，需要根据实际情况确定一个合理的值。</p><p>其他几个选项在这里不做介绍，有兴趣的可以查看Jenkins”帮助信息”， 就是选项最右边的那个蓝色问号，会有一个大概的介绍。不过这些”帮助信息”都是英文的。</p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p>源码管理就是配置你代码的存放位置。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-3.jpg" alt></p><p> <strong>Git:</strong> 支持主流的github 和gitlab代码仓库。因我们的研发团队使用的是gitlab，所以下面我只会对该项进行介绍。</p><p><strong>Repository URL</strong>：仓库地址</p><p><strong>Credentials</strong>：凭证。可以使用HTTP方式的用户名密码，也可以是RSA文件。 但要通过后面的”ADD”按钮添加凭证。</p><p><strong>Branches to build</strong>：构建的分支。*/development表示development分支，也可以设置为其他分支。</p><p><strong>源码浏览器</strong>：你所使用的代码仓库管理工具，如github, gitlab。选自动就好。</p><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a><strong>构建触发器</strong></h3><p>构建触发器，顾名思义，就是构建任务的触发器。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-4.jpg" alt></p><p><strong>Build whenever a SNAPSHOT dependency is built</strong>：只要快照依赖任务被构建，就构建当前任务。就是说，[A]项目依赖[B]项目的一个快照版本的module[M]，如果[A]和[M]都有Jenkins任务时，那么，当[M]任务构建时，就会触发[A]任务的构建。</p><p><strong>触发远程构建（例如，使用脚本）:</strong> 该选项会提供一个接口，可以用来在代码层面触发构建。这里不做介绍，后期可能会用到。</p><p><strong>Build after other projects are built：</strong> 该选项意思是”在其他projects构建后构建”。这里不作介绍，后期可能会用到该选项。</p><p><strong>Build periodically：</strong> 周期性的构建。很好理解，就是每隔一段时间进行构建。日程表类似    linux crontab书写格式。如下图的设置，表示每隔30分钟进行一次构建。</p><p><strong>Poll SCM：</strong>该选项是配合上面这个选项使用的。当代码仓库发生改动，jenkins并不知道。需要配置这个选项，周期性的去检查代码仓库是否发生改动。</p><p><strong>Build when a change is pushed to GitLab：</strong>当有更改push到gitlab代码仓库，即触发构建。后面会有一个触发构建的地址，一般被称为webhooks。需要将这个地址配置到gitlab中，webhooks如何配置后面介绍。这个是常用的构建触发器。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-6.png" alt></p><p>token也可以不配置，如果配置的话<strong>要去Gitlab 仓库配置 webhooks</strong>，当仓库收到push，不是gitlab收到，是某一个仓库收到 push操作或者merge请求事件 才会触发构建 ，和仓库相关：</p><ol><li>进入 Gitlab 中 monitor 仓库的设置页面</li><li>进入集成配置页面，复制 jenkins 触发器配置页面的 url 及 Token</li><li>触发事件 默认事件类型是push</li><li>配置完成后，添加weohooks</li><li>添加了一条 ，在页面下面测试触发设置 测试用test 测试用push events 推送事件</li><li>如果200显示成功，执行成功了</li></ol><h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p>构建环境就是构建之前的一些准备工作，如指定构建工具（比如使用ant）。</p><p>可以空着。</p><h2 id="Pre-Steps"><a href="#Pre-Steps" class="headerlink" title="Pre Steps"></a>Pre Steps</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-7.jpg" alt></p><p>这里用了Sonar作为代码质量管理平台。</p><pre class="line-numbers language-shell"><code class="language-shell">mvn sonar:sonar -Dsonar.projectKey=wisefly-framework -Dsonar.host.url=http://sonar.wisefly.cn:9000 -Dsonar.login=a38e7472128442bccf49dfed26929bd946dec225mvn sonar:sonar -Dsonar.projectKey=area-medical-info-platform -Dsonar.host.url=http://sonar.wisefly.cn:9000 -Dsonar.login=dcb072b700f0d3a2f278e6e225fa75e022dfd87c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="执行shell"><a href="#执行shell" class="headerlink" title="执行shell"></a>执行shell</h3><p>运行shell脚本（默认为sh，但这是可配置的）来构建项目。脚本将以工作区作为当前目录运行。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-8.jpg" alt></p><pre class="line-numbers language-shell"><code class="language-shell">cd /opt/apache-tomcat-9.0.37/webapps/jenkins/workspace/framework-jenkins/business-file/business-file-webmvn -DskipTests docker:buildcd /opt/apache-tomcat-9.0.37/webapps/jenkins/workspace/framework-jenkins/business-gatewaymvn -DskipTests docker:buildcd /opt/apache-tomcat-9.0.37/webapps/jenkins/workspace/framework-jenkins/business-monitormvn -DskipTests docker:buildcd /opt/apache-tomcat-9.0.37/webapps/jenkins/workspace/framework-jenkins/business-wcenter/wcenter-webmvn -DskipTests docker:buildcd /opt/apache-tomcat-9.0.37/webapps/jenkins/workspace/framework-jenkins/business-workflow/business-workflow-webmvn -DskipTests docker:build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jenkins-9.jpg" alt></p><p><strong>Name</strong>: SSH Server的名称。SSH Server可以在jenkins-系统设置中配置。</p><p><strong>source files</strong>: 需要发送给远程主机的源文件。</p><p><strong>Remove prefix:</strong> 移除前面的路径。如果不设置这个参数，则远程主机会自动创建构建源 source files 包含的那个路径。</p><p><strong>Remote directory</strong>: 远程主机目录。</p><p><strong>Exec command</strong>：在远程主机上执行的命令，或者执行的脚本。</p><p>Exec command:</p><pre class="line-numbers language-shell"><code class="language-shell">docker run --name wisefly-file -p 18766:18766 -e "SPRING_PROFILES_ACTIVE=test" -e TZ="Asia/Shanghai" -v /home/wisefly/logs/business-file:/logs -idt 10.0.1.104:5000/business-file-web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT协议</title>
      <link href="2020/12/24/web/mqtt/"/>
      <url>2020/12/24/web/mqtt/</url>
      
        <content type="html"><![CDATA[<h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（Publish/Subscribe）模式的轻量级通讯协议，该协议构建于TCP/IP协议上。</p><p>MQTT协议运行于TCP之上，属于应用层协议，因此只要是支持TCP/IP协议栈的地方，都可以使用MQTT。</p><p>MQTT最大的优点在于可以以极少的代码和有限的带宽，为远程设备提供实时可靠的消息服务。做为一种低开销、低带宽占用的即时通讯协议，MQTT在物联网、小型设备、移动应用等方面有广泛的应用。在物联网开发中，MQTT不是唯一的选择，与MQTT互相竞争的协议有XMPP和CoAP协议等。</p><p>MQTT协议的中心是MQTT服务器或代理 （broker）：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-broker.png" alt></p><p>每条MQTT命令消息的消息头都包含一个固定的报头，有些消息会携带一个可变报文头和一个负荷。消息格式如下：</p><blockquote><p>1.Fixed header 固定报头，所有报文都包含</p><p>2.Variable header 可变报头，部分报文包含</p><p>3.Payload 有效载荷，部分报文包含</p></blockquote><p>参考整理：<a href="https://blog.csdn.net/weixin_44060108/article/details/103629375" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44060108/article/details/103629375</a> | <a href="https://blog.csdn.net/anxianfeng55555/article/details/80908795" target="_blank" rel="noopener">https://blog.csdn.net/anxianfeng55555/article/details/80908795</a></p><h2 id="固定报文头（Fixed-Header）"><a href="#固定报文头（Fixed-Header）" class="headerlink" title="固定报文头（Fixed Header）"></a>固定报文头（Fixed Header）</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-%E5%9B%BA%E5%AE%9A%E6%8A%A5%E5%A4%B4.png" alt></p><p>MQTT固定报文头最少有两个字节:</p><ol><li>第一字节前4bit表示报文类型（Message Type），后4bit是QoS级别等报文类型的标志位。</li><li>第二字节开始是剩余长度字段，该长度是后面的可变报文头加消息负载的总长度，该字段最多允许四个字节。</li></ol><h3 id="报文类型Message-Type"><a href="#报文类型Message-Type" class="headerlink" title="报文类型Message Type:"></a>报文类型Message Type:</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-message%20type.png" alt><br>比如建立连接的前四位报文为0001,则转换成十进制=1,刚好对应上表中的CONNECT,也就是客户端请求连接服务端的意思。</p><h3 id="报文标志"><a href="#报文标志" class="headerlink" title="报文标志"></a>报文标志</h3><p>继续上面那个图,紧跟着Message Type为0001的CONNECT后面的后四位报文标志为0000,表示缺省（Reserved）,一般这四位用于标示发送重复数（DUP） （1字节） 、服务质量 （QoS） （2字节）、保留标志（RETAIN）（1字节）<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-%E6%8A%A5%E6%96%87%E6%A0%87%E5%BF%97.png" alt></p><p>DUP：发布消息的副本。用来在保证消息的可靠传输，如果设置为 1，则在下面的变长中增加MessageId，并且需要回复确认，以保证消息传输完成，但不能用于检测消息重复发送。</p><p>QoS看下一模块。</p><p>RETAIN：发布保留标识，表示服务器要保留这次推送的信息，如果有新的订阅者出现，就把这消息推送给它，如果设有那么推送至当前订阅者后释放。</p><p>举个例子，当发送一条(消息安全等级)QoS=2的消息时,固定报头的第一个字节为:<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-fixedheader.png" alt></p><p>这里可以看到,前四位0011转换成10进制就是3也就是对应报文类型的3 PUBLISH也就是发布消息类型的报文<br>后四位0100,这里就不能转十进制了 ,可以直接对应报文标志图的四个(3210)比特位,这里很明显0100对应的是QoS2,<br>同理如果后四位是0010,那么对应就表示是一条QoS1的消息。</p><h3 id="MQTT-中的-QoS-等级"><a href="#MQTT-中的-QoS-等级" class="headerlink" title="MQTT 中的 QoS 等级"></a>MQTT 中的 QoS 等级</h3><p>作为最初用来在网络带宽窄、信号不稳定的环境下传输数据的协议，MQTT 设计了一套保证消息稳定传输的机制，包括消息应答、存储和重传。在这套机制下，提供了三种不同层次 QoS：</p><ol><li>QoS0，At most once，<strong>至多一次</strong>。Sender 发送的一条消息，Receiver 最多能收到一次，也就是说 Sender 尽力向 Receiver 发送消息，如果发送失败，也就算了</li><li>QoS1，At least once，<strong>至少一次</strong>。Sender 发送的一条消息，Receiver 至少能收到一次，也就是说 Sender 向 Receiver 发送消息，如果发送失败，会继续重试，直到 Receiver 收到消息为止，但是因为重传的原因，Receiver 有可能会收到重复的消息</li><li>QoS2，Exactly once，<strong>确保只有一次</strong>。Sender 发送的一条消息，Receiver 确保能收到而且只收到一次，也就是说 Sender 尽力向 Receiver 发送消息，如果发送失败，会继续重试，直到 Receiver 收到消息为止，同时保证 Receiver 不会因为消息重传而收到重复的消息</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-Qos.png" alt></p><p>要注意的是，QoS 是 Sender 和 Receiver 之间达成的协议，不是 Publisher 和 Subscriber 之间达成的协议。也就是说 Publisher 发布一条 QoS1 的消息，只能保证 Broker 能至少收到一次这个消息；至于对应的 Subscriber 能否至少收到一次这个消息，还要取决于 Subscriber 在 Subscribe 的时候和 Broker 协商的 QoS 等级。</p><h3 id="剩余报文长度"><a href="#剩余报文长度" class="headerlink" title="剩余报文长度"></a>剩余报文长度</h3><p>表示本次报文的剩余长度（字节位数）<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-%E5%89%A9%E4%BD%99%E6%8A%A5%E6%96%87%E9%95%BF%E5%BA%A6.png" alt></p><p>比如这个红色框的报文转换成十进制是29,则表示还有29个字节是本次报文的,绿色框则就是剩余的报文了,刚好是29个,不信你数数</p><p>剩余长度字段单个字节最大值为二进制0b0111 1111，16进制0x7F。也就是说，单个字节可以描述的最大长度是127字节。为什么不是256字节呢？因为MQTT协议规定，单个字节第八位（最高位）若为1，则表示后续还有字节存在，第八位起“延续位”的作用。</p><p>例如，数字64，编码为一个字节，十进制表示为64，十六进制表示为0×40。数字321（65+2*128）编码为两个字节，重要性最低的放在前面，第一个字节为65+128=193（0xC1），第二个字节是2（0x02），表示2×128。</p><p>由于MQTT协议最多只允许使用四个字节表示剩余长度（如下图），并且最后一字节最大值只能是0x7F不能是0xFF，所以能发送的最大消息长度是256MB，而不是512MB。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-%E5%89%A9%E4%BD%99%E9%95%BF%E5%BA%A6.png" alt></p><h2 id="可变报文头（Variable-Header）"><a href="#可变报文头（Variable-Header）" class="headerlink" title="可变报文头（Variable Header）"></a>可变报文头（Variable Header）</h2><p>可变报文头主要包含协议名、协议版本、连接标志（Connect Flags）、心跳间隔时间（Keep Alive timer）、连接返回码（Connect Return Code）、主题名（Topic Name）等。</p><p>根据MQTT文档说明，把所有相关的信息列出来。如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-%E5%8F%AF%E5%8F%98%E6%8A%A5%E5%A4%B4.png" alt></p><p><strong>绿色的为用到的。红色表示没有用到的。</strong></p><h3 id="协议名"><a href="#协议名" class="headerlink" title="协议名"></a>协议名</h3><p>协议名是表示协议名 MQTT 的UTF-8编码的字符串。MQTT规范的后续版本不会改变这个字符串的偏移和长度。如果协议名不正确，服务端需要断开客户端的连接。</p><p>协议名格式如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-%E5%8D%8F%E8%AE%AE%E5%90%8D.png" alt><br>CONNECT中的协议名</p><h3 id="协议级别"><a href="#协议级别" class="headerlink" title="协议级别"></a>协议级别</h3><p>协议级别通俗来讲就是协议的版本。</p><p>客户端用8位的无符号值表示协议的修订版本。对于3.1.1版协议，协议级别字段的值是4(0x04)。如果发现不支持的协议级别，服务端必须给发送一个返回码为0x01（不支持的协议级别）的CONNACK报文响应CONNECT报文，然后断开客户端的连接。</p><p>MQTT3.1.1的协议级别格式如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-protocolLevel.png" alt></p><h3 id="连接标志"><a href="#连接标志" class="headerlink" title="连接标志"></a>连接标志</h3><p>连接标志字节包含一些用于指定MQTT连接行为的参数。它还指出payload字段是否存在。</p><p>连接标志的结构：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-connectflag.png" alt></p><blockquote><p>1.有效负载（playload）字段的存在与否并不是reserved字段来指定，而是will flag、user Name等字段。<br>比如：如果will flag为1，则负载中需要包含will topic、will message等字段。如果需要用户名密码，则负载中需要包含这些信息。</p><p>2.服务端必须验证CONNECT控制报文的保留标志位（第0位reserved）是否为0，如果不为0必须断开客户端连接</p></blockquote><p>所有连接标志的意义：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-connection-flag-mean.jpg" alt></p><h3 id="Keep-alive"><a href="#Keep-alive" class="headerlink" title="Keep alive"></a>Keep alive</h3><p>其格式如下：<br><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-keep-alive.jpg" alt></p><p>MSB表示最大有效位，LSB表示最小有效位。这里没有什么特殊含义，这里只是表示两个字节来描述Keep alive。至于官方文档中说明Keep Alive允许的最大值是18小时12分15秒，这是从2^16/3600=18.2044得出的。</p><p>Keep Alive说明：</p><ol><li><p>客户端负责保证控制报文发送的时间间隔不超过保持连接的值。如果没有任何其它的控制报文可以发送，客户端必须发送一个PINGREQ报文。不管保持连接的值是多少，客户端任何时候都可以发送PINGREQ报文，并且使用PINGRESP报文判断网络和服务端的活动状态。</p></li><li><p>如果保持连接的值非零，并且服务端在一点五倍的保持连接时间内没有收到客户端的控制报文，它必须断开客户端的网络连接，认为网络连接已断开。</p></li><li><p>客户端发送了PINGREQ报文之后，如果在合理的时间内仍没有收到PINGRESP报文，它应该关闭到服务端的网络连接。</p></li><li><p>保持连接的值为零表示关闭保持连接功能。这意味着客户端不断开连接。</p></li></ol><blockquote><p>不管保持连接的值是多少，任何时候，只要服务端认为客户端是不活跃或无响应的，可以断开客户端的连接。</p></blockquote><p>至此，CONNECT报文的所有内容已经学习，最后用官方文档的CONNECT结构图来总结：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mqtt-connection.png" alt></p><h2 id="有效负荷（Payload）"><a href="#有效负荷（Payload）" class="headerlink" title="有效负荷（Payload）"></a>有效负荷（Payload）</h2><p>Payload直译为负荷，可能让人摸不着头脑，实际上可以理解为<strong>消息主体（body）</strong>。</p><p>当MQTT发送的消息类型是CONNECT（连接）、PUBLISH（发布）、SUBSCRIBE（订阅）、SUBACK（订阅确认）、UNSUBSCRIBE（取消订阅）时，则会带有负荷。</p><h2 id="MQTT其他特点"><a href="#MQTT其他特点" class="headerlink" title="MQTT其他特点"></a>MQTT其他特点</h2><h3 id="异步发布-订阅实现"><a href="#异步发布-订阅实现" class="headerlink" title="异步发布/订阅实现"></a>异步发布/订阅实现</h3><p>发布/订阅模式解耦了发布消息的客户（发布者）与订阅消息的客户（订阅者）之间的关系，这意味着发布者和订阅者之间并不需要直接建立联系。 </p><p>这个模式有以下好处：</p><ol><li>发布者与订阅者只需要知道同一个消息代理即可；</li><li>发布者和订阅者不需要直接交互；</li><li>发布者和订阅者不需要同时在线。</li></ol><p>由于采用了发布/订阅实现，MQTT可以双向通信。也就是说MQTT支持服务端反向控制设备，设备可以订阅某个主题，然后发布者对该主题发布消息，设备收到消息后即可进行一系列操作。</p><h3 id="二进制格式实现"><a href="#二进制格式实现" class="headerlink" title="二进制格式实现"></a>二进制格式实现</h3><p>MQTT基于二进制实现而不是字符串，比如HTTP和XMPP都是基于字符串实现。由于HTTP和XMPP拥有冗长的协议头部，而MQTT固定报文头仅有两字节，所以相比其他协议，发送一条消息最省流量。</p><h3 id="MQTT的安全"><a href="#MQTT的安全" class="headerlink" title="MQTT的安全"></a>MQTT的安全</h3><p>由于MQTT运行于TCP层之上并以明文方式传输，这就相当于HTTP的明文传输。作为传输协议，MQTT仅关注消息传输，提供合适的安全功能是开发者的责任。安全功能可以从三个层次来考虑——应用层、传输层、网络层。</p><ol><li>应用层：在应用层上，MQTT提供了客户标识（Client Identifier）以及用户名和密码，可以在应用层验证设备。</li><li>传输层：类似于HTTPS，MQTT基于TCP连接，也可以加上一层TLS，传输层使用TLS加密是确保安全的一个好手段，可以防止中间人攻击。客户端证书不但可以作为设备的身份凭证，还可以用来验证设备。</li><li>网络层：如果有条件的话，可以通过拉专线或者使用VPN来连接设备与MQTT代理，以提高网络传输的安全性。</li></ol><h2 id="选择用户数据格式"><a href="#选择用户数据格式" class="headerlink" title="选择用户数据格式"></a>选择用户数据格式</h2><p>MQTT协议只实现了传送消息的格式，并没有限制用户协议需要按照一定的风格，因此在MQTT协议之上，我们需要定义一套自己的通信协议。比如说，发布者向设备发布一条打开消息，设备可以回复一个消息并携带返回码，这样的消息格式是使用二进制、字符串还是JSON格式呢？</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON中文全称是JavaScript对象标记语言，在这门语言中，一切都是对象。因此，任何支持的类型都可以通过JSON来表示，例如字符串、数字、对象、数组等。其语法规则是：</p><ol><li>对象表示为键值对；</li><li>数据由逗号分隔；</li><li>花括号保存对象；</li><li>方括号保存数组。</li></ol><p>JSON层次结构简洁清晰，易于阅读和编写，同时也易于机器解析和生成，有效提升网络传输效率。</p><p><strong>MQTT+JSON是目前最优方案</strong>。协议简洁清晰、易于阅读、解析和生成等，也考虑了服务器端开发者和设备端开发者的开发成本。</p><h2 id="MQTT与其他协议"><a href="#MQTT与其他协议" class="headerlink" title="MQTT与其他协议"></a>MQTT与其他协议</h2><p>目前各大平台都开始支持MQTT协议，MQTT相比其他协议有什么优势呢？物联网设备能不能用其他的协议呢？下面是MQTT与其他部分协议的比较，给大家作为参考。</p><h3 id="MQTT与TCP-Socket"><a href="#MQTT与TCP-Socket" class="headerlink" title="MQTT与TCP Socket"></a>MQTT与TCP Socket</h3><p>虽然MQTT运行于TCP层之上，看起来这两者之间根本没有比较性，但笔者觉得还是有必要叙述一番，因为大多数从事硬件或嵌入式开发的工程师，都是直接在TCP层上通信的。从事嵌入式开发工作的人都应该知道LwIP，LwIP是一套用于嵌入式系统的开放源代码TCP/IP协议栈，LwIP在保证嵌入式产品拥有完整的TCP/IP功能的同时，又能保证协议栈对处理器资源的有限消耗，其运行一般仅需要几十KB的RAM和40KB左右的ROM。</p><p>也就是说，只要是嵌入式产品使用了LwIP，就支持TCP/IP协议栈，进而可以使用MQTT协议。</p><p>由于TCP协议有粘包和分包问题，所以传输数据时需要自定义协议，如果传输的数据报超过MSS（最大报文段长度），一定要给协议定义一个消息长度字段，确保接收端能通过缓冲完整收取消息。一个简单的协议定义：消息头部+消息长度+消息正文。</p><p>当然，使用MQTT协议则不需要考虑这个问题，这些MQTT都已经处理好了，MQTT最长可以一次性发送256MB数据，不用考虑粘包分包的问题。</p><p>总之，TCP和MQTT本身并不矛盾，只不过基于Socket开发需要处理更多的事情，而且大多数嵌入式开发模块本身也只会提供Socket接口供厂家自定义协议。</p><h3 id="MQTT与HTTP"><a href="#MQTT与HTTP" class="headerlink" title="MQTT与HTTP"></a>MQTT与HTTP</h3><p>HTTP最初的目的是提供一种发布和接收HTML页面的方法，主要用于Web。HTTP是典型的C/S通讯模式：请求从客户端发出，服务端只能被动接收，一条连接只能发送一次请求，获取响应后就断开连接。该协议最早是为了适用Web浏览器的上网浏览场景而设计的，目前在PC、手机、Pad等终端上都应用广泛。由于这样的通信特点，HTTP技术在物联网设备中很难实现设备的反向控制，不过非要实现也不是不行，下面看一下Web端的例子。</p><p>目前，在微博等SNS网站上有海量用户公开发布的内容，当发布者发布消息，数据传到服务器更新时，就需要给关注者尽可能的实时更新内容。Web网站基于HTTP协议，使用HTTP协议探测服务器上是否有内容更新，就必须频繁地让客户端请求服务器进行确认。在浏览器中要实现这种效果，可以使用Comet技术，Comet是基于HTTP长连接的“服务器推”技术，主要有两种实现模型：基于AJAX的长轮询（long-polling）方式和基于Iframe及htmlfile的流（streaming）方式。这两种技术模型在这里不详细展开，有兴趣的读者可以查阅相关资料。</p><p>如果要实现设备的反向控制，可能就要用到前面提到的Comet技术。由于需要不断的请求服务器，会导致通信开销非常大，加上HTTP冗长的报文头，在节省流量上实在没有优势。</p><p>当然，如果只是单纯地让设备定时上报数据而不做控制，也是可以使用HTTP协议的。</p><h3 id="MQTT与XMPP"><a href="#MQTT与XMPP" class="headerlink" title="MQTT与XMPP"></a>MQTT与XMPP</h3><p>最有可能与MQTT竞争的是XMPP协议。XMPP（可扩展通讯与表示协议）是一项用于实时通讯的开放技术，它使用可扩展标记语言（XML）作为交换信息的基本格式。其优点是协议成熟、强大、可扩展性强。目前主要应用于许多聊天系统中，在消息推送领域，MQTT和XMPP互相竞争。下面列举MQTT与XMPP各自的特性：</p><ol><li>XMPP协议<strong>基于繁重的XML</strong>，<strong>报文体积大且交互繁琐</strong>；而MQTT协议固定报头只有两个字节，报文体积小、编解码容易；</li><li>XMPP基于JID的<strong>点对点</strong>消息传输；MQTT协议基于主题(Topic)发布\订阅模式，消息路由更为灵活；</li><li>XMPP协议采用XML承载报文，二进制必须进行Base64编码或其他方式处理；MQTT协议未定义报文内容格式，可以承载JSON、二进制等不同类型报文，开发者可以针对性的定义报文格式；</li><li>MQTT协议支持消息收发确认和QoS保证，有更好的消息可靠性保证；而XMPP主协议并未定义类似机制；</li><li>在嵌入式设备开发中大多使用的是C语言开发，<strong>C语言解析XML是非常困难</strong>的。MQTT基于二进制实现且未定义报文内容格式，可以很好的兼顾嵌入式C语言开发者；而XMPP基于XML，开发者需要配合协议格式，不能灵活开发。 </li></ol><p>综上所述，在嵌入式设备中，由于需要一个灵巧简洁，对设备开发者和服务端开发者都友好的协议，MQTT比XMPP更具有优势。</p><h3 id="MQTT与CoAP"><a href="#MQTT与CoAP" class="headerlink" title="MQTT与CoAP"></a>MQTT与CoAP</h3><p>CoAP也是一个能与MQTT竞争的协议。其模仿HTTP的REST模型，服务端以URI方式创建资源，客户端可以通过GET、PUT、POST、DELETE方式访问这些资源，并且协议风格也和HTTP极为相似。</p><p>不过，如果使用CoAP可能会让物联网后台的情况变得复杂，比如MQTT可以实现一个最简单的IoT架构：Device + MQTT服务器 + APP，手机端或Web端可以直接从MQTT服务器订阅想要的主题。而CoAP可能需要这样的架构：CoAP + Web + DataBase + App，使用CoAP必须经过DataBase才能转给第三方。</p><p>至于CoAP和MQTT孰优孰劣，这里不作定论。不过目前来说，CoAP资料还是略少。而且，MQTT除了可以应用于物联网领域，在手机消息推送、在线聊天等领域都可以有所作为。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经过以上的比较，我们可以得出如下结论：</p><p>MQTT基于异步发布/订阅的实现解耦了消息发布者和订阅者，<strong>基于二进制的实现节省了存储空间及流量</strong>，同时MQTT拥有更好的消息处理机制，可以替代TCP Socket一部分应用场景。</p><p>相对于HTTP和XMPP，MQTT可以选择用户数据格式，解析复杂度低，同时MQTT也可用于手机推送等领域。手机作为与人连接的入口，正好建立了人与物的连接，可谓一箭双雕。当然，其他协议也可以作为一个辅助的存在，HTTP可以为只需定时上传数据的设备服务，CoAP则更适用于非常受限的移动通信网络。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="2020/12/23/web/nginx/"/>
      <url>2020/12/23/web/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h2><p>Nginx 同 Apache 一样都是一种 Web 服务器。基于 REST 架构风格，以统一资源描述符（Uniform Resources Identifier）URI 或者统一资源定位符（Uniform Resources Locator）URL 作为沟通依据，通过 HTTP 协议提供各种网络服务。</p><ol><li>Nginx 使用基于<strong>事件驱动架构，使得其可以支持数以百万级别的 TCP 连接</strong>。</li><li>高度的模块化和自由软件许可证使得第三方模块层出不穷（这是个开源的时代啊）。</li><li>Nginx 是一个<strong>跨平台服务器</strong>，可以运行在 Linux、Windows、FreeBSD、Solaris、AIX、Mac OS 等操作系统上。</li></ol><p>参考整理：<a href="https://zhuanlan.zhihu.com/p/152526491" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/152526491</a></p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ol><li>说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；此时就涉及到两个角色，一个是被代理角色，一个是目标角色。</li><li>被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程；如同生活中的专卖店，客人到 adidas 专卖店买了一双鞋，这个专卖店就是代理，被代理角色就是 adidas 厂家，目标角色就是用户。</li><li>简而言之，就是adidas老板找来专卖店这个代理来卖鞋子给客人这个目标角色。</li></ol><h3 id="正向代理：传说中的“翻墙”"><a href="#正向代理：传说中的“翻墙”" class="headerlink" title="正向代理：传说中的“翻墙”"></a>正向代理：传说中的“翻墙”</h3><p>说反向代理之前，我们先看看正向代理，正向代理也是大家最常接触到的代理模式，我们会从两个方面来说关于正向代理的处理模式，分别从软件方面和生活方面来解释一下什么叫正向代理。</p><p>在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的。</p><p>此时大家可能都会翻墙进行访问，翻墙的方式主要是找到一个可以访问国外网站的代理服务器，我们<strong>将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们</strong>！</p><p>上述这样的代理模式称为正向代理，正向代理最大的特点是客户端非常明确要访问的服务器地址；<strong>服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端</strong>；正向代理模式屏蔽或者隐藏了真实客户端信息。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/nginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.jpg" alt></p><p>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的 IP 地址，还有代理程序的端口。</p><p>总结来说：正向代理，“它代理的是客户端”，是一个位于客户端和原始服务器（Origin Server）之间的服务器。</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>分布式部署：也就是通过部署多台服务器来解决访问人数限制的问题。</p><p>某宝网站中大部分功能也是直接使用 Nginx 进行反向代理实现的，并且通过封装 Nginx 和其他的组件之后起了个高大上的名字：Tengine。</p><p>那么反向代理具体是通过什么样的方式实现的分布式的集群操作呢，我们先看一个示意图（我把服务器和反向代理框在一块，同属于一个环境，后面我有介绍）：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.jpg" alt></p><p>通过上述的图解大家就可以看清楚了，<strong>多个客户端给服务器发送的请求，Nginx 服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了</strong>。</p><p>此时请求的来源也就是客户端是明确的，但是<strong>请求具体由哪台服务器处理的并不明确</strong>了，Nginx 扮演的就是一个反向代理角色。</p><p><strong>客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理</strong>。因为客户端不需要任何配置就可以访问。</p><p>反向代理，“<strong>它代理的是服务端</strong>”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。</p><h4 id="反向代理的作用："><a href="#反向代理的作用：" class="headerlink" title="反向代理的作用："></a>反向代理的作用：</h4><ol><li>保证内网的安全，通常将反向代理作为公网访问地址，Web 服务器是内网。</li><li>负载均衡，通过反向代理服务器来优化网站的负载。</li></ol><h2 id="正向代理和反向代理的区别"><a href="#正向代理和反向代理的区别" class="headerlink" title="正向代理和反向代理的区别"></a>正向代理和反向代理的区别</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/nginx%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt></p><p>图解：</p><ol><li>在正向代理中，Proxy 和 Client 同属于一个 LAN（图中方框内），隐藏了客户端信息。</li><li>在反向代理中，Proxy 和 Server 同属于一个 LAN（图中方框内），隐藏了服务端信息。</li></ol><p>实际上，Proxy 在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p><p>负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如 F5 负载均衡，相对造价昂贵成本较高。</p><p>但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作。</p><p>更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。</p><h2 id="Nginx-支持的负载均衡调度算法方式"><a href="#Nginx-支持的负载均衡调度算法方式" class="headerlink" title="Nginx 支持的负载均衡调度算法方式"></a>Nginx 支持的负载均衡调度算法方式</h2><h3 id="weight-轮询（默认）："><a href="#weight-轮询（默认）：" class="headerlink" title="weight 轮询（默认）："></a>weight 轮询（默认）：</h3><p>接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx 会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。</p><p>这种方式下，可以给不同的后端服务器<strong>设置一个权重值</strong>（weight），用于调整不同的服务器上请求的分配率。</p><p>权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</p><h3 id="ip-hash（通过客户端请求ip进行hash，再通过hash值选择后端server）："><a href="#ip-hash（通过客户端请求ip进行hash，再通过hash值选择后端server）：" class="headerlink" title="ip_hash（通过客户端请求ip进行hash，再通过hash值选择后端server）："></a>ip_hash（通过客户端请求ip进行hash，再通过hash值选择后端server）：</h3><p>当你服务端的一个特定url路径会被同一个用户连续访问时，如果负载均衡策略还是轮询的话，那该用户的多次访问会被打到各台服务器上，这显然并不高效（会建立多次http链接等问题）。甚至考虑一种极端情况，用户需要分片上传文件到服务器下，然后再由服务器将分片合并，这时如果用户的请求到达了不同的服务器，那么分片将存储于不同的服务器目录中，导致无法将分片合并。所以，此类场景可以考虑采用nginx提供的ip_hash策略。既能满足每个用户请求到同一台服务器，又能满足不同用户之间负载均衡。</p><p>每个请求按照发起客户端的 ip 的 hash 结果进行匹配，<strong>这样的算法下一个固定 ip 地址的客户端总会访问到同一个后端服务器</strong>，这也在一定程度上解决了集群部署环境下 Session 共享的问题。</p><p>配置代码如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> backend<span class="token punctuation">{</span>    <span class="token keyword">ip_hash</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">128.1</span><span class="token punctuation">:</span><span class="token number">8080</span> <span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">128.2</span><span class="token punctuation">:</span><span class="token number">8080</span> <span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">128.3</span><span class="token punctuation">:</span><span class="token number">8080</span> down<span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">128.4</span><span class="token punctuation">:</span><span class="token number">8080</span> down<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">8081</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> test<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token punctuation">;</span>    <span class="token keyword">root</span> <span class="token operator">/</span>home<span class="token operator">/</span>system<span class="token operator">/</span>test<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>test<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span>Upload<span class="token operator">/</span>upload <span class="token punctuation">{</span>    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>backend<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述是一个极简的监听8081端口的的nginx服务，其中当请求url 为/Upload/upload时，会走ip_hash策略; upstream是nginx的负载均衡模块，此处，配置了策略为ip_hash，参与负载均衡的机器有四台，其中后两台末尾添加了down关键字，表示下线的意思。</p><p>server name 为虚拟服务器的识别标志，匹配到特定的server块，转发到对应的应用服务器中去。客户端通过域名访问服务器时会将域名与被解析的ip一同放在请求中。当请求到了nginx中时。nginx会先去匹配ip，如果listen中没有找到对应的ip，就会通过域名进行匹配，匹配成功以后，再匹配端口。当这三步完成，就会找到对应的server的location对应的资源。</p><p>nginx server中的root和location的root的区别：<a href="https://blog.csdn.net/fengzyf/article/details/102602782" target="_blank" rel="noopener">https://blog.csdn.net/fengzyf/article/details/102602782</a></p><h3 id="url-hash（通过请求url进行hash，再通过hash值选择后端server）："><a href="#url-hash（通过请求url进行hash，再通过hash值选择后端server）：" class="headerlink" title="url_hash（通过请求url进行hash，再通过hash值选择后端server）："></a>url_hash（通过请求url进行hash，再通过hash值选择后端server）：</h3><p>一般来讲，要用到urlhash，是要配合缓存命中来使用。举一个我遇到的实例：有一个服务器集群A，需要对外提供文件下载，由于文件上传量巨大，没法存储到服务器磁盘中，所以用到了第三方云存储来做文件存储。服务器集群A收到客户端请求之后，需要从云存储中下载文件然后返回，为了省去不必要的网络带宽和下载耗时，在服务器集群A上做了一层临时缓存（缓存一个月）。由于是服务器集群，所以同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。在此类场景下，为了使得缓存命中率提高，很适合使用url_hash策略，同一个url（也就是同一个资源请求）会到达同一台机器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取，既减少了带宽，也减少的下载时间。</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> somestream <span class="token punctuation">{</span>    hash <span class="token variable">$request_uri</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">244.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">244.2</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">244.3</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">244.4</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">8081</span> default<span class="token punctuation">;</span>    <span class="token keyword">server_name</span> test<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token punctuation">;</span>    <span class="token keyword">charset</span> utf<span class="token number">-8</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>get <span class="token punctuation">{</span>    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>somestream<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述同样也是一个极简的监听8081端口的nginx服务，当请求url为/get时，会走url_hash；同样配置了upstream模块，hash $request_uri表明了是按照url规则进行hash策略。</p><p>按照访问的 URL 的 hash 结果分配请求，每个请求的 URL 会指向后端固定的某个服务器，可以在 Nginx 作为静态服务器的情况下提高缓存效率。</p><p>要注意 Nginx 默认不支持这种调度算法，要使用的话需要安装 Nginx 的 hash 软件包。</p><h3 id="fair："><a href="#fair：" class="headerlink" title="fair："></a>fair：</h3><p>智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配。</p><p>响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少，它是结合了前两者的优点的一种调度算法。</p><p>但是需要注意的是 Nginx 默认不支持 fair 算法，如果要使用这种调度算法，请安装 upstream_fair 模块。</p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><h3 id="动态页面与静态页面区别"><a href="#动态页面与静态页面区别" class="headerlink" title="动态页面与静态页面区别"></a>动态页面与静态页面区别</h3><ol><li>静态资源： 当用户多次访问这个资源，资源的源代码永远不会改变的资源。</li><li>动态资源：当用户多次访问这个资源，资源的源代码可能会发生改变。</li></ol><h3 id="什么是动静分离"><a href="#什么是动静分离" class="headerlink" title="什么是动静分离"></a>什么是动静分离</h3><ol><li>为了加快网站的解析速度，可以把动态页面（如：.jsp,.do，servlet等等）和静态页面（如：css、html、jpg、js等等文件）由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</li><li>动静分离简单的概括是：<strong>动态文件与静态文件的分离</strong>。</li><li>伪静态：网站如果想被搜索引擎搜素到，动态页面静态技术freemarker等模版引擎技术</li></ol><h3 id="动静分离与前后分离区别"><a href="#动静分离与前后分离区别" class="headerlink" title="动静分离与前后分离区别"></a>动静分离与前后分离区别</h3><ol><li>动静分离动态资源与静态资源分离，不会部署在同一台服务器上。</li><li>前后分离:网站架构模式，微服务开发基于SOA面向于服务器开发，<strong>后台</strong>和<strong>前端</strong>都采用<strong>调用接口</strong>方式。将一个项目拆分成一个控制Web（前端）和接口（后端）,最终使用rpc远程调用技术。视图层和业务逻辑层拆分，中间采用RPC远程调用技术</li></ol><h2 id="Nginx实现动静分离"><a href="#Nginx实现动静分离" class="headerlink" title="Nginx实现动静分离"></a>Nginx实现动静分离</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/nginx-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.jpg" alt></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>动静分离的原理很简单，通过location对请求url进行匹配即可，在/Users/Hao/Desktop/Test（任意目录）下创建 /static/imgs 配置如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true">###静态资源访问</span><span class="token keyword">server</span> <span class="token punctuation">{</span>  <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token keyword">server_name</span>  static<span class="token punctuation">.</span>haoworld<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token keyword">location</span> <span class="token operator">/</span>static<span class="token operator">/</span>imgs <span class="token punctuation">{</span>       <span class="token keyword">root</span> <span class="token operator">/</span>Users<span class="token operator">/</span>Hao<span class="token operator">/</span>Desktop<span class="token operator">/</span>Test<span class="token punctuation">;</span>       <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">###动态资源访问</span> <span class="token keyword">server</span> <span class="token punctuation">{</span>  <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token keyword">server_name</span>  www<span class="token punctuation">.</span>haoworld<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>     <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>（1）为什么互联网公司项目中，静态资源url后面会加上一个时间戳？他的作用： 控制缓存</p><ol><li>目的:最终的目的是为了控制项目上线的时候，薪静态资源与老的浏览器缓存静态资源避免冲突问题。</li><li>解决办法:加上时间戳规范 t = 项目上线</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web服务器 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https、ssl和ssh协议</title>
      <link href="2020/12/22/web/https/"/>
      <url>2020/12/22/web/https/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP-VS-HTTPS"><a href="#HTTP-VS-HTTPS" class="headerlink" title="HTTP VS HTTPS"></a>HTTP VS HTTPS</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>特点：</p><ol><li>无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作</li><li>无连接：HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。</li><li>基于请求和响应：基本的特性，由客户端发起请求，服务端响应</li><li>简单快速、灵活</li><li>通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性</li></ol><p>转载整理：<a href="https://blog.csdn.net/m0_46573836/article/details/108900752" target="_blank" rel="noopener">https://blog.csdn.net/m0_46573836/article/details/108900752</a></p><p><strong>HTTP协议传输数据以明文形式显示</strong></p><p>针对无状态的一些解决策略：<br>场景：逛电商商场用户需要使用的时间比较长，需要对用户一段时间的HTTP通信状态进行保存，比如执行一次登陆操作，在30分钟内所有的请求都不需要再次登陆。</p><ol><li>通过Cookie/Session技术</li><li>HTTP/1.1持久连接（HTTP <strong>keep-alive</strong>）方法，只要任意一端没有明确提出断开连接，则保持TCP连接状态，在请求首部字段中的Connection: keep-alive即为表明使用了持久连接</li></ol><h4 id="中间人攻击原理"><a href="#中间人攻击原理" class="headerlink" title="中间人攻击原理"></a>中间人攻击原理</h4><h5 id="SSL劫持攻击："><a href="#SSL劫持攻击：" class="headerlink" title="SSL劫持攻击："></a>SSL劫持攻击：</h5><p>SSL劫持攻击即SSL证书欺骗攻击，攻击者为了获得HTTPS传输的明文数据，需要先将自己接入到客户端和目标网站之间；在传输过程中伪造服务器的证书，将服务器的公钥替换成自己的公钥，这样，中间人就可以得到明文传输带Key1、Key2和Pre-Master-Key，从而窃取客户端和服务端的通信数据；</p><p>但是对于客户端来说，如果中间人伪造了证书，在校验证书过程中会提示证书错误，由用户选择继续操作还是返回，由于大多数用户的安全意识不强，会选择继续操作，此时，中间人就可以获取浏览器和服务器之间的通信数据</p><h5 id="SSL剥离攻击："><a href="#SSL剥离攻击：" class="headerlink" title="SSL剥离攻击："></a>SSL剥离攻击：</h5><p>这种攻击方式也需要将攻击者设置为中间人，之后见HTTPS范文替换为HTTP返回给浏览器，而中间人和服务器之间仍然保持HTTPS服务器。由于HTTP是明文传输的，所以中间人可以获取客户端和服务器传输数据</p><p>HTTPS中间人攻击：<a href="https://www.jianshu.com/p/fab64714157a" target="_blank" rel="noopener">https://www.jianshu.com/p/fab64714157a</a></p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>基于HTTP协议，通过SSL或TLS提供加密处理数据、验证对方身份以及数据完整性保护</p><p>通过抓包可以看到数据<strong>不是明文传输</strong>，而且HTTPS有如下特点：</p><ol><li>内容加密：采用混合加密技术，中间者无法直接查看明文内容</li><li>验证身份：通过证书认证客户端访问的是自己的服务器</li><li>保护数据完整性：防止传输的内容被中间人冒充或者篡改</li></ol><blockquote><p><strong>混合加密</strong>：结合非对称加密和对称加密技术。客户端使用对称加密生成密钥对传输数据进行加密，然后使用非对称加密的公钥再对秘钥进行加密，所以网络上传输的数据是被秘钥加密的密文和用公钥加密后的秘密秘钥，因此即使被黑客截取，由于没有私钥，无法获取到加密明文的秘钥，便无法获取到明文数据。</p><p><strong>数字摘要</strong>：通过单向hash函数对原文进行哈希，将需加密的明文“摘要”成一串固定长度(如128bit)的密文，不同的明文摘要成的密文其结果总是不相同，同样的明文其摘要必定一致，并且即使知道了摘要也不能反推出明文。</p><p><strong>数字签名技术</strong>：数字签名建立在公钥加密体制基础上，是公钥加密技术的另一类应用。它把公钥加密技术和数字摘要结合起来，形成了实用的数字签名技术。</p></blockquote><h3 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a>http和https的区别</h3><ol><li>https要ca证书</li><li>https工作在443端口，而http默认工作在80端口</li></ol><h2 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h2><p>对称加密算法的特点是加密密钥和解密密钥是<strong>同一把密钥</strong>K，且加解密速度快，典型的对称加密算法有DES、AES等</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95.png" alt></p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>既然把密钥传输给别人不安全，那我们就要避免这个问题，首先计算机A和计算机B，分别拥有两个东西，叫做公钥和私钥，这两个东西有什么用呢，简单来说这两个东西是配套来使用的，一段文字通过公钥加密后，需要通过私钥解密才能看到，公钥就像锁，而私钥就像钥匙，现在计算机A拥有一把锁和钥匙，计算机B也拥有一把锁和钥匙，需要注意的是这两个东西是配套使用的，也就是只有自己的钥匙能开自己的锁。然后我们需要怎么做呢，原理很简单，计算机A和计算机B把自己的公钥复制一份，发送给对对方，也就是交换公钥，需要加密数据的时候就用对方的公钥解密，然后发送给对方，然后对方就用自己的密钥解密。如下图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png" alt></p><p>注：梯形为客户端公钥和私钥，长方形为服务器端公钥和私钥</p><h2 id="公钥交换过程"><a href="#公钥交换过程" class="headerlink" title="公钥交换过程"></a>公钥交换过程</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/%E5%85%AC%E9%92%A5%E4%BA%A4%E6%8D%A2%E8%BF%87%E7%A8%8B.jpg" alt></p><p>简单来讲一下这个过程</p><ol><li>首先客户端建立一个连接</li><li>服务器端将自己的公钥还有一个会话的ID发回给客户端，现在客户端得到了服务器端的公钥</li><li>客户端把自己的公钥（客户端公钥）和会话ID做一个异或运算，得到一个结果，然后把结果用服务器端的公钥加密发给服务器端</li><li>服务器端拿到那串东西后，用自己的私钥（服务器端私钥）解密得到那个结果，然后再和会话ID做异或运算，这样服务器端也得到了客户端的公钥</li></ol><h2 id="SSL简介"><a href="#SSL简介" class="headerlink" title="SSL简介"></a>SSL简介</h2><h3 id="SSL和TLS："><a href="#SSL和TLS：" class="headerlink" title="SSL和TLS："></a>SSL和TLS：</h3><p>SSL (Secure Sockets Layer）安全套接层。是由Netscape公司于1990年开发，用于保障Word Wide Web（WWW）通讯的安全。主要任务是提供私密性，信息完整性和身份认证。1994年改版为SSLv2,1995年改版为SSLv3.</p><p>TLS(Transport Layer Security）安全传输层协议）用于在两个通信应用程序之间提供保密性和数据完整性。该标准协议是由IETF于1999年颁布，整体来说TLS非常类似SSLv3，只是对SSLv3做了些增加和修改。</p><p>SSL是一个不依赖于平台和运用程序的协议，<strong>位于TCP/IP协议与各种应用层协议之间</strong>，为数据通信提高安全支持。</p><h3 id="SSL协议的三个特性"><a href="#SSL协议的三个特性" class="headerlink" title="SSL协议的三个特性"></a>SSL协议的三个特性</h3><p>① 保密：在握手协议中定义了会话密钥后，所有的消息都被加密。</p><p>② 鉴别：可选的客户端认证，和强制的服务器端认证。</p><p>③ 完整性：传送的消息包括消息完整性检查（使用MAC）。</p><h3 id="SSL协议结构"><a href="#SSL协议结构" class="headerlink" title="SSL协议结构"></a>SSL协议结构</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ssl%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84.png" alt></p><p>SSL的体系结构中包含两个协议子层，其中底层是SSL记录协议层（SSL Record Protocol Layer）；高层是SSL握手协议层（SSL HandShake Protocol Layer）。</p><p>SSL协议主要分为两层：</p><ol><li><p>SSL记录协议层的作用是为高层协议提供基本的安全服务。SSL纪录协议针对HTTP协议进行了特别的设计，使得超文本的传输协议HTTP能够在SSL运行。纪录封装各种高层协议，具体实施压缩解压缩、加密解密、计算和校验MAC等与安全有关的操作。</p></li><li><p>SSL握手协议层包括SSL握手协议（SSL HandShake Protocol）、SSL密码参数修改协议（SSL Change Cipher Spec Protocol）和SSL告警协议（SSL Alert Protocol）。握手层的这些协议用于SSL管理信息的交换，允许应用协议传送数据之间相互验证，协商加密算法和生成密钥等。</p></li></ol><p>SSL握手协议的作用是协调客户和服务器的状态，使双方能够达到状态的同步。</p><p>其中最重要的是记录协议和握手协议：</p><ol><li>SSL记录协议：它建立在可靠的传输（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能。</li><li>SSL握手协议：它建立在SSL记录协议之上，用于在实际的数据传输开始之前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</li></ol><h3 id="SSL原理"><a href="#SSL原理" class="headerlink" title="SSL原理"></a>SSL原理</h3><h4 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a>握手协议</h4><p>握手协议是客户机和服务器用SSL连接通信时使用的第一个子协议，握手协议包括客户机与服务器之间的一系列消息。SSL中最复杂的协议就是握手协议。该协议允许服务器和客户机相互验证，协商加密和MAC算法以及保密密钥，用来保护在SSL记录中发送的数据。握手协议是在应用程序的数据传输之前使用的。</p><h4 id="记录协议"><a href="#记录协议" class="headerlink" title="记录协议"></a>记录协议</h4><p>记录协议在客户机和服务器握手成功后使用，即客户机和服务器鉴别对方和确定安全信息交换使用的算法后，进入SSL记录协议，记录协议向SSL连接提供两个服务：</p><p>　　（1）保密性：使用握手协议定义的秘密密钥实现</p><p>　　（2）完整性：握手协议定义了MAC，用于保证消息完整性</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ssl%E8%AE%B0%E5%BD%95%E5%8D%8F%E8%AE%AE.png" alt></p><h4 id="警报协议"><a href="#警报协议" class="headerlink" title="警报协议"></a>警报协议</h4><p>客户机和服务器发现错误时，向对方发送一个警报消息。如果是致命错误，则算法立即关闭SSL连接，双方还会先删除相关的会话号，秘密和密钥。每个警报消息共2个字节，第1个字节表示错误类型，如果是警报，则值为1，如果是致命错误，则值为2；第2个字节制定实际错误类型。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>SSL中，使用握手协议<strong>协商加密和MAC算法以及保密密钥</strong> ，使用握手协议<strong>对交换的数据进行加密和签名</strong>，使用警报协议定义数据传输过程中，出现问题如何去解决。</p><h2 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h2><p>SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在<strong>应用层</strong>基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。简单来说ssh是一种加密的用于远程登录的协议。</p><h2 id="基于口令的远程登录"><a href="#基于口令的远程登录" class="headerlink" title="基于口令的远程登录"></a>基于口令的远程登录</h2><p>利用ssh远程登录，一般有两种方式，一种是需要密码的，一种是不需要输入密码的</p><h3 id="需要密码的ssh远程登录"><a href="#需要密码的ssh远程登录" class="headerlink" title="需要密码的ssh远程登录"></a>需要密码的ssh远程登录</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ssh%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95.png" alt></p><p>如上图所示，客户端想登录到服务器端怎么办呢</p><ol><li>先做一个公钥交换，具体过程像上面那样</li><li>不是需要输入密码吗，那我就先把密码用服务器端的公钥加密一波在发出去给服务器端</li><li>服务器端得到加密后的密码后用自己的私钥（服务器私钥）解密一波就知道是不是正确了，然后密码正不正确得搞个反馈回去，这个反馈呢服务器端用客户端的公钥加密一波，再发回去给客户端</li><li>客户端拿到这个加密后的反馈，就直接用自己的私钥（客户端私钥）解密一下就完事</li></ol><h3 id="ssh的免密登录"><a href="#ssh的免密登录" class="headerlink" title="ssh的免密登录"></a>ssh的免密登录</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95.jpg" alt></p><ol><li>首先不必做公钥交换了，在登录请求之前我需要将客户端的公钥发给服务器端</li><li>现在客户端发起一个登录请求</li><li>服务器端怎么做呢，先随机生成一串东西，然后用客户端的公钥进行加密，发给客户端</li><li>客户端拿到这串解密后的东西后用自己的私钥（客户端私钥）解密一下，如无意外，会得到原来的字符串，然后再把这个解密后的字符串发给服务器端</li><li>服务器端拿到这串字符串后和自己之前生成的字符串比对一下，看是不是一样，一样的话就是自己人了，把登录反馈回去</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
            <tag> http </tag>
            
            <tag> ssl </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AMQP协议</title>
      <link href="2020/12/22/web/amqp/"/>
      <url>2020/12/22/web/amqp/</url>
      
        <content type="html"><![CDATA[<h2 id="AMQP协议中的各个概念和组件"><a href="#AMQP协议中的各个概念和组件" class="headerlink" title="AMQP协议中的各个概念和组件"></a>AMQP协议中的各个概念和组件</h2><p>AMQP所覆盖的内容包含了<strong>网络协议</strong>以及<strong>服务端服务</strong>：</p><ol><li>一套被称作”高级消息队列协议模型（AMQ Model）“的消息能力定义。该模型涵盖了Broker服务中用于路由和存储消息的组件，以及把这些组件连在一起的规则。</li><li>一个网络层协议AMQP。能够让客户端程序与实现了AMQ Model的服务端进行通信。</li></ol><p>AMQP像是一个把东西连在一起的语言，而不是一个系统。其设计目标是：<strong>让服务端可通过协议编程</strong>。理解了AMQP的这个设计目标，也就能够理解其协议的设计思路了。</p><p>AMQP协议是一个二进制协议，具有一些现代特性：多通道（multi-channel），可协商（negotiated），异步、安全、便携、语言中立、高效的。其协议主要分成两层：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/AMQP%E5%8D%8F%E8%AE%AE.jpg" alt></p><p>功能层（Functional Layer）：定义了一系列的命令</p><p>传输层（Transport Layer）：携带了从应用 → 服务端的方法，用于处理多路复用、分帧、编码、心跳、data-representation、错误处理</p><p>这样分层之后，可以把传输层替换为其它传输协议，而不需要修改功能层。同样，也可以使用同样的传输层，基于此实现不同的上层协议。可能RabbitMQ也是因为类似的原因，能够比较容易的支持MQTT、STOMP等协议的吧。</p><p>转载整理：<a href="https://zhuanlan.zhihu.com/p/147675691" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/147675691</a> | <a href="https://blog.csdn.net/weixin_37641832/article/details/83270778" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37641832/article/details/83270778</a></p><blockquote><p>Broker: 接收和分发消息的应用，RabbitMQ Server就是Message Broker。</p><p>Virtual host: 出于多租户和安全因素设计的，把AMQP的基本组件划分到一个虚拟的分组中，类似于网络中的namespace概念。当多个不同的用户使用同一个RabbitMQ server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange／queue等。</p><p>Connection: publisher／consumer和broker之间的TCP连接。断开连接的操作只会在client端进行，Broker不会断开连接，除非出现网络故障或broker服务出现问题。</p><p>Channel: 如果每一次访问RabbitMQ都建立一个Connection，在消息量大的时候建立TCP Connection的开销将是巨大的，效率也较低。Channel是在connection内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的channel进行通讯，AMQP method包含了channel id帮助客户端和message broker识别channel，所以channel之间是完全隔离的。Channel作为轻量级的Connection极大减少了操作系统建立TCP connection的开销。</p></blockquote><h2 id="AMQ-Model"><a href="#AMQ-Model" class="headerlink" title="AMQ Model"></a>AMQ Model</h2><p>主要包含了三个主要的组件：</p><ol><li>Exchange: message到达broker的第一站，根据分发规则，匹配查询表中的routing key，分发消息到queue中去。常用的类型有：direct（point-to-point）, topic（publish-subscribe） and fanout（multicast）。</li><li>Queue: 消息最终被送到这里等待consumer取走。一个message可以被同时拷贝到多个queue中。</li><li>Binding: exchange和queue之间的虚拟连接，binding中可以包含routing key。Binding信息被保存到exchange中的查询表中，用于message的分发依据。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/AMQ%20Model.png" alt></p><p>生产者发送消息到broker server（RabbitMQ）。在Broker内部，用户创建Exchange／Queue，通过Binding规则将两者联系在一起。Exchange分发消息，根据类型／binding的不同分发策略有区别。消息最后来到Queue中，等待消费者取走。</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li><p>发布者、交换机、队列、消费者都可以有多个。同时因为 AMQP 是一个网络协议，所以这个过程中的发布者，消费者，消息代理 可以分别存在于不同的设备上。</p></li><li><p>发布者发布消息时可以给消息指定各种消息属性（Message Meta-data）。有些属性有可能会被消息代理（Brokers）使用，然而其他的属性则是完全不透明的，它们只能被接收消息的应用所使用。</p></li><li><p>从安全角度考虑，网络是不可靠的，又或是消费者在处理消息的过程中意外挂掉，这样没有处理成功的消息就会丢失。基于此原因，AMQP 模块包含了一个消息确认（Message Acknowledgements）机制：当一个消息从队列中投递给消费者后，不会立即从队列中删除，直到它收到来自消费者的确认回执（Acknowledgement）后，才完全从队列中删除。</p></li><li><p>在某些情况下，例如当一个消息无法被成功路由时（无法从交换机分发到队列），消息或许会被返回给发布者并被丢弃。或者，如果消息代理执行了延期操作，消息会被放入一个所谓的死信队列中。此时，消息发布者可以选择某些参数来处理这些特殊情况。</p></li></ol><h2 id="Exchange模式"><a href="#Exchange模式" class="headerlink" title="Exchange模式"></a>Exchange模式</h2><h3 id="direct模式"><a href="#direct模式" class="headerlink" title="direct模式"></a>direct模式</h3><p>直连型交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应绑定键的队列。直连交换机用来处理消息的单播路由（unicast routing）（尽管它也可以处理多播路由）。下边介绍它是如何工作的：</p><p>1）将一个队列绑定到某个交换机上时，赋予该绑定一个绑定键（Binding Key），假设为KEY；</p><p>2）当一个携带着路由键（Routing Key）为KEY的消息被发送给直连交换机时，交换机会把它路由给绑定键为KEY的队列。</p><p><strong>需要routingKey，不需要Exchange与Queue绑定，直接根据routingKey发送</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/direct%E6%A8%A1%E5%BC%8F.png" alt></p><blockquote><p>直连交换机的队列通常是循环分发任务给多个消费者（我们称之为轮询）。比如说有3个消费者，4个任务。分别分发每个消费者一个任务后，第4个任务又分发给了第一个消费者。综上，我们很容易得出一个结论，在 AMQP 0-9-1 中，消息的负载均衡是发生在消费者（consumer）之间的，而不是队列（queue）之间。</p></blockquote><h3 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h3><p>广播发送，<strong>不需要routingKey，需要Exchange与Queue绑定</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/Fanout.png" alt></p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>前面提到的 direct 规则是严格意义上的匹配，换言之 Routing Key 必须与 Binding Key 相匹配的时候才将消息传送给 Queue。</p><p>而Topic 的路由规则是一种模糊匹配，可以通过通配符满足一部分规则就可以传送。</p><p>它的约定是：</p><p>1）binding key 中可以存在两种特殊字符 <code>*</code> 与 <code>#</code>，用于做模糊匹配，其中 <code>*</code> 用于匹配一个单词，<code>#</code> 用于匹配多个单词（可以是零个）</p><p>2）routing key 为一个句点号 <code>.</code> 分隔的字符串（我们将被句点号 <code>.</code> 分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”<br>binding key 与 routing key 一样也是句点号 <code>.</code> 分隔的字符串</p><p><strong>需要routingKey，也需要绑定Queue，根据绑定的routingkey来发送</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/topic%E6%A8%A1%E5%BC%8F.png" alt></p><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>headers 类型的 Exchange 不依赖于 routing key 与 binding key 的匹配规则来路由消息，而是根据发送的消息内容中的 headers 属性进行匹配。</p><p>头交换机可以视为直连交换机的另一种表现形式。但直连交换机的路由键必须是一个字符串，而头属性值则没有这个约束，它们甚至可以是整数或者哈希值（字典）等。灵活性更强（但实际上我们很少用到头交换机）。工作流程：</p><p>1）绑定一个队列到头交换机上时，会同时绑定多个用于匹配的头（header）。<br>2）传来的消息会携带header，以及会有一个 “x-match” 参数。当 “x-match” 设置为 “any” 时，消息头的任意一个值被匹配就可以满足条件，而当 “x-match” 设置为 “all” 的时候，就需要消息头的所有值都匹配成功。</p><h3 id="Exchange小结"><a href="#Exchange小结" class="headerlink" title="Exchange小结"></a>Exchange小结</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B0%8F%E7%BB%93.png" alt></p><h2 id="AMQP消息格式"><a href="#AMQP消息格式" class="headerlink" title="AMQP消息格式"></a>AMQP消息格式</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/AMQP%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST和RESTful设计风格</title>
      <link href="2020/12/21/web/rest/"/>
      <url>2020/12/21/web/rest/</url>
      
        <content type="html"><![CDATA[<h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST – REpresentational State Transfer</p><p>首先，之所以晦涩是因为前面主语被去掉了，全称是 Resource Representational State Transfer：通俗来讲就是：资源在网络中以某种表现形式进行状态转移。</p><p>参考链接：<a href="https://www.zhihu.com/question/28557115/answer/48094438" target="_blank" rel="noopener">https://www.zhihu.com/question/28557115/answer/48094438</a></p><p>分解开来：</p><ol><li>Resource：资源，即数据；</li></ol><p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。资源总要通过某种载体反应其内容，文本可以用txt格式表现，也可以用HTML格式、XML格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现；JSON是现在最常用的资源表示格式。</p><p>结合我的开发实践，我对资源和数据理解如下：</p><p>资源是以json（或其他Representation）为载体的、面向用户的一组数据集，资源对信息的表达倾向于概念模型中的数据：</p><blockquote><p>资源总是以某种Representation为载体显示的，即序列化的信息</p><p>常用的Representation是json（推荐）或者xml（不推荐）等</p><p>Represntation 是REST架构的表现层</p></blockquote><p>Web是什么: 分布式信息系统为超文本文件和其他对象（ 资源 ）提供访问入口;</p><p>资源是Web架构的关键点,需要 3个操作 识别（identify） 表示（represent）交互（interact with）,通过这三个操作，又引出三个概念uri（统一资源标识符包括url和urn）识别资源；representation （例如html，xml，图片，视频等等）表示资源；通过协议（包括http，ftp等等）与资源进行交互。</p><ol start="2"><li><p>Representational：某种表现形式，比如用JSON，XML，JPEG等；</p></li><li><p>State Transfer：状态变化。通过HTTP动词实现。</p></li></ol><p>所以REST就是选择通过使用http协议和uri，<strong>用URL定位资源，用HTTP描述操作</strong>，利用client/server model对资源进行CRUD（ Create / Read / Update / Delete ）增删改查操作。</p><h2 id="REST重点的概念"><a href="#REST重点的概念" class="headerlink" title="REST重点的概念"></a>REST重点的概念</h2><h3 id="REST-是面向资源的"><a href="#REST-是面向资源的" class="headerlink" title="REST 是面向资源的"></a>REST 是面向资源的</h3><p>这个概念非常重要，而资源是通过 URI 进行暴露。<br>URI 的设计只要负责把资源通过合理方式暴露出来就可以了。对资源的操作与它无关，操作是通过 HTTP动词来体现，所以REST 通过 URI 暴露资源时，会强调不要在 URI 中出现动词。</p><p>比如：左边是错误的设计，而右边是正确的</p><pre><code>GET /rest/api/getDogs --&gt; GET /rest/api/dogs 获取所有小狗狗 GET /rest/api/addDogs --&gt; POST /rest/api/dogs 添加一个小狗狗 GET /rest/api/editDogs/:dog_id --&gt; PUT /rest/api/dogs/:dog_id 修改一个小狗狗 GET /rest/api/deleteDogs/:dog_id --&gt; DELETE /rest/api/dogs/:dog_id 删除一个小狗狗 </code></pre><p>左边的这种设计，很明显不符合REST风格，上面已经说了，URI 只负责准确无误的暴露资源，而 getDogs/addDogs … 已经包含了对资源的操作，这是不对的。相反右边却满足了，它的操作是使用标准的HTTP动词来体现。</p><h3 id="REST很好地利用了HTTP本身就有的一些特征，如HTTP动词、HTTP状态码、HTTP报头等等"><a href="#REST很好地利用了HTTP本身就有的一些特征，如HTTP动词、HTTP状态码、HTTP报头等等" class="headerlink" title="REST很好地利用了HTTP本身就有的一些特征，如HTTP动词、HTTP状态码、HTTP报头等等"></a>REST很好地利用了HTTP本身就有的一些特征，如HTTP动词、HTTP状态码、HTTP报头等等</h3><p>REST API 是基于 HTTP的，所以你的API应该去使用 HTTP的一些标准。这样所有的HTTP客户端（如浏览器）才能够直接理解你的API（当然还有其他好处，如利于缓存等等）。REST 实际上也非常强调应该利用好 HTTP本来就有的特征，而不是只把 HTTP当成一个传输层这么简单了。</p><p>HTTP动词：</p><pre><code>GET     获取一个资源 POST    添加一个资源 PUT     修改一个资源 DELETE  删除一个资源 </code></pre><p>HTTP状态码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">200</span> OK <span class="token number">400</span> Bad Request <span class="token number">500</span> Internal Server Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 APP 与 API 的交互当中，其结果无非就上边三种状态。</p><p>HTTP报头：</p><pre><code>Authorization 认证报头 一般是 Bearer + tokenCache-Control 缓存报头 Cnotent-Type  消息体类型报头 ......</code></pre><p>报头还有很多，不一一列举。HTTP报头是描述HTTP请求或响应的元数据，它的作用是客户端 与 服务器端进行相互通信时，告诉对方应该如何处理本次请求。</p><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>可以用一个URI（Uniform Resource Identifier，统一资源定位符）指向资源，即每个URI都对应一个特定的资源。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或识别符。一般的，每个资源至少有一个URI与之对应，最典型的URI即URL。</p><h3 id="REST是无状态的"><a href="#REST是无状态的" class="headerlink" title="REST是无状态的"></a>REST是无状态的</h3><p>从客户端的每个请求要包含服务器所需要的所有信息，一次调用一般就会返回结果，不存在类似于“打开连接-访问数据-关闭连接”这种依赖于上一次调用的情况。</p><p>所谓无状态的，即所有的资源，都可以通过URI定位，而且这个定位与其他资源无关，也不会因为其他资源的变化而改变。有状态和无状态的区别，举个简单的例子说明一下。如查询员工的工资，如果查询工资是需要登录系统，进入查询工资的页面，执行相关操作后，获取工资的多少，则这种情况是有状态的，因为查询工资的每一步操作都依赖于前一步操作，只要前置操作不成功，后续操作就无法执行；如果输入一个 url 即可得到指定员工的工资，则这种情况是无状态的，因为获取工资不依赖于其他资源或状态，且这种情况下，员工工资是一个资源，由一个url与之对应，可以通过HTTP中的GET方法得到资源，这是典型的RESTful风格。</p><h3 id="ROA、SOA、REST与RPC"><a href="#ROA、SOA、REST与RPC" class="headerlink" title="ROA、SOA、REST与RPC"></a>ROA、SOA、REST与RPC</h3><p>ROA即Resource Oriented Architecture，RESTful 架构风格的服务是围绕资源展开的，是典型的ROA架构（虽然“A”和“架构”存在重复，但说无妨），虽然ROA与SOA并不冲突，甚至把ROA看做SOA的一种也未尝不可，但由于RPC也是SOA，比较久远一点点论文、博客或图书也常把SOA与RPC混在一起讨论，因此，RESTful 架构风格的服务通常被称之为ROA架构，很少提及SOA架构，以便更加显式的与RPC区分。</p><p>RPC风格曾是Web Service的主流，最初是基于XML-RPC协议（一个远程过程调用（remote procedure call，RPC)的分布式计算协议），后来渐渐被SOAP协议（简单对象访问协议（Simple Object Access Protocol））取代；RPC风格的服务，不仅可以用HTTP，还可以用TCP或其他通信协议。<strong>但RPC风格的服务，受开发服务采用语言的束缚比较大</strong>，如.NET框架中，开发web service的传统方式是使用WCF，基于WCF开发的服务即RPC风格的服务，使用该服务的客户端通常要用C#来实现，如果使用python或其他语言，很难实现可以直接与服务通信客户端；进入移动互联网时代后，RPC风格的服务很难在移动终端使用，而RESTful风格的服务，由于可以直接以json或xml为载体承载数据，以HTTP方法为统一接口完成数据操作，客户端的开发不依赖于服务实现的技术，移动终端也可以轻松使用服务，这也加剧了REST取代RPC成为web service的主导。</p><p>RPC与RESTful的区别如下面两个图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/RPC.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/RESTful.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debug流程</title>
      <link href="2020/12/19/project/debug/"/>
      <url>2020/12/19/project/debug/</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>首先就是仔细看反馈表中的问题，有些报回来的bug是没问题的，只是测试那边不了解业务流程，这种说明一下情况基本就解决了；</li><li>然后就是真的有问题的bug，先进行bug复现，先看看本地服务器会不会有这bug，如果本地服务器也报这个bug，那就是确实又问题了，这样就开始debug。如果本地服务器没问题，额这种情况就要远程连接医院那边的电脑进行bug排查。</li><li>先看报错的语句，复制到源码看看能不能找到，如果不能找到的话可能是前端的问题，报的前端的错误，也可能是本地服务器的权限中心字段名没对应上，也就是权限中心没配置好，这时就要找对应的负责人沟通了；如果能源码找到跑错的语句才开始真正的bug排查。</li><li>开始bug排查，f12打开浏览器控制台，复现bug查看控制台信息看是调用了哪个接口，再看消毒供应室的源码找到对应的rest，再找service，mapper，一步一步深入看看是那个部分哪里出错了。</li><li>如果按4这样粗略地排查看不出来的话就要看日志了，连接上本地服务器，命令行输入  tail  -300f   log日志文件  ，然后复现报bug的操作，拿到日志信息看具体是哪里有问题了，然后用swagger或者postman发送信息在本地环境debug一步一步排查，这种这么仔细一般都能解决大部分bug了。</li></ol><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>比如我遇到了一个事务无限回滚的问题，这就的的确确是个大问题，先在本地环境尝试着能不能复现，在谷歌浏览器中按F12，查看回滚那一个操作到底干了些啥</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/debug-1.jpg" alt></p><blockquote><p>比如上图url为：<code>http://10.0.1.117:10079/ssd/v1.0/flow/sterilize/batch/qt</code></p><p><code>http://10.0.1.117:10079</code> 是服务器，本地就是localhost</p><p><code>/ssd/v1.0</code> 是项目路径（server.context-path）。<br>如果server.context-path没有配，请求的url地址就是 <code>localhost : port/flow/function</code>；<br>如果server.context-path = “/ssd/v1.0”, 请求的url地址就是 <code>localhost : port/ssd/v1.0/flow/function</code></p><p><code>/flow/sterilize/batch/qt</code> 才是我们在源码要找的部分</p></blockquote><p>然后就去源码rest里找啦，一步一步找到rest.java文件，例如：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/debug-2.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/debug-3.jpg" alt></p><p>如果找的过程中卡住了或者找不到的话就直接<strong>快捷键 ctrl + shift + r 全局搜索</strong>。</p><p>找到@RequestMapping，发现value跟我们要找的url末尾部分完全一致，就是找对地方啦（有些目录要分两三段找，反正就是跟文件夹差不多）</p><p>然后从rest-&gt;service-&gt;mapper的顺序过一过流程看看有没有什么错误，嗯，说实话一般都看不出来，这时候就要靠强大的log日志帮我们精确定位问题所在了。</p><p>一般项目都会有日志导出的文件，用<code>tail -300f “日志文件”</code>找到最近300条日志信息，来看看它到底是哪里出了问题。出问题的日志如下：</p><pre class="line-numbers language-log"><code class="language-log">Creating a new SqlSessionRegistering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@f842db6]JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@7b15ae54] will be managed by Spring==>  Preparing: select a.id as "id", a.define_id as "defineId", a.status as "status", a.dept_id as "deptId", a.name as "name", a.warehouse_status as "warehouseStatus", a.invalid_time as "invalidTime", a.valid_time as "validTime", a.action as "action", c.expected_time as "expectedTime" from t_flow_packet_instacne a left join t_flow_sterilize_batch_instance b on a.id = b.packet_instance_id left join t_flow_sterilize_batch c on b.sterilize_batch_id = c.id where a.delete_flag = 0 and c.expected_time < now() and a.status = ? and a.warehouse_status = ?==> Parameters: 1(String), 1(String)[2020-12-31 10:54:54.499][DEBUG][http-nio-10081-exec-3][10.0.1.117][245bacd8987a4fa383a0ba6ecfb414ec][192.168.8.98][org.springframework.web.client.HttpMessageConverterExtractor..][] "Reading to [cn.wisefly.auth.rpc.bean.AuthCommonResult<java.util.List<cn.wisefly.auth.rpc.bean.TokenDetailBean>>]"[2020-12-31 10:54:54.500][INFO ][http-nio-10081-exec-3][10.0.1.117][245bacd8987a4fa383a0ba6ecfb414ec][192.168.8.98][cn.wisefly.ssd.core.busi.RestAuthorizationBusi.checkAuthorization.68][checkAuthorization] "intercepter current thread:27,http-nio-10081-exec-3"Creating a new SqlSessionSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@43c921b8] was not registered for synchronization because synchronization is not active[2020-12-31 10:54:54.500][DEBUG][http-nio-10081-exec-3][10.0.1.117][245bacd8987a4fa383a0ba6ecfb414ec][192.168.8.98][org.springframework.jdbc.datasource.DataSourceUtils..][] "Fetching JDBC Connection from DataSource"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlSession was not registered for synchronization because synchronization is not active就是事务回滚的log日志，很显然，出问题的sql语句就是这段话前一个sql了。</p><p>竟然都找到出问题的sql语句了，就去数据库调试sql了，这个栗子为什么会无限回滚是<strong>因为一个实例对应多条数据</strong>，而读每个实例对应的数据时都只读一条，而且还是最老的数据，因为有定时过期灭菌检测，最老的数据不管怎么操作都是过期的，所以才出现无限回滚的情况。</p><p>解决方法是我们去读取最新的数据。原本sql语句为：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">as</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>define_id <span class="token keyword">as</span> <span class="token string">"defineId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token keyword">as</span> <span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>dept_id <span class="token keyword">as</span> <span class="token string">"deptId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token keyword">as</span> <span class="token string">"warehouseStatus"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>invalid_time <span class="token keyword">as</span> <span class="token string">"invalidTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>valid_time <span class="token keyword">as</span> <span class="token string">"validTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">action</span> <span class="token keyword">as</span> <span class="token string">"action"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>expected_time <span class="token keyword">as</span> <span class="token string">"expectedTime"</span> <span class="token keyword">from</span> t_flow_packet_instacne <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>packet_instance_id <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>expected_time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token operator">=</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改了下，加了个where判断：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">as</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>define_id <span class="token keyword">as</span> <span class="token string">"defineId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token keyword">as</span> <span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>dept_id <span class="token keyword">as</span> <span class="token string">"deptId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token keyword">as</span> <span class="token string">"warehouseStatus"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>invalid_time <span class="token keyword">as</span> <span class="token string">"invalidTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>valid_time <span class="token keyword">as</span> <span class="token string">"validTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">action</span> <span class="token keyword">as</span> <span class="token string">"action"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>expected_time <span class="token keyword">as</span> <span class="token string">"expectedTime"</span> <span class="token keyword">from</span> t_flow_packet_instacne <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>packet_instance_id <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>expected_time <span class="token operator">&lt;</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>last_time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>last_time<span class="token punctuation">)</span> <span class="token keyword">from</span> t_flow_packet_instacne <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>packet_instance_id <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是<strong>让它选择查找最新的数据</strong>。</p><p>就这样这个结合业务的bug就解决了！！！只是改了下sql语句而已，主要是定位问题，所以定位bug需要花些功夫。我还走了一边debug的流程，加断点，一步一步看参数，结果根本发现不了问题，因为我那时定位的地方不对，走了好几遍debug都没看出啥问题，结果原来是定时任务检测回滚了数据。</p><h2 id="栗子后续"><a href="#栗子后续" class="headerlink" title="栗子后续"></a>栗子后续</h2><p>处理完上一个bug后，走测试时发现了一个新bug，就是更新数据同一个实例会更新出多条数据展示出来，这也是一个实例对应多条数据的问题，然后我去看数据库实例所对应的表的时候发现<strong>实例都是唯一</strong>的，说明问题还是出现在一对多的问题上。</p><p>Bug：更新实例时会刷新出该实例对应的多条数据。</p><p>目标：我们想让实例展示唯一一条数据，而且还是最新的一条数据。</p><p>跟上一个栗子操作差不多，先去F12看后台到底调用了哪个接口</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/debug-4.jpg" alt></p><p>然后找到对应的rest：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/debug-5.jpg" alt></p><p>对应的接口代码：</p><p>rest层（FlowStorageRest）</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/s"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ResponsePacket<span class="token operator">&lt;</span>PageResponseData<span class="token operator">&lt;</span>TFlowPacketInstance<span class="token operator">>></span> <span class="token function">list</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Page page <span class="token operator">=</span> PageUtils<span class="token punctuation">.</span><span class="token function">packagingPage</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Condition</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"_sort"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"_order"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      condition<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"_sort"</span><span class="token punctuation">,</span> <span class="token string">"a.create_time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      condition<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"_order"</span><span class="token punctuation">,</span> <span class="token string">"desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> warehouseStatuses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//hbt reset</span>    warehouseStatuses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>FlowGlobalValueBean<span class="token punctuation">.</span>WarehouseStatus<span class="token punctuation">.</span>PUBLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>    warehouseStatuses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>FlowGlobalValueBean<span class="token punctuation">.</span>WarehouseStatus<span class="token punctuation">.</span>NO_PUBLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>    warehouseStatuses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>FlowGlobalValueBean<span class="token punctuation">.</span>WarehouseStatus<span class="token punctuation">.</span>SCRAP<span class="token punctuation">)</span><span class="token punctuation">;</span>    warehouseStatuses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>FlowGlobalValueBean<span class="token punctuation">.</span>WarehouseStatus<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    warehouseStatuses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>FlowGlobalValueBean<span class="token punctuation">.</span>WarehouseStatus<span class="token punctuation">.</span>WAIT_STERILIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    condition<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"warehouseStatuses"</span><span class="token punctuation">,</span> warehouseStatuses<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用service层的listFailureTime</span>    page <span class="token operator">=</span> packetInstanceService<span class="token punctuation">.</span><span class="token function">listFailureTime</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> dictData <span class="token operator">=</span> dictService<span class="token punctuation">.</span><span class="token function">loadDict</span><span class="token punctuation">(</span><span class="token string">"ssd_warehouse_status"</span><span class="token punctuation">,</span> <span class="token string">"ssd_packet_status"</span><span class="token punctuation">,</span> <span class="token string">"ssd_warehouse_action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PageResponseData<span class="token operator">&lt;</span>TFlowPacketInstance<span class="token operator">></span> pageResponseData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageResponseData</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> dictData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ResponsePacket<span class="token punctuation">.</span><span class="token function">generateSuccessPacket</span><span class="token punctuation">(</span>pageResponseData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果文件太大太长不好找接口的话，可以选择用idea快捷键ctrl + f快速找到该文件下的接口位置</p></blockquote><p>service层：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> Page <span class="token function">listFailureTime</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> condition<span class="token punctuation">,</span> Page page<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> startIndex <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getStartIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pageSize <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getVolumePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer count <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">countFailureTime</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> null <span class="token operator">||</span> count<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      page<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      page<span class="token punctuation">.</span><span class="token function">setRecords</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用mapper层的listFailureTime</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">listFailureTime</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">setRecords</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> page<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper层：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listFailureTime<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    a.id as "id",    a.define_id as "defineId",    a.packet_data as "packetData",    a.status as "status",    a.dept_id as "deptId",    a.name as "name",    a.warehouse_status as "warehouseStatus",    a.create_user as "createUser",    a.create_time as "createTime",    a.last_user as "lastUser",    a.last_time as "lastTime",    a.delete_flag as "deleteFlag",    a.invalid_time as "invalidTime",    a.valid_time as "validTime",    a.action as "action",    c.expected_time as "expectedTime"    from    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    a    left join t_flow_sterilize_batch_instance b on a.id = b.packet_instance_id    left join t_flow_sterilize_batch c on b.sterilize_batch_id = c.id    where a.delete_flag = 0    group by a.id)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>condition_sql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failureTimeCreateUserFuzzy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> _sort !<span class="token punctuation">=</span>null and _sort !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      order by ${_sort}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_order !<span class="token punctuation">=</span>null and _order !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        ${_order}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是去本地测试数据库环境进行调试，如果不想自己拼接sql的话可以选择从导出的日志文件里边拷贝sql语句，这样就不用自己一段段拼接这么辛苦了。比如下面的sql就是我从日志中直接粘贴出来的：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">as</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>define_id <span class="token keyword">as</span> <span class="token string">"defineId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_data <span class="token keyword">as</span> <span class="token string">"packetData"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token keyword">as</span> <span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>dept_id <span class="token keyword">as</span> <span class="token string">"deptId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token keyword">as</span> <span class="token string">"warehouseStatus"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_user <span class="token keyword">as</span> <span class="token string">"createUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">as</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_user <span class="token keyword">as</span> <span class="token string">"lastUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_time <span class="token keyword">as</span> <span class="token string">"lastTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token keyword">as</span> <span class="token string">"deleteFlag"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>invalid_time <span class="token keyword">as</span> <span class="token string">"invalidTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>valid_time <span class="token keyword">as</span> <span class="token string">"validTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">action</span> <span class="token keyword">as</span> <span class="token string">"action"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>expected_time <span class="token keyword">as</span> <span class="token string">"expectedTime"</span> <span class="token keyword">from</span> t_flow_packet_instacne <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>packet_instance_id <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>define_id<span class="token operator">=</span> <span class="token string">'AF200914R3VGF3'</span><span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里因为实例对应的数据只有id是相同的，其他行大部分都不同，没办法用distinct来去重，就要<strong>用到某一字段的唯一性特点及group by分组</strong>。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 模板</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">[</span>去除重复的字段名列表<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 套模板</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">.</span>expected_time<span class="token punctuation">)</span> <span class="token keyword">from</span> t_flow_packet_instacne <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>packet_instance_id <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面那条sql就是只保留每一个实例最新过期时间</p><p>筛选最新的数据输出（即最大的expected_time）：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">as</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>define_id <span class="token keyword">as</span> <span class="token string">"defineId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>packet_data <span class="token keyword">as</span> <span class="token string">"packetData"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token keyword">as</span> <span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>dept_id <span class="token keyword">as</span> <span class="token string">"deptId"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token keyword">as</span> <span class="token string">"warehouseStatus"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_user <span class="token keyword">as</span> <span class="token string">"createUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">as</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_user <span class="token keyword">as</span> <span class="token string">"lastUser"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>last_time <span class="token keyword">as</span> <span class="token string">"lastTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token keyword">as</span> <span class="token string">"deleteFlag"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>invalid_time <span class="token keyword">as</span> <span class="token string">"invalidTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>valid_time <span class="token keyword">as</span> <span class="token string">"validTime"</span><span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token keyword">action</span> <span class="token keyword">as</span> <span class="token string">"action"</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>expected_time <span class="token keyword">as</span> <span class="token string">"expectedTime"</span> <span class="token keyword">from</span> t_flow_packet_instacne <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>packet_instance_id <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>delete_flag <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>expected_time <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">.</span>expected_time<span class="token punctuation">)</span> <span class="token keyword">from</span> t_flow_packet_instacne <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch_instance <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>packet_instance_id <span class="token keyword">left</span> <span class="token keyword">join</span> t_flow_sterilize_batch <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>sterilize_batch_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>define_id<span class="token operator">=</span> <span class="token string">'AF200914R3VGF3'</span><span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>warehouse_status <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>create_time <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把修改的部分粘贴到mapper里，install，重新发布新jar包就可以了。</p><p>到这就把坑给填了，果然处理了一个bug就会诞生更多的bug。</p><p>附送一张BUG处理流程（Boss画的）：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/debug%E6%B5%81%E7%A8%8B.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC与Druid简单介绍及Druid与MyBatis连接数据库</title>
      <link href="2020/12/19/database/jdbc-druid-mybatis/"/>
      <url>2020/12/19/database/jdbc-druid-mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java程序与数据建立连接，首先要从jdbc说起，然后直接上阿里认为宇宙最好的数据库连接池druid，然后再说上层程序对象与数据源映射关联关系的orm-mybatis。</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC（Java DataBase Connectivity）是Java和数据库（关系型数据库）之间的一个桥梁。</p><ol><li>是一个规范而不是一个实现，能够执行SQL语句。</li><li>它由一组用Java语言编写的类和接口组成，各种不同类型的数据库都有相应的实现。</li><li>它不属于某一个数据库的接口，而是可以用于定义程序与数据库连接规范，通过一整套接口，由各个不同的数据库厂商去完成所对应的实现类，由sun公司提出！ </li></ol><p>转载参考：<a href="https://www.cnblogs.com/knowledgesea/p/11202918.html" target="_blank" rel="noopener">https://www.cnblogs.com/knowledgesea/p/11202918.html</a></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/JDBC.png" alt></p><p>执行sql过程为：<strong>类加载–&gt;获取连接–&gt;书写SQL–&gt;执行语句—&gt;处理结果集</strong>。</p><h3 id="为什么会有连接池的存在？"><a href="#为什么会有连接池的存在？" class="headerlink" title="为什么会有连接池的存在？"></a>为什么会有连接池的存在？</h3><p>因为建立数据库连接是一个非常耗时、耗资源的行为，所以通过连接池预先同数据库建立一些连接，放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完后再放回去，极大的提高了数据库连接的性能问题，节省了资源和时间。</p><h3 id="什么是数据源"><a href="#什么是数据源" class="headerlink" title="什么是数据源"></a>什么是数据源</h3><p>JDBC2.0 提供了javax.sql.DataSource接口，它负责建立与数据库的连接，当在应用程序中访问数据库时，不必编写连接数据库的代码，直接引用DataSource获取数据库的连接对象即可。用于获取操作数据Connection对象。</p><h3 id="数据源与数据库连接池组件"><a href="#数据源与数据库连接池组件" class="headerlink" title="数据源与数据库连接池组件"></a>数据源与数据库连接池组件</h3><p>数据源建立多个数据库连接，这些数据库连接会保存在数据库连接池中，当需要访问数据库时，只需要从数据库连接池中，获取空闲的数据库连接，当程序访问数据库结束时，数据库连接会放回数据库连接池中。</p><p>常用的数据库连接池技术：C3P0、DBCP、Proxool和DruidX（都是在jdbc的规范之上建立完成的）</p><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><p>官方网站文档：<a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D</a></p><p>Druid连接池是阿里巴巴开源的数据库连接池项目。Druid连接池为<strong>监控</strong>而生，内置强大的监控功能，监控特性不影响性能。功能强大，能<strong>防SQL注入</strong>，内置Loging能诊断Hack应用行为。</p><p>Druid不仅仅是一个数据库连接池，它还包含一个ProxyDriver，一系列内置的JDBC组件库，一个SQL Parser。 支持所有JDBC兼容的数据库，包括Oracle、MySQL、Derby、Postgresql、SQL Server、H2等等。</p><p>Druid针对oracle和mysql做了特别优化，比如Oracle的PS Cache内存占用优化，MySql的ping检测优化。Druid提供了MySql、Oracle、Postgresql、SQL-92的SQL的完整支持，这是一个手写的高性能SQL Parser，支持Visitor模式，使得分析SQL的抽象语法树很方便。简单SQL语句用时10微秒以内，复杂SQL用时30微秒。</p><p>通过Druid提供的SQL Parser可以在JDBC层拦截SQL做相应处理，比如说分库分表、审计等。Druid防御SQL注入攻击的WallFilter就是通过Druid的SQL Parser分析语义实现的 。</p><p>具体请看看官方文档。</p><p>推荐文章：简直了！通过源码告诉你阿里的数据库连接池Druid为啥如此牛逼：<a href="https://baijiahao.baidu.com/s?id=1672302434609141405&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1672302434609141405&amp;wfr=spider&amp;for=pc</a></p><p>步骤（由上而下）：</p><ol><li>引入druid依赖</li><li>引入com.microsoft.sqlserver.sqldjbc4依赖（由此依赖可以看出JDBC与druid的关系，druid是基于jdbc规范建立的上层应用）</li><li>写代码</li><li>配置druid的datasource</li><li>建立Connection</li><li>创建Statement或者PreparedStatement接口执行SQL</li><li>处理结果</li><li>释放资源</li></ol><h4 id="execute和executeUpdate的区别"><a href="#execute和executeUpdate的区别" class="headerlink" title="execute和executeUpdate的区别"></a>execute和executeUpdate的区别</h4><p>相同点：二者都能够执行增加、删除、修改等操作。</p><p>不同点：</p><ol><li><p>execute可以执行查询语句，然后通过getResult把结果取出来。executeUpdate不能执行查询语句。</p></li><li><p>execute返回Boolean类型，true表示执行的是查询语句，false表示执行的insert、delete、update等。executeUpdate的返回值是int，表示有多少条数据受到了影响。</p></li></ol><h2 id="使用Druid与MyBatis构建程序与数据库关联关系及数据与程序实体映射"><a href="#使用Druid与MyBatis构建程序与数据库关联关系及数据与程序实体映射" class="headerlink" title="使用Druid与MyBatis构建程序与数据库关联关系及数据与程序实体映射"></a>使用Druid与MyBatis构建程序与数据库关联关系及数据与程序实体映射</h2><p>MyBatis 是支持普通 SQL 查询,存储过程和高级映射的优秀持久层框架。MyBatis 消除 了几乎所有的 JDBC 代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML 或注解用于配置和原始映射,将接口和 Java 的 POJOs （Plain Ordinary Java Object，普通的 Java 对象） 映射成数据库中的记录。</p><p>每个MyBatis应用程序主要都是使用SqlSessionFactory实例的，一个SqlSessionFactory实例可以通过SqlSessionFactoryBuilder获得。SqlSessionFactoryBuilder可以从一个xml配置文件或者一个预定义的配置类的实例获得。 </p><p>用xml文件构建SqlSessionFactory实例是非常简单的事情。推荐在这个配置中使用类路径资源（classpath resource），但你可以使用任何Reader实例，包括用文件路径或 <code>file://</code> 开头的url创建的实例。MyBatis有一个实用类——Resources，它有很多方法，可以方便地从类路径及其它位置加载资源。 </p><p>MyBatis 最强大的特性之一就是它的动态语句功能。如果您以前有使用JDBC或者类似框架的经历，您就会明白把SQL语句条件连接在一起是多么的痛苦，要确保不能忘记空格或者不要在columns列后面省略一个逗号等。动态语句能够完全解决掉这些痛苦。尽管与动态SQL一起工作不是在开一个party，但是MyBatis确实能通过在任何映射SQL语句中。</p><p>具体步骤参考：<a href="https://blog.csdn.net/shenzhenNBA/article/details/80643492?utm_source=blogxgwz8" target="_blank" rel="noopener">https://blog.csdn.net/shenzhenNBA/article/details/80643492?utm_source=blogxgwz8</a></p><p><strong>用 mybatisPlus 实现实体类与数据库表映射关系</strong></p><p>使用mybatisPlus时，会确定实体类和数据的映射关系</p><p>具体的映射方法有两种：</p><ol><li><p>默认：采用驼峰映射规则，例如MyUserTable 对应的数据库表为 my_user_table ;  TEMyUserTable 对应表名为t_e_my_user_table;</p></li><li><p>注解@TableName：在类名上方添加@TableName（”my_user_table”）。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> druid </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的索引总结</title>
      <link href="2020/12/17/database/mysql-index/"/>
      <url>2020/12/17/database/mysql-index/</url>
      
        <content type="html"><![CDATA[<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>转载参考：<a href="https://www.cnblogs.com/jiawen010/p/11805241.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiawen010/p/11805241.html</a></p><p>普通索引（单值索引）没有任何限制。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// 表建好后创建</span><span class="token comment" spellcheck="true">// 格式：create  索引类型  索引名  on  表( 字段 ); 例如：</span><span class="token keyword">create</span>  <span class="token keyword">index</span>  dept_index  <span class="token keyword">on</span>  table_name<span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变表结构</span><span class="token comment" spellcheck="true">// 格式：alter table 表名 索引类型  索引名（字段）; 例如：</span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">index</span> dept_index<span class="token punctuation">(</span>dept<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建表的时候直接指定</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">(</span> ID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token punctuation">(</span>username<span class="token punctuation">(</span>index_length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除索引</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">ON</span> table_name<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建表的时候创建索引"><a href="#创建表的时候创建索引" class="headerlink" title="创建表的时候创建索引"></a>创建表的时候创建索引</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span>  表名<span class="token punctuation">(</span> 属性名 数据类型<span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span> 属性名 数据类型<span class="token punctuation">[</span>完整性约束条件<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 属性名 数据类型  <span class="token punctuation">[</span> <span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT <span class="token operator">|</span> SPATIAL <span class="token punctuation">]</span>  <span class="token keyword">INDEX</span> <span class="token operator">|</span> <span class="token keyword">KEY</span> <span class="token punctuation">[</span> 索引名<span class="token punctuation">]</span>  <span class="token punctuation">(</span> 属性名<span class="token number">1</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ol><li>UNIQUE是可选参数，表示索引为唯一性索引；FULLTEXT是可选参数，表示索引为全文索引；SPATIAL也是可选参数，表示索引为空间索引；</li><li>INDEX和KEY参数用来指定字段为索引的，两者选择其中之一就可以了，作用是一样的；</li><li>“索引名”是可选参数，用来给创建的索引取的新名称；</li><li>“属性名1”参数指定索引对应的字段的名称，该字段必须为前面定义好的字段；</li><li>“长度”是可选参数，其指索引的长度，必须是字符串类型才可以使用；</li><li>“ASC”和”DESC”都是可选参数，”ASC”参数表示升序排列，”DESC”参数表示降序排列。</li></ol><h3 id="改变表结构创建索引"><a href="#改变表结构创建索引" class="headerlink" title="改变表结构创建索引"></a>改变表结构创建索引</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span>  <span class="token keyword">TABLE</span>  表名  <span class="token keyword">ADD</span>   <span class="token punctuation">[</span> <span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT <span class="token operator">|</span> SPATIAL <span class="token punctuation">]</span>   <span class="token keyword">INDEX</span>  索引名（属性名  <span class="token punctuation">[</span> <span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">]</span>  <span class="token punctuation">[</span> <span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span>）<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>跟上边一样结构。</p><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>MySQL数据库索引列的值必须唯一，但<em>允许有空值</em>。如果是组合索引，则列值的组合必须唯一。</p><p>唯一索引保证数据记录的唯一性。</p><p>语法的话把上边的 INDEX 改成 UNIQUE INDEX 就行。</p><h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><p>特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mytable<span class="token punctuation">(</span> ID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="主键与唯一索引的区别"><a href="#主键与唯一索引的区别" class="headerlink" title="主键与唯一索引的区别"></a>主键与唯一索引的区别</h3><ol><li>主键<strong>不允许空值</strong>，唯一索引允许空值</li><li>主键只允许一个，唯一索引允许多个</li><li>InnoDB中，主键产生唯一的聚簇索引，唯一索引产生唯一的非聚簇索引</li></ol><h2 id="组合索引（复合索引）"><a href="#组合索引（复合索引）" class="headerlink" title="组合索引（复合索引）"></a>组合索引（复合索引）</h2><p>如果分别在 username，city，age上建立单列索引，让该表有3个单列索引，查询时和上述的组合索引效率也会大不一样，远远低于我们的组合索引。虽然此时有了三个索引，但MySQL只能用到其中的那个它认为似乎是最有效率的单列索引。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">index</span> username_city_age_index<span class="token punctuation">(</span>username<span class="token punctuation">,</span>city<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建立这样的组合索引，其实是相当于分别建立了下面三组组合MySQL数据库索引：username,city,age | username,city | username 三种。 为什么没有 city，age这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合，并不是只要包含这三列的查询都会用到该组合索引。</p><h2 id="二级索引（辅助索引、非聚簇索引）"><a href="#二级索引（辅助索引、非聚簇索引）" class="headerlink" title="二级索引（辅助索引、非聚簇索引）"></a>二级索引（辅助索引、非聚簇索引）</h2><p>没错，二级索引=辅助索引=非聚簇索引。</p><p>叶子节点中存储主键值，每次查找数据时，根据索引找到叶子节点中的主键值，根据主键值再到聚簇索引中得到完整的一行记录。InnoDB中主键所建立的是聚簇索引，而唯一索引、普通索引、前缀索引等都是二级索引。</p><p>我们日常工作中，根据实际情况自行添加的索引都是辅助索引，辅助索引就是一个为了需找主键索引的二级索引（非聚簇索引），先找到主键索引再通过主键索引找数据。</p><h2 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h2><p>MySQL数据库中innodb存储引擎，B+树索引可以分为聚簇索引（也称聚集索引，clustered index）和辅助索引（有时也称非聚簇索引或二级索引，secondary index，non-clustered index）。这两种索引内部都是B+树。</p><p>聚簇索引具有唯一性，由于聚簇索引是将数据跟索引结构放到一块，因此一个表仅有一个聚簇索引。</p><p>将数据存储与索引放到了一块，找到索引也就找到了数据。</p><p>聚簇索引<strong>并不是一种单独的索引类型，而是一种数据存储方式</strong>。具体细节依赖于其实现方式。</p><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><p>InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，聚簇索引就是按照每张表的主键构造一颗B+树，同时叶子节点中存放的就是整张表的行记录数据，也将聚集索引的叶子节点称为<strong>数据页</strong>。这个特性决定了<strong>索引组织表中数据也是索引的一部分</strong>；</p><p>因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），一般建表会用一个自增主键做聚簇索引，没有的话MySQL会默认创建，但是这个主键如果更改代价较高，故建表时要考虑自增ID不能频繁update这点。</p><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><p>InnoDB使用的是聚簇索引，MyISam使用的是<strong>非聚簇索引</strong>。MyISAM索引文件和数据文件是<strong>分离</strong>的，索引文件仅保存数据记录的地址。</p><p>MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是<strong>数据记录的地址</strong>。</p><p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是<strong>主索引要求key是唯一的，而辅助索引的key可以重复</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/InnoDB-MyISAM.PNG" alt></p><p>MyISAM使用的是非聚簇索引，非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全一致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。表数据存储在独立的地方，这两颗B+树的叶子节点都使用一个地址指向真正的表数据，对于表数据来说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。</p><h2 id="MyISAM和InnoDB的区别"><a href="#MyISAM和InnoDB的区别" class="headerlink" title="MyISAM和InnoDB的区别"></a>MyISAM和InnoDB的区别</h2><p>MyISAM：</p><ol><li>不支持事务，但是每次查询都是<strong>原子</strong>的</li><li>支持表级锁</li><li><strong>存储表的总行数</strong></li><li>一个MyISAM表有三个文件：表结构文件，索引文件，数据文件</li><li>采用非聚簇索引，索引文件的数据域存储指向数据文件的指针。辅索引与主索引基本一致，但是辅索引不保证唯一性</li></ol><p>InnoDB</p><ol><li>支持ACID事务，支持四种隔离级别</li><li>支持行级锁及外键约束，因此可以<strong>支持写并发</strong></li><li>不存储总行数，算行数要全表扫描</li><li>一个InnoDB引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也可能多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G）</li><li>主键索引采用聚簇索引，辅索引的数据域存储主键的值；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</li></ol><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>通过建立倒排索引，可以极大的提升检索效率，解决判断字段是否包含的问题，是目前搜索引擎使用的一种关键技术。可以通过ALTER TABLE table_name ADD FULLTEXT（column）；创建全文索引</p><p>目前比较鸡肋，用es来实现会比较好</p><h2 id="覆盖索引（using-index）"><a href="#覆盖索引（using-index）" class="headerlink" title="覆盖索引（using index）"></a>覆盖索引（using index）</h2><p>有下面两种理解：</p><ol><li><p>就是select的<strong>数据列只用从索引中就能够取得</strong>，<strong>不必从数据表中读取</strong>，换句话说查询列要被所使用的索引覆盖。</p></li><li><p>是非聚集组合索引的一种形式，它包括在查询里的Select、Join和Where子句用到的所有列（即建立索引的字段正好是覆盖查询语句[select子句]与查询条件[Where子句]中所涉及的字段，也即，索引包含了查询正在查找的所有数据）。</p></li></ol><p>不是所有类型的索引都可以成为覆盖索引。覆盖索引必须要存储索引的列，而哈希索引、空间索引和全文索引等都不存储索引列的值，所以MySQL<strong>只能使用B-Tree索引做覆盖索引</strong>。</p><p>当发起一个被索引覆盖的查询时，在EXPLAIN的Extra列可以看到“Using index”的信息：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95.png" alt></p><p>从执行结果上看，这个SQL语句只通过索引，就取到了所需要的数据，这个过程就叫做索引覆盖。</p><p>只扫描索引而无需回表的优点：</p><ol><li>索引条目通常远小于数据行大小，只需要读取索引，则mysql会极大地减少数据访问量</li><li>因为索引是按照列值顺序存储的，所以对于IO密集的范围查找会比随机从磁盘读取每一行数据的IO少很多</li><li>一些存储引擎如myisam在内存中只缓存索引，数据则依赖于操作系统来缓存，因此要访问数据需要一次系统调用</li><li>innodb的聚簇索引，覆盖索引对innodb表特别有用。<strong>innodb的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询</strong></li></ol><blockquote><p>SELECT * 杜绝了覆盖索引的可能性：</p><p>如果用户使用<code>select *</code>，获取了不需要的数据，则首先通过辅助索引过滤数据，<strong>然后再通过聚集索引获取所有的列</strong>，这就多了一次b+树查询，速度必然会慢很多。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> index </tag>
            
            <tag> mysql </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="2020/12/17/java/design-pattern-chain-of-responsibility/"/>
      <url>2020/12/17/java/design-pattern-chain-of-responsibility/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在计算机软硬件中也有相关例子，如总线网中数据报传送，每台计算机根据目标地址是否同自己的地址相同来决定是否接收；<br>还有异常处理中，处理程序根据异常的类型决定自己是否处理该异常；还有 Struts2 的<em>拦截器</em>、JSP 和 Servlet 的 <em>Filter</em> 等，所有这些，都可以考虑使用责任链模式来实现。</p><p>转载参考：<a href="http://c.biancheng.net/view/1383.html" target="_blank" rel="noopener">http://c.biancheng.net/view/1383.html</a></p><p>责任链（Chain of Responsibility）模式的定义：为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；<br>当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p><p>在责任链模式中，客户只需要将请求发送到责任链上即可，无须关心请求的处理细节和请求的传递过程，请求会自动进行传递。所以<strong>责任链将请求的发送者和请求的处理者解耦</strong>了。</p><p>责任链模式是一种对象行为型模式，其主要优点如下。</p><ol><li>降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。</li><li>增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。</li><li>增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。</li><li>责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。</li><li>责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</li></ol><p>主要缺点如下。</p><ol><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li></ol><h2 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h2><p>通常情况下，可以通过数据链表来实现职责链模式的数据结构。</p><p>职责链模式主要包含以下角色。</p><ol><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li><li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li></ol><p>责任链模式的本质是解耦请求与处理，让请求在处理链中能进行传递与被处理；理解责任链模式应当理解其模式，而不是其具体实现。责任链模式的独到之处是将其节点处理者组合成了链式结构，并允许节点自身决定是否进行请求处理或转发，相当于让请求流动起来。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/chain-of-responsibility-framework.gif" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/chain-of-responsibility.gif" alt></p><h2 id="模式的实现"><a href="#模式的实现" class="headerlink" title="模式的实现"></a>模式的实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> chainOfResponsibility<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainOfResponsibilityPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//组装责任链</span>        Handler handler1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Handler handler2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler1<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>handler2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交请求</span>        handler1<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象处理者角色</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Handler next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Handler next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Handler <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理请求的方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体处理者角色1</span><span class="token keyword">class</span> <span class="token class-name">ConcreteHandler1</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体处理者1负责处理该请求！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有人处理该请求！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体处理者角色2</span><span class="token keyword">class</span> <span class="token class-name">ConcreteHandler2</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体处理者2负责处理该请求！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有人处理该请求！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行结果:具体处理者2负责处理该请求！</p><p>在上面代码中，我们把消息硬编码为 String 类型，而在真实业务中，消息是具备多样性的，可以是 int、String 或者自定义类型。因此，在上面代码的基础上，可以对消息类型进行抽象 Request，增强了消息的兼容性。</p><h2 id="模式的应用实例"><a href="#模式的应用实例" class="headerlink" title="模式的应用实例"></a>模式的应用实例</h2><p>分析：假如规定学生请假小于或等于 2 天，班主任可以批准；小于或等于 7 天，系主任可以批准；小于或等于 10 天，院长可以批准；其他情况不予批准；这个实例适合使用职责链模式实现。</p><p>首先，定义一个领导类（Leader），它是抽象处理者，包含了一个指向下一位领导的指针 next 和一个处理假条的抽象处理方法<code>handleRequest (int LeaveDays)</code> ；然后，定义班主任类（ClassAdviser）、系主任类（DepartmentHead）和院长类（Dean），它们是抽象处理者的子类，是具体处理者，必须根据自己的权力去实现父类的 <code>handleRequest (int LeaveDays)</code>方法，如果无权处理就将假条交给下一位具体处理者，直到最后；客户类负责创建处理链，并将假条交给链头的具体处理者（班主任）。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/chain-of-responsibility-instance.gif" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> chainOfResponsibility<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaveApprovalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//组装责任链</span>        Leader teacher1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassAdviser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Leader teacher2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepartmentHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Leader teacher3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Leader teacher4=new DeanOfStudies();</span>        teacher1<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>teacher2<span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher2<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>teacher3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//teacher3.setNext(teacher4);</span>        <span class="token comment" spellcheck="true">//提交请求</span>        teacher1<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象处理者：领导类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Leader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Leader next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Leader next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Leader <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理请求的方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> LeaveDays<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体处理者1：班主任类</span><span class="token keyword">class</span> <span class="token class-name">ClassAdviser</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> LeaveDays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LeaveDays <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班主任批准您请假"</span> <span class="token operator">+</span> LeaveDays <span class="token operator">+</span> <span class="token string">"天。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>LeaveDays<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请假天数太多，没有人批准该假条！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体处理者2：系主任类</span><span class="token keyword">class</span> <span class="token class-name">DepartmentHead</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> LeaveDays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LeaveDays <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系主任批准您请假"</span> <span class="token operator">+</span> LeaveDays <span class="token operator">+</span> <span class="token string">"天。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>LeaveDays<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请假天数太多，没有人批准该假条！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体处理者3：院长类</span><span class="token keyword">class</span> <span class="token class-name">Dean</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> LeaveDays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LeaveDays <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"院长批准您请假"</span> <span class="token operator">+</span> LeaveDays <span class="token operator">+</span> <span class="token string">"天。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>LeaveDays<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请假天数太多，没有人批准该假条！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体处理者4：教务处长类</span><span class="token keyword">class</span> <span class="token class-name">DeanOfStudies</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> LeaveDays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LeaveDays <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"教务处长批准您请假"</span> <span class="token operator">+</span> LeaveDays <span class="token operator">+</span> <span class="token string">"天。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>LeaveDays<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请假天数太多，没有人批准该假条！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行结果如下：院长批准您请假8天。</p><p>责任链模式通常在以下几种情况使用。</p><ol><li>多个对象可以处理一个请求，但具体由哪个对象处理该请求在运行时自动确定。</li><li>可动态指定一组对象处理请求，或添加新的处理者。</li><li>需要在不明确指定请求处理者的情况下，向多个处理者中的一个提交请求。</li></ol><h2 id="职责链模式存在以下两种情况"><a href="#职责链模式存在以下两种情况" class="headerlink" title="职责链模式存在以下两种情况"></a>职责链模式存在以下两种情况</h2><ol><li>纯的职责链模式：一个请求必须被某一个处理者对象所接收，且一个具体处理者对某个请求的处理只能采用以下两种行为之一：自己处理（承担责任）；把责任推给下家处理。</li><li>不纯的职责链模式：允许出现某一个具体处理者对象在承担了请求的一部分责任后又将剩余的责任传给下家的情况，且一个请求可以最终不被任何接收端对象所接收。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validationQuery检查语句</title>
      <link href="2020/12/16/database/database-validationquery/"/>
      <url>2020/12/16/database/database-validationquery/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>validationQuery是<strong>Druid用来测试连接是否可用</strong>的SQL语句，这个查询语句必须是至少返回一条结果的SELECT语句。</p><p>每种数据库都有各自的验证语句，下表中从网上收集了几种常见数据库的validationQuery。</p><p>转载参考：<a href="https://www.jianshu.com/p/c9845884d735" target="_blank" rel="noopener">https://www.jianshu.com/p/c9845884d735</a></p><div class="table-box"><table><thead><tr><th>数据库</th><th>validationQuery</th></tr></thead><tbody><tr><td><font color="red">Oracle</font></td><td><font color="red">select 1 from dual</font></td></tr><tr><td><font color="red">MySQL</font></td><td><font color="red">select 1</font></td></tr><tr><td>Microsoft SQL Server</td><td>select 1</td></tr><tr><td>DB2</td><td>select 1 from sysibm.sysdummy1</td></tr><tr><td>SQLite</td><td>select 1</td></tr><tr><td>HSQLDB</td><td>select 1 from INFORMATION_SCHEMA.SYSTEM_USERS</td></tr><tr><td>postgresql</td><td>select version()</td></tr><tr><td>ingres</td><td>select 1</td></tr><tr><td>Apache Derby</td><td>select 1</td></tr><tr><td>H2</td><td>select 1</td></tr><tr><td>Informix</td><td>select count(*) from systables</td></tr></tbody></table></div><h2 id="validationQuery什么时候会起作用？"><a href="#validationQuery什么时候会起作用？" class="headerlink" title="validationQuery什么时候会起作用？"></a>validationQuery什么时候会起作用？</h2><p>当Druid遇到testWhileIdle，testOnBorrow，testOnReturn时，就会验证连接的有效性，验证规则如下：<br>如果有相关数据库的ValidConnectionChecker，则使用ValidConnectionChecker验证（Druid提供常用数据库的ValidConnectionChecker，包括MSSQLValidConnectionChecker，MySqlValidConnectionChecker，OracleValidConnectionChecker，PGValidConnectionChecker）；</p><p>如果没有ValidConnectionChecker，则直接使用validationQuery验证；</p><h2 id="ValidConnectionChecker是如何验证的？"><a href="#ValidConnectionChecker是如何验证的？" class="headerlink" title="ValidConnectionChecker是如何验证的？"></a>ValidConnectionChecker是如何验证的？</h2><p>MySqlValidConnectionChecker会使用Mysql独有的ping方式进行验证，其他数据库其实也都是使用validationQuery进行验证</p><p>MySqlValidConnectionChecker验证方式：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidConnection</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span> String validateQuery<span class="token punctuation">,</span> <span class="token keyword">int</span> validationQueryTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//Mysql使用com.mysql.jdbc.MySQLConnection的pingInternal方法进行验证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>usePingMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token keyword">instanceof</span> <span class="token class-name">DruidPooledConnection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DruidPooledConnection<span class="token punctuation">)</span> conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token keyword">instanceof</span> <span class="token class-name">ConnectionProxy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ConnectionProxy<span class="token punctuation">)</span> conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>validationQueryTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    validationQueryTimeout <span class="token operator">=</span> DEFAULT_VALIDATION_QUERY_TIMEOUT<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ping<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> validationQueryTimeout <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Throwable cause <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">SQLException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token punctuation">(</span>SQLException<span class="token punctuation">)</span> cause<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        String query <span class="token operator">=</span> validateQuery<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validateQuery <span class="token operator">==</span> null <span class="token operator">||</span> validateQuery<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            query <span class="token operator">=</span> DEFAULT_VALIDATION_QUERY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>validationQueryTimeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">setQueryTimeout</span><span class="token punctuation">(</span>validationQueryTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OracleValidConnectionChecker的验证方式：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidConnection</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">,</span> String validateQuery<span class="token punctuation">,</span> <span class="token keyword">int</span> validationQueryTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validateQuery <span class="token operator">==</span> null <span class="token operator">||</span> validateQuery<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            validateQuery <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultValidateQuery<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token keyword">instanceof</span> <span class="token class-name">DruidPooledConnection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DruidPooledConnection<span class="token punctuation">)</span> conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token keyword">instanceof</span> <span class="token class-name">ConnectionProxy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ConnectionProxy<span class="token punctuation">)</span> conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>validateQuery <span class="token operator">==</span> null <span class="token operator">||</span> validateQuery<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> queryTimeout <span class="token operator">=</span> validationQueryTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> timeout <span class="token operator">:</span> validationQueryTimeout<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setQueryTimeout</span><span class="token punctuation">(</span>queryTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>validateQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlServer的验证方式：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidConnection</span><span class="token punctuation">(</span><span class="token keyword">final</span> Connection c<span class="token punctuation">,</span> String validateQuery<span class="token punctuation">,</span> <span class="token keyword">int</span> validationQueryTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            stmt <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>validationQueryTimeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">setQueryTimeout</span><span class="token punctuation">(</span>validationQueryTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>validateQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>不同数据库的默认值不同；</p><p>如果是Mysql数据库，则validationQuery不会起作用，Mysql会使用ping的方式验证；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> druid </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="2020/12/15/database/sql-injection-attack/"/>
      <url>2020/12/15/database/sql-injection-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SQL注入是比较常见的网络攻击方式之一，它不是利用操作系统的BUG来实现攻击，而是针对程序员编写时的疏忽，通过SQL语句，实现无账号登录，甚至篡改数据库，本文参考网上资料整理。</p><h2 id="如何防御SQL注入"><a href="#如何防御SQL注入" class="headerlink" title="如何防御SQL注入"></a>如何防御SQL注入</h2><p>「外部数据不可信任」的原则，纵观Web安全领域的各种攻击方式，大多数都是因为开发者违反了这个原则而导致的，所以自然能想到的，就是从变量的检测、过滤、验证下手，确保变量是开发者所预想的。</p><ol><li><p>检查变量数据类型和格式：只要是有固定格式的变量，在SQL语句执行前，应该严格按照固定格式去检查，确保变量是我们预想的格式，这样很大程度上可以避免SQL注入攻击。</p></li><li><p>过滤特殊符号：对于无法确定固定格式的变量，一定要进行特殊符号过滤或转义处理。</p></li><li><p>绑定变量，使用预编译语句：MySQL的mysqli驱动提供了预编译语句的支持。实际上，绑定变量使用预编译语句是预防SQL注入的最佳方式，使用预编译的SQL语句语义不会发生改变，在SQL语句中，变量用问号?表示，黑客即使本事再大，也无法改变SQL语句的结构。</p></li></ol><h3 id="为什么预编译（PrepareStatement）可以防止sql注入"><a href="#为什么预编译（PrepareStatement）可以防止sql注入" class="headerlink" title="为什么预编译（PrepareStatement）可以防止sql注入"></a>为什么预编译（PrepareStatement）可以防止sql注入</h3><p>原理是采用了预编译的方法，先将SQL语句中可被客户端控制的参数集进行编译，生成对应的临时变量集，再使用对应的设置方法，为临时变量集里面的元素进行赋值，赋值函数setString()，会对传入的参数进行强制类型检查和安全检查，所以就避免了SQL注入的产生。下面具体分析。</p><p>Statement之所以会被sql注入是因为SQL语句结构发生了变化。比如：</p><pre class="line-numbers language-sql"><code class="language-sql">SQL <span class="token operator">=</span> “<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> ‘” <span class="token operator">+</span> userName <span class="token operator">+</span> “’<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>pw <span class="token operator">=</span> ‘”<span class="token operator">+</span> passWord <span class="token operator">+</span>”’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token comment" spellcheck="true">//如果恶意填入</span>userName <span class="token operator">=</span> “<span class="token number">1</span>’ <span class="token operator">OR</span> ‘<span class="token number">1</span>’<span class="token operator">=</span>’<span class="token number">1</span>”<span class="token punctuation">;</span>passWord <span class="token operator">=</span> “<span class="token number">1</span>’ <span class="token operator">OR</span> ‘<span class="token number">1</span>’<span class="token operator">=</span>’<span class="token number">1</span>”<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将变成</span>SQL <span class="token operator">=</span> “<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> ‘<span class="token number">1</span>’ <span class="token operator">OR</span> ‘<span class="token number">1</span>’<span class="token operator">=</span>’<span class="token number">1</span>’<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>pw <span class="token operator">=</span> ‘<span class="token number">1</span>’ <span class="token operator">OR</span> ‘<span class="token number">1</span>’<span class="token operator">=</span>’<span class="token number">1</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>”<span class="token comment" spellcheck="true">//相当于</span>SQL <span class="token operator">=</span> “<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users<span class="token punctuation">;</span>”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而Preparement样式为</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> userName<span class="token operator">=</span>? <span class="token operator">and</span> passWord<span class="token operator">=</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该SQL语句会在得到用户的输入之前先用数据库进行预编译，这样的话不管用户输入什么用户名和密码的判断始终都是并的逻辑关系，防止了SQL注入。</p><p>简单总结，参数化能防注入的原因在于，语句是语句，参数是参数，参数的值并不是语句的一部分，数据库只按语句的语义跑。</p><h2 id="Mybatis-中的-和-使用方法的区别"><a href="#Mybatis-中的-和-使用方法的区别" class="headerlink" title="Mybatis 中的 $ 和 # 使用方法的区别"></a>Mybatis 中的 $ 和 # 使用方法的区别</h2><ol><li><p><code>#{}</code>将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：<code>order by #{id}</code>，如果传入的值是111,那么解析成sql时的值为order by “111”, 如果传入的值是id，则解析成的sql为order by “id”。</p></li><li><p><code>${}</code>将传入的数据直接显示生成在sql中。如：<code>order by ${id}</code>，如果传入的值是111,那么解析成sql时的值为order by 111, 如果传入的值是id，则解析成的sql为order by id。</p></li></ol><p>故<code>#</code>方式能够很大程度防止sql注入，而<code>$</code>方式无法防止Sql注入。<code>$</code>方式一般用于传入数据库对象，例如传入表名。</p><blockquote><p>MyBatis 排序时使用 order by 动态参数时需要注意，用<code>$</code>而不是<code>#</code>，因为用<code>#</code>就成了字符串而不是关键字。</p><p>【结论】在编写MyBatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止SQL注入攻击。</p></blockquote><h2 id="mybatis是如何做到防止sql注入的"><a href="#mybatis是如何做到防止sql注入的" class="headerlink" title="mybatis是如何做到防止sql注入的"></a>mybatis是如何做到防止sql注入的</h2><p>【底层实现原理】在框架底层，是JDBC中的PreparedStatement类在起作用，PreparedStatement是我们很熟悉的Statement的子类，它的对象包含了编译好的SQL语句。这种“准备好”的方式不仅能提高安全性，而且在多次执行同一个SQL时，能够提高效率。原因是SQL已编译好，再次执行时无需再编译。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> mybatis </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JZ59、JZ60逐行打印二叉树</title>
      <link href="2020/12/12/algorithm/jz59-60/"/>
      <url>2020/12/12/algorithm/jz59-60/</url>
      
        <content type="html"><![CDATA[<h2 id="JZ59"><a href="#JZ59" class="headerlink" title="JZ59"></a>JZ59</h2><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p><p>重点是看return是<code>ArrayList&lt;ArrayList&lt;Integer&gt;&gt;</code>就要想到<strong>要用两个栈或队列处理</strong>而不是按照层序遍历只用一个队列实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token operator">></span> <span class="token function">Print</span><span class="token punctuation">(</span>TreeNode pRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重点：创建两个栈交替处理</span>        <span class="token keyword">int</span> layer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>layer <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TreeNode node <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>layer<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TreeNode node <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//因为要反向，所以右儿子先进</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>layer<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JZ60"><a href="#JZ60" class="headerlink" title="JZ60"></a>JZ60</h2><p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token operator">></span> <span class="token function">Print</span><span class="token punctuation">(</span>TreeNode pRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//和jz59一个思路</span>        <span class="token keyword">int</span> layer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>queue2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>layer <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TreeNode node <span class="token operator">=</span> queue1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        queue2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        queue2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>layer<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TreeNode node <span class="token operator">=</span> queue2<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>layer<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 剑指 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="2020/12/11/java/lambda/"/>
      <url>2020/12/11/java/lambda/</url>
      
        <content type="html"><![CDATA[<h2 id="lambda和匿名内部类中变量不能改变"><a href="#lambda和匿名内部类中变量不能改变" class="headerlink" title="lambda和匿名内部类中变量不能改变"></a>lambda和匿名内部类中变量不能改变</h2><p>因为Lambda表达式引用的是值，而不是变量。而Lambda表达式其实就是匿名内部类，所以Lambda 表达式中 variables must be final。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="2020/12/11/database/mybatis/"/>
      <url>2020/12/11/database/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得配置</span>      <span class="token comment" spellcheck="true">//获得statementHandler里面有statement，来处理 </span>      StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> RowBounds<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最终是一个statement进行处理 </span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQuery</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span>&lt;E<span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，<strong>Executor本质上也是个中介</strong>，具体的事情原来是StatementHandler来完成的。在它这里会使用parameterHandler和ResultHandler对象为我们绑定SQL参数和组装最后的结果返回。</p><p>我们先来看看statementHandler接口的定义：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StatementHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取Statement  </span>  Statement <span class="token function">prepare</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> Integer transactionTimeout<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置参数 </span>  <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//批量处理</span>  <span class="token keyword">void</span> <span class="token function">batch</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新处理</span>  <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查找处理 </span>  <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>E<span class="token operator">></span> Cursor<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">queryCursor</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得BoundSql </span>  BoundSql <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得ParameterHandler </span>  ParameterHandler <span class="token function">getParameterHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在MyBatis实现了StatementHandler 的有四个类：</p><ol><li>RoutingStatementHandler，这是一个<strong>封装类</strong>，它不提供具体的实现，只是根据Executor的类型，创建不同的类型StatementHandler。</li><li>SimpleStatementHandler，这个类对应于JDBC的Statement对象，用于没有预编译参数的SQL的运行。</li><li>PreparedStatementHandler 这个用于预编译参数SQL的运行。</li><li>CallableStatementHandler 它将实存储过程的调度。</li></ol><p>在MyBatis中，Configuration对象会采用new RoutingStatementHandler（）来生成StatementHandler对象：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> StatementHandler <span class="token function">newStatementHandler</span><span class="token punctuation">(</span>Executor executor<span class="token punctuation">,</span> MappedStatement mappedStatement<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>    StatementHandler statementHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoutingStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span>StatementHandler<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> statementHandler<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后它会根据Executor的类型去创建对应具体的statementHandler对象（SimpleStatementHandler，PreparedStatementHandler和CallableStatementHandler）。</p><p>源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">RoutingStatementHandler</span><span class="token punctuation">(</span>Executor executor<span class="token punctuation">,</span> MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> STATEMENT<span class="token operator">:</span>        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> PREPARED<span class="token operator">:</span>        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreparedStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> CALLABLE<span class="token operator">:</span>        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallableStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Unknown statement type: "</span> <span class="token operator">+</span> ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用具体statementHandler的方法完成所需要的功能。那么这个具体的statementHandler是保存在RoutingStatementHandler对象的delegate属性的，所以当我们拦截statementHandler的时候就要常常访问它了。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mybatis-statementHandler.png" alt></p><h3 id="获取statement"><a href="#获取statement" class="headerlink" title="获取statement"></a>获取statement</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Statement <span class="token function">prepare</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> Integer transactionTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      statement <span class="token operator">=</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setStatementTimeout</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> transactionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setFetchSize</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> statement<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Error preparing statement.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Statement <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>instantiateStatement是一个抽象方法，那么它就有其实现类。那就是之前说的那几个具体的StatementHandler对象，让我们看看PreparedStatementHandler：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> Statement <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Jdbc3KeyGenerator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> keyColumnNames <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>keyColumnNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> PreparedStatement<span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> keyColumnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResultSet<span class="token punctuation">.</span>CONCUR_READ_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法非常简单，我们可以看到它主要是<strong>根据上下文来预编译SQL</strong>，这时我们还没有设置参数。设置参数的任务是交由statement接口的parameterize方法来实现的。</p><h3 id="parameterize方法"><a href="#parameterize方法" class="headerlink" title="parameterize方法"></a>parameterize方法</h3><p> 上面在prepare方法里面预编译了SQL。那么我们这个时候希望设置参数。在Statement中我们是使用parameterize方法进行设置参数的。让我们看看PreparedStatementHandler中的parameterize方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很显然这里很简单是通过parameterHandler来实现的</p><blockquote><p>内部实现待学习</p></blockquote><h3 id="query-update方法"><a href="#query-update方法" class="headerlink" title="query/update方法"></a>query/update方法</h3><p>我们用了prepare方法预编译了SQL，用了parameterize方法设置参数，那么我们接下来肯定是想执行SQL，而SQL无非是两种：一种是进行查询——query，另外就是更新——update。</p><p>这些方法都很简单，让我们看看PreparedStatementHandler的实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    PreparedStatement ps <span class="token operator">=</span> <span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">getUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object parameterObject <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    KeyGenerator keyGenerator <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    keyGenerator<span class="token punctuation">.</span><span class="token function">processAfter</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    PreparedStatement ps <span class="token operator">=</span> <span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span>&lt;E<span class="token operator">></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> Cursor<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">queryCursor</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    PreparedStatement ps <span class="token operator">=</span> <span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span>&lt;E<span class="token operator">></span> <span class="token function">handleCursorResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到如果是进行update的，它将会<strong>执行生成主键的操作</strong>（插入数据要自动生成主键的时候），然后就返回影响行数。</p><p>如果是进行query的就更加简单了，它就是执行SQL语句，然后讲结果使用resultHandler的handleResultSets去完成我们的结果组装。</p><h3 id="batch方法"><a href="#batch方法" class="headerlink" title="batch方法"></a>batch方法</h3><p>参考parameterHandler的具体实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batch</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    PreparedStatement ps <span class="token operator">=</span> <span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行批量操作。</p><p>当我们需要改变sql的时候，显然我们要在预编译SQL（prepare方法前加入修改的逻辑）。</p><p>当我们需要修改参数的时候我们可以在调用parameterize方法前修改逻辑。或者使用ParameterHandler来改造设置参数。</p><p>我们需要控制组装结果集的时候，也可以在query方法前后加入逻辑，或者使用ResultHandler来改造组装结果。</p><p>懂的这些方法，才能理解我需要拦截什么对象，如何处理插件，这是MyBatis的核心内容。</p><p>转载：<a href="https://www.cnblogs.com/zsg88/p/7566097.html" target="_blank" rel="noopener">https://www.cnblogs.com/zsg88/p/7566097.html</a></p><h2 id="Mybatis的执行器-executor-type"><a href="#Mybatis的执行器-executor-type" class="headerlink" title="Mybatis的执行器 executor-type"></a>Mybatis的执行器 executor-type</h2><p>1.SIMPLE ： 默认执行器， sql 直接执行无额外操作。</p><p>2.REUSE ： 可重用执行器，重用对象是 statement （缓存，即会重用预处理语句）。</p><p>3.BATCH ： 重用预处理语句，并执行批量更新。 insert 、 update 、 delete 方法返回值一直是 -2147482646，不能作为sql执行成功的判断依据。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays</title>
      <link href="2020/12/11/java/arrays/"/>
      <url>2020/12/11/java/arrays/</url>
      
        <content type="html"><![CDATA[<h2 id="Arrays的copyofRange方法"><a href="#Arrays的copyofRange方法" class="headerlink" title="Arrays的copyofRange方法"></a>Arrays的copyofRange方法</h2><p>要使用这个方法，首先要import java.util.Arrays;</p><p>Arrays.copyofRange（T[] original,int from,int to）将一个原始的数组original，从下标from开始复制，复制到上标to，生成一个新的数组。</p><p><em>注意</em>：该方法是 <strong>[ ）区间</strong>。</p><h2 id="Arrays-asList（）方法（-int-gt-list-）"><a href="#Arrays-asList（）方法（-int-gt-list-）" class="headerlink" title="Arrays.asList（）方法（ int[] -&gt; list ）"></a>Arrays.asList（）方法（ int[] -&gt; list ）</h2><p>该方法是将数组转化成List集合的方法。</p><p>（1）该方法适用于对象型数据的数组（ String、Integer… ）</p><p>（2）该方法<strong>不建议</strong>使用于基本数据类型的数组（byte,short,int,long,float,double,boolean）</p><p>（3）该方法将数组与List列表链接起来：当更新其一个时，另一个自动更新</p><p>（4）不支持add（）、remove（）、clear（）等方法</p><h3 id="Arrays-asList（）是个坑"><a href="#Arrays-asList（）是个坑" class="headerlink" title="Arrays.asList（）是个坑"></a>Arrays.asList（）是个坑</h3><p>用此方法得到的List的长度是不可改变的，当你向这个List添加或删除一个元素时（例如 list.add（”d”）;）程序就会抛出异常（java.lang.UnsupportedOperationException）。 </p><p>怎么会这样？只需要看看asList（）方法是怎么实现的就行了：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">asList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你看到这段代码时可能觉得没啥问题啊，不就是返回了一个ArrayList对象吗？问题就出在这里。</p><p>这个ArrayList不是java.util包下的，而是 java.util.Arrays.ArrayList 下的</p><p>它是Arrays类自己定义的一个静态内部类，这个内部类没有实现add（）、remove（）方法，而是直接使用它的父类AbstractList的相应方法。</p><p>而AbstractList中的add（）和remove（）是<strong>直接抛出java.lang.UnsupportedOperationException异常</strong>的！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>如果你的<strong>List只是用来遍历</strong>，就用Arrays.asList（）。</p></li><li><p>如果你的List还要添加或删除元素，还是乖乖地new一个java.util.ArrayList，然后一个一个的添加元素。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> arrays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="2020/12/09/algorithm/sort-algorithms/"/>
      <url>2020/12/09/algorithm/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="picture/sort-algorithms/1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="2020/12/09/java/string/"/>
      <url>2020/12/09/java/string/</url>
      
        <content type="html"><![CDATA[<h2 id="String的valueOf方法-（char-gt-String）"><a href="#String的valueOf方法-（char-gt-String）" class="headerlink" title="String的valueOf方法 （char[] -&gt; String）"></a>String的valueOf方法 （char[] -&gt; String）</h2><ol><li><p><code>String.valueOf(char[] data)</code> : 将 char 数组 data 转换成字符串。</p></li><li><p><code>String.valueOf(char[] data, int offset, int count)</code> : 将 char 数组 data 中 由 <code>data[offset]</code> 开始取 count 个元素转换成字符串。</p></li></ol><h2 id="String的charAt和toCharArray（String-gt-char-）"><a href="#String的charAt和toCharArray（String-gt-char-）" class="headerlink" title="String的charAt和toCharArray（String -&gt; char[]）"></a>String的charAt和toCharArray（String -&gt; char[]）</h2><ol><li><p>使用<code>String.charAt(index)</code>（返回值为char）可以得到String中某一指定位置的char。</p></li><li><p>使用<code>String.toCharArray()</code>（返回值为char[]）可以得到将包含整个String的char数组。从0开始的位置索引来访问string中的任意位置的元素。</p></li></ol><h3 id="Integer的valueOf和parseInt方法（string-gt-int）"><a href="#Integer的valueOf和parseInt方法（string-gt-int）" class="headerlink" title="Integer的valueOf和parseInt方法（string -&gt; int）"></a>Integer的valueOf和parseInt方法（string -&gt; int）</h3><ol><li><p><code>Integer. valueOf()</code>可以将基本类型int转换为包装类型Integer，或者将String转换成Integer，String如果为Null或””都会报错。</p></li><li><p><code>Integer.parseInt()</code>是把（）里的内容转换成Integer。<code>Integer.parseInt(String)</code>遇到一些不能被转换为整型的字符时，会抛出异常。</p></li></ol><h3 id="字符串可以强转ASCII"><a href="#字符串可以强转ASCII" class="headerlink" title="字符串可以强转ASCII"></a>字符串可以强转ASCII</h3><p>数组 char[] 无法强转ASCII，而字符串可以强转ASCII。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//String str = new String(chars);</span>    <span class="token keyword">int</span> ascii <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String的replace和replaceAll方法"><a href="#String的replace和replaceAll方法" class="headerlink" title="String的replace和replaceAll方法"></a>String的replace和replaceAll方法</h2><ol><li><p>replace方法：支持字符和字符串的替换。</p></li><li><p>replaceAll方法：基于正则表达式的字符串替换。</p></li></ol><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>\w 的释义一般都是指包含大、小写字母数字和下划线，相当于<code>[a-zA-Z0-9_]</code>。</p><p>在支持ASCII码的语言中，如JavaScript，“\w”等价于<code>[a-zA-Z0-9_]</code> ；</p><p>在支持Unicode的语言中，如.NET，默认情况下，“\w”除可以匹配<code>[a-zA-Z0-9_]</code>外，还可以匹配一些Unicode字符集，如汉字，全角数字，希腊字母等等。</p><p>几乎所有常见的语言都遵循这样一个规律，只有Java是个例外。在Java中，“\w”的表现是比较奇怪的，Java是支持Unicode的，但Java的正则中的“\w”却是等价于<code>[a-zA-Z0-9_]</code>。</p><h3 id="Java中的"><a href="#Java中的" class="headerlink" title="Java中的\"></a>Java中的\</h3><p>在 Java 中，<code>\\</code> 表示：我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。 </p><p>所以，在其他的语言中（如Perl），一个反斜杠 <code>\</code> 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。</p><p>也可以简单的理解在 Java 的正则表达式中，两个 <code>\\</code> 代表其他语言中的一个 <code>\</code>，这也就是为什么表示一位数字的正则表达式是 <code>\\d</code>，而表示一个普通的反斜杠是 <code>\\\\</code>。</p><blockquote><p>\w 匹配字母或数字或下划线或汉字 等价于 ‘[^A-Za-z0-9_]’。（word）</p><p>\s 匹配任意的空白符（space）</p><p>\d 匹配数字（digit）</p><p>\b 匹配单词的开始或结束</p><p>^ 匹配字符串的开始</p><p>$ 匹配字符串的结束</p><p>. 匹配<em>除换行符</em>以外的任意字符</p><p><code>*</code> 匹配0或多个正好在它之前的那个字符。例如正则表达式 <code>.*</code> 意味着能够匹配任意数量的任何字符。</p><p>? 匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。</p></blockquote><p>中括号<code>[]</code>表示匹配其中任意字符</p><p><code>[]+</code>是匹配紧跟其前面那个字符的 一次或多次</p><p><code>[\w./:]+</code>就是一或多次匹配任何数字,字母,下划线,斜杠,还有英文的句号（一个点）还有冒号，比如<a href="http://arthurjq.com">http://arthurjq.com</a></p><p>最后附上一张图</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/regex.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List</title>
      <link href="2020/12/09/java/list/"/>
      <url>2020/12/09/java/list/</url>
      
        <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList提供了一个将List转为数组的一个非常方便的方法toArray。toArray有两个重载的方法：</p><p>　　（1）list.toArray（）</p><p>　　（2）list.toArray（T[ ] a）</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>对于第一个重载方法，是将list直接转为Object[] 数组；转化的话<strong>只能是取出每一个元素再转化</strong>，像这样：</p><pre class="line-numbers language-java"><code class="language-java">Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String e <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方法是将list<strong>转化为你所需要类型的数组</strong>，当然我们用的时候会转化为与list内容相同的类型。</p><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面是两个重构方法的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.</span><span class="token keyword">public</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.</span><span class="token keyword">public</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span>Object a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>    a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">></span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>当多个线程访问某个方法时，不管你通过怎样的调用方式、或者说这些线程如何交替地执行，我们在主程序中不需要去做任何的同步，这个类的结果行为都是我们设想的正确行为，那么我们就可以说这个类是线程安全的。 </p><p>先来看段代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">threadMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> j <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>毫无疑问，它绝对是线程安全的，我们来分析一下，为什么它是线程安全的？</p><p>我们可以看到这段代码是<strong>没有任何状态</strong>的，就是说我们这段代码，不包含任何的作用域，也没有去引用其他类中的域进行引用，它所执行的作用范围与执行结果只存在它这条线程的局部变量中，并且只能由正在执行的线程进行访问。<strong>当前线程的访问，不会对另一个访问同一个方法的线程造成任何的影响</strong>。</p><p>两个线程同时访问这个方法，因为没有共享的数据，所以他们之间的行为，并不会影响其他线程的操作和结果，所以说无状态的对象，也是线程安全的。</p><h2 id="SynchronizedList"><a href="#SynchronizedList" class="headerlink" title="SynchronizedList"></a>SynchronizedList</h2><p>java.util.Collections.SynchronizedList，它能把所有 List 接口的实现类转换成线程安全的List，比 Vector 有更好的扩展性和兼容性，SynchronizedList的构造方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">;</span><span class="token function">SynchronizedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SynchronizedList的部分方法源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很可惜，它所有方法都是带同步对象锁的，和 Vector 一样，它不是性能最优的。</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>CopyOnWrite（简称：COW）：即复制再写入，就是在添加元素的时候，先把原 List 列表复制一份，再添加新的元素。</p><blockquote><p>java.util.concurrent.CopyOnWriteArrayList<br>java.util.concurrent.CopyOnWriteArraySet</p></blockquote><p>先来看下它的 add 方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加锁</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取原始集合</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复制一个新集合</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 替换原始集合为新集合</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 释放锁</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加元素时，先加锁，再进行<strong>复制替换</strong>操作，最后再释放锁。</p><p>再来看下它的 get 方法源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> E <span class="token function">get</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，获取元素并没有加锁。</p><p>这样做的好处是，在高并发情况下，读取元素时就不用加锁，写数据时才加锁，大大提升了读取性能。</p><h3 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h3><p>CopyOnWriteArraySet逻辑就更简单了，就是使用 CopyOnWriteArrayList 的 addIfAbsent 方法来去重的，添加元素的时候判断对象是否已经存在，不存在才添加进集合。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Appends the element, if not present. * * @param e element to be added to this list, if absent * @return {@code true} if the element was added */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addIfAbsent</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> snapshot <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//indexOf()返回第一个字符为e的下标</span>    <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> snapshot<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> snapshot<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span>        <span class="token function">addIfAbsent</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加锁之后再次判断，以防在这期间有线程执行了写操作     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addIfAbsent</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> current <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> current<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//两次若不一样，说明数组已经改变</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot <span class="token operator">!=</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 找到前后两次数组长度的最小值</span>                <span class="token keyword">int</span> common <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>length<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//先在0-common中比较两个数组，比较有出入的地方，存在e则返回false，再比较common-len，存在e(返回值>=0)则返回false</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> common<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> snapshot<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                          <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> current<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">indexOfRange</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> current<span class="token punctuation">,</span> common<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//老套路，数组拷贝，新数组添加元素，指向array</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种并发集合，虽然牛逼，但只适合于读多写少的情况，<strong>如果写多读少，使用这个就没意义了</strong>，因为每次写操作都要进行集合内存复制，性能开销很大，如果集合较大，很容易造成内存溢出。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> arraylist </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
