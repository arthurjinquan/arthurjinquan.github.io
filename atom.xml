<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锦泉^-^</title>
  
  <subtitle>锦泉的备忘笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arthurjq.com/"/>
  <updated>2022-10-11T13:59:13.793Z</updated>
  <id>https://arthurjq.com/</id>
  
  <author>
    <name>锦泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodejs笔记</title>
    <link href="https://arthurjq.com/2022/10/11/hei-ma-nodejs-xue-xi/"/>
    <id>https://arthurjq.com/2022/10/11/hei-ma-nodejs-xue-xi/</id>
    <published>2022-10-11T13:59:10.000Z</published>
    <updated>2022-10-11T13:59:13.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><p>–dirname 表示当前文件所处的目录</p><pre class="line-numbers language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用于从路径字符串中，将文件名解析出来</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法只能用来创建文件，不能用来创建路径重复调用fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>写入同一个文件，新写入的内容会覆盖之前的旧内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取下包的镜像源</span><span class="token function">npm</span> config get registry<span class="token comment" spellcheck="true"># 通过 npm 包管理器，将nrm安装为全局可用的工具</span><span class="token function">npm</span> i nrm -g<span class="token comment" spellcheck="true"># 查看所有可用的镜像源</span>nrm <span class="token function">ls</span><span class="token comment" spellcheck="true"># 将下包的镜像源切换为 taobao 镜像</span>nrm use taobao<span class="token comment" spellcheck="true"># 开发依赖包（记录到devDependencies节点下）</span><span class="token function">npm</span> i 包名 -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><h3 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h3><p>专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。</p><p>格式：function处理函数中，必须有4个形参，顺序从前到后，分别为（err，req，res，next）。</p><p>注意错误级别的中间件，<strong>必须注册在所有路由之后</strong>！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fs&quot;&gt;&lt;a href=&quot;#fs&quot; class=&quot;headerlink&quot; title=&quot;fs&quot;&gt;&lt;/a&gt;fs&lt;/h2&gt;&lt;p&gt;–dirname 表示当前文件所处的目录&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-javascript&quot;
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nodejs" scheme="https://arthurjq.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>PC环境标准化</title>
    <link href="https://arthurjq.com/2022/10/09/pc-biao-zhun-hua/"/>
    <id>https://arthurjq.com/2022/10/09/pc-biao-zhun-hua/</id>
    <published>2022-10-09T11:35:52.000Z</published>
    <updated>2022-10-09T11:36:44.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PC环境标准化流程"><a href="#PC环境标准化流程" class="headerlink" title="PC环境标准化流程"></a>PC环境标准化流程</h2><p>由于window 机器出现性能表现不一致问题，故而做标准化工作</p><p>1、找IT要一下安装盘，window系统是激活的。卸载掉mcafee。<br>2、安装完操作系统后。在这台机器上安装好所有的测试环境，并且测试ok<br>3、 以这机器为模板，做一个镜像。安装其他所有机器。<br>4、后续定期用这个镜像重启window 机器 </p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>所有的想保留在镜像中迁移的软件、文件和配置信息都必须放在C盘中，要不打包GHO镜像时不会包含在内，重装时还要分别重新安装</p><p>GHO镜像选2,3台设备保存以免丢失</p><h2 id="winPushIP脚本及开机启动配置"><a href="#winPushIP脚本及开机启动配置" class="headerlink" title="winPushIP脚本及开机启动配置"></a>winPushIP脚本及开机启动配置</h2><h3 id="winPushIP"><a href="#winPushIP" class="headerlink" title="winPushIP"></a>winPushIP</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">extract_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    st <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>               st<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'10.255.255.255'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        IP <span class="token operator">=</span> st<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        IP <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        st<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> IP<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        hostname <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span>        ip <span class="token operator">=</span> extract_ip<span class="token punctuation">(</span><span class="token punctuation">)</span>        sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>        data <span class="token operator">=</span> hostname <span class="token operator">+</span><span class="token string">'    '</span> <span class="token operator">+</span> ip  <span class="token operator">+</span> <span class="token string">'\n'</span>        sock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"172.21.37.30"</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"172.21.41.103"</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://devicefarm.huya.info/api/v1/ip/report?name=%s&amp;ip=%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以放在C盘的任意地方，记得改下边的bat文件夹中位置就行</p><h3 id="bat文件"><a href="#bat文件" class="headerlink" title="bat文件"></a>bat文件</h3><pre><code>::@echo offif &quot;%1&quot;==&quot;h&quot; goto beginstart mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit:beginC:cd \Users\Administratorpython winPushIP.py</code></pre><p>打开运行输入<code>shell:startup</code>，进入到开机启动文件夹中，把上边的bat文件放入其中就行。</p><p>或者可以进入到<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>中，直接复制此地址到文件搜索框中，（打开c盘中也许你看不到ProgramData文件，直接数据路径就可以到达需要地址），复制bat文件进去，重启计算机，实现开机自启。</p><h2 id="重装完后做三件事"><a href="#重装完后做三件事" class="headerlink" title="重装完后做三件事"></a>重装完后做三件事</h2><h3 id="改hostname"><a href="#改hostname" class="headerlink" title="改hostname"></a>改hostname</h3><p>直接右键我的电脑→属性→重命名改就完事了，改完要重启才会生效</p><h3 id="记录一下跑分"><a href="#记录一下跑分" class="headerlink" title="记录一下跑分"></a>记录一下跑分</h3><pre><code>https://hd.huya.com/appTestPage/performanceTest/index.html  </code></pre><p>打开上边链接跑分</p><h3 id="修改路由，看能否上内网"><a href="#修改路由，看能否上内网" class="headerlink" title="修改路由，看能否上内网"></a>修改路由，看能否上内网</h3><p>测试内网链接可以进入登录界面就是能上内网，不需要配置路由</p><p>或者cmd输入<code>route PRINT</code>看看是否有172.21.13.17的永久路由</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PC环境标准化流程&quot;&gt;&lt;a href=&quot;#PC环境标准化流程&quot; class=&quot;headerlink&quot; title=&quot;PC环境标准化流程&quot;&gt;&lt;/a&gt;PC环境标准化流程&lt;/h2&gt;&lt;p&gt;由于window 机器出现性能表现不一致问题，故而做标准化工作&lt;/p&gt;
&lt;p&gt;1、找
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维开发" scheme="https://arthurjq.com/tags/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>编译安装Python</title>
    <link href="https://arthurjq.com/2022/09/23/bian-yi-an-zhuang-python/"/>
    <id>https://arthurjq.com/2022/09/23/bian-yi-an-zhuang-python/</id>
    <published>2022-09-23T07:48:11.000Z</published>
    <updated>2022-09-23T03:33:36.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载解压python对应版本源码"><a href="#下载解压python对应版本源码" class="headerlink" title="下载解压python对应版本源码"></a>下载解压python对应版本源码</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://www.python.org/ftp/python/3.7.8/Python-3.7.8.tgz<span class="token comment" spellcheck="true"># 解压源码</span><span class="token function">tar</span> -zxvf Python-3.7.8.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="依赖库安装"><a href="#依赖库安装" class="headerlink" title="依赖库安装"></a>依赖库安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Debian依赖库安装</span><span class="token function">sudo</span> apt <span class="token function">install</span> git-core gnupg flex bison gperf build-essential <span class="token function">zip</span> curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip m4 -y<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> --reinstall zlibc zlib1g zlib1g-dev -y<span class="token function">sudo</span> apt <span class="token function">install</span> libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev libtk8.5 libgdm-dev libdb4o-cil-dev libpcap-dev libffi-dev libncursesw5-dev libgdbm-dev tk-dev openssl -y<span class="token comment" spellcheck="true"># Termux ubuntu依赖库安装</span><span class="token function">sudo</span> apt <span class="token function">install</span> git-core gnupg flex bison gperf build-essential <span class="token function">zip</span> curl zlib1g-dev    x11proto-core-dev libx11-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip m4 -y<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> --reinstall zlibc zlib1g zlib1g-dev -y<span class="token function">sudo</span> apt <span class="token function">install</span> libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev libgdm-dev libdb4o-cil-dev libpcap-dev libffi-dev libncursesw5-dev libgdbm-dev tk-dev openssl -y<span class="token comment" spellcheck="true"># CentOS依赖库安装</span>yum -y groupinstall <span class="token string">"Development tools"</span>yum -y <span class="token function">install</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum <span class="token function">install</span> -y libffi-devel zlib1g-devyum <span class="token function">install</span> zlib* -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> Python-3.10.8/<span class="token comment" spellcheck="true"># 使用系统库的ssl更便捷</span><span class="token function">sudo</span> ./configure --prefix<span class="token operator">=</span>/usr/local/python3.7.8 --with-ssl --enable-shared<span class="token comment" spellcheck="true"># 编译安装</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/bin/python3 /usr/bin/python<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/python3 /usr/bin/python3<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/python3 /usr/bin/python<span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/bin/pip3 /usr/bin/pip<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/pip3 /usr/bin/pip3<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/pip3 /usr/bin/pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加-python-库配置信息"><a href="#添加-python-库配置信息" class="headerlink" title="添加 python 库配置信息"></a>添加 python 库配置信息</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/ld.so.conf.d<span class="token function">sudo</span> vim python3.conf<span class="token comment" spellcheck="true"># 加入下边这句</span>/usr/local/python3.7.8/lib/<span class="token comment" spellcheck="true"># 更新一下</span>ldconfig<span class="token comment" spellcheck="true"># 切换源为国内</span>python3 -m pip config <span class="token keyword">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linux下的共享库机制采用了类似于高速缓存的机制，将库信息保存在/etc/ld.so.cache里边，程序连接的时候首先从这个文件里边查找，然后再到ld.so.conf的路径里边去详细找，这就是为什么修改了conf文件要重新运行一下ldconfig的原因。</p><h2 id="找不到lsb-release模块"><a href="#找不到lsb-release模块" class="headerlink" title="找不到lsb_release模块"></a>找不到lsb_release模块</h2><p>报错如下：</p><pre><code>subprocess.CalledProcessError: Command &#39;(&#39;lsb_release&#39;, &#39;-a&#39;)&#39; returned non-zero exit status 1.</code></pre><p>找到lsb_release.py文件和CommandNotFound目录，把它们拷贝到报的错误中subprocess.py所在文件夹</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">find</span> / -name <span class="token string">'lsb_release.py'</span><span class="token function">sudo</span> <span class="token function">cp</span> /usr/lib/python3/dist-packages/lsb_release.py /usr/local/python3.7.8/lib/python3.7/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载解压python对应版本源码&quot;&gt;&lt;a href=&quot;#下载解压python对应版本源码&quot; class=&quot;headerlink&quot; title=&quot;下载解压python对应版本源码&quot;&gt;&lt;/a&gt;下载解压python对应版本源码&lt;/h2&gt;&lt;pre class=&quot;line-
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维开发" scheme="https://arthurjq.com/tags/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>liunx定时任务配置</title>
    <link href="https://arthurjq.com/2022/08/13/crontab/"/>
    <id>https://arthurjq.com/2022/08/13/crontab/</id>
    <published>2022-08-13T10:48:11.000Z</published>
    <updated>2022-10-07T09:08:56.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 定时任务配置</span><span class="token function">sudo</span> <span class="token function">crontab</span> -e<span class="token comment" spellcheck="true"># 发现不用restart，编辑完后自动生效</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">cron</span> restart<span class="token comment" spellcheck="true"># 看是否生效，推荐用下一种</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">cron</span> status<span class="token comment" spellcheck="true"># 看是否生效</span><span class="token function">tail</span> -f /var/log/syslog<span class="token comment" spellcheck="true"># 设定时区</span><span class="token function">sudo</span> timedatectl set-timezone <span class="token string">"Asia/Shanghai"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cron配置"><a href="#cron配置" class="headerlink" title="cron配置"></a>cron配置</h2><pre class="line-numbers language-bash"><code class="language-bash">PATH<span class="token operator">=</span>/home/huya/.local/bin:~/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/binCRON_TZ<span class="token operator">=</span>Asia/Shanghai<span class="token comment" spellcheck="true"># ios清后台脚本定时命令</span>*/5 12,13 * * * /usr/bin/python3 /home/huya/devicefarm/ios_killall.py  <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># adr清后台脚本定时命令</span>*/5 12,13 * * * /usr/bin/python3 /home/huya/devicefarm/and_killall.py  <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bas
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>adb</title>
    <link href="https://arthurjq.com/2022/08/10/adb/"/>
    <id>https://arthurjq.com/2022/08/10/adb/</id>
    <published>2022-08-10T08:01:11.000Z</published>
    <updated>2022-10-07T09:15:07.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>转载：<a href="https://github.com/mzlogin/awesome-adb#%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">https://github.com/mzlogin/awesome-adb#%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 基本语法</span>adb <span class="token punctuation">[</span>-d<span class="token operator">|</span>-e<span class="token operator">|</span>-s <span class="token operator">&lt;</span>serialNumber<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>command<span class="token operator">></span><span class="token comment" spellcheck="true"># 获取serialNumber</span>adb devices       <span class="token comment" spellcheck="true">#state：offline（设备无响应），device（已连接）</span><span class="token comment" spellcheck="true"># 停止 adb server</span>adb kill-server<span class="token comment" spellcheck="true"># 查看 adb 版本</span>adb version<span class="token comment" spellcheck="true"># 指定 adb server 的网络端口</span>adb -P <span class="token operator">&lt;</span>port<span class="token operator">></span> start-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只有一个设备/模拟器连接时，可以省略掉 <code>[-d|-e|-s &lt;serialNumber&gt;]</code></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td></tr><tr><td>-e</td><td>指定当前唯一运行的模拟器为命令目标</td></tr><tr><td><code>-s &lt;serialNumber&gt;</code></td><td>指定相应 serialNumber 号的设备/模拟器为命令目标</td></tr></tbody></table><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><h3 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell pm list packages <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-3<span class="token punctuation">]</span> <span class="token punctuation">[</span>-i<span class="token punctuation">]</span> <span class="token punctuation">[</span>-u<span class="token punctuation">]</span> <span class="token punctuation">[</span>--user USER_ID<span class="token punctuation">]</span> <span class="token punctuation">[</span>FILTER<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>显示列表</th></tr></thead><tbody><tr><td>无</td><td>所有应用</td></tr><tr><td>-f</td><td>显示应用关联的 apk 文件</td></tr><tr><td>-d</td><td>只显示 disabled 的应用</td></tr><tr><td>-e</td><td>只显示 enabled 的应用</td></tr><tr><td>-s</td><td>只显示系统应用</td></tr><tr><td>-3</td><td>只显示第三方应用</td></tr><tr><td>-i</td><td>显示应用的 installer</td></tr><tr><td>-u</td><td>包含已卸载应用</td></tr><tr><td><code>&lt;FILTER&gt;</code></td><td>包名包含 <code>&lt;FILTER&gt;</code> 字符串</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只显示系统应用</span>adb shell pm list packages -s<span class="token comment" spellcheck="true"># 只显示第三方应用</span>adb shell pm list packages -3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><pre class="line-numbers language-bash"><code class="language-bash">adb <span class="token function">install</span> <span class="token punctuation">[</span>-lrtsdg<span class="token punctuation">]</span> <span class="token operator">&lt;</span>path_to_apk<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 /mnt/asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr><tr><td>–abi abi-identifier</td><td>为特定 ABI 强制安装 apk，abi-identifier 可以是 armeabi-v7a、arm64-v8a、v86、x86_64 等</td></tr></tbody></table><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><pre class="line-numbers language-bash"><code class="language-bash">adb uninstall <span class="token punctuation">[</span>-k<span class="token punctuation">]</span> <span class="token operator">&lt;</span>packagename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;packagename&gt;</code> 表示应用的包名，<code>-k</code> 参数可选，表示卸载应用但保留数据和缓存目录。</p><h3 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys activity activities<span class="token operator">|</span><span class="token function">grep</span> mResumedActivity    mResumedActivity: ActivityRecord<span class="token punctuation">{</span>3b0f52a u0 com.sec.android.app.launcher/.activities.LauncherActivity t319<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中的 <code>com.sec.android.app.launcher/.activities.LauncherActivity</code> 就是当前处于前台的 Activity。</p><h3 id="查看正在运行的-Services"><a href="#查看正在运行的-Services" class="headerlink" title="查看正在运行的 Services"></a>查看正在运行的 Services</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys activity services <span class="token punctuation">[</span><span class="token operator">&lt;</span>packagename<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;packagename&gt;</code> 参数不是必须的，指定 <code>&lt;packagename&gt;</code> 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。支持模糊查询。</p><h3 id="查看应用详细信息"><a href="#查看应用详细信息" class="headerlink" title="查看应用详细信息"></a>查看应用详细信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys package <span class="token operator">&lt;</span>packagename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出中包含很多信息，包括 Activity Resolver Table、Registered ContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。</p><p><code>&lt;packagename&gt;</code> 表示应用包名。</p><h3 id="查看应用安装路径"><a href="#查看应用安装路径" class="headerlink" title="查看应用安装路径"></a>查看应用安装路径</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell pm path <span class="token operator">&lt;</span>PACKAGE<span class="token operator">></span><span class="token comment" spellcheck="true"># 例子</span>adb shell pm path com.duowan.kiwipackage:/data/app/com.duowan.kiwi-VE9yzwMQsuqqif2U5u9Hgw<span class="token operator">==</span>/base.apk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="与应用交互"><a href="#与应用交互" class="headerlink" title="与应用交互"></a>与应用交互</h2><p>主要是使用 <code>am &lt;command&gt;</code> 命令</p><table><thead><tr><th>command</th><th>用途</th></tr></thead><tbody><tr><td><code>start [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td></tr><tr><td><code>startservice [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td></tr><tr><td><code>broadcast [options] &lt;INTENT&gt;</code></td><td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td></tr><tr><td><code>force-stop &lt;packagename&gt;</code></td><td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td></tr></tbody></table><p>用于决定 intent 对象的选项如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-a &lt;ACTION&gt;</code></td><td>指定 action，比如 <code>android.intent.action.VIEW</code></td></tr><tr><td><code>-c &lt;CATEGORY&gt;</code></td><td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td></tr><tr><td><code>-n &lt;COMPONENT&gt;</code></td><td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>--esn &lt;EXTRA_KEY&gt;</code></td><td>null 值（只有 key 名）</td></tr><tr><td>`-e</td><td>–es <extra_key> <extra_string_value>`</extra_string_value></extra_key></td></tr><tr><td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td><td>boolean 值</td></tr><tr><td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td><td>integer 值</td></tr><tr><td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td><td>long 值</td></tr><tr><td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td><td>float 值</td></tr><tr><td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td><td>URI</td></tr><tr><td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td><td>component name</td></tr><tr><td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td><td>integer 数组</td></tr><tr><td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td><td>long 数组</td></tr></tbody></table><h3 id="启动应用-调起-Activity"><a href="#启动应用-调起-Activity" class="headerlink" title="启动应用/ 调起 Activity"></a>启动应用/ 调起 Activity</h3><h4 id="指定Activity名称启动"><a href="#指定Activity名称启动" class="headerlink" title="指定Activity名称启动"></a>指定Activity名称启动</h4><pre class="line-numbers language-bash"><code class="language-bash">adb shell am start <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>INTENT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am start -n com.tencent.mm/.ui.LauncherUI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="不指定Activity名称启动（启动主Activity）"><a href="#不指定Activity名称启动（启动主Activity）" class="headerlink" title="不指定Activity名称启动（启动主Activity）"></a>不指定Activity名称启动（启动主Activity）</h4><pre class="line-numbers language-bash"><code class="language-bash">adb shell monkey -p <span class="token operator">&lt;</span>packagename<span class="token operator">></span> -c android.intent.category.LAUNCHER 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell monkey -p com.tencent.mm -c android.intent.category.LAUNCHER 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示调起微信主界面。</p><h3 id="调起-Service"><a href="#调起-Service" class="headerlink" title="调起 Service"></a>调起 Service</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am startservice <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>INTENT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示调起微信的某 Service。</p><h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am broadcast <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>INTENT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>例如，向所有组件广播 <code>BOOT_COMPLETED</code>：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>又例如，只向 <code>org.mazhuang.boottimemeasure/.BootCompletedReceiver</code> 广播 <code>BOOT_COMPLETED</code>：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。</p><h3 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am force-stop <span class="token operator">&lt;</span>packagename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="收紧内存"><a href="#收紧内存" class="headerlink" title="收紧内存"></a>收紧内存</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am send-trim-memory  <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">&lt;</span>level<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pid: 进程 ID level: HIDDEN、RUNNING_MODERATE、BACKGROUND、 RUNNING_LOW、MODERATE、RUNNING_CRITICAL、COMPLETE</p><p>例如</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am send-trim-memory 12345 RUNNING_LOW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示向 pid=12345 的进程，发出 level=RUNNING_LOW 的收紧内存命令。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h3><pre class="line-numbers language-bash"><code class="language-bash">adb pull <span class="token operator">&lt;</span>设备里的文件路径<span class="token operator">></span> <span class="token punctuation">[</span>电脑上的目录<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</p><p>例：</p><pre class="line-numbers language-bash"><code class="language-bash">adb pull /sdcard/sr.mp4 ~/tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>小技巧：</em>设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 <code>adb shell</code> 和 <code>su</code> 命令在 adb shell 里获取 root 权限后，先 <code>cp /path/on/device /sdcard/filename</code> 将文件复制到 sdcard，然后 <code>adb pull /sdcard/filename /path/on/pc</code>。</p><h3 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h3><pre class="line-numbers language-bash"><code class="language-bash">adb push <span class="token operator">&lt;</span>电脑上的文件路径<span class="token operator">></span> <span class="token operator">&lt;</span>设备里的目录<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-bash"><code class="language-bash">adb push ~/sr.mp4 /sdcard/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>小技巧：</em>设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 <code>adb push /path/on/pc /sdcard/filename</code>，然后 <code>adb shell</code> 和 <code>su</code> 在 adb shell 里获取 root 权限后，<code>cp /sdcard/filename /path/on/device</code>。</p><h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><p>在 <code>adb shell</code> 里有个很实用的命令叫 <code>input</code>，<code>input</code> 命令的完整 help 信息如下：</p><pre class="line-numbers language-bash"><code class="language-bash">Usage: input <span class="token punctuation">[</span><span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>The sources are:      mouse      keyboard      joystick      touchnavigation      touchpad      trackball      stylus      dpad      gesture      touchscreen      gamepadThe commands and default sources are:      text <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">(</span>Default: touchscreen<span class="token punctuation">)</span>      keyevent <span class="token punctuation">[</span>--longpress<span class="token punctuation">]</span> <span class="token operator">&lt;</span>key code number or name<span class="token operator">></span> <span class="token punctuation">..</span>. <span class="token punctuation">(</span>Default: keyboard<span class="token punctuation">)</span>      tap <span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">&lt;</span>y<span class="token operator">></span> <span class="token punctuation">(</span>Default: touchscreen<span class="token punctuation">)</span>      swipe <span class="token operator">&lt;</span>x1<span class="token operator">></span> <span class="token operator">&lt;</span>y1<span class="token operator">></span> <span class="token operator">&lt;</span>x2<span class="token operator">></span> <span class="token operator">&lt;</span>y2<span class="token operator">></span> <span class="token punctuation">[</span>duration<span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>Default: touchscreen<span class="token punctuation">)</span>      press <span class="token punctuation">(</span>Default: trackball<span class="token punctuation">)</span>      roll <span class="token operator">&lt;</span>dx<span class="token operator">></span> <span class="token operator">&lt;</span>dy<span class="token operator">></span> <span class="token punctuation">(</span>Default: trackball<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p><h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>adb<span class="token punctuation">]</span> logcat <span class="token punctuation">[</span><span class="token operator">&lt;</span>option<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token punctuation">[</span><span class="token operator">&lt;</span>filter-spec<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用用法列举如下：</p><h4 id="按级别过滤日志"><a href="#按级别过滤日志" class="headerlink" title="按级别过滤日志"></a>按级别过滤日志</h4><p>Android 的日志分为如下几个优先级（priority）：</p><ul><li>V —— Verbose（最低，输出得最多）</li><li>D —— Debug</li><li>I —— Info</li><li>W —— Warning</li><li>E —— Error</li><li>F —— Fatal</li><li>S —— Silent（最高，啥也不输出）</li></ul><p>按某级别过滤日志则会将该级别及以上的日志输出。</p><p>比如，命令：</p><pre><code>adb logcat *:W</code></pre><p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p><p>（<strong>注：</strong> 在 macOS 下需要给 <code>*:W</code> 这样以 <code>*</code> 作为 tag 的参数加双引号，如 <code>adb logcat &quot;*:W&quot;</code>，不然会报错 <code>no matches found: *:W</code>。）</p><h4 id="按-tag-和级别过滤日志"><a href="#按-tag-和级别过滤日志" class="headerlink" title="按 tag 和级别过滤日志"></a>按 tag 和级别过滤日志</h4><p><code>&lt;filter-spec&gt;</code> 可以由多个 <code>&lt;tag&gt;[:priority]</code> 组成。</p><p>比如，命令：</p><pre class="line-numbers language-bash"><code class="language-bash">adb logcat ActivityManager:I MyApp:D *:S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示输出 tag <code>ActivityManager</code> 的 Info 以上级别日志，输出 tag <code>MyApp</code> 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p><h4 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h4><pre class="line-numbers language-bash"><code class="language-bash">adb logcat -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>比如long格式：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token operator">&lt;</span>datetime<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span>:<span class="token operator">&lt;</span>tid<span class="token operator">></span> <span class="token operator">&lt;</span>priority<span class="token operator">></span>/<span class="token operator">&lt;</span>tag<span class="token operator">></span> <span class="token punctuation">]</span><span class="token operator">&lt;</span>message<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span> 07-28 20:16:03.089  1357: 1357 I/WifiConnectivityMonitor <span class="token punctuation">]</span>ACTION_SERVICE_STATE_CHANGED: cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指定格式可与上面的过滤同时使用。比如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb logcat -v long ActivityManager:I *:S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token function">dmesg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.684016<span class="token punctuation">]</span> PM: noirq resume of devices complete after 0.982 msecs<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.685525<span class="token punctuation">]</span> PM: early resume of devices complete after 0.838 msecs<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.753642<span class="token punctuation">]</span> PM: resume of devices complete after 68.106 msecs<span class="token operator">&lt;</span>4<span class="token operator">></span><span class="token punctuation">[</span>14201.755954<span class="token punctuation">]</span> Restarting tasks <span class="token punctuation">..</span>. done.<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.771229<span class="token punctuation">]</span> PM: <span class="token function">suspend</span> <span class="token keyword">exit</span> 2016-08-28 13:31:32.679217193 UTC<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.872373<span class="token punctuation">]</span> PM: <span class="token function">suspend</span> entry 2016-08-28 13:31:32.780363596 UTC<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.872498<span class="token punctuation">]</span> PM: Syncing filesystems <span class="token punctuation">..</span>. done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中括号里的 <code>[14201.684016]</code> 代表内核开始启动后的时间，单位为秒。</p><p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 <code>Freeing init memory</code> 那一行前面的时间就是。</p><h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><h3 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys window displays<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还能看到前后台app的信息</p><h3 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings get secure android_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre><code>2741c803b9501b3a</code></pre><h3 id="Android-系统版本"><a href="#Android-系统版本" class="headerlink" title="Android 系统版本"></a>Android 系统版本</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell getprop ro.build.version.release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash">5.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CPU信息"><a href="#CPU信息" class="headerlink" title="CPU信息"></a>CPU信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token function">cat</span> /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash">Processor    <span class="token keyword">:</span> AArch64 Processor <span class="token function">rev</span> 13 <span class="token punctuation">(</span>aarch64<span class="token punctuation">)</span>processor    <span class="token keyword">:</span> 0BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 1BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 2BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 3BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 4BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13processor    <span class="token keyword">:</span> 5BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13processor    <span class="token keyword">:</span> 6BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13processor    <span class="token keyword">:</span> 7BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13Hardware    <span class="token keyword">:</span> Qualcomm Technologies, Inc SDM845<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是 SM-G9650 的 CPU 信息，我们从输出里可以看到使用的硬件是 <code>Qualcomm Technologies</code>，processor 的编号是 0 到 8，所以它是八核的，采用的架构是 <code>AArch64 Processor rev 13 (aarch64)</code>。</p><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token function">cat</span> /proc/meminfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash">emTotal:        5713076 kBMemFree:          256604 kBMemAvailable:    3030428 kBBuffers:          169656 kBCached:          2573432 kBSwapCached:        62232 kBActive:          2302792 kBInactive:        1728628 kBActive<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:     702956 kBInactive<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:   605688 kBActive<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:    1599836 kBInactive<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:  1122940 kBUnevictable:        9900 kBMlocked:            9900 kBRbinTotal:        593920 kBRbinAlloced:           0 kBRbinPool:              0 kBRbinFree:              0 kBSwapTotal:       2621436 kBSwapFree:        2056556 kBDirty:               160 kBWriteback:             0 kBAnonPages:       1291056 kBMapped:           779792 kBShmem:             17748 kBSlab:             364484 kBSReclaimable:     159248 kBSUnreclaim:       205236 kBKernelStack:       54464 kBPageTables:        96608 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:     5477972 kBCommitted_AS:   116679068 kBVmallocTotal:   263061440 kBVmallocUsed:           0 kBVmallocChunk:          0 kBCmaTotal:         237568 kBCmaFree:           35708 kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>MemTotal</code> 就是设备的总内存，<code>MemFree</code> 是当前空闲内存。</p><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong> 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p><h3 id="关闭USB调试模式"><a href="#关闭USB调试模式" class="headerlink" title="关闭USB调试模式"></a>关闭USB调试模式</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings put global adb_enabled 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恢复：</p><p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p><p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p><h3 id="允许-禁止访问非-SDK-API"><a href="#允许-禁止访问非-SDK-API" class="headerlink" title="允许/禁止访问非 SDK API"></a>允许/禁止访问非 SDK API</h3><p>允许访问非 SDK API：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings put global hidden_api_policy_pre_p_apps 1adb shell settings put global hidden_api_policy_p_apps 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>禁止访问非 SDK API：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings delete global hidden_api_policy_pre_p_appsadb shell settings delete global hidden_api_policy_p_apps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不需要设备获得 Root 权限。</p><p>命令最后的数字的含义：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>禁止检测非 SDK 接口的调用。该情况下，日志记录功能被禁用，并且令 strict mode API，即 detectNonSdkApiUsage() 无效。不推荐。</td></tr><tr><td>1</td><td>仅警告——允许访问所有非 SDK 接口，但保留日志中的警告信息，可继续使用 strick mode API。</td></tr><tr><td>2</td><td>禁止调用深灰名单和黑名单中的接口。</td></tr><tr><td>3</td><td>禁止调用黑名单中的接口，但允许调用深灰名单中的接口。</td></tr></tbody></table><h2 id="通过adb-shell进入安卓shell后如何退出？"><a href="#通过adb-shell进入安卓shell后如何退出？" class="headerlink" title="通过adb shell进入安卓shell后如何退出？"></a>通过adb shell进入安卓shell后如何退出？</h2><p>Ctrl+C无法退出shell；</p><p>直接输入 exit 即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;转载：&lt;a href=&quot;https://github.com/mzlogin/awesome-adb#%E5%91%BD%E
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>tidevice安装与使用</title>
    <link href="https://arthurjq.com/2022/08/08/an-zhuang-tidevice/"/>
    <id>https://arthurjq.com/2022/08/08/an-zhuang-tidevice/</id>
    <published>2022-08-08T02:14:52.000Z</published>
    <updated>2022-10-09T11:41:25.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装tidevice"><a href="#安装tidevice" class="headerlink" title="安装tidevice"></a>安装tidevice</h2><p>看看有没有python3的pip，没有安装一个</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h3><p>apt-get，是一条linux命令，适用于deb包管理式的操作系统（例如Ubuntu系统），主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##更新源文件，并不会做任何安装升级操作</span><span class="token function">apt-get</span> update<span class="token comment" spellcheck="true">##升级所有已安装的包</span><span class="token function">apt-get</span> upgrade<span class="token comment" spellcheck="true">##安装指定的包</span><span class="token function">apt-get</span> <span class="token function">install</span> packagename <span class="token comment" spellcheck="true">##仅升级指定包</span><span class="token function">apt-get</span> <span class="token function">install</span> packagename --only-upgrade<span class="token comment" spellcheck="true">##重新安装包</span><span class="token function">apt-get</span> <span class="token function">install</span> packagename --reinstall<span class="token comment" spellcheck="true">##修复安装</span><span class="token function">apt-get</span> -f <span class="token function">install</span><span class="token comment" spellcheck="true">##安装相关的编译环境</span><span class="token function">apt-get</span> build-dep packagename<span class="token comment" spellcheck="true">##下载该包的源代码</span><span class="token function">apt-get</span> <span class="token function">source</span> packagename<span class="token comment" spellcheck="true">##升级系统</span><span class="token function">apt-get</span> dist-upgrade---------------------------------------------------<span class="token comment" spellcheck="true">##查询指定的包</span>apt-cache search packagename<span class="token comment" spellcheck="true">##显示包的相关信息，如说明、大小、版本等</span>apt-cache show packagename<span class="token comment" spellcheck="true">##了解使用该包依赖那些包</span>apt-cache depends packagename<span class="token comment" spellcheck="true">##查看该包被那些包依赖</span>apt-cache rdepends packagename------------------------------------------------------<span class="token comment" spellcheck="true">##删除包</span><span class="token function">apt-get</span> remove packagename<span class="token comment" spellcheck="true">##删除包，包括删除配置文件等</span><span class="token function">apt-get</span> remove packagename --purge<span class="token comment" spellcheck="true">##删除包及其依赖的软件包+配置文件等（只对6.10有效，推荐使用）</span><span class="token function">apt-get</span> autoremove packagename --purge----------------------------------------------------------<span class="token function">apt-get</span> clean                         <span class="token comment" spellcheck="true">## 清理无用的包 </span><span class="token function">apt-get</span> autoclean                     <span class="token comment" spellcheck="true">## 清理无用的包 </span><span class="token function">apt-get</span> check                         <span class="token comment" spellcheck="true">## 检查是否有损坏的依赖</span>apt-mark hold packagename             <span class="token comment" spellcheck="true">## 将指定的包的版本hold住，这样在更新的时候就会忽略掉这个包</span>apt-mark unhold packagename           <span class="token comment" spellcheck="true">## 取消对这个包版本的锁定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用pip安装tidevice"><a href="#用pip安装tidevice" class="headerlink" title="用pip安装tidevice"></a>用pip安装tidevice</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> tidevice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h3><pre class="line-numbers language-bash"><code class="language-bash">tidevice list<span class="token comment" spellcheck="true">##若手机没连上，杀死占用进程的端口</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> usbmuxd<span class="token function">sudo</span> <span class="token function">kill</span> -9 端口号<span class="token comment" spellcheck="true">##如果提示缺少ffmpeg的话安装一下，没有提示就不安装</span><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> ffmpeg<span class="token comment" spellcheck="true">##测试安装ffmpeg成功没有</span>ffmpeg -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tidevice常用命令"><a href="#tidevice常用命令" class="headerlink" title="tidevice常用命令"></a>tidevice常用命令</h3><pre class="line-numbers language-bash"><code class="language-bash">tidevice list <span class="token comment" spellcheck="true">#查看设备</span>tidevice screenshot screenshot.jpg <span class="token comment" spellcheck="true">#截图</span>tidevice launch 包名 <span class="token comment" spellcheck="true">#启动程序</span>tidevice <span class="token function">kill</span> 包名 <span class="token comment" spellcheck="true">#停止程序</span>tidevice applist <span class="token comment" spellcheck="true">#查看第三方包名</span>tidevice -u <span class="token variable">$UDID</span> xctest -B <span class="token variable">$BUNDLE_ID</span> <span class="token comment" spellcheck="true">#运行WebDriverAgent</span>tidevice <span class="token function">reboot</span> <span class="token comment" spellcheck="true">#重启设备</span>tidevice <span class="token function">install</span> https://…ipa <span class="token comment" spellcheck="true">#远程安装</span>tidevice info <span class="token comment" spellcheck="true">#查看设备信息</span>tidevice -u uuid uninstall 包名 …<span class="token comment" spellcheck="true">#.卸载应用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装tidevice&quot;&gt;&lt;a href=&quot;#安装tidevice&quot; class=&quot;headerlink&quot; title=&quot;安装tidevice&quot;&gt;&lt;/a&gt;安装tidevice&lt;/h2&gt;&lt;p&gt;看看有没有python3的pip，没有安装一个&lt;/p&gt;
&lt;pre class
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://arthurjq.com/2022/07/20/linux/"/>
    <id>https://arthurjq.com/2022/07/20/linux/</id>
    <published>2022-07-20T13:41:27.000Z</published>
    <updated>2022-09-26T08:39:35.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的文件操作指令"><a href="#常用的文件操作指令" class="headerlink" title="常用的文件操作指令"></a>常用的文件操作指令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> --help             <span class="token comment" spellcheck="true"># 查看当前命令下的所有参数用法</span><span class="token function">ls</span> -l                 <span class="token comment" spellcheck="true"># 等于ll</span><span class="token function">ls</span> -al                <span class="token comment" spellcheck="true"># 显示的所有文件与文件夹的详细信息，包括所有被隐藏的文件和文件夹</span><span class="token function">cd</span> <span class="token punctuation">..</span>                 <span class="token comment" spellcheck="true"># 回到上一级</span><span class="token function">cd</span> ~                  <span class="token comment" spellcheck="true"># 回到用户主目录</span><span class="token function">cd</span> ./                 <span class="token comment" spellcheck="true"># 在当前目录下逐级打开下级目录</span><span class="token function">mkdir</span>                 <span class="token comment" spellcheck="true"># 创建文件夹（目录）</span><span class="token function">rm</span>                    <span class="token comment" spellcheck="true"># 删除文件或目录</span><span class="token function">cp</span> 文件名 目标路径      <span class="token comment" spellcheck="true"># 复制文件</span><span class="token function">cp</span> -R 目录名 目标路径   <span class="token comment" spellcheck="true"># 复制文件夹 cp -r /test1/. /test2</span><span class="token function">mv</span> 原文件名 目标文件名  <span class="token comment" spellcheck="true"># 移动文件或文件夹，可以用来重命名</span><span class="token function">touch</span> xxx.txt         <span class="token comment" spellcheck="true"># 更新文件的访问时间戳或者创建一个空文件</span><span class="token function">cat</span>                   <span class="token comment" spellcheck="true"># 查看某个文件的内容</span><span class="token function">nl</span>                    <span class="token comment" spellcheck="true"># 显示时输出行号</span><span class="token function">more</span>                  <span class="token comment" spellcheck="true"># 查看内容，会分页</span><span class="token function">less</span>                  <span class="token comment" spellcheck="true"># 比more好，[pageup] [pagedown]前后翻页</span><span class="token function">chmod</span>                 <span class="token comment" spellcheck="true"># sudo chmod +x run.sh后./run.sh运行脚本</span><span class="token function">chmod</span> u<span class="token operator">=</span>rwx,g<span class="token operator">=</span>rwx,o<span class="token operator">=</span>rwx <span class="token function">file</span> <span class="token operator">=</span> <span class="token function">chmod</span> 777 <span class="token function">file</span> <span class="token operator">=</span> <span class="token function">chmod</span> a<span class="token operator">=</span>rwx <span class="token function">file</span><span class="token function">find</span> 目录 -name 文件名 <span class="token comment" spellcheck="true"># 查找文件</span><span class="token function">which</span>                 <span class="token comment" spellcheck="true"># 寻找“可执行文件”</span><span class="token function">whereis</span> 文件名         <span class="token comment" spellcheck="true"># 由一些特定的目录中寻找文件文件名，比find快</span><span class="token function">vi</span>                    <span class="token comment" spellcheck="true"># 字母i进入编辑模式，esc退出编辑模式，wq是保存修改，q!是强制退出</span><span class="token function">wc</span>                    <span class="token comment" spellcheck="true"># 计算指定文件的行数、字数，以及字节数</span>3 92 598 testfile     <span class="token comment" spellcheck="true"># testfile文件的行数为3、单词数92、字节数598</span><span class="token function">df</span> -h                 <span class="token comment" spellcheck="true"># 列出文件系统的整体磁盘使用量</span><span class="token function">du</span> -sh <span class="token keyword">.</span>              <span class="token comment" spellcheck="true"># 对当前目录下所有的目录和文件的大小进行汇总,-s表示汇总,-h人性化显示</span><span class="token function">du</span> -sh *              <span class="token comment" spellcheck="true"># 对当前目录下每一个目录和文件的大小分别进行汇总</span>sz filename           <span class="token comment" spellcheck="true"># 利用ZModem协议来从Linux服务器传送文件到本地</span><span class="token keyword">echo</span> 参数 <span class="token operator">></span> 输出文件    <span class="token comment" spellcheck="true"># 输出重定向，清空后新增内容</span><span class="token keyword">echo</span> 参数 <span class="token operator">>></span> 输出文件   <span class="token comment" spellcheck="true"># 输出追加重定向，在文件末尾追加字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ifconfig</span>              <span class="token comment" spellcheck="true"># 查看网络接口的状态，ip地址，物理地址等等</span><span class="token function">ping</span>  ip              <span class="token comment" spellcheck="true"># 网络试探</span><span class="token function">netstat</span>               <span class="token comment" spellcheck="true"># 显示当前应用的网络使用情况</span><span class="token function">netstat</span> -an <span class="token operator">|</span> <span class="token function">grep</span> 21 <span class="token comment" spellcheck="true"># 21端口是否已经被占用</span><span class="token function">lsof</span>                  <span class="token comment" spellcheck="true"># 查看某个端口是否被占用 lsof -i:21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="netstat-an"><a href="#netstat-an" class="headerlink" title="netstat -an"></a>netstat -an</h3><p>-a:将目前系统上所有的连接、监听、socket信息都列出来；<br>-t:列出tcp网络封包的信息；<br>-u:列出UDP网络封包的信息；<br>-n:不以进程的服务名，以端口号来显示；<br>-l:列出目前正在网络监听的服务；<br>-p:列出该网络服务的进程ID；</p><p>grep -w（-w用于字符串精确匹配，默认匹配一个单词）例如我想匹配 “like”， 不加 -w 就会匹配到 “liker”， 加 -w 就不会匹配到</p><h2 id="系统操作命令"><a href="#系统操作命令" class="headerlink" title="系统操作命令"></a>系统操作命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">shutdown</span>             <span class="token comment" spellcheck="true"># 关机</span><span class="token function">uname</span>                <span class="token comment" spellcheck="true"># 获取当前系统信息</span><span class="token function">kill</span> -9 进程         <span class="token comment" spellcheck="true"># 杀死进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>-F参数：指定分隔符，可指定一个或多个</p><p>print 后面做字符串的拼接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{pattern + action}'</span> <span class="token punctuation">{</span>filenames<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</span>1.命令行方式<span class="token function">awk</span> <span class="token punctuation">[</span>-F  field-separator<span class="token punctuation">]</span>  <span class="token string">'commands'</span>  input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>其中，commands 是真正awk命令，<span class="token punctuation">[</span>-F域分隔符<span class="token punctuation">]</span>是可选的。 input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> 是待处理的文件。在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。2.shell脚本方式将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。相当于shell脚本首行的：<span class="token comment" spellcheck="true">#!/bin/sh</span>可以换成：<span class="token comment" spellcheck="true">#!/bin/awk</span>3.将所有的awk命令插入一个单独文件，然后调用：<span class="token function">awk</span> -f awk-script-file input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>其中，-f选项加载awk-script-file中的awk脚本，input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>跟上面的是一样的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p> [Page Down]：向下翻页</p><p> [Page Up]：向上翻页</p><p>0或[Home]：移动到这一列的最前面字符处</p><p>$ 或[End]：移动到这一列的最后面字符处</p><p>G：移动到这个文件的最后一列</p><p>/word：向光标之下寻找一个名称为 word 的字串，enter后按n会向下继续搜寻，按N向上搜寻</p><p>dd：删除光标所在的那一整列</p><p>ndd：n 为数字，删除光标所在的向下 n 列</p><p>yy：复制光标所在的那一列</p><p>nyy：n 为数字，复制光标所在的向下 n 列</p><p>p, P：p 为将已复制的数据在光标下一列贴上，P 则 为贴在光标上一列</p><h3 id="vim的全局替换"><a href="#vim的全局替换" class="headerlink" title="vim的全局替换"></a>vim的全局替换</h3><pre class="line-numbers language-bash"><code class="language-bash">:s / old / new / g                    <span class="token comment" spellcheck="true"># 把当前行old的每次出现改为new，而不只是该行的第一个old</span>:1, <span class="token variable">$s</span> / old / new / g                <span class="token comment" spellcheck="true"># 把整个文件中的old的每次出现都改为new</span>:% s / old / new / g                  <span class="token comment" spellcheck="true"># % 等价于1，$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查看某个进程"><a href="#查看某个进程" class="headerlink" title="查看某个进程"></a>查看某个进程</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -p 10997                          <span class="token comment" spellcheck="true"># 查看某个进程占用的CPU、内存</span><span class="token function">ps</span> -a                                 <span class="token comment" spellcheck="true"># 列出所有运行中/激活进程</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span>                           <span class="token comment" spellcheck="true"># 列出需要的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>将telnet客户端开启才能正常使用</p><h3 id="测试网络连通性"><a href="#测试网络连通性" class="headerlink" title="测试网络连通性"></a>测试网络连通性</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Telnet+空格+要访问的服务器或电脑ip地址+空格+端口号</span>telnet 172.21.15.199 9090<span class="token comment" spellcheck="true"># 按回车，出现黑色界面说明连接成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>telnet连通性只能测试tcp端口或服务，不能测试udp</p><h3 id="登录远程主机"><a href="#登录远程主机" class="headerlink" title="登录远程主机"></a>登录远程主机</h3><p><code>-l</code>:指定用户名</p><pre class="line-numbers language-bash"><code class="language-bash">telnet -l admin 192.168.31.105<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#非交互模式</span><span class="token function">nslookup</span> baidu.com<span class="token comment" spellcheck="true">#交互模式</span><span class="token function">nslookup</span>baidu.com<span class="token comment" spellcheck="true">#PTR 反向DNS解析</span><span class="token function">nslookup</span> -ty<span class="token operator">=</span>ptr 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h2><h3 id="proc-meminfo"><a href="#proc-meminfo" class="headerlink" title="/proc/meminfo"></a>/proc/meminfo</h3><p>查看RAM使用情况最简单的方法是通过 /proc/meminfo。/proc/meminfo列出了所有你想了解的内存的使用情况。进程的内存使用信息也可以通过 <code>/proc/&lt;pid&gt;/statm</code> 和 <code>/proc/&lt;pid&gt;/status</code> 来查看。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /proc/meninfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>free命令是一个快速查看内存使用情况的方法，它是对 /proc/meminfo 收集到的信息的一个概述。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">free</span> -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><p>htop命令显示了每个进程的内存实时使用率。它提供了所有进程的常驻内存大小、程序总内存大小、共享库大小等的报告。列表可以水平及垂直滚动。</p><h3 id="top参数"><a href="#top参数" class="headerlink" title="top参数"></a>top参数</h3><p>平均负载（Load Average）是一段时间内系统的平均负载，这个一段时间一般取1分钟、5分钟、15分钟。</p><p>第七行以下：各进程（任务）的状态监控<br>PID — 进程id</p><p>USER — 进程所有者</p><p>PR — 进程优先级</p><p>NI — nice值。负值表示高优先级，正值表示低优先级</p><p>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p><p>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</p><p>SHR — 共享内存大小，单位kb</p><p>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</p><p>%CPU — 上次更新到现在的CPU时间占用百分比</p><p>%MEM — 进程使用的物理内存百分比</p><p>TIME+ — 进程使用的CPU时间总计，单位1/100秒</p><p>COMMAND — 进程名称（命令名/命令行）</p><h2 id="常用SIG信号及其键值"><a href="#常用SIG信号及其键值" class="headerlink" title="常用SIG信号及其键值"></a>常用SIG信号及其键值</h2><p>01 SIGHUP 挂起（hangup）<br>02 SIGINT 中断，当用户从键盘按^c键或^break键时<br>03 SIGQUIT 退出，当用户从键盘按quit键时<br>04 SIGILL 非法指令<br>05 SIGTRAP 跟踪陷阱（trace trap），启动进程，跟踪代码的执行<br>06 SIGIOT IOT指令<br>07 SIGEMT EMT指令<br>08 SIGFPE 浮点运算溢出<br>09 SIGKILL 杀死、终止进程<br>10 SIGBUS 总线错误<br>11 SIGSEGV 段违例（segmentation violation），进程试图去访问其虚地址空间以外的位置<br>12 SIGSYS 系统调用中参数错，如系统调用号非法<br>13 SIGPIPE 向某个非读管道中写入数据<br>14 SIGALRM 闹钟。当某进程希望在某时间后接收信号时发此信号<br>15 SIGTERM 软件终止（software termination）<br>16 SIGUSR1 用户自定义信号1<br>17 SIGUSR2 用户自定义信号2<br>18 SIGCLD 某个子进程死<br>19 SIGPWR 电源故障</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>统计一个文件中某一个字段的次数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> -c <span class="token string">'object'</span> fileName<span class="token function">grep</span> <span class="token string">'object'</span> fileName <span class="token operator">|</span> <span class="token function">wc</span> -l        <span class="token comment" spellcheck="true"># wc -l里-l显示行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>liunx远程复制</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> output.txt root@2g.CentOS.com:/opt/backup <span class="token comment" spellcheck="true"># 把 output.txt 文件从本地系统复制到 2g.CentOS.com 远程系统的 /opt/backup 文件夹下</span><span class="token function">scp</span> -r /home/daygeek/2g/shell-script/ root@:/opt/backup/<span class="token comment" spellcheck="true"># 同shell-script 文件夹下所有的文件一同复制到/opt/back 下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装软件</p><pre class="line-numbers language-bash"><code class="language-bash">rpm -ivh 软件包yum <span class="token function">install</span> package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打包</p><p>常用参数：</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">生成档案文件，创建打包文件</td></tr><tr><td align="left">-v</td><td align="left">列出归档解档的详细过程，显示进度</td></tr><tr><td align="left">-f</td><td align="left">指定档案文件名称，f后面一定是.tar文件，所以必须放选项最后</td></tr><tr><td align="left">-t</td><td align="left">列出档案中包含的文件</td></tr><tr><td align="left">-x</td><td align="left">解开档案文件</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -cvf xxx.tar *                   <span class="token comment" spellcheck="true"># 当前目录所有文件</span><span class="token function">tar</span> -cvf xxx.tar *.txt               <span class="token comment" spellcheck="true"># 以.txt结尾的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvf xxx.tar                     <span class="token comment" spellcheck="true"># 解包到当前目录</span><span class="token function">tar</span> -xvf xxx.tar -C my-dir           <span class="token comment" spellcheck="true"># 解包到指定目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p><a href="https://www.kancloud.cn/chunyu/php_basic_knowledge/2106515" target="_blank" rel="noopener">https://www.kancloud.cn/chunyu/php_basic_knowledge/2106515</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用的文件操作指令&quot;&gt;&lt;a href=&quot;#常用的文件操作指令&quot; class=&quot;headerlink&quot; title=&quot;常用的文件操作指令&quot;&gt;&lt;/a&gt;常用的文件操作指令&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>idb</title>
    <link href="https://arthurjq.com/2022/07/20/idb/"/>
    <id>https://arthurjq.com/2022/07/20/idb/</id>
    <published>2022-07-20T07:28:42.000Z</published>
    <updated>2022-07-20T14:01:35.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="idb是什么"><a href="#idb是什么" class="headerlink" title="idb是什么"></a>idb是什么</h2><p>iOS Debug Bridge - iOS调试桥、安卓有一个很出名ADB（安卓调试桥）它可以很方便的利用PC对移动设备的连接调试、包括获取设备详情、安装｜卸载apk、重启、监控设备信息、同时给可以进行app开启、触发点击、滑动、放大等手势事件、它可以用来做app的自动化测试和手机群控！</p><p>由于iOS系统的封闭性、一直没有像ADB这么强大、这么实用的工具、好在Facebook出了这个IDB工具、让我们iOS设备可以像安卓那样灵活的调试控制！</p><h2 id="idb常用指令"><a href="#idb常用指令" class="headerlink" title="idb常用指令"></a>idb常用指令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前pc上的所有移动设备包括模拟器信息</span>idb list-targets<span class="token comment" spellcheck="true">#启动一台设备</span>idb boot UDID<span class="token comment" spellcheck="true">#打开某app</span>idb launch com.huya.hyatWIFIAssistant.cx<span class="token comment" spellcheck="true">#点击屏幕</span>idb ui botton tap x y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="idb-companion"><a href="#idb-companion" class="headerlink" title="idb_companion"></a>idb_companion</h2><p>这idb_companion是一个gRPC在 macOS 上运行的 Objective-C++ 服务器。它与用于自动化模拟器和设备的本机 API 对话。它链接FBSimulatorControl和FBDeviceControl框架，它们是整个idb项目的一部分。</p><p>当它idb_companion充当gRPC服务器时，它会为单个iOS 目标（设备或模拟器）执行此操作。</p><p>此外，idb_companion还有一些命令是在 python CLI 中故意不可用的，这些操作与 iOS 设备管理或模拟器生命周期的操作有关。</p><p>也就是说它可以通过host：port方式远程控制设备！这个很强大！</p><h2 id="idb用途"><a href="#idb用途" class="headerlink" title="idb用途"></a>idb用途</h2><ul><li>自动化测试</li><li>iOS手机群控</li></ul><p>个人感觉用它来做自动化测试的话不是很方便、自动化测试利用Appium的WDA、结合其封装的python客户端可以更高效的编写自动化测试流程、因为它提供非常多的元素查找方式、tap、swipe、scroll等事件很方便很好用！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;idb是什么&quot;&gt;&lt;a href=&quot;#idb是什么&quot; class=&quot;headerlink&quot; title=&quot;idb是什么&quot;&gt;&lt;/a&gt;idb是什么&lt;/h2&gt;&lt;p&gt;iOS Debug Bridge - iOS调试桥、安卓有一个很出名ADB（安卓调试桥）它可以很方便的利用P
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="devicefarm" scheme="https://arthurjq.com/tags/devicefarm/"/>
    
  </entry>
  
  <entry>
    <title>awk</title>
    <link href="https://arthurjq.com/2022/07/19/awk/"/>
    <id>https://arthurjq.com/2022/07/19/awk/</id>
    <published>2022-07-19T09:19:25.000Z</published>
    <updated>2022-07-20T13:32:19.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="awk基础语法"><a href="#awk基础语法" class="headerlink" title="awk基础语法"></a>awk基础语法</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> ‘program’ file1 , file2 , //对于上述语法中的program来说，又可以细分成pattern和action<span class="token function">awk</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> ‘Pattern<span class="token punctuation">{</span>Action<span class="token punctuation">}</span>’ <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h3><table><thead><tr><th align="left"><strong>-F</strong></th><th align="left"><strong>指定分隔符</strong></th></tr></thead><tbody><tr><td align="left"><strong>-v</strong></td><td align="left"><strong>指定变量和默认值</strong></td></tr><tr><td align="left"><strong>$NF</strong></td><td align="left"><strong>代表最后一个字段</strong></td></tr><tr><td align="left"><strong>NR</strong></td><td align="left"><strong>代表第几行</strong></td></tr><tr><td align="left"><strong>&amp;&amp;</strong></td><td align="left"><strong>与</strong></td></tr><tr><td align="left"><strong>||</strong></td><td align="left"><strong>或</strong></td></tr><tr><td align="left"><strong>FS</strong></td><td align="left"><strong>输入分隔符，与-F分隔符一样</strong></td></tr><tr><td align="left"><strong>OFS</strong></td><td align="left"><strong>输出字段分隔符</strong></td></tr><tr><td align="left"><strong>RS</strong></td><td align="left"><strong>输入记录分隔符</strong></td></tr><tr><td align="left"><strong>$0</strong></td><td align="left"><strong>显示整行</strong></td></tr><tr><td align="left"><strong>1…N</strong></td><td align="left"><strong>第一个字段到第N个字段</strong></td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#注意写法细节 awk -F ":" + 空格 + '{print $6}' 中间没有空格报错</span><span class="token function">tail</span> -1 /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'{print <span class="token variable">$6</span>}'</span> <span class="token comment" spellcheck="true">#指定分隔符“:”并截取第六个字段</span><span class="token comment" spellcheck="true">#FS没有优先级写法</span><span class="token function">awk</span> <span class="token string">'{FS=":"}NR==2{print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span> 3.txt<span class="token comment" spellcheck="true">#FS优先级写法</span><span class="token function">awk</span> <span class="token string">'BEGIN{FS=":"}NR==2{print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span> 1.txt<span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'NR==2{OFS="_";print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span> 1.txt  <span class="token comment" spellcheck="true">#OFS指定分隔符":",OFS中间的间隔换成你指定的</span><span class="token function">awk</span> <span class="token string">'BEGIN{FS=":";OFS="-"}NR==2{print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$3</span>}'</span> 1.txt <span class="token comment" spellcheck="true">#FS用法与上面意思相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最高：BEGIN是最高优先级，是在执行PROGRAM之前执行的，不需要提供数据源，因为不涉及任何数据，也不依赖PROGRAM代码块；<br>   默认：PROGRAM是对数据流干什么，是必选代码块，也是默认代码块。所以执行的时候必须要加上数据源； 默认优先级（不加优先级就是默认）<br>   最低：END是处理完数据流后，如果需要执行END代码块，就必须要PROGAM的支持，单个无法执行</p><h2 id="awk命令之控制流写法"><a href="#awk命令之控制流写法" class="headerlink" title="awk命令之控制流写法"></a>awk命令之控制流写法</h2><table><thead><tr><th>if</th><th>判断控制语句</th></tr></thead><tbody><tr><td>for</td><td>循环语句</td></tr><tr><td>while</td><td>循环语句</td></tr><tr><td>do…while</td><td>循环</td></tr><tr><td>循环控制语句</td><td>break #只有break可以用</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{if(<span class="token variable">$1</span>>5)print <span class="token variable">$1*</span><span class="token variable">$2</span>;else print <span class="token variable">$1</span>/<span class="token variable">$2</span>}'</span> 2.txt <span class="token comment" spellcheck="true">#如果$1大于5，$1乘以$2，否则$1除以$2</span><span class="token function">awk</span> <span class="token string">'{a=0;for(i=1;i&lt;11;i++){a+=<span class="token variable">$i</span>}print a}'</span> 2.txt  <span class="token comment" spellcheck="true">##初始化值a，然后内容有几行循环就几次，最后将字段相加，就是结果了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="awk小技巧"><a href="#awk小技巧" class="headerlink" title="awk小技巧"></a>awk小技巧</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'END{print NR}'</span> /etc/passwd  <span class="token comment" spellcheck="true">#可以打印一个文件下有多少行</span><span class="token function">awk</span> <span class="token string">'END{print <span class="token variable">$0</span>}'</span> /etc/passwd <span class="token comment" spellcheck="true">#可以打印最后一行</span><span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'END{print NF}'</span> /etc/passwd <span class="token comment" spellcheck="true">#可以打印文件内最后一行有多少个字段</span><span class="token comment" spellcheck="true">##如果文件内有分隔符，需要指定分隔符</span><span class="token function">cat</span> example.txt <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR%2==1'</span>     <span class="token comment" spellcheck="true">#删除example.txt文件中的所有偶数行</span><span class="token keyword">echo</span> <span class="token string">"    false"</span> <span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">' '</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span>        <span class="token comment" spellcheck="true">#去掉前面的空格</span>docker images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'mysql'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf"%s:%s\n",<span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span>    <span class="token comment" spellcheck="true">#获取镜像名:Tag</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'color'</span> <span class="token function">awk</span> <span class="token string">'{for (i=8;i&lt;=NF;i++)printf("%s ", <span class="token variable">$i</span>);print ""}'</span> <span class="token comment" spellcheck="true">#获取从第八列开始到最后一列的内容</span><span class="token comment" spellcheck="true"># 打印各磁盘可用大小</span><span class="token function">df</span> <span class="token operator">|</span> <span class="token function">grep</span> -v tmpfs <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR!=1 {disk[<span class="token variable">$1</span>]=<span class="token variable">$4</span>} \END {for(i in disk) {printf "%-20s %-10s\n",i,disk[i]/1024"M"}}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;awk基础语法&quot;&gt;&lt;a href=&quot;#awk基础语法&quot; class=&quot;headerlink&quot; title=&quot;awk基础语法&quot;&gt;&lt;/a&gt;awk基础语法&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>ios模拟器构建机环境搭建</title>
    <link href="https://arthurjq.com/2022/07/18/ios-mo-ni-qi-gou-jian-ji-huan-jing-da-jian/"/>
    <id>https://arthurjq.com/2022/07/18/ios-mo-ni-qi-gou-jian-ji-huan-jing-da-jian/</id>
    <published>2022-07-18T13:44:17.000Z</published>
    <updated>2022-10-09T06:33:32.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>打开git bash映射：</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">ssh</span> -L 16031:172.21.213.31:5900 huya@172.21.213.31 -N<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Xcode"><a href="#安装Xcode" class="headerlink" title="安装Xcode"></a>安装Xcode</h2><p>传输13GB的安装包：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> /Users/huya/Downloads/Xcode_13.4.xip huya@172.21.213.31:/Users/huya/Downloads/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>双击解压安装</p><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p>首先下载nvm，打开终端</p><p>可以官网查看新版本的命令：<a href="https://github.com/nvm-sh/nvm/blob/master/README.md" target="_blank" rel="noopener">nvm/README.md at master · nvm-sh/nvm · GitHub</a></p><pre class="line-numbers language-bash"><code class="language-bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后安装之后查看 nvm –version</p><p>结果发现报了这个错误 Command not found</p><p>是因为没有配置配置文件，处理方式如下</p><p>在<code>~</code>目录下创建 <code>.bash_prefile</code> 和 <code>.zshrc</code> 两个文件（可以直接重新输入上面的安装命令，它会帮我们自动配置好path，以下操作就能跳过）</p><p>1.在终端输入 vi ~/.zshrc</p><p>2.终端界面会进入Vim的普通模式，普通模式下无法编辑，需要按 <strong>i</strong> 键然后会进入编辑模式 i</p><p>3.把下面的内容复制进去</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> NVM_DIR<span class="token operator">=</span><span class="token string">"<span class="token variable">$HOME</span>/.nvm"</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment" spellcheck="true"># This loads nvm</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token comment" spellcheck="true"># This loads nvm bash_completion</span><span class="token function">export</span> NVM_DIR<span class="token operator">=</span><span class="token string">"<span class="token variable">$HOME</span>/.nvm"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.输入完了按esc退出编辑模式回到普通模式，然后再分别按 :wq （英文冒号）</p><p>就退回到终端出事的位置了，<code>.bash_prefile文件的创建同上</code></p><p>增加这两个文件后，重启终端。</p><p>然后输入nvm –version 就可以看到版本号了</p><p><code>.bash_prefile</code>文件在启用bash终端时执行，<code>.zshrc</code>文件在zsh启用时执行。</p><h3 id="nvm管理node"><a href="#nvm管理node" class="headerlink" title="nvm管理node"></a>nvm管理node</h3><ul><li>nvm ls-remote ：打印出所有的版本</li><li>nvm install stable：安装最稳定的版本</li><li>nvm install v12.22.12 ： 安装node的12.22.12的版本</li><li>nvm uninstall v12.22.12 ： 删除node的12.22.12的版本</li><li>nvm current ：当前使用的node版本</li><li>nvm use v12.22.12 ：将node改为12.22.12版本</li><li>nvm alias default 12.22.12：设置默认 node 版本为 12.22.12（必须设置！）</li></ul><p>在终端我们可以使用 <code>which node</code> 来查看我们的 <code>node</code> 被安装到了哪里，这里终端打印出来的地址其实是你当前使用的 <code>node</code> 版本快捷方式的地址。</p><pre class="line-numbers language-bash"><code class="language-bash">/Users/你的用户名/.nvm/versions/node/v10.13.0/bin/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想查看所有 <code>node</code> 版本的安装文件夹，我们可以在 <code>访达（finder）</code> 中使用快捷键 <code>Command+Shift+G</code> 输入 <code>/Users/你的用户名/.nvm/versions</code> 地址就可以看到。</p><h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><h3 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h3><pre class="line-numbers language-bash"><code class="language-bash">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后按提示添加homebrew到path：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#将eval "$(opt/homebrew/bin/brew shellenv)"写入.zprofile文件</span><span class="token keyword">echo</span> <span class="token string">'eval "<span class="token variable"><span class="token variable">$(</span>opt/homebrew/bin/brew shellenv<span class="token variable">)</span></span>"'</span> <span class="token operator">>></span> /Users/huya/.zprofile<span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>opt/homebrew/bin/brew shellenv<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>brew -v查看版本</p><h3 id="第三方安装"><a href="#第三方安装" class="headerlink" title="第三方安装"></a>第三方安装</h3><pre class="line-numbers language-bash"><code class="language-bash">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>brew装完自动帮我安装了python3</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span class="token function">git</span> config --global user.email <span class="token string">"你的信息"</span><span class="token function">git</span> config --global user.name <span class="token string">"你的信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>brew -v</code> 命令看看是不是有两个提示，有的话就是homebrew-core和homebrew-cask目录 被git认为不是一个安全的目录，需要手动添加</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global --add safe.directory 你的homebrew-core路径<span class="token function">git</span> config --global --add safe.directory 你的homebrew-cask路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置好这个才能用brew安装node</p><h3 id="配置HTTP1-1"><a href="#配置HTTP1-1" class="headerlink" title="配置HTTP1.1"></a>配置HTTP1.1</h3><p>如果报错信息curl 92 HTTP/2 stream 0 was not closed cleanly，怀疑是HTTP/2协议自己的bug</p><p>需要修改配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.version HTTP/1.1vim ~/.gitconfig <span class="token comment" spellcheck="true">#使用终端命令查看是否更改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>淘宝新源: npm config set registry <a href="https://registry.npmmirror.com/" target="_blank" rel="noopener">https://registry.npmmirror.com/</a></p></blockquote><h2 id="brew安装node"><a href="#brew安装node" class="headerlink" title="brew安装node"></a>brew安装node</h2><p>mac用nvm就是装不上node，只能用brew装</p><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> node@12---------------------nodee12 is keg-only, <span class="token function">which</span> means it was not symlinked into /opt/homebrew, because this is an alternate version of another formula. If you need to have node@12 first <span class="token keyword">in</span> your PATH, run:<span class="token keyword">echo</span> <span class="token string">'export PATH="/opt/homebrew/opt/node@12/bin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span>  ~/. zshrc For compilers to <span class="token function">find</span> node@12 you may need to set:<span class="token function">export</span> LDFLAGS<span class="token operator">=</span><span class="token string">"-L/opt/homebrew/opt/node@12/lib"</span> <span class="token function">export</span> CPPFLAGS<span class="token operator">=</span><span class="token string">"-I/opt/homebrew/opt/node@12/include"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功后，终端会显示nde@12只是keg，这意味着它没有符号链接到路径上</p><pre class="line-numbers language-bash"><code class="language-bash">//根据提示打开文件vim ~/.bash_profilevim ~/.zshrc//添加到文件最后一行<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token string">"/opt/homebrew/opt/node@12/bin:<span class="token variable">$PATH</span>"</span>//执行下面的命令<span class="token function">source</span> ~/.bash_profile<span class="token function">source</span> ~/.zshrc//查看node版本node -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> ffmpeg@5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>期间可能会发生依赖安装不上，这是自己单独用brew install安装装不上的依赖就好。</p><h2 id="安装idb"><a href="#安装idb" class="headerlink" title="安装idb"></a>安装idb</h2><pre class="line-numbers language-bash"><code class="language-bash">brew tap Facebook/fbbrew <span class="token function">install</span> idb-companion//idb客户端安装pip3 <span class="token function">install</span> fb-idb//查看该工具的所有功能idb —help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完idb客户端后提示python没有添加路径，且idb显示command not found，故而将python路径添加到~/.bash_profile上：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> ~/.bash_profile//插入下面两句<span class="token function">export</span> PYTHON_HOME<span class="token operator">=</span>/Users/huya/Library/Python/3.8<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PYTHON_HOME</span>/bin:<span class="token variable">$PATH</span>//生效<span class="token function">source</span> ~/.bash_profile//继续输入pip3 <span class="token function">install</span> fb-idb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后输入idb看看是否正常使用。</p><h3 id="tap命令"><a href="#tap命令" class="headerlink" title="tap命令"></a>tap命令</h3><p>tap命令允许Homebrew进入另一个公式存储库。 完成此操作后，您将扩展可安装软件的选择。</p><p>这些附加的Git存储库（在usr / local / Library / Taps内部）描述了可用于安装的软件包公式集。</p><pre class="line-numbers language-bash"><code class="language-bash">brew tap                     <span class="token comment" spellcheck="true"># list tapped repositories</span>brew tap <span class="token operator">&lt;</span>tapname<span class="token operator">></span>           <span class="token comment" spellcheck="true"># add tap</span>brew untap <span class="token operator">&lt;</span>tapname<span class="token operator">></span>         <span class="token comment" spellcheck="true"># remove a tap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装Simulator"><a href="#安装Simulator" class="headerlink" title="安装Simulator"></a>安装Simulator</h2><p>安装的版本是iOS 14.5 Simulator，直接在Xcode - preferences - components里点击安装，发现安装不了，显示no valid accounts registered with Xcode that have the ability to access this resource。要进行如下操作：</p><ol><li>open term</li><li>sudo /Applications/Xcode.app/Contents/MacOS/Xcode</li><li>Xcode - preferences - components</li><li>download simulator</li><li>cancel download simulator</li><li>copy download url from term</li><li>then in Terminal in some suitable scratch folder, download it:<code>curl [the url you copied] -O</code> （the letter O, not a zero）</li><li>move to ~/Library/Caches/com.apple.dt.Xcode/Downloads/</li><li>restart Xcode</li><li>In Xcode, in the Downloads section, start the Simulator download again, it should find the file you downloaded and install it.</li></ol><blockquote><p>如果是14.5版本的话可以scp直接传过去</p></blockquote><p>安装完后打开xcode→Window→Devices and Simulators界面进行操作</p><h3 id="创建若干个iphone12mini-simulator"><a href="#创建若干个iphone12mini-simulator" class="headerlink" title="创建若干个iphone12mini  simulator"></a>创建若干个iphone12mini  simulator</h3><p>右键坞中的simulator→Device→选择要打开的模拟器</p><p>终端根目录下输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -alvim .simcfg.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>.simcfg.json文件插入以下json串：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"820--------------------"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"egPort"</span><span class="token operator">:</span> <span class="token number">6550</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"HY0 iPhone 12 mini"</span><span class="token punctuation">,</span>        <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"iPhone 12 mini"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"822--------------------"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"egPort"</span><span class="token operator">:</span> <span class="token number">6551</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"HY1 iPhone 12 mini"</span><span class="token punctuation">,</span>        <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"iPhone 12 mini"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拉代码下来"><a href="#拉代码下来" class="headerlink" title="拉代码下来"></a>拉代码下来</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> res/app<span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli@4.5.9<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run build  // 打包前端代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行npm run build之后生成的dist文件，不能直接通过vscode开启服务访问，会报错，需要安装serve</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> serve -S -g   //一定要全局安装不然也会报错serve dist                //然后启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者可以将dist文件拷贝到其他地方，比如使用hbuilder开启服务访问，或者复制到xampp的服务中访问。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run ios-provider-sim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>复制其他构建机~/目录下的devicefarm文件夹过来，通过配置devicefarm.sh脚本运行，记得修改name</p><pre class="line-numbers language-bash"><code class="language-bash">./devicefarm.sh<span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> provider <span class="token comment" spellcheck="true"># 查看运行起来没有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Documents/devicefarm/script/simsodu python3 monitor-devices.py start           <span class="token comment" spellcheck="true"># 必须sodu，否则运行不起来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;映射&quot;&gt;&lt;a href=&quot;#映射&quot; class=&quot;headerlink&quot; title=&quot;映射&quot;&gt;&lt;/a&gt;映射&lt;/h2&gt;&lt;p&gt;打开git bash映射：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>提升和作用域</title>
    <link href="https://arthurjq.com/2022/07/11/hoisting/"/>
    <id>https://arthurjq.com/2022/07/11/hoisting/</id>
    <published>2022-07-11T11:07:21.000Z</published>
    <updated>2022-07-11T12:30:24.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>转载：<a href="https://segmentfault.com/a/1190000016514414" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016514414</a></p><p>在最开始之前，我们先来学习一下两种报错。</p><ul><li>ReferenceError 异常</li><li>TypeError</li></ul><p><strong>第一种是因为遍历了所有的作用域都查找不到变量</strong></p><p><strong>第二种是找到了这个变量，但是对这个变量的值进行了错误的操作，比如试图对一个非函数类型的值进行函数调用</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出2，而非undefined</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出undefined，而非ReferenceError</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来。<strong>正确的思考思路是，包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</strong></p><p>这个过程就好像变量从它们在代码中出现的位置被“移动”到了最上面（变量所在作用域）。这个过程就叫作提升。</p><p>对于函数声明也能提升：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>但是，需要注意的是，函数声明会被提升，但是函数表达式却不会。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不是 ReferenceError, 而是 TypeError!</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于以下</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时foo肯定是undefined啦，undefined()? 对undefined值进行函数调用显然是错误操作！TypeError！</span>foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数声明和变量声明都会被提升，函数会首先被提升，然后才是变量。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于以下</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重复声明，可以去掉</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置（不仅仅是一行代码，而是整个声明中的位置）。如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</p></blockquote><p><strong>注意：后面的声明会覆盖前面的声明。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相当于以下</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// more code</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当函数 fn2 被执行时，同样会经历一个预编译的过程，函数体内的变量 a 的声明同样经历了“提升”，所以当函数体的可执行语句执行时，此时在 fn2 的作用域内已经可以找到变量 a，其初始值为 undefined，而不会再沿着<strong>作用域链</strong>向其上层作用域寻找。同时由于 if false 条件语句，if 分支内 <code>a = 2</code> 的赋值语句将不被执行，造成第二个对变量 a 的打印值也是 undefined。</p><p>究其原因，还要归咎于作用域的问题。早些年的 JS 语言中并没有<strong>块级作用域</strong>的概念，作用域只有函数内和函数外的简单划分，所以 fn2 内的第二次对变量 a 的声明才会被提升至 <strong>if 分支语句块</strong>之外，造成某些隐晦不明的 bug。因为本质上，这个 a 的声明是在 fn2 函数体内的，即函数内的作用域。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>最外层的全局作用域，任何地方都可以访问得到。在最外层作用域下使用 <code>var</code> 关键字会定义全局变量，也就是说会挂载在 <code>window</code> 对象上，或者不使用关键字 <code>var、let、const</code> 直接对变量名字进行赋值，JS也会自动为其创建为全局变量。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        c <span class="token operator">=</span> <span class="token number">30</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span>    <span class="token punctuation">}</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// b和c变量被隐式声明到全局变量了，所以能访问到，这也叫变量提升机制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span class="token comment" spellcheck="true">// 但a，b，c也被挂载在window对象（全局作用域）上面了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>块级作用域指在代码块 <code>{}</code> 里面定义的变量，只会在当前代码块有效，如果外层作用域下想访问该变量，会报引用错误异常。</p><p>使用关键字 <code>let</code> 或 <code>const</code> 定义块级作用域的变量。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError: i is not defined</span><span class="token comment" spellcheck="true">// 因为i只能在for循环内部有效，外部作用域是访问不到的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>作用域只能一层一层往外查询，那么如果获取一个函数里的变量值？我们可以再给这个函数里面整一层作用域，这样函数里面的子作用域不就可以访问它的变量了吗？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">执行了foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>就返回了一个bar<span class="token punctuation">;</span>现在相当于baz<span class="token operator">=</span>bar<span class="token punctuation">;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们需要获取a的值，我们就在里面写一个函数bar，显然这个bar是有权利访问a的,那我们返回这个有权利访问a的函数不就顶呱呱了吗？</p><p>在 <code>foo()</code>执行后，通常会期待 <code>foo()</code> 的整个内部作用域都被销毁，因为我们知道引擎有垃圾回收器用来释放不再使用的内存空间。由于看上去<code>foo()</code> 的内容不会再被使用，所以很自然地会考虑对其进行回收。<br>而闭包的“神奇”之处正是可以阻止这件事情的发生。<strong>事实上内部作用域依然存在，因此没有被回收</strong>（频繁使用闭包可能导致内存泄漏）。谁在使用这个内部作用域？原来是 <code>bar()</code> 本身在使用。拜 <code>bar()</code>所声明的位置所赐，它拥有涵盖<code>foo()</code>内部作用域的闭包，使得该作用域能够一直存活，以供 <code>bar()</code> 在之后任何时间进行引用。</p><h2 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h2><pre class="line-numbers language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">IIFE</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3 </span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 </span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">//由于函数被包含在一对 ( ) 括号内部，因此成为了一个表达式，</span><span class="token comment" spellcheck="true">//通过在末尾加上另外一个 ( ) 可以立即执行这个函数，</span><span class="token comment" spellcheck="true">//比如 (function foo(){ … })()，</span><span class="token comment" spellcheck="true">//第一个( )将函数变成表达式，第二个( )执行了这个函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;提升&quot;&gt;&lt;a href=&quot;#提升&quot; class=&quot;headerlink&quot; title=&quot;提升&quot;&gt;&lt;/a&gt;提升&lt;/h2&gt;&lt;p&gt;转载：&lt;a href=&quot;https://segmentfault.com/a/1190000016514414&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://arthurjq.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>child_process</title>
    <link href="https://arthurjq.com/2022/07/08/child-process/"/>
    <id>https://arthurjq.com/2022/07/08/child-process/</id>
    <published>2022-07-08T09:19:25.000Z</published>
    <updated>2022-07-21T05:00:48.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建异步进程"><a href="#创建异步进程" class="headerlink" title="创建异步进程"></a>创建异步进程</h2><p>以下四个方法均放回ChildProcess的实例</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p><code>child_process.exec(command[, options][, callback])</code></p><p>注意：<br> 1、command 是一个 shell 命令的字符串，包含了命令的参数<br> 2、可以使用 callback；<br> 3、衍生一个 shell 然后在该 shell 中执行 command，command 一般是 shell 内置的 命令，如 ls,cat 等，也可以是shell脚本组成的文件，如 start.sh 等</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 回调函数版</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat *.js missing_file | wc -l'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`执行出错: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stderr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// promise 版</span><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> exec <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">lsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> stdout<span class="token punctuation">,</span> stderr <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat *.js missing_file | wc -l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stdout:'</span><span class="token punctuation">,</span> stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stderr:'</span><span class="token punctuation">,</span> stderr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">lsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="execFile"><a href="#execFile" class="headerlink" title="execFile"></a>execFile</h3><p><code>child_process.execFile(file[, args][, options][, callback])</code></p><p>注意：<br>1、与 exec 的不同是，命令的参数不能放在第一个参数，只能作为第二个参数传递；<br>2、默认情况下不会衍生 shell，指定的可执行 file 直接作为新进程衍生，使其比 child_process.exec() 稍微更高效<br>3、file 是要运行的可执行文件的名称或路径，如 node.exe，不能是 start.js 这种脚本文件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 回调函数版</span><span class="token keyword">const</span> <span class="token punctuation">{</span> execFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">execFile</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'--version'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// promise 版</span><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> execFile <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> stdout <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">execFile</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'--version'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p><code>child_process.fork(modulePath[, args][, options])</code></p><p>注意：<br>1、该接口专门用于衍生新的 Node.js 进程<br>2、modulePath 是要在node子进程中运行的模块，由于是 node.js 的进程，所以可以是 start.js 这种 js 文件<br>3、无回调，参数要以第二个参数传入<br>4、返回的子进程将内置一个额外的ipc通信通道，允许消息在父进程和子进程之间来回传递。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// IPC 通道</span><span class="token comment" spellcheck="true">// parent.js</span><span class="token keyword">var</span> child_process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> child_process<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token string">'./child.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'message from child: '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'parent'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// child.js</span>process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'message from parent: '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'child'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行 node parent.js的 result </span>message <span class="token keyword">from</span> child<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"from"</span><span class="token punctuation">:</span><span class="token string">"child"</span><span class="token punctuation">}</span>message <span class="token keyword">from</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"from"</span><span class="token punctuation">:</span><span class="token string">"parent"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h3><p><code>child_process.spawn(command[, args][, options])</code></p><p>注意：使用给定的 command 衍生一个新进程，并带上 args 中的命令行参数。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'bad_command'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to start child process 1.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'nonexistFile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child2<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error msg from process 2: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child2<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to start child process 2.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四个方法的区别"><a href="#四个方法的区别" class="headerlink" title="四个方法的区别"></a>四个方法的区别</h3><p>主要的区别在于第一个参数的含义不同：<br>对于 exec 和 execFile 传递的是 command 或 可执行文件，类似 ls 或者 start.sh 或者 node;可接受回调; 二者不同的是命令的参数位置<br>对于 fork 传递的是node支持的脚本，类似 start.js，无回调<br>对于 spawn，它是以上三个方法实现的基础。</p><p>对于构建开发环境而言，一般至少会起两个进程，主进程起 devServer；还需一个进程起mock API 服务器，所以一般用 fork 较多</p><h3 id="关于-ChildProcess-类"><a href="#关于-ChildProcess-类" class="headerlink" title="关于 ChildProcess 类"></a>关于 ChildProcess 类</h3><p>1、<code>ChildProcess</code> 类的实例都是 <code>EventEmitter</code>，表示衍生的子进程<br>2、每个实例都有 stdout, stdin, stderr 三个流对象<br>3、通过 fork 产生的子进程与父进程可以用 send 方法及监听 message 事件来相互通信<br>4、 几个事件： error , message , exit , close , disconnect</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p><a href="https://zhuanlan.zhihu.com/p/64205442" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/64205442</a></p><h2 id="teen-process"><a href="#teen-process" class="headerlink" title="teen_process"></a>teen_process</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//安装</span>npm i teen_process<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Node 的 child_process 的成熟版本。<code>exec</code>确实很有用，但它有很多限制。这是在后台使用的 es7 ( <code>async</code>/ <code>await</code>) 实现。它负责<strong>包装命令和参数</strong>，因此我们不必关心转义空格。即使命令失败或超时，它也可以返回 stdout/stderr。重要的是，它也不容易受到最大缓冲区问题的影响。</p><h3 id="teen-process-exec"><a href="#teen-process-exec" class="headerlink" title="teen_process.exec"></a>teen_process.exec</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'teen_process'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// basic usage</span><span class="token keyword">let</span> <span class="token punctuation">{</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">,</span> code<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'/usr/local/bin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// array of files</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// ''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// works with spaces</span><span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'/command/with spaces.sh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'argument with spaces'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// as though we had run: "/command/with spaces.sh" foo "argument with spaces"</span><span class="token comment" spellcheck="true">// nice error handling that still includes stderr/stdout/code</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'echo_and_exit'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "Exited with code 10"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "foo"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该<code>exec</code>函数采用一些选项，具有以下默认值：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  cwd<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  env<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  killSignal<span class="token punctuation">:</span> <span class="token string">'SIGTERM'</span><span class="token punctuation">,</span>  encoding<span class="token punctuation">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>  ignoreOutput<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  stdio<span class="token punctuation">:</span> <span class="token string">"inherit"</span><span class="token punctuation">,</span>  isBuffer<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  shell<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  logger<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  maxStdoutBufferSize<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 100 MB</span>  maxStderrBufferSize<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 100 MB</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中大部分是不言自明的。<code>ignoreOutput</code>如果您有一个非常健谈的进程，您不关心其输出并且不想将其添加到程序消耗的内存中，则此方法很有用。</p><p>需要两个缓冲区大小限制以避免在收集进程输出时内存溢出。如果不同流类型的输出块的总大小超过给定的块，那么最旧的块将被拉出以将内存负载保持在可接受的范围内。</p><p>如果您使用的是Windows，你想传递<code>shell: true</code>的，因为<code>exec</code><br>实际使用<code>spawn</code>引擎盖下的，因此受到有关Windows +提到的问题<code>spawn</code>中的<a href="https://nodejs.org/api/child_process.html" target="_blank" rel="noopener">节点文档</a>。</p><p>如果<code>stdio</code>选项未设置为<code>inheirt</code>，您可能无法从流程中获得彩色输出。在这种情况下，您可以浏览子流程的文档以查看是否可以指定类似<code>--colors</code>或<code>FORCE_COLORS</code>可以指定的选项。您也可以尝试设置<code>env.FORCE_COLOR = true</code>并查看它是否有效。</p><p>例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'sleep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>timeout<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> killSignal<span class="token punctuation">:</span> <span class="token string">'SIGINT'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "'sleep 10' timed out after 500ms"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该<code>isBuffer</code>选项指定返回的标准 I/O 是Buffer 的一个实例。</p><p>例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>isBuffer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Buffer<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该<code>logger</code>选项允许将 stdout 和 stderr 发送到接收到的特定记录器。这被<code>ignoreOutput</code>选项覆盖。</p><h3 id="teen-process-SubProcess"><a href="#teen-process-SubProcess" class="headerlink" title="teen_process.SubProcess"></a>teen_process.SubProcess</h3><p><code>spawn</code>已经非常棒了，但对于某些用途，有相当多的样板文件，尤其是在<code>async/await</code>上下文中使用时。<code>teen_process</code>还公开了一个<code>SubProcess</code>类，可用于减少一些样板。它有两种方法，<code>start</code>以及<code>stop</code>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> SubProcess <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'teen_process'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> tailFileForABit <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> proc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubProcess</span><span class="token punctuation">(</span><span class="token string">'tail'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'-f'</span><span class="token punctuation">,</span> <span class="token string">'/var/log/foo.log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用上下文中引发启动/停止错误。</p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>您可以收听 8 个事件：</p><ul><li><code>exit</code></li><li><code>stop</code></li><li><code>end</code></li><li><code>die</code></li><li><code>output</code></li><li><code>lines-stdout</code></li><li><code>lines-stderr</code></li><li><code>stream-line</code></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'exit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, all we know is that the proc exited</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`exited with code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> from signal </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>signal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// exited with code 127 from signal SIGHUP</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'stop'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, we know that we intentionally stopped the proc</span>  <span class="token comment" spellcheck="true">// by calling proc.stop</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, we know that the process stopped outside of our control</span>  <span class="token comment" spellcheck="true">// but with a 0 exit code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'die'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, we know that the process stopped outside of our control</span>  <span class="token comment" spellcheck="true">// with a non-zero exit code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stderr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// lines-stderr is just the same</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'lines-stdout'</span><span class="token punctuation">,</span> lines <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['foo', 'bar', 'baz']</span>  <span class="token comment" spellcheck="true">// automatically handles rejoining lines across stream chunks</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// stream-line gives you one line at a time, with [STDOUT] or [STDERR]</span><span class="token comment" spellcheck="true">// prepended</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'stream-line'</span><span class="token punctuation">,</span> line <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [STDOUT] foo</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// so we could do: proc.on('stream-line', console.log.bind(console))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动探测器"><a href="#启动探测器" class="headerlink" title="启动探测器"></a>启动探测器</h4><p>如何<code>SubProcess</code>知道何时从 返回控制权<code>start()</code>？嗯，默认是等到有一些输出。您还可以传入一个数字，这将导致它等待那个毫秒数，或者一个函数（我称之为 a <code>startDetector</code>），它接受 stdout 和 stderr 并在您想要控制时返回 true 。例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue when stdout or stderr has received data</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue immediately</span><span class="token keyword">let</span> sd <span class="token operator">=</span> <span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> stderr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'blarg'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue when stderr receives 'blarg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>startDetector</code>如果要声明启动失败，自定义也可以抛出错误。例如，如果我们知道第一个输出可能包含一个使进程无效的字符串（对我们来说），我们可以定义一个自定义<code>startDetector</code>如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sd <span class="token operator">=</span> <span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/fail/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Encountered failure condition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> stdout <span class="token operator">||</span> stderr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue when output is received that doesn't</span>                      <span class="token comment" spellcheck="true">// match 'fail'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，如果要指定等待进程启动的最长时间，可以通过将第二个参数（以毫秒为单位）传递给<code>start()</code>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// use the default startDetector and throw an error if we wait for more than</span><span class="token comment" spellcheck="true">// 1000ms for output</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="精加工工艺"><a href="#精加工工艺" class="headerlink" title="精加工工艺"></a>精加工工艺</h4><p>进程启动后，您可以使用<code>join()</code>等待它自行完成：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will throw on exitcode not 0</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will throw on exitcode not 0 or 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>杀死进程怎么样？您可以提供自定义信号，而不是使用默认信号<code>SIGTERM</code>吗？为什么是：</p><pre><code>await proc.stop(&#39;SIGHUP&#39;);</code></pre><p>如果您的进程可能无法杀死并且您并不真正关心，您还可以传递超时，它会在超时过后以错误的形式将控制权返回给您：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">'SIGHUP'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Proc failed to stop, ignoring cause YOLO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总而言之，这使得编写一个脚本将文件拖尾 X 秒然后停止，使用 async/await 和非常简单的错误处理变得非常简单。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> boredTail <span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> boredAfter <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubProcess</span><span class="token punctuation">(</span><span class="token string">'tail'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'-f'</span><span class="token punctuation">,</span> filePath<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'stream-line'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Bluebird<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span>boredAfter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建异步进程&quot;&gt;&lt;a href=&quot;#创建异步进程&quot; class=&quot;headerlink&quot; title=&quot;创建异步进程&quot;&gt;&lt;/a&gt;创建异步进程&lt;/h2&gt;&lt;p&gt;以下四个方法均放回ChildProcess的实例&lt;/p&gt;
&lt;h3 id=&quot;exec&quot;&gt;&lt;a href=&quot;#e
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nodejs" scheme="https://arthurjq.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://arthurjq.com/2022/07/07/nodejs/"/>
    <id>https://arthurjq.com/2022/07/07/nodejs/</id>
    <published>2022-07-07T07:48:12.000Z</published>
    <updated>2022-07-28T10:19:38.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js核心特征"><a href="#Node-js核心特征" class="headerlink" title="Node.js核心特征"></a>Node.js核心特征</h2><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>事件驱动是指在持续事务管理过程中，进行决策的一种策略，即跟随当前时间点上出现的事件，调动可用资源，执行相关任务，使不断出现的问题得以解决，防止事务堆积。</p><p>Node.js的执行是通过事件来驱动的，事件不仅包括鼠标事件、键盘事件等明显触摸到的，还包括表单事件、框架事件（onload）等。</p><p>事件驱动的程序至少会有一个事件队列，当有新的事件产生时会被插入到队列中，然后通过事件循环来检测队列中的事件，当发现有一个事件发生时就会调用回调函数。回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p><h3 id="非阻塞I-O"><a href="#非阻塞I-O" class="headerlink" title="非阻塞I/O"></a>非阻塞I/O</h3><p>阻塞I/O就是进行I/O操作的时候，进程或被阻塞；非阻塞I/O就是进行I/O操作的时候，进程不会阻塞。</p><p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p><h2 id="模块构架"><a href="#模块构架" class="headerlink" title="模块构架"></a>模块构架</h2><p>Node standard library（Node标准库）：</p><p>Node. js标准库由 Javascript编写而成，它提供网络、文件、事件等操作，可以认为是一层比较薄的API封装层，实际的操作还是由底层来完成。</p><p>Node bindings（Node绑定层）：</p><p>胶水代码，能够把不同的语言绑定在一起使其能够相互沟通。在Node.js中主要就是Javascript与C/C++的交流转译。</p><p>V8引擎：</p><p>V8是一个由 Google公司开发的开源 Javascript引擎，使用C++编写，用于谷歌浏览器。Javascript引擎是一个专门处理Javascript的虚拟机。</p><p>V8在运行之前将 Javascript编译成了机器代码，而非字节码或解释执行它，以此提升性能。此外，V8还使用了如内联缓存来提高 Javascript程序在V8引擎上的速度，甚至可以媲美二进制编译程序的执行速度。</p><p>Node. js也因为采用了V8引擎才有如此高的 Javascript执行效率。</p><p>libuv（Node.js核心）：</p><p>libuv提供异步功能的C库。它在运行时负责一个事件循环（ Event Loop）、一个线程池、文件系统I/O、DNS相关的I/O和网络I/O，以及一些其他重要的功能。</p><p>其他的C/C+组件和库：</p><p>如 C - ares ， http_parser， Openssl以及zlib等，这些依赖提供了对系统底层功能的访问，比如网络、压缩、加解密，等等。</p><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>Node.js应用启动时，会开启JS线程（主线程）、由libuv提供的线程池（Worker Threads）和一个事件循环（Event Loop）。JS线程负责执行应用代码，当发现有I/O操作时，直接提交给libuv的线程池并注册回调函数，不会等待I/O结束后再继续运行，而是拿到一个状态后继续执行（类比Promise），这就是“单线程非阻塞I/O”。</p><p>I/O操作结束之后会有一个事件，该事件会放在事件队列（ Event Quene)中，事件循环每次都会检查是否有事件需要处理，如果有就处理，否则进入下一轮轮询；如果没有任何事件需要处理则退出进程。这就是“事件驱动”。</p><p>在I/O密集型应用中，主线程只负责提交任务，轮询结果，耗时的任务执行部分会提交给底层执行，这就是 Node. js为什么会有如此高性能的原因。</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>当调用 setTimeout（） 时，浏览器或 Node.js 会启动定时器。 当定时器到期时，则回调函数会被放入“消息队列”中。</p><p>在消息队列中，用户触发的事件（如单击或键盘事件、或获取响应）也会在此排队，然后代码才有机会对其作出反应。 类似 <code>onLoad</code> 这样的 DOM 事件也如此。</p><p>事件循环会赋予调用堆栈优先级，它首先处理在调用堆栈中找到的所有东西，一旦其中没有任何东西，便开始处理消息队列中的东西。</p><p>我们不必等待诸如 <code>setTimeout</code>、fetch、或其他的函数来完成它们自身的工作，因为它们是由浏览器提供的，并且位于它们自身的线程中。 例如，如果将 <code>setTimeout</code> 的超时设置为 2 秒，但不必等待 2 秒，等待发生在其他地方。</p><h3 id="ES6作业队列"><a href="#ES6作业队列" class="headerlink" title="ES6作业队列"></a>ES6作业队列</h3><p>ECMAScript 2015 引入了作业队列的概念，Promise 使用了该队列（也在 ES6/ES2015 中引入）。 这种方式会尽快地执行异步函数的结果，而不是放在调用堆栈的末尾。</p><p>在当前函数结束之前 resolve 的 Promise 会在当前函数之后被立即执行。</p><p>有个游乐园中过山车的比喻很好：消息队列将你排在队列的后面（在所有其他人的后面），你不得不等待你的回合，而工作队列则是快速通道票，这样你就可以在完成上一次乘车后立即乘坐另一趟车。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'应该在 baz 之后、bar 之前'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>output<span class="token punctuation">:</span>foobaz应该在 baz 之后、bar 之前bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是 Promise（以及基于 promise 构建的 async/await）与通过 <code>setTimeout()</code> 或其他平台 API 的普通的旧异步函数之间的巨大区别。</p><h3 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick"></a>process.nextTick</h3><p>每当事件循环进行一次完整的行程时，我们都将其称为一个滴答。</p><p>当将一个函数传给 <code>process.nextTick()</code> 时，则指示引擎在当前操作结束（在下一个事件循环滴答开始之前）时调用此函数：</p><pre class="line-numbers language-javascript"><code class="language-javascript">process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//做些事情</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>事件循环正在忙于处理当前的函数代码。</p><p>当该操作结束时，JS 引擎会运行在该操作期间传给 <code>nextTick</code> 调用的所有函数。</p><p>这是可以告诉 JS 引擎异步地（在当前函数之后）处理函数的方式，但是尽快执行而不是将其排入队列。</p><p>调用 <code>setTimeout(() =&gt; {}, 0)</code> 会在下一个滴答结束时执行该函数，比使用 <code>nextTick()</code>（其会优先执行该调用并在下一个滴答开始之前执行该函数）晚得多。</p><p>当要确保在下一个事件循环迭代中代码已被执行，则使用 <code>nextTick()</code>。</p><h3 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate"></a>setImmediate</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//运行一些东西</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作为 <code>setImmediate()</code>参数传入的任何函数都是在事件循环的下一个迭代中执行的回调。</p><p><code>setImmediate()</code> 与 <code>setTimeout(() =&gt; {}, 0)</code>（传入 0 毫秒的超时）、<code>process.nextTick()</code> 有何不同？</p><p>传给 <code>process.nextTick()</code> 的函数会在事件循环的当前迭代中（当前操作结束之后）被执行。 这意味着它会始终在 <code>setTimeout</code> 和 <code>setImmediate</code> 之前执行。</p><p>延迟 0 毫秒的 <code>setTimeout()</code> 回调与 <code>setImmediate()</code> 非常相似。 执行顺序取决于各种因素，但是它们都会在事件循环的下一个迭代中运行。</p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 2 秒之后运行</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">const</span> myFunction <span class="token operator">=</span> <span class="token punctuation">(</span>firstParam<span class="token punctuation">,</span> secondParam<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 做些事情</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2 秒之后运行</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> firstParam<span class="token punctuation">,</span> secondParam<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><p><code>setInterval</code> 是一个类似于 <code>setTimeout</code> 的函数，不同之处在于：它会在指定的特定时间间隔（以毫秒为单位）一直地运行回调函数，而不是只运行一次：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 每 2 秒运行一次</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的函数每隔 2 秒运行一次，除非使用 <code>clearInterval</code> 告诉它停止（传入 <code>setInterval</code> 返回的间隔定时器 id）：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 每 2 秒运行一次</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常在 <code>setInterval</code> 回调函数中调用 <code>clearInterval</code>，以使其自行判断是否应该再次运行或停止。</p><h3 id="递归的setTimeout"><a href="#递归的setTimeout" class="headerlink" title="递归的setTimeout"></a>递归的setTimeout</h3><p>setInterval 每 n 毫秒启动一个函数，而无需考虑函数何时完成执行。如果一个函数总是花费相同的时间，那就没问题了。但是在很多时候函数可能花费的时间取决于网络条件，此时就有可能导致两个函数的执行时间重叠。为了避免这一情况，可以在回调函数完成时安排要被调用的递归的 setTimeout：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">const</span> myFunction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    times<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`这是第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>times<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次执行setTimeout`</span></span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>times <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Node.js 还提供 <code>setImmediate()</code>（相当于使用 <code>setTimeout(() =&gt; {}, 0)</code>），通常用于与 Node.js 事件循环配合使用。</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise是一个异步流程的控制手段，相比与传统回调和事件，它可以让异步事件队列化，按照设计者预期处理异步事件。也可以简单的将Promise理解为一个容器，里面装载着某个未来才会结束的事件。</p><p>当 promise 被调用后，它会以<strong>处理中状态</strong>开始。 这意味着调用的函数会继续执行，而 promise 仍处于处理中直到解决为止，从而为调用的函数提供所请求的任何数据。</p><p>被创建的 promise 最终会以<strong>被解决状态</strong>或<strong>被拒绝状态</strong>结束，并在完成时调用相应的回调函数（传给 <code>then</code> 和 <code>catch</code>）。</p><p>在实际使用时，Promise通常包裹在一个函数中，在需要的时候再进行调用。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//做一些异步操作</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'测试数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用then方法接收一个函数，参数为Promise中resolve中的数据</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="then"><a href="#then" class="headerlink" title="then"></a>then</h3><p><code>then()</code>可以同时分别指定resolved状态和rejected状态的回调函数。</p><ul><li><code>resolve(value)</code>将调用第一个函数，且接受<code>value</code>作为自身参数；</li><li><code>reject(error)</code>调用第二个函数(该函数是可选的)，接受<code>error</code>作为自身参数。事实上，有了<code>catch()</code>一般就很少使用第二个参数了。</li></ul><p><code>then()</code>返回的是一个新的Promise实例，因此可以采用链式写法。</p><pre class="line-numbers language-javascript"><code class="language-javascript">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// success</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// failure</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p><code>catch()</code>方法是<code>then(null, rejection)</code>或<code>then(undefined, rejection)</code>的别名，用于指定发生错误时的回调函数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等价于throw new Error('error'); </span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//some code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>comments<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// some code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 处理前面三个Promise产生的错误</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 Promise 状态已经变成resolved，再抛出错误是无效的。</p><p>为什么不建议在then（）里面定义 Reject 状态的回调函数呢？</p><p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。如果是<code>then</code>的话要重复累赘。</p><h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><p>当我们把回调嵌套变成多层，就能知道Promise的厉害之处了。Promise的正确用法如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//做一些异步操作</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步操作1执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'测试数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//做一些异步操作</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步操作2执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'测试数据2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//做一些异步操作</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步操作3执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'测试数据3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>output<span class="token punctuation">:</span>异步操作<span class="token number">1</span>执行完成测试数据<span class="token number">1</span>异步操作<span class="token number">2</span>执行完成测试数据<span class="token number">2</span>异步操作<span class="token number">3</span>执行完成测试数据<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从表面上看，Promise将原来复杂难懂的地狱回调变成了使用链式调用的方式（当然你也可以简单地这么理解），但是它的精髓在于状态的维护和传递（resolve和reject）使得回调函数能够得到及时的调用，比callback更加简单高效。</p><p>另外，在then方法中我们可以还直接return数据而非Promise对象</p><h3 id="Promise-all-一假全假"><a href="#Promise-all-一假全假" class="headerlink" title="Promise.all 一假全假"></a>Promise.all 一假全假</h3><p>如果需要同步不同的 promise，则 <code>Promise.all()</code> 可以帮助定义 promise 列表，并在所有 promise 都被解决后执行一些操作。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/something.json'</span><span class="token punctuation">)</span><span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/something2.json'</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'结果的数组'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在缺陷：一个成员状态是rejected时就执行rejected回调，此时并不知道其他成员是否已经执行结束。</p><h3 id="Promise-race-竞速并发"><a href="#Promise-race-竞速并发" class="headerlink" title="Promise.race 竞速并发"></a>Promise.race 竞速并发</h3><p>多个请求中，谁的数据返回最快（无论结果成功还是失败），结果就是谁。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'第一个'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'第二个'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 第二个</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise-allSettled-各个成员状态都要定型"><a href="#Promise-allSettled-各个成员状态都要定型" class="headerlink" title="Promise.allSettled 各个成员状态都要定型"></a>Promise.allSettled 各个成员状态都要定型</h3><p>不关心异步操作的结果，只关心这些操作有没有结束。<code>Promise.all()</code>方法无法做到这一点。</p><p>对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标就会消失。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api-2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api-3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">removeLoadingIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><p>Async 函数是 Generator 函数的语法糖。async函数就是将 Generator 函数的星号（*）替换成async，将<code>yield</code>替换成<code>await</code>。</p><h3 id="async函数对-Generator-函数的改进"><a href="#async函数对-Generator-函数的改进" class="headerlink" title="async函数对 Generator 函数的改进"></a>async函数对 Generator 函数的改进</h3><p>内置执行器：</p><p>async 函数直接调用就执行了，Generator 函数需要通过<code>next()</code>调用</p><p>更好的语义：</p><p>async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p><p>返回值是 Promise：</p><p>比操作 Generator 函数返回的Iterator方便。async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> readFile<span class="token operator">=</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span>way<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>way<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Generator</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'gen1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'gen2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//AsyncFunction</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'async1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> it<span class="token operator">=</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>await</code> 只能放在async函数中。</li><li><code>await</code>表达式会暂停整个async函数的执行进程并出让其控制权，只有当其等待的基于promise的异步操作被兑现或被拒绝之后才会恢复进程。</li><li>假如<code>await</code>表达式后面跟着的不是Promise值，会通过<code>Promise.resolve(value)</code>将其转换为Promise。</li></ul><h3 id="异步任务继发与并发"><a href="#异步任务继发与并发" class="headerlink" title="异步任务继发与并发"></a>异步任务继发与并发</h3><p>继发：等前面的异步任务执行完成，才开始执行下一个异步任务。（保证异步任务执行顺序 耗时多）<br>并发：前后的异步任务，谁也不用等谁，可以同时进行。</p><p>await执行Promise任务普遍都是继发的。</p><h4 id="如何让await请求并发呢"><a href="#如何让await请求并发呢" class="headerlink" title="如何让await请求并发呢"></a>如何让await请求并发呢</h4><p>异步请求在子函数中起作用，不会阻塞父函数</p><p>比如用map，forEach循环，把await放到循环体里面</p><h4 id="请求并发后怎么顺序输出结果呢"><a href="#请求并发后怎么顺序输出结果呢" class="headerlink" title="请求并发后怎么顺序输出结果呢?"></a>请求并发后怎么顺序输出结果呢?</h4><p>前面通过map返回了一个promise数组</p><p>可以用for循环，每个promise来一次await</p><h4 id="继发"><a href="#继发" class="headerlink" title="继发"></a>继发</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getStream</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getJson</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">getStream</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前后间隔4s</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>json<span class="token punctuation">,</span> stream<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getStream</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前后间隔2s</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> streamPromise <span class="token operator">=</span> <span class="token function">getStream</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> jsonPromise <span class="token operator">=</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> streamPromise<span class="token punctuation">;</span>    <span class="token keyword">await</span> jsonPromise<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前后间隔2s</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法一：<br>合并多个Promise对象为一个，<code>await</code>就等待一次组装后的Promise对象，其他的成员Promise对象并发。</p><p>方法二：<br>在异步函数中调用（同步）子函数去做异步请求，这两个（同步）子函数（是并发的）不会阻塞父函数（异步函数），子函数和父函数运行环境是各自独立的。然后获取同步方法返回的Promise对象，await只是保证这个请求已经结束。不设置await就是瞬间执行完异步函数代码块，而此时的streamPromise 和jsonPromise 还处于pending状态。</p><h3 id="并发请求顺序输出"><a href="#并发请求顺序输出" class="headerlink" title="并发请求顺序输出"></a>并发请求顺序输出</h3><p>页面按顺序显示多张图片</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">logInOrder</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 并发读取远程URL</span>  <span class="token keyword">const</span> textPromises <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> url <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 按次序输出</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> textPromise <span class="token keyword">of</span> textPromises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> textPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，虽然<code>map()</code>的参数是async函数，但它是并发执行的。</p><p><code>map()</code>中每次遍历形成的<code>{}</code>，该<code>{}</code>是一个独立执行环境，每个请求任务要花时间，交出<code>{}</code>的执行权，继续遍历下一个，形成新的<code>{}</code>，几个任务同时请求，任务都还在执行，此时这几个任务关系为并发</p><p>因为只有async函数内部是继发（根据数组顺序）执行，外部不受影响。后面的<code>for..of</code>循环内部使用了await，因此实现了按顺序输出。</p><h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p>当 <code>emitters</code> 发送事件后，相应的响应函数（ <code>listeners</code> ）会被执行。例如：<code>net.Server</code> 会在每次收到连接时发出事件，<code>fs.ReadStram</code> 会在文件打开时发出事件，<code>stram</code>会在有数据可读时发出事件。 所有这些对象都是 <code>EventEmitter</code> 的实例，它们通过向外暴露的 <code>eventEmitter.on()</code> 接口从而让不同的事件响应函数得以执行。</p><h3 id="on-和-emit-方法"><a href="#on-和-emit-方法" class="headerlink" title="on 和 emit 方法"></a>on 和 emit 方法</h3><p>events 模块有且只有一个对象 <code>events.EventEmitter</code>，它的核心功能就是事件的触发（<code>emit</code>）和事件的监听（<code>on</code>），一个简单的例子如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hi, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'elvin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述的例子中，我们通过 <code>emitter.on(&#39;hi&#39;, func)</code> 的方式注册了 hi 事件的监听函数，通过 <code>emitter.emit(&#39;hi&#39;, &#39;elvin&#39;)</code> 的方式触发了 hi 事件，且会向事件处理函数传递参数 ‘elvin’，所以最后的执行结果为 <code>hi, my name is elvin!</code>。 这里需要说明的时，EventEmitter 还有一个 <code>addeListener</code> 的方法，它只不过是 <code>on</code> 方法的别名，两者没有任何区别。</p><h3 id="once-方法"><a href="#once-方法" class="headerlink" title="once 方法"></a>once 方法</h3><p>有些时候，我们希望某些事件响应函数只被执行一次，这个时候就可以使用 <code>once()</code> 方法，它会和 <code>on()</code> 一样注册事件的响应函数，不过当响应函数执行一次之后，就会将其移除。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hi, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'elvin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'leonard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子中只会输出 <code>hi, my name is elvin!</code></p><h3 id="prependListener-方法"><a href="#prependListener-方法" class="headerlink" title="prependListener 方法"></a>prependListener 方法</h3><p>当一个事件绑定了多个响应函数时，会按照函数绑定的顺序依次执行，除非响应函数是通过 <code>prependListener()</code> 方法绑定的，它使用的方式和 <code>on()</code> 类似，不过会将响应函数插到当前该事件处理函数队列的头部。</p><p>因为绑定过多的响应函数会消耗大量的内存，所以为了避免内存泄漏，在 <code>Event.EventEmitter</code>中一个事件可以绑定的响应函数数量是存在限制的，相关的属性和方法如下：</p><ul><li><strong><code>EventEmitter.defaultMaxListeners</code></strong>： 默认值为10， 表示每个事件的最多可以绑定的响应函数数量。需要注意的是，当修改它时，会影响所有 <code>EventEmitter</code> 的实例。</li><li><strong><code>emitter.listenerCount(eventName)</code></strong>：获取事件 <code>eventName</code> 已绑定的响应函数个数。</li><li><strong><code>emitter.setMaxListeners(n)</code></strong>：修改 emitter 的每个事件最多可以绑定的响应函数数量，该方法会修改 <code>emitter._maxListeners</code> 的值，其优先级大于 <code>*EventEmitter.defaultMaxListeners</code> 。</li><li><strong><code>emitter.getMaxListeners()</code></strong>：获取 emitter 每个事件最多可以绑定的响应函数数量。</li></ul><h3 id="其他相关方法"><a href="#其他相关方法" class="headerlink" title="其他相关方法"></a>其他相关方法</h3><p><code>EventEmitter</code> 还有一些其他的方法和属性，这里就不做具体介绍，简要地说一下。</p><ul><li><strong><code>emitter.eventNames()</code></strong>：返回当前已经绑定响应函数的事件名组成的数组。</li><li><strong><code>emitter.listeners(eventName)</code></strong>：返回 <code>eventName</code> 事件的响应函数组成的数组。</li><li><strong><code>emitter.prependOnceListener(eventName, listener)</code></strong>：类似于 <code>once()</code>，不过会将响应函数插到当前该事件处理函数队列的头部。</li><li><strong><code>emitter.removeAllListeners([eventName])</code></strong>：移除 <code>eventName</code> 事件所有的响应函数。当未传入 <code>eventName</code> 参数时，所有事件的响应函数都会被移除。</li><li><strong><code>emitter.removeListener(eventName, listener)</code></strong>：移除 <code>eventName</code> 事件的响应函数 <code>listener</code>。</li></ul><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p><a href="https://blog.csdn.net/wangfeijiu/article/details/111589574" target="_blank" rel="noopener">https://blog.csdn.net/wangfeijiu/article/details/111589574</a></p><p><a href="https://blog.csdn.net/qq_39055970/article/details/119756714" target="_blank" rel="noopener">https://blog.csdn.net/qq_39055970/article/details/119756714</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node-js核心特征&quot;&gt;&lt;a href=&quot;#Node-js核心特征&quot; class=&quot;headerlink&quot; title=&quot;Node.js核心特征&quot;&gt;&lt;/a&gt;Node.js核心特征&lt;/h2&gt;&lt;p&gt;Node.js是一个事件驱动I/O服务端JavaScript环境，基
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nodejs" scheme="https://arthurjq.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>设置日历中的快捷时间段范围</title>
    <link href="https://arthurjq.com/2022/07/05/momentjs/"/>
    <id>https://arthurjq.com/2022/07/05/momentjs/</id>
    <published>2022-07-05T02:39:10.000Z</published>
    <updated>2022-07-06T11:34:04.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="moment-js"><a href="#moment-js" class="headerlink" title="moment.js"></a>moment.js</h2><p>需要根据某些时间段查看数据，首先，要先引入moment</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">"moment"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算时间点</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//获取当前时间</span> <span class="token keyword">let</span> nowDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取1个小时前的时间</span> <span class="token keyword">let</span> oneHour <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>nowDate <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取2个小时前的时间</span> <span class="token keyword">let</span> twoHour <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>nowDate <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取3个小时前的时间</span> <span class="token keyword">let</span> threeHour <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>nowDate <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更好的方式：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//一个小时前时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hours"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前时间的前10天时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"days"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前时间的前1年时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"years"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前时间的前3个月时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"months"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前时间的前一个星期时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"weeks"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用的获取时间：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//本周的第一天</span>startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">week</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">week</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'week'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本周的最后一天</span>endDate <span class="token operator">=</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">week</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">week</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'week'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本月第一天</span>startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本月最后一天</span>endDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>end<span class="token comment" spellcheck="true">//当前时间的前10天时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"days"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前时间的前1年时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"years"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前时间的前3个月时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"months"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前时间的前一个星期时间</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"weeks"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置为时间单位的开头</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置为时间单位的末尾</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="antd-design-vue日历设置默认时间"><a href="#antd-design-vue日历设置默认时间" class="headerlink" title="antd design vue日历设置默认时间"></a>antd design vue日历设置默认时间</h2><pre class="line-numbers language-vue"><code class="language-vue"><a-range-picker                //打开界面显示的默认时间                :defaultValue="[momentTime(startTime, 'YYYY-MM-DD HH:mm:ss'), momentTime(endTime, 'YYYY-MM-DD HH:mm:ss')]"                @ok="onSelectStateDate"                :placeholder="['开始时间', '结束时间']"                :show-time="{                hideDisabledOptions: true,                defaultValue: [momentTime(startTime, 'YYYY-MM-DD HH:mm:ss'), momentTime(endTime, 'YYYY-MM-DD HH:mm:ss')],              }"                //增加了快捷时间段范围的选取                :ranges="dateRange"                format="YYYY-MM-DD HH:mm:ss"            /><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据：</p><pre class="line-numbers language-javascript"><code class="language-javascript">startTime<span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hours"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>endTime<span class="token punctuation">:</span>  <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dateRange<span class="token punctuation">:</span> <span class="token punctuation">{</span>        一小时内<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hours"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        两小时内<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hours"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        今天<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        昨天<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        最近一周<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'weeks'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    momentTime <span class="token punctuation">(</span>time<span class="token punctuation">,</span> format<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">moment</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> format<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;moment-js&quot;&gt;&lt;a href=&quot;#moment-js&quot; class=&quot;headerlink&quot; title=&quot;moment.js&quot;&gt;&lt;/a&gt;moment.js&lt;/h2&gt;&lt;p&gt;需要根据某些时间段查看数据，首先，要先引入moment&lt;/p&gt;
&lt;pre class
      
    
    </summary>
    
      <category term="前端" scheme="https://arthurjq.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://arthurjq.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>blog换新环境配置命令</title>
    <link href="https://arthurjq.com/2022/02/20/blog-huan-xin-huan-jing-pei-zhi-ming-ling/"/>
    <id>https://arthurjq.com/2022/02/20/blog-huan-xin-huan-jing-pei-zhi-ming-ling/</id>
    <published>2022-02-20T02:39:41.000Z</published>
    <updated>2022-07-11T06:32:34.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="换新环境配置流程"><a href="#换新环境配置流程" class="headerlink" title="换新环境配置流程"></a>换新环境配置流程</h2><p>输入<code>npm i hexo-cli -g</code>安装Hexo</p><p>输入<code>hexo -v</code>验证是否安装成功</p><pre><code>git config --global user.name &quot;arthurjinquan&quot;git config --global user.email &quot;793787018@qq.com&quot;</code></pre><p>然后生成密钥SSH key：</p><pre><code>ssh-keygen -t rsa -C &quot;793787018@qq.com&quot;</code></pre><p>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。</p><p>git bash中输入</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code> 测试调通没有。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;换新环境配置流程&quot;&gt;&lt;a href=&quot;#换新环境配置流程&quot; class=&quot;headerlink&quot; title=&quot;换新环境配置流程&quot;&gt;&lt;/a&gt;换新环境配置流程&lt;/h2&gt;&lt;p&gt;输入&lt;code&gt;npm i hexo-cli -g&lt;/code&gt;安装Hexo&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>部分面试总结</title>
    <link href="https://arthurjq.com/2021/11/15/mian-shi/mian-shi-zong-jie/"/>
    <id>https://arthurjq.com/2021/11/15/mian-shi/mian-shi-zong-jie/</id>
    <published>2021-11-15T13:34:25.000Z</published>
    <updated>2022-07-11T07:01:22.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="filter和Interceptor的区别"><a href="#filter和Interceptor的区别" class="headerlink" title="filter和Interceptor的区别"></a>filter和Interceptor的区别</h2><p>Filter可以认为是Servlet的一种“加强版”，它主要用于对用户请求进行预处理，也可以对HttpServletResponse进行后处理，是个典型的处理链。可以修改HttpServletRequest，HttpServletResponse头和数据。</p><p>拦截器，在AOP中用于在某个方法或字段被访问之前，进行拦截，然后在之前或之后加入某些操作。拦截是AOP的一种实现策略。</p><p><strong>过滤器需要在servlet容器中实现，拦截器可以适用于javaEE，javaSE等各种环境<br>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法</strong></p><p><strong>拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑</strong></p><h2 id="重写堆排序，实现大顶堆"><a href="#重写堆排序，实现大顶堆" class="headerlink" title="重写堆排序，实现大顶堆"></a>重写堆排序，实现大顶堆</h2><h2 id="netty粘包拆包"><a href="#netty粘包拆包" class="headerlink" title="netty粘包拆包"></a>netty粘包拆包</h2><p>产生粘包和拆包问题的主要原因是，操作系统在发送TCP数据的时候，底层会有一个<strong>缓冲区</strong>，例如1024个字节大小，如果一次请求发送的数据量比较小，没达到缓冲区大小，<strong>TCP则会将多个请求合并为同一个请求进行发送</strong>，这就形成了粘包问题；如果一次请求发送的数据量比较大，超过了缓冲区大小，TCP就会将其拆分为多次发送，这就是拆包，也就是将一个大的包拆分为多个小包进行发送。</p><h3 id="粘包和拆包问题，常见的解决方案有四种"><a href="#粘包和拆包问题，常见的解决方案有四种" class="headerlink" title="粘包和拆包问题，常见的解决方案有四种"></a>粘包和拆包问题，常见的解决方案有四种</h3><ul><li>客户端在发送数据包的时候，每个包都固定长度，比如1024个字节大小，如果客户端发送的数据长度不足1024个字节，则通过补充空格的方式补全到指定长度；</li><li>客户端在每个包的末尾使用固定的分隔符，例如\r\n，如果一个包被拆分了，则等待下一个包发送过来之后找到其中的\r\n，然后对其拆分后的头部部分与前一个包的剩余部分进行合并，这样就得到了一个完整的包；</li><li>将消息分为头部和消息体，在头部中保存有当前整个消息的长度，只有在读取到足够长度的消息之后才算是读到了一个完整的消息；</li><li>通过自定义协议进行粘包和拆包的处理。</li></ul><h2 id="对称加密和非对称加密算法"><a href="#对称加密和非对称加密算法" class="headerlink" title="对称加密和非对称加密算法"></a>对称加密和非对称加密算法</h2><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p><strong>DES（Data Encryption Standard）</strong>：数据加密标准，速度较快，适用于加密大量数据的场合。<br><strong>3DES（Triple DES）</strong>：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高。<br><strong>AES（Advanced Encryption Standard）</strong>：高级加密标准，是下一代的加密算法标准，速度快，安全级别高；</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>指加密和解密使用不同密钥的加密算法，也称为公私钥加密。假设两个用户要加密交换数据，双方交换公钥，使用时一方用对方的公钥加密，另一方即可用自己的私钥解密。常见的非对称加密算法：RSA、DSA（数字签名用）、ECC（移动设备用）、Diffie-Hellman、El Gamal。</p><p>​    <strong>RSA：</strong>由 RSA 公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的；<br>​    <strong>DSA（Digital Signature Algorithm）</strong>：数字签名算法，是一种标准的 DSS（数字签名标准）；<br>​    <strong>ECC（Elliptic Curves Cryptography）</strong>：椭圆曲线密码编码学。</p><p>  ECC和RSA相比，在许多方面都有对绝对的优势，主要体现在以下方面：<br>（1）抗攻击性强。相同的密钥长度，其抗攻击性要强很多倍。<br>（2）计算量小，处理速度快。ECC总的速度比RSA、DSA要快得多。<br>（3）存储空间占用小。ECC的密钥尺寸和系统参数与RSA、DSA相比要小得多，意味着它所占的存贮空间要小得多。这对于加密算法在IC卡上的应用具有特别重要的意义。<br>（4）带宽要求低。当对长消息进行加解密时，三类密码系统有相同的带宽要求，但应用于短消息时ECC带宽要求却低得多。带宽要求低使ECC在无线网络领域具有广泛的应用前景。</p><h2 id="MybatisPlus批量删除和批量新增问题"><a href="#MybatisPlus批量删除和批量新增问题" class="headerlink" title="MybatisPlus批量删除和批量新增问题"></a>MybatisPlus批量删除和批量新增问题</h2><p>mybatis plus插入就是在跑for循环。</p><h2 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="Arrays.sort"></a>Arrays.sort</h2><p><strong>双轴快排</strong>（DualPivotQuicksort），顾名思义有<strong>两个轴元素</strong>pivot1，pivot2，且pivot ≤pivot2，<strong>将序列分成三段</strong>：x &lt; pivot1、pivot1 ≤ x ≤ pivot2、x &gt;pivot2，然后分别对三段进行递归。这个算法通常会比传统的快排效率更高，也因此被作为Arrays.java中给基本类型的数据排序的具体实现。</p><p>判断数组的长度是否大于<strong>286</strong>，大于则使用归并排序</p><p>判断数组长度是否小于<strong>47</strong>，小于则直接采用插入排序</p><h2 id="为什么禁用3表以上的关联查询"><a href="#为什么禁用3表以上的关联查询" class="headerlink" title="为什么禁用3表以上的关联查询"></a>为什么禁用3表以上的关联查询</h2><ol><li>数据量大，join临时表会很大，性能差</li><li>mysql多表关联性能差</li><li>数据量大时，分表分库分服务，无法继续join</li></ol><p>解决方式：</p><ol><li>拆成多条sql</li><li>形成一个具有多表信息的冗余表</li><li>定时对多个表进行数据清洗，形成一个涉及多个表重点数据的冗余表</li></ol><blockquote><p>不要主动说自己不熟悉某一块，哪怕是同事做的，也要知道个大致过程和结构</p></blockquote><h2 id="AOP的实质是什么"><a href="#AOP的实质是什么" class="headerlink" title="AOP的实质是什么"></a>AOP的实质是什么</h2><p>核心思想就是把程序中的业务逻辑代码同通用服务分离出来</p><p>动态代理类的源码是在程序运行期间由JVM根据反射等机制动态的生成而静态代理由程序员创建或工具生成代理类的源码，再编译代理类</p><pre><code> join point(连接点)程序中的一个精确位置，通常是类中的一个方法，aop中不需要去定义一个join point point cut(切入点)本质上是捕获连接点，在aop中用来捕获需要操作类的相关方法 advice(通知)切入点上的执行代码块！是执行方面的具体操作 aspect(方面)point cut与advice集合起来就是aspect，它代表更多对象间横切的关系 introduce(引入)为对象引用附加的属性及引用，从而达到修改对象的目的</code></pre><h2 id="liunx"><a href="#liunx" class="headerlink" title="liunx"></a>liunx</h2><p>一.将目录下所有文件中包含http的全替换为https。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">"s/查找字段/替换字段/g"</span> <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> 查找字段 -rl 路径<span class="token variable">`</span></span><span class="token function">sed</span> -i <span class="token string">"s/http/https/g"</span> <span class="token string">'grep http -rl /'</span>-- i: 插入-- s/re/string :用string替换正则表达式re-- g（global） :获得内存缓冲区的内容，并替代当前模板块中的文本-- -l: 只打印匹配文件的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二.查找目录中所有包含http的文件。</p><pre class="line-numbers language-bash"><code class="language-bash">-- r 表示递归， n 表示查询结果显示行号<span class="token function">grep</span> -rn <span class="token string">"Hello"</span> ./<span class="token function">find</span> ./ -name <span class="token string">"*.*"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span>  <span class="token string">"http"</span>-- <span class="token function">grep</span> -i 忽略字符大小写的差别<span class="token function">find</span> <span class="token keyword">.</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> -ri <span class="token string">"http"</span>-- -l 表示只显示文件名<span class="token function">find</span> <span class="token keyword">.</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> -ri <span class="token string">"http"</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三.删除目录中包含https文件。</p><h2 id="redis过期"><a href="#redis过期" class="headerlink" title="redis过期"></a>redis过期</h2><pre class="line-numbers language-bash"><code class="language-bash">-- 设置一个key在当前时间<span class="token string">"seconds"</span><span class="token punctuation">(</span>秒<span class="token punctuation">)</span>之后过期。返回1代表设置成功，返回0代表key不存在或者无法设置过期时间EXPIRE key <span class="token string">"seconds"</span>--获取key的过期时间。如果key存在过期时间，返回剩余生存时间<span class="token punctuation">(</span>秒<span class="token punctuation">)</span>；如果key是永久的，返回-1；如果key不存在或者已过期，返回-2TTL key--移除key的过期时间，将其转换为永久状态。如果返回1，代表转换成功。如果返回0，代表key不存在或者之前就已经是永久状态PERSIST key-- SETEX在逻辑上等价于SET和EXPIRE合并的操作，区别之处在于SETEX是一条命令，而命令的执行是原子性的，所以不会出现并发问题SETEX key <span class="token string">"seconds"</span> <span class="token string">"value"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode l <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        ListNode newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>        ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="大量数组求并集"><a href="#大量数组求并集" class="headerlink" title="大量数组求并集"></a>大量数组求并集</h2><h2 id="回答时总—分，先说要点"><a href="#回答时总—分，先说要点" class="headerlink" title="回答时总—分，先说要点"></a>回答时总—分，先说要点</h2><h2 id="用socket实现tcp-udp的区别"><a href="#用socket实现tcp-udp的区别" class="headerlink" title="用socket实现tcp/udp的区别"></a>用socket实现tcp/udp的区别</h2><p>实现方法以及API不同然主要取决去二者的各自特点。1)TCP是面向连接的传输控制协议，而UDP提供了无连接的数据报服务；（2）TCP具有高可靠性，确保传输数据的正确性，不出现丢失或乱序；UDP在传输数据前不建立连接，不对数据报进行检查与修改，无须等待对方的应答，所以会出现分组丢失、重复、乱序，应用程序需要负责传输可靠性方面的所有工作；（3）也正因为以上特征，UDP具有较好的实时性，工作效率较TCP协议高；（4）UDP段结构比TCP的段结构简单，因此网络开销也小。具体二种协议没有好坏，只有适合，有时候二者结合，比如QQ就是两种协议都有，比如组播通信的时候只能用udp</p><h2 id="Jwt与token的区别"><a href="#Jwt与token的区别" class="headerlink" title="Jwt与token的区别"></a>Jwt与token的区别</h2><p>1）token对应的内容存放在Redis中<br>2）<strong>Jwt对应的playload数据存放在客户端</strong></p><p><strong>Jwt优点</strong><br>1），减轻服务端压力。<br>2），查询效率比token高。<br>3），不容易被客户端篡改数据。<br><strong>缺点</strong><br>1）如果一旦生成好一个jwt之后，后期是否可以销毁<br>2）Jwt playload数据多，占据服务器端带宽资源<br>jwt不是很安全，playload中不能存放敏感的信息，必要须加密</p><h2 id="线程数量设置考虑"><a href="#线程数量设置考虑" class="headerlink" title="线程数量设置考虑"></a>线程数量设置考虑</h2><p> 单处理器线程设置 </p><ul><li>如果是CPU密集型应用，则线程池大小设置为n+1</li><li>如果是IO密集型应用，则线程池大小设置为2n+1（因为io读数据或者缓存的时候，线程等待，此时如果多开线程，能有效提高cpu利用率）</li></ul><p>最佳线程数目 = （线程等待时间与线程CPU时间之比 + 1）* CPU数目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;filter和Interceptor的区别&quot;&gt;&lt;a href=&quot;#filter和Interceptor的区别&quot; class=&quot;headerlink&quot; title=&quot;filter和Interceptor的区别&quot;&gt;&lt;/a&gt;filter和Interceptor的区别&lt;/
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>一些面试题</title>
    <link href="https://arthurjq.com/2021/09/28/mian-shi/yi-xie-mian-shi-ti/"/>
    <id>https://arthurjq.com/2021/09/28/mian-shi/yi-xie-mian-shi-ti/</id>
    <published>2021-09-27T18:00:25.000Z</published>
    <updated>2022-07-11T07:01:57.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限流器"><a href="#限流器" class="headerlink" title="限流器"></a>限流器</h2><p>固定窗口，滑动窗口，漏桶（阻塞队列），令牌桶（算数和时间差实现）</p><p><a href="https://cloud.tencent.com/developer/article/1165247" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1165247</a></p><h2 id="快排，归并，堆排序一定要会写"><a href="#快排，归并，堆排序一定要会写" class="headerlink" title="快排，归并，堆排序一定要会写"></a>快排，归并，堆排序一定要会写</h2><h3 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h3><p>底层是基于动态数组，初始容量为<strong>10</strong>，<strong>达到当前上限 + 1时才扩容</strong>，根据下标随机访问数组元素的效率高，向数组尾部添加元素的效率高；但是，删除数组中的数据以及向数组中间添加数据效率低，因为需要移动数组。例如最坏的情况是删除第一个数组元素，则需要将第2至第n个数组元素各向前移动一位。</p><p>而之所以称为动态数组，是因为Arraylist在数组元素超过其容量大，Arraylist可以进行扩容（针对JDK1.8  数组扩容后的容量是扩容前的1.5倍），Arraylist源码中最大的数组容量是Integer.MAX_VALUE-8，对于空出的8位，目前解释是 ：①存储Headerwords；②避免一些机器内存溢出，减少出错几率，所以少分配③最大还是能支持到Integer.MAX_VALUE（当Integer.MAX_VALUE-8依旧无法满足需求时）。</p><p>大端将高位存放在低地址，记住大端才是符合人类正常思维！</p><h3 id="HashMap的put过程，存null怎么存"><a href="#HashMap的put过程，存null怎么存" class="headerlink" title="HashMap的put过程，存null怎么存"></a>HashMap的put过程，存null怎么存</h3><p>前面那个for循环，是在table[0]链表中查找key为null的元素，如果找到，则将value重新赋值给这个元素的value，并返回原来的value。<br>如果上面for循环没找到则将这个元素添加到talbe[0]链表的表头。</p><h3 id="利用sql语句统计各年龄段的数量"><a href="#利用sql语句统计各年龄段的数量" class="headerlink" title="利用sql语句统计各年龄段的数量"></a>利用sql语句统计各年龄段的数量</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> age_temp<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> age<span class="token punctuation">,</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> age <span class="token operator">BETWEEN</span> <span class="token number">10</span> <span class="token operator">AND</span> <span class="token number">20</span> <span class="token keyword">THEN</span> <span class="token string">'10-20'</span><span class="token keyword">WHEN</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">'20-30'</span><span class="token keyword">END</span> <span class="token keyword">AS</span> age_temp<span class="token keyword">FROM</span> t_user<span class="token punctuation">)</span><span class="token keyword">AS</span> temp_table <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> age_temp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段查重"><a href="#字段查重" class="headerlink" title="字段查重"></a>字段查重</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 只对一个字段查重，只有PLAN_NUMBER这一列结果</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> PLAN_NUMBER  <span class="token keyword">FROM</span> psur_list<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 对多个字段去重，只有选了多个字段的结果</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> PLAN_NUMBER<span class="token punctuation">,</span>PRODUCT_NAME <span class="token keyword">FROM</span> psur_list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>期望结果：只对第一个参数PLAN_NUMBER取唯一值，可以显示其他字段</p><p>解决办法一： 使用 group_concat 函数</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> PLAN_NUMBER<span class="token punctuation">)</span> <span class="token keyword">AS</span> PLAN_NUMBER<span class="token punctuation">,</span>PRODUCT_NAME <span class="token keyword">FROM</span> psur_list <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> PLAN_NUMBER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决办法二：使用group by</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> PLAN_NUMBER<span class="token punctuation">,</span>PRODUCT_NAME <span class="token keyword">FROM</span> psur_list <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> PLAN_NUMBER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 六、Linux相关命令。查看日志中某一个时间点之后的日志信息？</p><pre class="line-numbers language-java"><code class="language-java">grep <span class="token string">'时间'</span> <span class="token string">'日志文件名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 八、虚拟内存和物理内存讨论？ </p><p>当每个进程创建的时候，内核会为进程分配4G的虚拟内存，当进程还没有开始运行时，这只是一个内存布局。实际上并不立即就把虚拟内存对应位置的程序数据和代码（比如.text .data段）拷贝到物理内存中，只是建立好虚拟内存和磁盘文件之间的映射就好（叫做存储器映射）。这个时候数据和代码还是在磁盘上的。当运行到对应的程序时，进程去寻找页表，发现页表中地址没有存放在物理内存上，而是在磁盘上，于是发生缺页异常，于是将磁盘上的数据拷贝到物理内存中。</p><p>另外在进程运行过程中，要通过malloc来动态分配内存时，也只是分配了虚拟内存，即为这块虚拟内存对应的页表项做相应设置，当进程真正访问到此数据时，才引发缺页异常。</p><p>可以认为虚拟空间都被映射到了磁盘空间中（事实上也是按需要映射到磁盘空间上，通过mmap，mmap是用来建立虚拟空间和磁盘空间的映射关系的）</p><p>协程，是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。<strong>协程在子程序内部是可中断的，然后转而执行别的子程序，在适当的时候再返回来接着执行</strong>。</p><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>封装一些作用于某种数据结构中的各元素的操作，它可以在<strong>不改变这个数据结构的前提</strong>下，定义作用于这些元素的新操作。 </p><h3 id="String的两种初始化方法的一点区别"><a href="#String的两种初始化方法的一点区别" class="headerlink" title="String的两种初始化方法的一点区别"></a>String的两种初始化方法的一点区别</h3><pre class="line-numbers language-java"><code class="language-java">String str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>“XXX”<span class="token punctuation">)</span><span class="token punctuation">;</span>String str<span class="token operator">=</span>”XXX”<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前者是java中标准的对象创建方式，其创建的对象将直接放置到堆中，每调用一次就会在堆上面创建一个新的对象；后者则会在栈中创建一个对象引用变量str，然后查看字符串池中是否存在”XXX”，如果没有，则将”XXX”存放字符串池，并令引用变量str指向它；如果已经有”XXX”，则直接令str指向它。这样充分利用了栈的数据共享优点，当然也可能是一个陷阱，对象很有可能没有创建，只不过指向一个先前已经创建的对象；而<code>new()</code>方法则能保证每次都指向新创建象。</p><h2 id="避免内存泄漏、溢出的几种常用方法"><a href="#避免内存泄漏、溢出的几种常用方法" class="headerlink" title="避免内存泄漏、溢出的几种常用方法"></a>避免内存泄漏、溢出的几种常用方法</h2><p><strong>尽早释放无用对象的引用</strong></p><p><strong>程序进行字符串处理时，尽量避免使用String，而应使用StringBuffer</strong></p><p><strong>尽量少用静态变量</strong></p><p>因为静态变量是全局的，GC不会回收</p><p><strong>避免集中创建对象尤其是大对象，如果可以的话尽量使用流操作</strong></p><p>JVM会突然需要大量内存，这时会触发GC优化系统内存环境； 一个案例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用jspsmartUpload作文件上传，运行过程中经常出现java.outofMemoryError的错误，    </span><span class="token comment" spellcheck="true">// 检查之后发现问题：组件里的代码    </span>m_totalBytes <span class="token operator">=</span> m_request<span class="token punctuation">.</span><span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_binArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>m_totalBytes<span class="token punctuation">]</span><span class="token punctuation">;</span>    totalBytes这个变量得到的数极大，导致该数组分配了很多内存空间，而且该数组不能及时释放。    <span class="token comment" spellcheck="true">// 解决办法只能换一种更合适的办法，至少是不会引发outofMemoryError的方式解决。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>尽量运用对象池技术以提高系统性能</strong></p><p>生命周期长的对象拥有生命周期短的对象时容易引发内存泄漏，例如大集合对象拥有大数据量的业务对象的时候，可以考虑分块进行处理，然后解决一块释放一块的策略。</p><p><strong>不要在经常调用的方法中创建对象，尤其是忌讳在循环中创建对象。</strong></p><p>可以适当的使用hashtable，vector 创建一组对象容器，然后从容器中去取那些对象，而不用每次new之后又丢弃。</p><p><strong>优化配置</strong></p><ul><li>设置-Xms、-Xmx相等；</li><li>设置NewSize、MaxNewSize相等；</li><li>设置Heap size, PermGen space；</li></ul><h2 id="Exception-vs-Error"><a href="#Exception-vs-Error" class="headerlink" title="Exception vs Error"></a>Exception vs Error</h2><p>Exception：可以预见到的异常情况，应该被捕获或者处理，分为IOException和RuntimeException</p><p>Error：出现乐错误系统不能正常运行或恢复，一般情况不容易发送</p><h2 id="调用api阻塞，怎么处理？"><a href="#调用api阻塞，怎么处理？" class="headerlink" title="调用api阻塞，怎么处理？"></a>调用api阻塞，怎么处理？</h2><p>死锁</p><p>被拦截了</p><p>读从库时在执行sql</p><p>在排队</p><p>服务挂了</p><h2 id="动态内存与静态内存的区别"><a href="#动态内存与静态内存的区别" class="headerlink" title="动态内存与静态内存的区别"></a>动态内存与静态内存的区别</h2><ol><li>静态内存</li></ol><p>静态内存是指在程序开始运行时由编译器分配的内存，它的分配是在程序开始编译时完成的，不占用CPU资源。</p><p>程序中的各种变量，在编译时系统已经为其分配了所需的内存空间，当该变量在作用域内使用完毕时，系统会</p><p>自动释放所占用的内存空间。</p><p>变量的分配与释放，都无须程序员自行考虑。</p><p>eg:</p><p>基本类型，数组</p><ol start="2"><li>动态内存</li></ol><p>用户无法确定空间大小，或者空间太大，栈上无法分配时，会采用动态内存分配。</p><ol start="3"><li>区别</li></ol><p>a) 静态内存分配在编译时完成，不占用CPU资源; 动态内存分配在运行时，分配与释放都占用CPU资源。</p><p>b) 静态内存在栈上分配; 动态内存在堆上分配。</p><p>c) 动态内存分配需要指针和引用类型支持，静态不需要。</p><p>d) 静态内存分配是按计划分配，由编译器负责; 动态内存分配是按需分配，由程序员负责。</p><h2 id="Spring和SpringBoot区别"><a href="#Spring和SpringBoot区别" class="headerlink" title="Spring和SpringBoot区别"></a>Spring和SpringBoot区别</h2><p>Spring包含SpringBoot</p><p>SpringBoot的核心能力：</p><p>1、内嵌 Servlet 容器，可以直接打成jar包，通过 java -jar xx.jar 运行项目。</p><p>2、提供 starter pom 系列，简化maven的依赖加载，减少依赖冲突的发生。</p><p>3、支持自动化配置，如下图。application.properties 文件在引入springboot和未引入springboot时，是不一样的。</p><p><strong>目标是提高使用者的开发效率</strong></p><h2 id="范围查询是否走索引"><a href="#范围查询是否走索引" class="headerlink" title="范围查询是否走索引"></a>范围查询是否走索引</h2><ol><li>假如where条件中，涉及到了多个索引，MySQL会选择一个最佳索引。最佳索引就是选择性最高的索引，因为它可以过滤掉很多的无用数据行。</li><li>0.30比例值。以前可能是&gt;0.30就不走索引，但文档最低版本是5.6已无从考证。</li></ol><p>并不是给一个列建立了索引，对这个列进行<strong>范围查询</strong>的时候，就会走索引，他是有一个比例值的。比例值会随着<strong>版本、服务器、IO、数据量、数据重复情况</strong>而不同。也就是说，同一个版本，同一个库表，此时和下一时刻，比例值就可能不一样。测试中途遇到过该问题。</p><p>MySQL5.6版本的时候，进行了优化，ICP 和 MRR，极大提升性能。</p><p>FORCE INDEX 的作用，特殊情况下，可以只返回索引列。</p><p><a href="https://juejin.cn/post/6864150089905274893" target="_blank" rel="noopener">https://juejin.cn/post/6864150089905274893</a></p><h2 id="数据库的dml、ddl和dcl的概念"><a href="#数据库的dml、ddl和dcl的概念" class="headerlink" title="数据库的dml、ddl和dcl的概念"></a>数据库的dml、ddl和dcl的概念</h2><p>DML就是我们经常用到的SELECT、INSERT、UPDATE和DELETE语句</p><p>DDL就是我们在创建表的时候用到的一些语句，比如说CREATE、ALTER、DROP等。DDL主要是用在定义或改变表的结构、数据类型、表之间的链接或约束等初始化工作上。</p><p>DCL是用来设置或更改数据库用户或角色权限的语句，包括GRANT、DENY、REVOKE等语句，这个层面应该主要是DBA做的事情了，但是如果是在小公司可能你还是要干，像部署数据库的时候你不会怎么行，特别是ORACLE这种用户驱动的数据库。</p><h2 id="mysql大数据分页查询优化"><a href="#mysql大数据分页查询优化" class="headerlink" title="mysql大数据分页查询优化"></a>mysql大数据分页查询优化</h2><p>基于索引再排序</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> id_pk <span class="token operator">></span> <span class="token punctuation">(</span>pageNum<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id_pk <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql大数据量使用limit分页，随着页码的增大，查询效率越低下</p><h3 id="对limit分页问题的性能优化方法"><a href="#对limit分页问题的性能优化方法" class="headerlink" title="对limit分页问题的性能优化方法"></a>对limit分页问题的性能优化方法</h3><p>利用表的覆盖索引来加速分页查询：我们都知道，利用了索引查询的语句中如果只包含了那个索引列（覆盖索引），那么这种情况会查询很快。</p><p>因为利用索引查找有优化算法，且数据就在查询索引上面，不用再去找相关的数据地址了，这样节省了很多时间。另外Mysql中也有相关的索引缓存，在并发高的时候利用缓存就效果更好了。</p><p>在我们的例子中，我们知道id字段是主键，自然就包含了默认的主键索引。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//这次我们之间查询最后一页的数据（利用覆盖索引，只包含id列），如下：</span><span class="token keyword">select</span> id <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">866613</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token number">0.2</span>秒<span class="token comment" spellcheck="true">//相对于查询了所有列的37.44秒，提升了大概100多倍的速度</span><span class="token comment" spellcheck="true">//那么如果我们也要查询所有列，有两种方法，</span><span class="token comment" spellcheck="true">//一种是id>=的形式，</span><span class="token comment" spellcheck="true">//另一种就是利用join，看下实际情况：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> ID <span class="token operator">></span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">866613</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">20</span><span class="token comment" spellcheck="true">//查询时间为0.2秒！</span><span class="token comment" spellcheck="true">//另一种写法</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token number">a</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">866613</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token comment" spellcheck="true">//查询时间也很短！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1024-768的24位真彩色BMP图像至少需要多大存储空间"><a href="#1024-768的24位真彩色BMP图像至少需要多大存储空间" class="headerlink" title="1024*768的24位真彩色BMP图像至少需要多大存储空间"></a>1024*768的24位真彩色BMP图像至少需要多大存储空间</h2><p><code>1024*768*24/8/1024/1024=2.25MB</code></p><p>RGB三管道，每个管道8bit</p><h2 id="线程从阻塞到就绪的方式"><a href="#线程从阻塞到就绪的方式" class="headerlink" title="线程从阻塞到就绪的方式"></a>线程从阻塞到就绪的方式</h2><p>线程从阻塞状态恢复到就绪状态，有三种途径：自动恢复、用<code>resume()</code>方法恢复，notify方法恢复</p><h2 id="netty处理大小端"><a href="#netty处理大小端" class="headerlink" title="netty处理大小端"></a>netty处理大小端</h2><p>不太懂</p><h2 id="regedit打开注册表"><a href="#regedit打开注册表" class="headerlink" title="regedit打开注册表"></a>regedit打开注册表</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;限流器&quot;&gt;&lt;a href=&quot;#限流器&quot; class=&quot;headerlink&quot; title=&quot;限流器&quot;&gt;&lt;/a&gt;限流器&lt;/h2&gt;&lt;p&gt;固定窗口，滑动窗口，漏桶（阻塞队列），令牌桶（算数和时间差实现）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.ten
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二维矩阵原地旋转</title>
    <link href="https://arthurjq.com/2021/09/16/algorithm/matrix-rotate/"/>
    <id>https://arthurjq.com/2021/09/16/algorithm/matrix-rotate/</id>
    <published>2021-09-15T16:31:25.000Z</published>
    <updated>2021-09-15T16:35:30.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h4 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像</a></h4><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><p>思路是这样的：</p><pre><code>[1,2,3][4,5,6][7,8,9]</code></pre><p>先由对角线 <code>[1, 5, 9]</code> 为轴进行翻转：</p><pre><code>[1,4,7][2,5,8][3,6,9]</code></pre><p>再对每一行以中点进行翻转，就得到了</p><pre><code>[7,4,1][8,5,2][9,6,3]</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先以对角线（左上-右下）为轴进行翻转</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 再对每一行以中点进行翻转</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">,</span>right<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h4 id=&quot;48-旋转图像&quot;&gt;&lt;a href=&quot;#48-旋转图像&quot; class=&quot;headerlink&quot; title=&quot;48. 旋转图像&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>sql的时间格式</title>
    <link href="https://arthurjq.com/2021/09/12/database/sql-time/"/>
    <id>https://arthurjq.com/2021/09/12/database/sql-time/</id>
    <published>2021-09-12T11:06:21.000Z</published>
    <updated>2021-09-12T11:17:45.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CONVERT"><a href="#CONVERT" class="headerlink" title="CONVERT"></a>CONVERT</h2><p><code>CONVERT(varchar(16), 时间字段, 20)</code> 结果：2021-09-12 19:16</p><p><code>CONVERT(varchar(10), 时间字段, 23)</code> 结果：2021-09-12 </p><p><code>varchar(10)</code>表示日期输出的格式，如果不够长会发生截取</p><h2 id="日期相减操作"><a href="#日期相减操作" class="headerlink" title="日期相减操作"></a>日期相减操作</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>year<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔年</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>quarter<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔季</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>month<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔月</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>day<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔天</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>week<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔周</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>hour<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔小时</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>minute<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔分</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>second<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CONVERT&quot;&gt;&lt;a href=&quot;#CONVERT&quot; class=&quot;headerlink&quot; title=&quot;CONVERT&quot;&gt;&lt;/a&gt;CONVERT&lt;/h2&gt;&lt;p&gt;&lt;code&gt;CONVERT(varchar(16), 时间字段, 20)&lt;/code&gt; 结果：202
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="sql" scheme="https://arthurjq.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>微服务保证高可用</title>
    <link href="https://arthurjq.com/2021/09/10/project/springcloud-available/"/>
    <id>https://arthurjq.com/2021/09/10/project/springcloud-available/</id>
    <published>2021-09-10T11:20:13.000Z</published>
    <updated>2022-06-26T14:43:12.726Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文章部分内容参考 李云华《从 0 开始学架构》杨波老师《微服务》</strong></p><h2 id="如何保障服务的高可用"><a href="#如何保障服务的高可用" class="headerlink" title="如何保障服务的高可用"></a>如何保障服务的高可用</h2><p>服务冗余、无状态化、数据存储高可用、柔性化、兜底容错、负载均衡、服务限流、服务监控等。。。</p><h3 id="服务冗余"><a href="#服务冗余" class="headerlink" title="服务冗余"></a>服务冗余</h3><p>每一个访问可能都会有多个服务组成而成，每个机器每个服务都可能出现问题，所以第一个考虑到的就是每个服务必须不止一份可以是多份，所谓多份一致的服务就是服务的冗余，这里说的服务泛指了机器的服务，容器的服务，还有微服务本身的服务。</p><p>在<strong>机器服务</strong>层面需要考虑，各个机器间的冗余是否有在物理空间进行隔离冗余，例如<strong>是否所有机器是否有分别部署在不同机房</strong>，如果在同一个机房是否做到了部署在不同的机柜，如果是docker容器<strong>是否部署在分别不同的物理机上面</strong>。采取的策略其实也还是根据服务的业务而定，所以需要对服务进行分级评分，从而采取不同的策略，不同的策略安全程度不同，伴随这的成本也是不同，安全等级更高的服务可能还不止考虑不同机房，还需要把各个机房所处的区域考虑进行，例如，两个机房不要处在同一个地震带上等等。</p><h4 id="无状态化"><a href="#无状态化" class="headerlink" title="无状态化"></a>无状态化</h4><p>服务的冗余会要求我们可以随时对服务进行扩容或者缩容，有可能我们想要对服务进行随时随地的扩缩容，就要求我们的服务是一个无状态化，所谓无状态化就是<strong>每个服务的服务内容和数据都是一致</strong>的。</p><p>状态保存在后端有状态的中间件中，如缓存、数据库、对象存储、大数据平台、消息队列等，这些中间件设计之初，就考虑了扩容时状态的迁移、复制、同步等机制，不用业务层关心。</p><p>假设，我们需要对网关进行扩容，我们只需要增加服务就可以，而不需要去考虑网关是否存储了一个额外的数据。</p><h3 id="存储高可用"><a href="#存储高可用" class="headerlink" title="存储高可用"></a>存储高可用</h3><ul><li>数据怎么进行复制</li><li>架构中每个节点的职责是什么</li><li>数据复制出现延迟怎么处理</li><li>当架构中节点出现错误怎么保证高可用</li></ul><h4 id="数据主从复制"><a href="#数据主从复制" class="headerlink" title="数据主从复制"></a>数据主从复制</h4><p>最常见最简单的存储高可用，如Mysql，redis等等。读写分离，缺点就是客户端必须感知主从关系的存在，将不同的操作发送给不同的机器进行处理，而且主从复制中，从机器负责读操作，可能因为主从复制时延大，出现数据不一致性的问题。</p><h4 id="数据主从切换"><a href="#数据主从切换" class="headerlink" title="数据主从切换"></a>数据主从切换</h4><p>刚说了主从切换存在两个问题： 1.主机故障写操作无法进行 2.需要人工将其中一台从机器升级为主机</p><p>为了解决这个两个问题，我们可以设计一套主从自动切换的方案，其中设计到对主机的状态检测，切换的决策，数据丢失和冲突的问题。</p><h4 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h4><p>分库分表</p><ul><li>做数据分片，如何将数据映射到节点</li><li>数据分片的特征值，即按照数据中的哪一个属性（字段）来分片</li><li>数据分片的元数据的管理，如何保证元数据服务器的高性能、高可用，如果是一组服务器，如何保证强一致性</li></ul><h3 id="异步化"><a href="#异步化" class="headerlink" title="异步化"></a>异步化</h3><p>如果在业务允许的情况下，用户调用只给用户必须要的结果，而不是需要同步的结果可以放在另外的地方异步去操作，这就减少了超时的风险也把复杂业务进行拆分减低复杂度。</p><p>当然异步化的好处是非常多，例如削峰解耦等等，这里只是从可用的角度出发。</p><p>异步化大致有这三种的实现方式：</p><ul><li>服务端接收到请求后，创建新的线程处理业务逻辑，服务端先回应答给客户端。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/arthurjinquan/blogimage/img/pic/springcloud-available-1.jpg" alt></p><ul><li>服务端接收到请求后，服务端先回应答给客户端，再继续处理业务逻辑。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/arthurjinquan/blogimage/img/pic/springcloud-available-2.jpg" alt></p><ul><li>服务端接收到请求后，服务端把信息保存在消息队列或者数据库，回应答给客户端，服务端业务处理进程再从消息队列或者数据库上读取信息处理业务逻辑。</li></ul><h3 id="柔性化"><a href="#柔性化" class="headerlink" title="柔性化"></a>柔性化</h3><p>在电商订单的场景中，下单，扣库存，支付是一定要执行的步骤，如果失败则订单失败，但是<strong>加积分，发货，售后是可以柔性处理，就算出错也可以通过日志报警让人工去检查</strong>，没必要为加积分损失整个下单的可用性。</p><h3 id="兜底-容错"><a href="#兜底-容错" class="headerlink" title="兜底/容错"></a>兜底/容错</h3><p><img src="https://cdn.jsdelivr.net/gh/arthurjinquan/blogimage/img/pic/springcloud-available-3.jpg" alt></p><p>兜底是可能我们经常谈论的是一种降级的方案，方案是用来实施，但是这里兜底可能更多是一种思想，更多的是一种预案，每个操作都可以犯错，我们也可以接受犯错，但是每个犯错我们都必须有一个兜底的预案，这个兜底的预案其实就是我们的容错或者说最大程度避免更大伤害的措施，实际上也是一个不断降级的过程。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡的实现有硬件和软件，硬件有F5，A10等机器，软件有LVS，nginx，HAProxy等等，负载均衡的算法有 random ， RoundRobin ， ConsistentHash等等。</p><p><img src="https://cdn.jsdelivr.net/gh/arthurjinquan/blogimage/img/pic/springcloud-available-4.jpg" alt></p><p>转移流程：Nginx 根据给定好的负载均衡算法进行调度，当请求到 Tomcat1，Nginx 发现 Tomcat1 出现连接错误（节点失效），Nginx 会根据一定的机制将 Tomcat1 从调用的负载列表中清除。</p><p>在下一次请求，Nginx 不会分配请求到有问题的 Tomcat1 上面，会将请求转移到其他的 Tomcat 之上。</p><p>节点失效：Nginx 默认判断节点失效是以 connect refuse 和 timeout 为标准，在对某个节点进行 fails 累加，当 fails 大于 max_fails 时，该节点失效。</p><p>节点恢复：当某个节点失败的次数大于 max_fails 时，但不超过 fail_timeout，Nginx 将不再对该节点进行探测，直到超过失效时间或者所有的节点都失效，Nginx 会对节点进行重新探测。</p><h3 id="服务限流降级熔断"><a href="#服务限流降级熔断" class="headerlink" title="服务限流降级熔断"></a>服务限流降级熔断</h3><p>如果你的某个服务挂了，那么你的hystrix会走熔断器，然后就会降级，你需要考虑到各个服务的降级逻辑。</p><p>举一些常见的例子：</p><ul><li>如果查询数据的服务挂了，你可以查本地的缓存</li><li>如果写入数据的服务挂了，你可以先把这个写入操作记录日志到比如mysql里，或者写入MQ里，后面再慢慢恢复</li><li>如果redis挂了，你可以查mysql</li><li>如果mysql挂了，你可以把操作日志记录到es里去，后面再慢慢恢复数据。</li></ul><p>具体用什么降级策略，要根据业务来定，不是一成不变的。</p><h3 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h3><p>服务监控是微服务治理的一个重要环节，监控系统的完善程度直接影响到我们微服务质量的好坏，我们的微服务在线上运行的时候有没有一套完善的监控体系能去了解到它的健康情况，对整个系统的可靠性和稳定性是非常重要，可靠性和稳定性是高可用的一个前提保证。</p><h2 id="从手段看高可用"><a href="#从手段看高可用" class="headerlink" title="从手段看高可用"></a>从手段看高可用</h2><p>主要使用的技术手段是服务和数据的冗余备份和失效转移，一组服务或一组数据都能在多节点上，之间相互备份。</p><p>当一台机器宕机或出现问题的时候，可以从当前的服务切换到其他可用的服务，不影响系统的可用性，也不会导致数据丢失。</p><h2 id="从架构看高可用"><a href="#从架构看高可用" class="headerlink" title="从架构看高可用"></a>从架构看高可用</h2><p>保持简单的架构，目前多数网站采用的是比较经典的分层架构，应用层，服务层，数据层。</p><p>应用层是处理一些业务逻辑，服务层提供一些数据和业务紧密相关服务，数据层负责对数据进行读写。</p><p>简单的架构可以使应用层，服务层可以保持无状态化进行水平扩展，这个属于计算高可用。</p><p>相比计算高可用，在数据层思考的高可用则属于数据高可用，数据高可用相比计算高可用需要考虑到数据的一致性问题会更加的复杂。</p><p>这个时候 CAP 理论在里面会发挥关键的作用，究竟是选择 AP 或 CP，这个得根据业务去选择模型。</p><h2 id="从硬件看高可用"><a href="#从硬件看高可用" class="headerlink" title="从硬件看高可用"></a>从硬件看高可用</h2><p>首先得确认硬件总是可能坏的，网络总是不稳定的。解决它的方法也是一个服务器不够就来多几个，一个机柜不够就来几个，一个机房不够就来几个。</p><h2 id="从软件看高可用"><a href="#从软件看高可用" class="headerlink" title="从软件看高可用"></a>从软件看高可用</h2><p>软件的开发不严谨，发布不规范也是导致各种不可用出现，通过控制软件开发过程质量监控，通过测试，预发布，灰度发布等手段也是减少不可用的措施。</p><h2 id="从治理看高可用"><a href="#从治理看高可用" class="headerlink" title="从治理看高可用"></a>从治理看高可用</h2><p>一个系统在线上跑的好好的，但我们也不能确保它在下一秒会不会出现不可用状态。</p><p>将服务规范化，事前做好服务分割，做好服务监控，预判不可用的出现，在不可用出现之前发现问题，解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;文章部分内容参考 李云华《从 0 开始学架构》杨波老师《微服务》&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何保障服务的高可用&quot;&gt;&lt;a href=&quot;#如何保障服务的高可用&quot; class=&quot;headerlink&quot; title=&quot;如何保障服务的高可用&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="springcloud" scheme="https://arthurjq.com/tags/springcloud/"/>
    
  </entry>
  
</feed>
