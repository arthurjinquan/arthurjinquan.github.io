<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锦泉^-^</title>
  
  <subtitle>锦泉的备忘笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arthurjq.com/"/>
  <updated>2023-07-05T12:34:17.937Z</updated>
  <id>https://arthurjq.com/</id>
  
  <author>
    <name>锦泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenMMLab和Paddle</title>
    <link href="https://arthurjq.com/2023/06/28/paddle-he-openmmlab/"/>
    <id>https://arthurjq.com/2023/06/28/paddle-he-openmmlab/</id>
    <published>2023-06-28T06:34:10.000Z</published>
    <updated>2023-07-05T12:34:17.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenMMLab"><a href="#OpenMMLab" class="headerlink" title="OpenMMLab"></a>OpenMMLab</h2><p><strong>学术研究、打比赛</strong></p><p>OpenMMLab现在也基本囊括了所有计算机视觉任务。OpenMMlab系列的开源项目，代码模块化、抽象做得比较好，容易拓展，对新手不太友好，但是对相对资深的从业者，无论是学术研究还是打比赛，比较友好。</p><p>OpenMMLab将MMDetection打造成了一个爆款，目标检测在所有计算机视觉任务中是重要性和难度结合得最好的任务。分类很重要，但是分类非常简单，实现起来难度不大；实例分割实现起来难度较大，但是却没那么重要。MMDetection紧跟学术前沿，基本所有目标检测模型都能在MMDetection中找到。</p><p>商汤的品牌背书，商汤公司的推广，再加上MMDetection这个爆款，整个OpenMMLab系列后面推出的开源项目都可以得到足够的流量和用户。</p><h2 id="Paddle"><a href="#Paddle" class="headerlink" title="Paddle"></a>Paddle</h2><p><strong>面向工业应用</strong></p><p>Paddle系列算法框架囊括了重要的计算机视觉任务。PaddlePaddle系列算法框架的优势是在工业应用上面做得比较好，对加速、部署支持得较好（服务器端、移动端、Python前端、C++前端、在线serving、TensorRT加速、模型压缩等等）。</p><p>比如PaddleDetection提供通用物体、人脸、汽车、行人的预训练模型。</p><p>PaddleOCR提供直接可以应用的OCR解决方案——从文本检测、方向矫正到文本识别整条pipeline帮你打通，还提供直接可用的中英文OCR预训练模型、OCR标注工具和数据合成工具，帮你整理好各种OCR的数据集。PaddleOCR这种一站式服务，大大降低了工业应用OCR的门槛，我想这应该是PaddleOCR能够吸引这么多人使用的重要原因。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>总体看来，OpenMMLab和Paddle系列做得比较成功，一个面向学术研究，一个面向工业应用，有点像深度学习框架中的PyTorch和TensorFlow。</p><p>OpenMMLab和百度飞桨都是目前比较受欢迎的开源深度学习框架，但是它们的定位和应用场景略有不同。OpenMMLab主要是针对计算机视觉领域，提供了一系列高质量的视觉任务代码库和模型，方便研究人员和开发者快速构建和训练视觉任务模型。而百度飞桨则是一个全面的深度学习框架，支持多种应用场景，包括计算机视觉、自然语言处理、推荐系统等。</p><p>如果你想要快速部署一个视觉任务的模型，比如目标检测、分割或识别等，可以考虑使用OpenMMLab，因为它提供了一系列预训练的模型和代码库，方便直接调用和使用。此外，OpenMMLab还提供了一个基于Docker的快速部署方案，可以快速搭建和部署模型服务。</p><p>如果你想要快速部署一个全面的深度学习应用场景的模型，可以考虑使用百度飞桨，因为它提供了全面的深度学习框架支持，并且支持多种平台和环境，包括单机、分布式、移动端等。此外，百度飞桨还提供了一个高效的部署工具——Paddle Lite，可以将深度学习模型快速部署到移动端、嵌入式设备等不同平台上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OpenMMLab&quot;&gt;&lt;a href=&quot;#OpenMMLab&quot; class=&quot;headerlink&quot; title=&quot;OpenMMLab&quot;&gt;&lt;/a&gt;OpenMMLab&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;学术研究、打比赛&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenMMLab
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="深度学习" scheme="https://arthurjq.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PaddleClas图像分类项目</title>
    <link href="https://arthurjq.com/2023/06/25/paddleclas-tu-xiang-fen-lei/"/>
    <id>https://arthurjq.com/2023/06/25/paddleclas-tu-xiang-fen-lei/</id>
    <published>2023-06-25T12:23:07.000Z</published>
    <updated>2023-07-05T12:32:33.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PaddleClas"><a href="#PaddleClas" class="headerlink" title="PaddleClas"></a>PaddleClas</h2><p><a href="https://github.com/PaddlePaddle/PaddleClas" target="_blank" rel="noopener">PaddleClas</a></p><h2 id="训练环境搭建"><a href="#训练环境搭建" class="headerlink" title="训练环境搭建"></a>训练环境搭建</h2><p><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/install/docker/linux-docker.html" target="_blank" rel="noopener">https://www.paddlepaddle.org.cn/documentation/docs/zh/install/docker/linux-docker.html</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 拉取docker镜像</span><span class="token function">sudo</span> docker pull registry.baidubce.com/paddlepaddle/paddle:2.4.2-gpu-cuda11.2-cudnn8.2-trt8.0<span class="token comment" spellcheck="true"># 官方镜像</span><span class="token function">sudo</span> docker run -id --name face --gpus all --shm-size<span class="token operator">=</span>64G -p 33331:22 -p 9100:9100 -p 9101:9101  registry.baidubce.com/paddlepaddle/paddle:2.4.2-gpu-cuda11.2-cudnn8.2-trt8.0 <span class="token function">bash</span><span class="token comment" spellcheck="true"># 自己做的镜像</span><span class="token function">sudo</span> docker run -id --name folds --gpus all --shm-size<span class="token operator">=</span>32G -p 33332:22 -p 9102:9102 -p 9103:9103 face_shape_cls:1.0 <span class="token function">bash</span><span class="token function">sudo</span> docker <span class="token function">exec</span> -it folds <span class="token function">bash</span><span class="token comment" spellcheck="true"># 开启ssh，远程调试用</span><span class="token function">service</span> <span class="token function">ssh</span> start<span class="token function">service</span> <span class="token function">ssh</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可忽略的报错：</p><pre><code>ERROR: onnx 1.13.1 has requirement protobuf&lt;4,&gt;=3.20.2, but you&#39;ll have protobuf 3.20.0 which is incompatible.</code></pre><h2 id="训练模型和推理"><a href="#训练模型和推理" class="headerlink" title="训练模型和推理"></a>训练模型和推理</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># global configs</span><span class="token key atrule">Global</span><span class="token punctuation">:</span>  <span class="token key atrule">checkpoints</span><span class="token punctuation">:</span> <span class="token null important">null</span>  <span class="token key atrule">pretrained_model</span><span class="token punctuation">:</span> <span class="token null important">null</span>  <span class="token key atrule">output_dir</span><span class="token punctuation">:</span> ./output/  <span class="token key atrule">device</span><span class="token punctuation">:</span> gpu  <span class="token key atrule">save_interval</span><span class="token punctuation">:</span> <span class="token number">100</span>  <span class="token key atrule">eval_during_train</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>  <span class="token key atrule">eval_interval</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">epochs</span><span class="token punctuation">:</span> <span class="token number">300</span>  <span class="token key atrule">print_batch_step</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">use_visualdl</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>  <span class="token comment" spellcheck="true"># used for static mode and model export</span>  <span class="token key atrule">image_shape</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span>  <span class="token key atrule">save_inference_dir</span><span class="token punctuation">:</span> ./inference<span class="token comment" spellcheck="true"># model architecture</span><span class="token key atrule">Arch</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ResNet50_vd  <span class="token key atrule">class_num</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># loss function config for traing/eval process</span><span class="token key atrule">Loss</span><span class="token punctuation">:</span>  <span class="token key atrule">Train</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">CELoss</span><span class="token punctuation">:</span>        <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1.0</span>  <span class="token key atrule">Eval</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">CELoss</span><span class="token punctuation">:</span>        <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token key atrule">Optimizer</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> Momentum  <span class="token key atrule">momentum</span><span class="token punctuation">:</span> <span class="token number">0.9</span>  <span class="token key atrule">lr</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Cosine    <span class="token key atrule">learning_rate</span><span class="token punctuation">:</span> <span class="token number">0.0125</span><span class="token comment" spellcheck="true">#    learning_rate: 0.05</span>    <span class="token key atrule">warmup_epoch</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token key atrule">regularizer</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">'L2'</span>    <span class="token key atrule">coeff</span><span class="token punctuation">:</span> <span class="token number">0.00002</span><span class="token comment" spellcheck="true"># data loader for train and eval</span><span class="token key atrule">DataLoader</span><span class="token punctuation">:</span>  <span class="token key atrule">Train</span><span class="token punctuation">:</span>    <span class="token key atrule">dataset</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> ImageNetDataset      <span class="token key atrule">image_root</span><span class="token punctuation">:</span> ./dataset/folds/      <span class="token key atrule">cls_label_path</span><span class="token punctuation">:</span> ./dataset/folds/train_list.txt      <span class="token key atrule">transform_ops</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">DecodeImage</span><span class="token punctuation">:</span>            <span class="token key atrule">to_rgb</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>            <span class="token key atrule">channel_first</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>        <span class="token punctuation">-</span> <span class="token key atrule">RandCropImage</span><span class="token punctuation">:</span>            <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">224</span>        <span class="token punctuation">-</span> <span class="token key atrule">RandFlipImage</span><span class="token punctuation">:</span>            <span class="token key atrule">flip_code</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">-</span> <span class="token key atrule">NormalizeImage</span><span class="token punctuation">:</span>            <span class="token key atrule">scale</span><span class="token punctuation">:</span> 1.0/255.0            <span class="token key atrule">mean</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span>            <span class="token key atrule">std</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span>            <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> DistributedBatchSampler      <span class="token key atrule">batch_size</span><span class="token punctuation">:</span> <span class="token number">16</span>      <span class="token key atrule">drop_last</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>      <span class="token key atrule">shuffle</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>    <span class="token key atrule">loader</span><span class="token punctuation">:</span>      <span class="token key atrule">num_workers</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">use_shared_memory</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>  <span class="token key atrule">Eval</span><span class="token punctuation">:</span>    <span class="token key atrule">dataset</span><span class="token punctuation">:</span>       <span class="token key atrule">name</span><span class="token punctuation">:</span> ImageNetDataset      <span class="token key atrule">image_root</span><span class="token punctuation">:</span> ./dataset/folds/      <span class="token key atrule">cls_label_path</span><span class="token punctuation">:</span> ./dataset/folds/val_list.txt      <span class="token key atrule">transform_ops</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">DecodeImage</span><span class="token punctuation">:</span>            <span class="token key atrule">to_rgb</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>            <span class="token key atrule">channel_first</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>        <span class="token punctuation">-</span> <span class="token key atrule">ResizeImage</span><span class="token punctuation">:</span>            <span class="token key atrule">resize_short</span><span class="token punctuation">:</span> <span class="token number">256</span>        <span class="token punctuation">-</span> <span class="token key atrule">CropImage</span><span class="token punctuation">:</span>            <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">224</span>        <span class="token punctuation">-</span> <span class="token key atrule">NormalizeImage</span><span class="token punctuation">:</span>            <span class="token key atrule">scale</span><span class="token punctuation">:</span> 1.0/255.0            <span class="token key atrule">mean</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span>            <span class="token key atrule">std</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span>            <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> DistributedBatchSampler      <span class="token key atrule">batch_size</span><span class="token punctuation">:</span> <span class="token number">32</span>      <span class="token key atrule">drop_last</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>      <span class="token key atrule">shuffle</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>    <span class="token key atrule">loader</span><span class="token punctuation">:</span>      <span class="token key atrule">num_workers</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">use_shared_memory</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span class="token key atrule">Infer</span><span class="token punctuation">:</span>  <span class="token key atrule">infer_imgs</span><span class="token punctuation">:</span> docs/images/inference_deployment/whl_demo.jpg  <span class="token key atrule">batch_size</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">transforms</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">DecodeImage</span><span class="token punctuation">:</span>        <span class="token key atrule">to_rgb</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>        <span class="token key atrule">channel_first</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>    <span class="token punctuation">-</span> <span class="token key atrule">ResizeImage</span><span class="token punctuation">:</span>        <span class="token key atrule">resize_short</span><span class="token punctuation">:</span> <span class="token number">256</span>    <span class="token punctuation">-</span> <span class="token key atrule">CropImage</span><span class="token punctuation">:</span>        <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">224</span>    <span class="token punctuation">-</span> <span class="token key atrule">NormalizeImage</span><span class="token punctuation">:</span>        <span class="token key atrule">scale</span><span class="token punctuation">:</span> 1.0/255.0        <span class="token key atrule">mean</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span>        <span class="token key atrule">std</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span>        <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">-</span> <span class="token key atrule">ToCHWImage</span><span class="token punctuation">:</span>  <span class="token key atrule">PostProcess</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Topk    <span class="token key atrule">topk</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">class_id_map_file</span><span class="token punctuation">:</span> ./dataset/folds/label_list.txt<span class="token key atrule">Metric</span><span class="token punctuation">:</span>  <span class="token key atrule">Train</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">TopkAcc</span><span class="token punctuation">:</span>        <span class="token key atrule">topk</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token key atrule">Eval</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">TopkAcc</span><span class="token punctuation">:</span>        <span class="token key atrule">topk</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练命令"><a href="#训练命令" class="headerlink" title="训练命令"></a>训练命令</h3><pre class="line-numbers language-bash"><code class="language-bash">python tools/train.py -c ./ppcls/configs/quick_start/ResNet50_vd.yaml -o Arch.pretrained<span class="token operator">=</span>True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>训练后会在 <code>PaddleClas/output/</code> 目录下生成模型文件</p><p>部分结果：</p><pre class="line-numbers language-bash"><code class="language-bash">CELoss: 0.08261, loss: 0.08261, top1: 0.98000<span class="token punctuation">[</span>2023/06/20 13:36:26<span class="token punctuation">]</span> ppcls INFO: <span class="token punctuation">[</span>Eval<span class="token punctuation">]</span><span class="token punctuation">[</span>Epoch 100<span class="token punctuation">]</span><span class="token punctuation">[</span>Iter: 0/4<span class="token punctuation">]</span>CELoss: 0.07598, loss: 0.07598, top1: 0.96875, batch_cost: 0.66089s, reader_cost: 0.56775, ips: 48.41936 images/sec<span class="token punctuation">[</span>2023/06/20 13:36:27<span class="token punctuation">]</span> ppcls INFO: <span class="token punctuation">[</span>Eval<span class="token punctuation">]</span><span class="token punctuation">[</span>Epoch 100<span class="token punctuation">]</span><span class="token punctuation">[</span>Avg<span class="token punctuation">]</span>CELoss: 0.03693, loss: 0.03693, top1: 0.99000<span class="token punctuation">[</span>2023/06/20 13:36:27<span class="token punctuation">]</span> ppcls INFO: Already save model <span class="token keyword">in</span> ./output/ResNet50_vd/best_model<span class="token punctuation">[</span>2023/06/20 13:36:27<span class="token punctuation">]</span> ppcls INFO: <span class="token punctuation">[</span>Eval<span class="token punctuation">]</span><span class="token punctuation">[</span>Epoch 100<span class="token punctuation">]</span><span class="token punctuation">[</span>best metric: 0.9899999499320984<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="推理命令"><a href="#推理命令" class="headerlink" title="推理命令"></a>推理命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 黑眼圈推理命令</span>python tools/infer.py -c black_ResNet50.yaml -o Infer.infer_imgs<span class="token operator">=</span>dataset/black/black/2000855.jpg -o Global.pretrained_model<span class="token operator">=</span>output/ResNet50_vd/best_model<span class="token comment" spellcheck="true"># 法令纹推理命令</span>python tools/infer.py -c folds_ResNet50.yaml -o Infer.infer_imgs<span class="token operator">=</span>dataset/folds/folds/2000358.png -o Global.pretrained_model<span class="token operator">=</span>output/ResNet50_vd/best_model<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务化部署"><a href="#服务化部署" class="headerlink" title="服务化部署"></a>服务化部署</h2><h3 id="分类模型导出"><a href="#分类模型导出" class="headerlink" title="分类模型导出"></a>分类模型导出</h3><p>参考：<a href="https://github.com/PaddlePaddle/PaddleClas/blob/release/2.5/docs/zh_CN/deployment/export_model.md" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleClas/blob/release/2.5/docs/zh_CN/deployment/export_model.md</a></p><p><a href="https://blog.csdn.net/loutengyuan/article/details/126674945" target="_blank" rel="noopener">https://blog.csdn.net/loutengyuan/article/details/126674945</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 黑眼圈导出推理模型</span>python tools/export_model.py \    -c black_ResNet50.yaml \    -o Global.pretrained_model<span class="token operator">=</span>output/ResNet50_vd/best_model \    -o Global.save_inference_dir<span class="token operator">=</span>./deploy/model/black_ResNet50_infer<span class="token comment" spellcheck="true"># 法令纹导出推理模型</span>python tools/export_model.py \    -c folds_ResNet50.yaml \    -o Global.pretrained_model<span class="token operator">=</span>output/ResNet50_vd/best_model \    -o Global.save_inference_dir<span class="token operator">=</span>./deploy/model/folds_ResNet50_infer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就能在你的保存路径中得到inference 模型。</p><p>用 paddle_serving_client 命令把下载的 inference 模型转换成易于 Server 部署的模型格式：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> deploy/model<span class="token comment" spellcheck="true"># 转换 ResNet50_vd 模型</span><span class="token comment" spellcheck="true"># 黑眼圈</span>python3.7 -m paddle_serving_client.convert \--dirname ./black_ResNet50_infer/ \--model_filename inference.pdmodel  \--params_filename inference.pdiparams \--serving_server ./black_ResNet50_vd_serving/ \--serving_client ./black_ResNet50_vd_client/<span class="token comment" spellcheck="true"># 法令纹</span>python3.7 -m paddle_serving_client.convert \--dirname ./folds_ResNet50_infer/ \--model_filename inference.pdmodel  \--params_filename inference.pdiparams \--serving_server ./folds_ResNet50_vd_serving/ \--serving_client ./folds_ResNet50_vd_client/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动服务命令"><a href="#启动服务命令" class="headerlink" title="启动服务命令"></a>启动服务命令</h3><pre class="line-numbers language-python"><code class="language-python">python3<span class="token number">.7</span> folds_classification_web_service<span class="token punctuation">.</span>py <span class="token operator">&amp;</span><span class="token operator">></span>log<span class="token punctuation">.</span>txt <span class="token operator">&amp;</span>python3<span class="token number">.7</span> black_classification_web_service<span class="token punctuation">.</span>py <span class="token operator">&amp;</span><span class="token operator">></span>log<span class="token punctuation">.</span>txt <span class="token operator">&amp;</span><span class="token comment" spellcheck="true"># 停止服务</span>python3<span class="token number">.7</span> <span class="token operator">-</span>m paddle_serving_server<span class="token punctuation">.</span>serve stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PaddleClas&quot;&gt;&lt;a href=&quot;#PaddleClas&quot; class=&quot;headerlink&quot; title=&quot;PaddleClas&quot;&gt;&lt;/a&gt;PaddleClas&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/PaddlePadd
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="深度学习" scheme="https://arthurjq.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python json返回unicode转utf8</title>
    <link href="https://arthurjq.com/2022/12/30/unicode/"/>
    <id>https://arthurjq.com/2022/12/30/unicode/</id>
    <published>2022-12-30T08:16:15.000Z</published>
    <updated>2022-12-30T08:21:32.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json-dumps作妖"><a href="#json-dumps作妖" class="headerlink" title="json.dumps作妖"></a>json.dumps作妖</h2><p>postman返回正常，估计是自动做了转换。。。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">return</span> web<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>body<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>detect_ret<span class="token punctuation">)</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dumps设置ensure_ascii为False</span><span class="token keyword">return</span> web<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>body<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>detect_ret<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">'application/json'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;json-dumps作妖&quot;&gt;&lt;a href=&quot;#json-dumps作妖&quot; class=&quot;headerlink&quot; title=&quot;json.dumps作妖&quot;&gt;&lt;/a&gt;json.dumps作妖&lt;/h2&gt;&lt;p&gt;postman返回正常，估计是自动做了转换。。。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="https://arthurjq.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>重装VMware Tools</title>
    <link href="https://arthurjq.com/2022/11/09/vmwaretools/"/>
    <id>https://arthurjq.com/2022/11/09/vmwaretools/</id>
    <published>2022-11-09T11:35:52.000Z</published>
    <updated>2022-12-30T08:10:42.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="卸载vmware-tools"><a href="#卸载vmware-tools" class="headerlink" title="卸载vmware tools"></a>卸载vmware tools</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt purge open-vm-tools-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载完成后，先关闭虚拟机，然后再重新启动，在开始启动还没有进入系统时，重新安装vmware tools选项这时可以点击了。</p><p>点击安装vmware tools，进入系统后，左边的图标栏会多出一个光盘，点击进入光盘，将里面的压缩包文件VMwareTools-10.3.23-16594550.tar.gz复制到桌面。<br>切换到超级用户。<br>解压：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xzvf VMwareTools-10.3.23-16594550.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入解压后的文件夹，运行其中的vmware-install.pl文件</p><pre class="line-numbers language-bash"><code class="language-bash">./vmware-install.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后会开始安装，这时不要无脑点回车，注意看提示的内容。<br>当看到提示xxxxxx已存在是否覆盖时，一定要输入yes，他默认的是no。大概会有两三个这样的提示，具体多少我也忘了。<br>安装完成后，关闭虚拟机，再启动虚拟机，不要直接点重启。<br>启动系统之后，不出意外的话，你应该能在/mnt/hgfs/目录下看到共享目录了。（怎么设置共享目录自己百度）</p><p>我在重装完之后还遇到了无法复制粘贴的问题，这时执行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove open-vm-tools<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> open-vm-tools<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> open-vm-tools-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后重启虚拟机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;卸载vmware-tools&quot;&gt;&lt;a href=&quot;#卸载vmware-tools&quot; class=&quot;headerlink&quot; title=&quot;卸载vmware tools&quot;&gt;&lt;/a&gt;卸载vmware tools&lt;/h2&gt;&lt;pre class=&quot;line-numbers 
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>pm2</title>
    <link href="https://arthurjq.com/2022/10/26/pm2/"/>
    <id>https://arthurjq.com/2022/10/26/pm2/</id>
    <published>2022-10-26T11:33:15.000Z</published>
    <updated>2022-10-26T12:16:40.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pm2安装"><a href="#pm2安装" class="headerlink" title="pm2安装"></a>pm2安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> pm2@latest -g<span class="token comment" spellcheck="true"># 查看是否安装成功</span>pm2 -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置为开机自启"><a href="#设置为开机自启" class="headerlink" title="设置为开机自启"></a>设置为开机自启</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动项目</span><span class="token function">sudo</span> pm2 start updateServer.js<span class="token comment" spellcheck="true"># 一定要加sudo，不然启动不了</span><span class="token comment" spellcheck="true"># 看日志查看是否启动成功</span>pm2 logs 0 <span class="token comment" spellcheck="true"># 0是项目id</span><span class="token comment" spellcheck="true"># 保存 pm2 进程列表以在服务器重新启动后重新启动它们</span>pm2 save <span class="token comment" spellcheck="true"># 运行不通过就＋sudo</span><span class="token comment" spellcheck="true"># 生成启动脚本</span>pm2 startup<span class="token comment" spellcheck="true"># 复制它的命令输入即可</span><span class="token comment" spellcheck="true"># 有可能出现error，no such file or directory，那就自己创建一个LaunchAgents文件夹就好</span><span class="token function">mkdir</span> -p /Users/huya/Library/LaunchAgents/<span class="token comment" spellcheck="true"># 再运行一次它的命令就配置完成了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pm2安装&quot;&gt;&lt;a href=&quot;#pm2安装&quot; class=&quot;headerlink&quot; title=&quot;pm2安装&quot;&gt;&lt;/a&gt;pm2安装&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>lsof</title>
    <link href="https://arthurjq.com/2022/10/20/lsof/"/>
    <id>https://arthurjq.com/2022/10/20/lsof/</id>
    <published>2022-10-20T07:14:21.000Z</published>
    <updated>2022-10-20T12:14:31.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="New"><a href="#New" class="headerlink" title="New"></a>New</h2><p><a href="https://zhuanlan.zhihu.com/p/450234442" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/450234442</a></p><h2 id="获取网络信息"><a href="#获取网络信息" class="headerlink" title="获取网络信息"></a>获取网络信息</h2><h3 id="使用-i显示所有连接"><a href="#使用-i显示所有连接" class="headerlink" title="使用-i显示所有连接"></a>使用-i显示所有连接</h3><p>有些人喜欢用netstat来获取网络连接，但是我更喜欢使用lsof来进行此项工作。结果以对我来说很直观的方式呈现，我仅仅只需改变我的语法，就可以通过同样的命令来获取更多信息。</p><pre class="line-numbers language-bash"><code class="language-bash">语法: <span class="token function">lsof</span> -i<span class="token punctuation">[</span>46<span class="token punctuation">]</span> <span class="token punctuation">[</span>protocol<span class="token punctuation">]</span><span class="token punctuation">[</span>@hostname<span class="token operator">|</span>hostaddr<span class="token punctuation">]</span><span class="token punctuation">[</span>:service<span class="token operator">|</span>port<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示所有连接</span><span class="token function">lsof</span> -iCOMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEjava      3068 huya   11u  IPv6  68707      0t0  TCP localhost:63342 <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span>java      3068 huya   32u  IPv6  68165      0t0  TCP localhost:6942 <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span>adb     138250 huya    6u  IPv4 485850      0t0  TCP localhost:5037 <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用-i 6仅获取IPv6流量</span><span class="token function">lsof</span>  -i 6<span class="token comment" spellcheck="true"># 仅显示TCP连接（同理可获得UDP连接）</span><span class="token function">lsof</span> -iTCP<span class="token comment" spellcheck="true"># 使用-i:port来显示与指定端口相关的网络信息</span><span class="token function">lsof</span> -i:端口号<span class="token comment" spellcheck="true"># 使用@host来显示指定到指定主机的连接</span><span class="token function">lsof</span>  -i@172.16.12.5<span class="token comment" spellcheck="true"># 使用@host:port显示基于主机与端口的连接</span><span class="token function">lsof</span>  -i@172.16.12.5:22<span class="token comment" spellcheck="true"># 找出正等候连接的端口</span><span class="token function">lsof</span> -i -sTCP:LISTENCOMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEjava      3068 huya   11u  IPv6  68707      0t0  TCP localhost:63342 <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span>java      3068 huya   32u  IPv6  68165      0t0  TCP localhost:6942 <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span>adb     138250 huya    6u  IPv4 485850      0t0  TCP localhost:5037 <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 杀死指定用户所做的一切事情</span><span class="token function">kill</span>  -9  <span class="token variable"><span class="token variable">`</span><span class="token function">lsof</span> -t -u huya<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;New&quot;&gt;&lt;a href=&quot;#New&quot; class=&quot;headerlink&quot; title=&quot;New&quot;&gt;&lt;/a&gt;New&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/450234442&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>idb学习</title>
    <link href="https://arthurjq.com/2022/10/20/idb/"/>
    <id>https://arthurjq.com/2022/10/20/idb/</id>
    <published>2022-10-20T03:44:07.000Z</published>
    <updated>2022-10-20T11:31:28.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="idb是什么"><a href="#idb是什么" class="headerlink" title="idb是什么"></a>idb是什么</h2><p>iOS Debug Bridge - iOS调试桥、安卓有一个很出名ADB（安卓调试桥）它可以很方便的利用PC对移动设备的连接调试、包括获取设备详情、安装｜卸载apk、重启、监控设备信息、同时给可以进行app开启、触发点击、滑动、放大等手势事件、它可以用来做app的自动化测试和手机群控！</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash">brew tap facebook/fbbrew <span class="token function">install</span> idb-companionpip3.6 <span class="token function">install</span> fb-idb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="idb指令"><a href="#idb指令" class="headerlink" title="idb指令"></a>idb指令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前pc上的所有移动设备包括模拟器信息</span>idb list-targets<span class="token comment" spellcheck="true">#启动一台设备</span>idb boot UDID<span class="token comment" spellcheck="true">#连接</span>idb connect idb connect COMPANION_HOST COMPANION_PORT<span class="token comment" spellcheck="true">#打开某app</span>idb launch com.huya.hyatWIFIAssistant.cx<span class="token comment" spellcheck="true">#点击屏幕</span>idb ui botton tap x y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="idb-companion"><a href="#idb-companion" class="headerlink" title="idb_companion"></a>idb_companion</h2><p>这idb_companion是一个gRPC在 macOS 上运行的 Objective-C++ 服务器。它与用于自动化模拟器和设备的本机 API 对话。它链接FBSimulatorControl和FBDeviceControl框架，它们是整个idb项目的一部分。</p><p>当它idb_companion充当gRPC服务器时，它会为单个iOS 目标（设备或模拟器）执行此操作。</p><p>此外，idb_companion还有一些命令是在 python CLI 中故意不可用的，这些操作与 iOS 设备管理或模拟器生命周期的操作有关。</p><p>也就是说它可以通过host：port方式远程控制设备！这个很强大！</p><h2 id="idb用途"><a href="#idb用途" class="headerlink" title="idb用途"></a>idb用途</h2><ul><li>自动化测试</li><li>iOS手机群控</li></ul><p>个人感觉用它来做自动化测试的话不是很方便、自动化测试利用Appium的WDA、结合其封装的python客户端可以更高效的编写自动化测试流程、因为它提供非常多的元素查找方式、tap、swipe、scroll等事件很方便很好用！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;idb是什么&quot;&gt;&lt;a href=&quot;#idb是什么&quot; class=&quot;headerlink&quot; title=&quot;idb是什么&quot;&gt;&lt;/a&gt;idb是什么&lt;/h2&gt;&lt;p&gt;iOS Debug Bridge - iOS调试桥、安卓有一个很出名ADB（安卓调试桥）它可以很方便的利用P
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="devicefarm" scheme="https://arthurjq.com/tags/devicefarm/"/>
    
  </entry>
  
  <entry>
    <title>docker使用</title>
    <link href="https://arthurjq.com/2022/10/19/docker/"/>
    <id>https://arthurjq.com/2022/10/19/docker/</id>
    <published>2022-10-19T09:12:17.000Z</published>
    <updated>2022-10-19T09:34:30.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker logs --tail 100 -f 2<span class="token operator">></span><span class="token operator">&amp;</span>1 provider<span class="token operator">|</span><span class="token function">grep</span> -a keyword<span class="token comment" spellcheck="true"># 查询关键字前后20行</span><span class="token function">sudo</span> docker logs --tail 100 -f 2<span class="token operator">></span><span class="token operator">&amp;</span>1 provider<span class="token operator">|</span><span class="token function">grep</span> -a keyword -A 20 -B 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="上传镜像到私有库"><a href="#上传镜像到私有库" class="headerlink" title="上传镜像到私有库"></a>上传镜像到私有库</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入到/etc/docker/</span><span class="token function">cd</span> /etc/docker/<span class="token comment" spellcheck="true"># 编辑daemon.json，没有创建一个</span>vim daemon.json<span class="token comment" spellcheck="true"># 加入以下内容后退出</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirror"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://index.docker.io/v1/"</span>,    <span class="token string">"https://registry.docker-cn.com"</span>  <span class="token punctuation">]</span>,  <span class="token string">"insecure-registries"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"http://docker-hub.local.stf.hy"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 修改完daemon.json文件后，需要让这个文件生效</span><span class="token comment" spellcheck="true">## 修改完成后reload配置文件</span><span class="token function">sudo</span> systemctl daemon-reload、<span class="token comment" spellcheck="true">## 重启docker服务</span><span class="token function">sudo</span> systemctl restart docker.service<span class="token comment" spellcheck="true">## 查看状态</span><span class="token function">sudo</span> systemctl status docker -l<span class="token comment" spellcheck="true">## 查看服务</span><span class="token function">sudo</span> docker info<span class="token comment" spellcheck="true"># 上传命令</span><span class="token function">sudo</span> docker push docker-hub.local.stf.hy/devicefarm_base:3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置insecure-registries，docker才能使用无权限验证的docker registry。</p><p>当我们需要对docker服务进行调整配置时，不用去修改主文件 docker.service的参数，通过daemon.json配置文件来管理，更为安全、合理。</p><h2 id="镜像下载到本地后上传到其他机器"><a href="#镜像下载到本地后上传到其他机器" class="headerlink" title="镜像下载到本地后上传到其他机器"></a>镜像下载到本地后上传到其他机器</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker images<span class="token comment" spellcheck="true"># 保存镜像到本地</span><span class="token function">sudo</span> docker save 镜像id <span class="token operator">></span> /home/huya/base.tar<span class="token comment" spellcheck="true"># 复制到目标机器</span><span class="token function">scp</span> base.tar huya@172.21.18.100:/home/huya/devicefarm/<span class="token comment" spellcheck="true"># 加载镜像到docker</span><span class="token function">sudo</span> docker load <span class="token operator">&lt;</span> base.tar<span class="token comment" spellcheck="true"># 修改当前机器镜像标签</span><span class="token function">sudo</span> docker tag 镜像id devicefarmbase:4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看容器日志&quot;&gt;&lt;a href=&quot;#查看容器日志&quot; class=&quot;headerlink&quot; title=&quot;查看容器日志&quot;&gt;&lt;/a&gt;查看容器日志&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;lang
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="容器" scheme="https://arthurjq.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="docker" scheme="https://arthurjq.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>nodejs笔记</title>
    <link href="https://arthurjq.com/2022/10/11/hei-ma-nodejs-xue-xi/"/>
    <id>https://arthurjq.com/2022/10/11/hei-ma-nodejs-xue-xi/</id>
    <published>2022-10-11T13:59:10.000Z</published>
    <updated>2022-10-11T13:59:13.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><p>–dirname 表示当前文件所处的目录</p><pre class="line-numbers language-javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用于从路径字符串中，将文件名解析出来</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法只能用来创建文件，不能用来创建路径重复调用fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>写入同一个文件，新写入的内容会覆盖之前的旧内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取下包的镜像源</span><span class="token function">npm</span> config get registry<span class="token comment" spellcheck="true"># 通过 npm 包管理器，将nrm安装为全局可用的工具</span><span class="token function">npm</span> i nrm -g<span class="token comment" spellcheck="true"># 查看所有可用的镜像源</span>nrm <span class="token function">ls</span><span class="token comment" spellcheck="true"># 将下包的镜像源切换为 taobao 镜像</span>nrm use taobao<span class="token comment" spellcheck="true"># 开发依赖包（记录到devDependencies节点下）</span><span class="token function">npm</span> i 包名 -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><h3 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h3><p>专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。</p><p>格式：function处理函数中，必须有4个形参，顺序从前到后，分别为（err，req，res，next）。</p><p>注意错误级别的中间件，<strong>必须注册在所有路由之后</strong>！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fs&quot;&gt;&lt;a href=&quot;#fs&quot; class=&quot;headerlink&quot; title=&quot;fs&quot;&gt;&lt;/a&gt;fs&lt;/h2&gt;&lt;p&gt;–dirname 表示当前文件所处的目录&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-javascript&quot;
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nodejs" scheme="https://arthurjq.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>PC环境标准化</title>
    <link href="https://arthurjq.com/2022/10/09/pc-biao-zhun-hua/"/>
    <id>https://arthurjq.com/2022/10/09/pc-biao-zhun-hua/</id>
    <published>2022-10-09T11:35:52.000Z</published>
    <updated>2022-10-09T11:36:44.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PC环境标准化流程"><a href="#PC环境标准化流程" class="headerlink" title="PC环境标准化流程"></a>PC环境标准化流程</h2><p>由于window 机器出现性能表现不一致问题，故而做标准化工作</p><p>1、找IT要一下安装盘，window系统是激活的。卸载掉mcafee。<br>2、安装完操作系统后。在这台机器上安装好所有的测试环境，并且测试ok<br>3、 以这机器为模板，做一个镜像。安装其他所有机器。<br>4、后续定期用这个镜像重启window 机器 </p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>所有的想保留在镜像中迁移的软件、文件和配置信息都必须放在C盘中，要不打包GHO镜像时不会包含在内，重装时还要分别重新安装</p><p>GHO镜像选2,3台设备保存以免丢失</p><h2 id="winPushIP脚本及开机启动配置"><a href="#winPushIP脚本及开机启动配置" class="headerlink" title="winPushIP脚本及开机启动配置"></a>winPushIP脚本及开机启动配置</h2><h3 id="winPushIP"><a href="#winPushIP" class="headerlink" title="winPushIP"></a>winPushIP</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">extract_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    st <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>               st<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'10.255.255.255'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        IP <span class="token operator">=</span> st<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        IP <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        st<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> IP<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        hostname <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span>        ip <span class="token operator">=</span> extract_ip<span class="token punctuation">(</span><span class="token punctuation">)</span>        sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>        data <span class="token operator">=</span> hostname <span class="token operator">+</span><span class="token string">'    '</span> <span class="token operator">+</span> ip  <span class="token operator">+</span> <span class="token string">'\n'</span>        sock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"172.21.37.30"</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"172.21.41.103"</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://devicefarm.huya.info/api/v1/ip/report?name=%s&amp;ip=%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以放在C盘的任意地方，记得改下边的bat文件夹中位置就行</p><h3 id="bat文件"><a href="#bat文件" class="headerlink" title="bat文件"></a>bat文件</h3><pre><code>::@echo offif &quot;%1&quot;==&quot;h&quot; goto beginstart mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit:beginC:cd \Users\Administratorpython winPushIP.py</code></pre><p>打开运行输入<code>shell:startup</code>，进入到开机启动文件夹中，把上边的bat文件放入其中就行。</p><p>或者可以进入到<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>中，直接复制此地址到文件搜索框中，（打开c盘中也许你看不到ProgramData文件，直接数据路径就可以到达需要地址），复制bat文件进去，重启计算机，实现开机自启。</p><h2 id="重装完后做三件事"><a href="#重装完后做三件事" class="headerlink" title="重装完后做三件事"></a>重装完后做三件事</h2><h3 id="改hostname"><a href="#改hostname" class="headerlink" title="改hostname"></a>改hostname</h3><p>直接右键我的电脑→属性→重命名改就完事了，改完要重启才会生效</p><h3 id="记录一下跑分"><a href="#记录一下跑分" class="headerlink" title="记录一下跑分"></a>记录一下跑分</h3><pre><code>https://hd.huya.com/appTestPage/performanceTest/index.html  </code></pre><p>打开上边链接跑分</p><h3 id="修改路由，看能否上内网"><a href="#修改路由，看能否上内网" class="headerlink" title="修改路由，看能否上内网"></a>修改路由，看能否上内网</h3><p>测试内网链接可以进入登录界面就是能上内网，不需要配置路由</p><p>或者cmd输入<code>route PRINT</code>看看是否有172.21.13.17的永久路由</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PC环境标准化流程&quot;&gt;&lt;a href=&quot;#PC环境标准化流程&quot; class=&quot;headerlink&quot; title=&quot;PC环境标准化流程&quot;&gt;&lt;/a&gt;PC环境标准化流程&lt;/h2&gt;&lt;p&gt;由于window 机器出现性能表现不一致问题，故而做标准化工作&lt;/p&gt;
&lt;p&gt;1、找
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维开发" scheme="https://arthurjq.com/tags/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>编译安装Python</title>
    <link href="https://arthurjq.com/2022/09/23/bian-yi-an-zhuang-python/"/>
    <id>https://arthurjq.com/2022/09/23/bian-yi-an-zhuang-python/</id>
    <published>2022-09-23T07:48:11.000Z</published>
    <updated>2022-12-12T13:07:50.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载解压python对应版本源码"><a href="#下载解压python对应版本源码" class="headerlink" title="下载解压python对应版本源码"></a>下载解压python对应版本源码</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://www.python.org/ftp/python/3.7.8/Python-3.7.8.tgz<span class="token comment" spellcheck="true"># 解压源码</span><span class="token function">tar</span> -zxvf Python-3.7.8.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="依赖库安装"><a href="#依赖库安装" class="headerlink" title="依赖库安装"></a>依赖库安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Debian依赖库安装</span><span class="token function">sudo</span> apt <span class="token function">install</span> git-core gnupg flex bison gperf build-essential <span class="token function">zip</span> curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip m4 -y<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> --reinstall zlibc zlib1g zlib1g-dev -y<span class="token function">sudo</span> apt <span class="token function">install</span> libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev libtk8.5 libgdm-dev libdb4o-cil-dev libpcap-dev libffi-dev libncursesw5-dev libgdbm-dev tk-dev openssl -y<span class="token comment" spellcheck="true"># Termux ubuntu依赖库安装</span><span class="token function">sudo</span> apt <span class="token function">install</span> git-core gnupg flex bison gperf build-essential <span class="token function">zip</span> curl zlib1g-dev    x11proto-core-dev libx11-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip m4 -y<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> --reinstall zlibc zlib1g zlib1g-dev -y<span class="token function">sudo</span> apt <span class="token function">install</span> libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev libgdm-dev libdb4o-cil-dev libpcap-dev libffi-dev libncursesw5-dev libgdbm-dev tk-dev openssl -y<span class="token comment" spellcheck="true"># CentOS依赖库安装</span>yum -y groupinstall <span class="token string">"Development tools"</span>yum -y <span class="token function">install</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum <span class="token function">install</span> -y libffi-devel zlib1g-devyum <span class="token function">install</span> zlib* -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> Python-3.7.8/<span class="token comment" spellcheck="true"># 使用系统库的ssl更便捷</span><span class="token function">sudo</span> ./configure --prefix<span class="token operator">=</span>/usr/local/python3.7.8 --with-ssl --enable-shared<span class="token comment" spellcheck="true"># 编译安装</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加-python-库配置信息"><a href="#添加-python-库配置信息" class="headerlink" title="添加 python 库配置信息"></a>添加 python 库配置信息</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/ld.so.conf.d<span class="token function">sudo</span> vim python3.conf<span class="token comment" spellcheck="true"># 加入下边这句</span>/usr/local/python3.7.8/lib/<span class="token comment" spellcheck="true"># 更新一下</span>ldconfig<span class="token comment" spellcheck="true"># 切换源为国内</span>python3 -m pip config <span class="token keyword">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linux下的共享库机制采用了类似于高速缓存的机制，将库信息保存在/etc/ld.so.cache里边，程序连接的时候首先从这个文件里边查找，然后再到ld.so.conf的路径里边去详细找，这就是为什么修改了conf文件要重新运行一下ldconfig的原因。</p><h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/bin/python3 /usr/bin/python<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/python3 /usr/bin/python3<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/python3 /usr/bin/python<span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/bin/pip3 /usr/bin/pip<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/pip3 /usr/bin/pip3<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/python3.7.8/bin/pip3 /usr/bin/pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="找不到lsb-release模块"><a href="#找不到lsb-release模块" class="headerlink" title="找不到lsb_release模块"></a>找不到lsb_release模块</h2><p>报错如下：</p><pre><code>subprocess.CalledProcessError: Command &#39;(&#39;lsb_release&#39;, &#39;-a&#39;)&#39; returned non-zero exit status 1.</code></pre><p>找到lsb_release.py文件和CommandNotFound目录，把它们拷贝到报的错误中subprocess.py所在文件夹</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">find</span> / -name <span class="token string">'lsb_release.py'</span><span class="token function">sudo</span> <span class="token function">cp</span> /usr/lib/python3/dist-packages/lsb_release.py /usr/local/python3.7.8/lib/python3.7/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载解压python对应版本源码&quot;&gt;&lt;a href=&quot;#下载解压python对应版本源码&quot; class=&quot;headerlink&quot; title=&quot;下载解压python对应版本源码&quot;&gt;&lt;/a&gt;下载解压python对应版本源码&lt;/h2&gt;&lt;pre class=&quot;line-
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="运维开发" scheme="https://arthurjq.com/tags/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>liunx定时任务配置</title>
    <link href="https://arthurjq.com/2022/08/13/crontab/"/>
    <id>https://arthurjq.com/2022/08/13/crontab/</id>
    <published>2022-08-13T10:48:11.000Z</published>
    <updated>2023-03-22T09:22:24.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 定时任务配置</span><span class="token function">sudo</span> <span class="token function">crontab</span> -e<span class="token comment" spellcheck="true"># 发现不用restart，编辑完后自动生效</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">cron</span> restart<span class="token comment" spellcheck="true"># 看是否生效，推荐用下一种</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">cron</span> status<span class="token comment" spellcheck="true"># 看是否生效</span><span class="token function">tail</span> -f /var/log/syslog<span class="token comment" spellcheck="true"># 设定时区</span><span class="token function">sudo</span> timedatectl set-timezone <span class="token string">"Asia/Shanghai"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cron配置"><a href="#cron配置" class="headerlink" title="cron配置"></a>cron配置</h2><pre class="line-numbers language-bash"><code class="language-bash">PATH<span class="token operator">=</span>/home/huya/.local/bin:~/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/binCRON_TZ<span class="token operator">=</span>Asia/Shanghai<span class="token comment" spellcheck="true"># ios清后台脚本定时命令</span>*/5 12,13 * * * /usr/bin/python3 /home/huya/devicefarm/ios_killall.py  <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># adr清后台脚本定时命令</span>*/5 12,13 * * * /usr/bin/python3 /home/huya/devicefarm/and_killall.py  <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># 竞品测试集群定时清后台</span>47 16 * * * /usr/bin/python3 /Users/huya/devicefarm/and_killall.py  <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mac-os"><a href="#mac-os" class="headerlink" title="mac os"></a>mac os</h2><p>计划：</p><ol><li>创建一个Python脚本，用于执行需要定时运行的任务。</li><li>使用Mac OS的内置工具launchd来设置定时任务。</li><li>在launchd配置文件中指定定时任务的时间和要运行的Python脚本。</li></ol><p>代码：</p><ol><li><p>创建Python脚本</p></li><li><p>创建launchd配置文件</p></li></ol><p>在终端中输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> Copy codenano ~/Library/LaunchAgents/com.matchkill.runpython.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后将以下内容复制到文件中：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>com.matchkill.runpython<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>ProgramArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/usr/bin/python3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/Users/huya/devicefarm/and_killall.py<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>StartCalendarInterval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Hour<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Minute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>/Users/huya/devicefarm/and_killall.py</code>替换为你的Python脚本的实际路径。</p><ol><li>加载launchd配置文件</li></ol><p>在终端中输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">launchctl load ~/Library/LaunchAgents/com.matchkill.runpython.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，你的Python脚本将在每晚10点半运行。</p><p>注意：如果你想停止定时任务，可以使用以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">launchctl unload ~/Library/LaunchAgents/com.matchkill.runpython.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p><a href="https://ubuntuqa.com/article/1640.html" target="_blank" rel="noopener">https://ubuntuqa.com/article/1640.html</a></p><p><a href="https://www.cnblogs.com/T-Better/p/16135656.html" target="_blank" rel="noopener">https://www.cnblogs.com/T-Better/p/16135656.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bas
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>adb</title>
    <link href="https://arthurjq.com/2022/08/10/adb/"/>
    <id>https://arthurjq.com/2022/08/10/adb/</id>
    <published>2022-08-10T08:01:11.000Z</published>
    <updated>2022-10-07T09:15:07.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>转载：<a href="https://github.com/mzlogin/awesome-adb#%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">https://github.com/mzlogin/awesome-adb#%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 基本语法</span>adb <span class="token punctuation">[</span>-d<span class="token operator">|</span>-e<span class="token operator">|</span>-s <span class="token operator">&lt;</span>serialNumber<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>command<span class="token operator">></span><span class="token comment" spellcheck="true"># 获取serialNumber</span>adb devices       <span class="token comment" spellcheck="true">#state：offline（设备无响应），device（已连接）</span><span class="token comment" spellcheck="true"># 停止 adb server</span>adb kill-server<span class="token comment" spellcheck="true"># 查看 adb 版本</span>adb version<span class="token comment" spellcheck="true"># 指定 adb server 的网络端口</span>adb -P <span class="token operator">&lt;</span>port<span class="token operator">></span> start-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只有一个设备/模拟器连接时，可以省略掉 <code>[-d|-e|-s &lt;serialNumber&gt;]</code></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td></tr><tr><td>-e</td><td>指定当前唯一运行的模拟器为命令目标</td></tr><tr><td><code>-s &lt;serialNumber&gt;</code></td><td>指定相应 serialNumber 号的设备/模拟器为命令目标</td></tr></tbody></table><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><h3 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell pm list packages <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-3<span class="token punctuation">]</span> <span class="token punctuation">[</span>-i<span class="token punctuation">]</span> <span class="token punctuation">[</span>-u<span class="token punctuation">]</span> <span class="token punctuation">[</span>--user USER_ID<span class="token punctuation">]</span> <span class="token punctuation">[</span>FILTER<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>显示列表</th></tr></thead><tbody><tr><td>无</td><td>所有应用</td></tr><tr><td>-f</td><td>显示应用关联的 apk 文件</td></tr><tr><td>-d</td><td>只显示 disabled 的应用</td></tr><tr><td>-e</td><td>只显示 enabled 的应用</td></tr><tr><td>-s</td><td>只显示系统应用</td></tr><tr><td>-3</td><td>只显示第三方应用</td></tr><tr><td>-i</td><td>显示应用的 installer</td></tr><tr><td>-u</td><td>包含已卸载应用</td></tr><tr><td><code>&lt;FILTER&gt;</code></td><td>包名包含 <code>&lt;FILTER&gt;</code> 字符串</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 只显示系统应用</span>adb shell pm list packages -s<span class="token comment" spellcheck="true"># 只显示第三方应用</span>adb shell pm list packages -3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><pre class="line-numbers language-bash"><code class="language-bash">adb <span class="token function">install</span> <span class="token punctuation">[</span>-lrtsdg<span class="token punctuation">]</span> <span class="token operator">&lt;</span>path_to_apk<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 /mnt/asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr><tr><td>–abi abi-identifier</td><td>为特定 ABI 强制安装 apk，abi-identifier 可以是 armeabi-v7a、arm64-v8a、v86、x86_64 等</td></tr></tbody></table><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><pre class="line-numbers language-bash"><code class="language-bash">adb uninstall <span class="token punctuation">[</span>-k<span class="token punctuation">]</span> <span class="token operator">&lt;</span>packagename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;packagename&gt;</code> 表示应用的包名，<code>-k</code> 参数可选，表示卸载应用但保留数据和缓存目录。</p><h3 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys activity activities<span class="token operator">|</span><span class="token function">grep</span> mResumedActivity    mResumedActivity: ActivityRecord<span class="token punctuation">{</span>3b0f52a u0 com.sec.android.app.launcher/.activities.LauncherActivity t319<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中的 <code>com.sec.android.app.launcher/.activities.LauncherActivity</code> 就是当前处于前台的 Activity。</p><h3 id="查看正在运行的-Services"><a href="#查看正在运行的-Services" class="headerlink" title="查看正在运行的 Services"></a>查看正在运行的 Services</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys activity services <span class="token punctuation">[</span><span class="token operator">&lt;</span>packagename<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;packagename&gt;</code> 参数不是必须的，指定 <code>&lt;packagename&gt;</code> 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。支持模糊查询。</p><h3 id="查看应用详细信息"><a href="#查看应用详细信息" class="headerlink" title="查看应用详细信息"></a>查看应用详细信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys package <span class="token operator">&lt;</span>packagename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出中包含很多信息，包括 Activity Resolver Table、Registered ContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。</p><p><code>&lt;packagename&gt;</code> 表示应用包名。</p><h3 id="查看应用安装路径"><a href="#查看应用安装路径" class="headerlink" title="查看应用安装路径"></a>查看应用安装路径</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell pm path <span class="token operator">&lt;</span>PACKAGE<span class="token operator">></span><span class="token comment" spellcheck="true"># 例子</span>adb shell pm path com.duowan.kiwipackage:/data/app/com.duowan.kiwi-VE9yzwMQsuqqif2U5u9Hgw<span class="token operator">==</span>/base.apk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="与应用交互"><a href="#与应用交互" class="headerlink" title="与应用交互"></a>与应用交互</h2><p>主要是使用 <code>am &lt;command&gt;</code> 命令</p><table><thead><tr><th>command</th><th>用途</th></tr></thead><tbody><tr><td><code>start [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td></tr><tr><td><code>startservice [options] &lt;INTENT&gt;</code></td><td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td></tr><tr><td><code>broadcast [options] &lt;INTENT&gt;</code></td><td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td></tr><tr><td><code>force-stop &lt;packagename&gt;</code></td><td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td></tr></tbody></table><p>用于决定 intent 对象的选项如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-a &lt;ACTION&gt;</code></td><td>指定 action，比如 <code>android.intent.action.VIEW</code></td></tr><tr><td><code>-c &lt;CATEGORY&gt;</code></td><td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td></tr><tr><td><code>-n &lt;COMPONENT&gt;</code></td><td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td></tr></tbody></table><p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>--esn &lt;EXTRA_KEY&gt;</code></td><td>null 值（只有 key 名）</td></tr><tr><td>`-e</td><td>–es <extra_key> <extra_string_value>`</extra_string_value></extra_key></td></tr><tr><td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td><td>boolean 值</td></tr><tr><td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td><td>integer 值</td></tr><tr><td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td><td>long 值</td></tr><tr><td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td><td>float 值</td></tr><tr><td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td><td>URI</td></tr><tr><td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td><td>component name</td></tr><tr><td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td><td>integer 数组</td></tr><tr><td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td><td>long 数组</td></tr></tbody></table><h3 id="启动应用-调起-Activity"><a href="#启动应用-调起-Activity" class="headerlink" title="启动应用/ 调起 Activity"></a>启动应用/ 调起 Activity</h3><h4 id="指定Activity名称启动"><a href="#指定Activity名称启动" class="headerlink" title="指定Activity名称启动"></a>指定Activity名称启动</h4><pre class="line-numbers language-bash"><code class="language-bash">adb shell am start <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>INTENT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am start -n com.tencent.mm/.ui.LauncherUI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="不指定Activity名称启动（启动主Activity）"><a href="#不指定Activity名称启动（启动主Activity）" class="headerlink" title="不指定Activity名称启动（启动主Activity）"></a>不指定Activity名称启动（启动主Activity）</h4><pre class="line-numbers language-bash"><code class="language-bash">adb shell monkey -p <span class="token operator">&lt;</span>packagename<span class="token operator">></span> -c android.intent.category.LAUNCHER 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell monkey -p com.tencent.mm -c android.intent.category.LAUNCHER 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示调起微信主界面。</p><h3 id="调起-Service"><a href="#调起-Service" class="headerlink" title="调起 Service"></a>调起 Service</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am startservice <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>INTENT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示调起微信的某 Service。</p><h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am broadcast <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>INTENT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>例如，向所有组件广播 <code>BOOT_COMPLETED</code>：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>又例如，只向 <code>org.mazhuang.boottimemeasure/.BootCompletedReceiver</code> 广播 <code>BOOT_COMPLETED</code>：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。</p><h3 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am force-stop <span class="token operator">&lt;</span>packagename<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="收紧内存"><a href="#收紧内存" class="headerlink" title="收紧内存"></a>收紧内存</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell am send-trim-memory  <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">&lt;</span>level<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pid: 进程 ID level: HIDDEN、RUNNING_MODERATE、BACKGROUND、 RUNNING_LOW、MODERATE、RUNNING_CRITICAL、COMPLETE</p><p>例如</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell am send-trim-memory 12345 RUNNING_LOW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示向 pid=12345 的进程，发出 level=RUNNING_LOW 的收紧内存命令。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h3><pre class="line-numbers language-bash"><code class="language-bash">adb pull <span class="token operator">&lt;</span>设备里的文件路径<span class="token operator">></span> <span class="token punctuation">[</span>电脑上的目录<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</p><p>例：</p><pre class="line-numbers language-bash"><code class="language-bash">adb pull /sdcard/sr.mp4 ~/tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>小技巧：</em>设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 <code>adb shell</code> 和 <code>su</code> 命令在 adb shell 里获取 root 权限后，先 <code>cp /path/on/device /sdcard/filename</code> 将文件复制到 sdcard，然后 <code>adb pull /sdcard/filename /path/on/pc</code>。</p><h3 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h3><pre class="line-numbers language-bash"><code class="language-bash">adb push <span class="token operator">&lt;</span>电脑上的文件路径<span class="token operator">></span> <span class="token operator">&lt;</span>设备里的目录<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-bash"><code class="language-bash">adb push ~/sr.mp4 /sdcard/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>小技巧：</em>设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 <code>adb push /path/on/pc /sdcard/filename</code>，然后 <code>adb shell</code> 和 <code>su</code> 在 adb shell 里获取 root 权限后，<code>cp /sdcard/filename /path/on/device</code>。</p><h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><p>在 <code>adb shell</code> 里有个很实用的命令叫 <code>input</code>，<code>input</code> 命令的完整 help 信息如下：</p><pre class="line-numbers language-bash"><code class="language-bash">Usage: input <span class="token punctuation">[</span><span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>The sources are:      mouse      keyboard      joystick      touchnavigation      touchpad      trackball      stylus      dpad      gesture      touchscreen      gamepadThe commands and default sources are:      text <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">(</span>Default: touchscreen<span class="token punctuation">)</span>      keyevent <span class="token punctuation">[</span>--longpress<span class="token punctuation">]</span> <span class="token operator">&lt;</span>key code number or name<span class="token operator">></span> <span class="token punctuation">..</span>. <span class="token punctuation">(</span>Default: keyboard<span class="token punctuation">)</span>      tap <span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">&lt;</span>y<span class="token operator">></span> <span class="token punctuation">(</span>Default: touchscreen<span class="token punctuation">)</span>      swipe <span class="token operator">&lt;</span>x1<span class="token operator">></span> <span class="token operator">&lt;</span>y1<span class="token operator">></span> <span class="token operator">&lt;</span>x2<span class="token operator">></span> <span class="token operator">&lt;</span>y2<span class="token operator">></span> <span class="token punctuation">[</span>duration<span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>Default: touchscreen<span class="token punctuation">)</span>      press <span class="token punctuation">(</span>Default: trackball<span class="token punctuation">)</span>      roll <span class="token operator">&lt;</span>dx<span class="token operator">></span> <span class="token operator">&lt;</span>dy<span class="token operator">></span> <span class="token punctuation">(</span>Default: trackball<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p><h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>adb<span class="token punctuation">]</span> logcat <span class="token punctuation">[</span><span class="token operator">&lt;</span>option<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token punctuation">[</span><span class="token operator">&lt;</span>filter-spec<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用用法列举如下：</p><h4 id="按级别过滤日志"><a href="#按级别过滤日志" class="headerlink" title="按级别过滤日志"></a>按级别过滤日志</h4><p>Android 的日志分为如下几个优先级（priority）：</p><ul><li>V —— Verbose（最低，输出得最多）</li><li>D —— Debug</li><li>I —— Info</li><li>W —— Warning</li><li>E —— Error</li><li>F —— Fatal</li><li>S —— Silent（最高，啥也不输出）</li></ul><p>按某级别过滤日志则会将该级别及以上的日志输出。</p><p>比如，命令：</p><pre><code>adb logcat *:W</code></pre><p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p><p>（<strong>注：</strong> 在 macOS 下需要给 <code>*:W</code> 这样以 <code>*</code> 作为 tag 的参数加双引号，如 <code>adb logcat &quot;*:W&quot;</code>，不然会报错 <code>no matches found: *:W</code>。）</p><h4 id="按-tag-和级别过滤日志"><a href="#按-tag-和级别过滤日志" class="headerlink" title="按 tag 和级别过滤日志"></a>按 tag 和级别过滤日志</h4><p><code>&lt;filter-spec&gt;</code> 可以由多个 <code>&lt;tag&gt;[:priority]</code> 组成。</p><p>比如，命令：</p><pre class="line-numbers language-bash"><code class="language-bash">adb logcat ActivityManager:I MyApp:D *:S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示输出 tag <code>ActivityManager</code> 的 Info 以上级别日志，输出 tag <code>MyApp</code> 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p><h4 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h4><pre class="line-numbers language-bash"><code class="language-bash">adb logcat -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>比如long格式：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token operator">&lt;</span>datetime<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span>:<span class="token operator">&lt;</span>tid<span class="token operator">></span> <span class="token operator">&lt;</span>priority<span class="token operator">></span>/<span class="token operator">&lt;</span>tag<span class="token operator">></span> <span class="token punctuation">]</span><span class="token operator">&lt;</span>message<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span> 07-28 20:16:03.089  1357: 1357 I/WifiConnectivityMonitor <span class="token punctuation">]</span>ACTION_SERVICE_STATE_CHANGED: cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指定格式可与上面的过滤同时使用。比如：</p><pre class="line-numbers language-bash"><code class="language-bash">adb logcat -v long ActivityManager:I *:S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token function">dmesg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.684016<span class="token punctuation">]</span> PM: noirq resume of devices complete after 0.982 msecs<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.685525<span class="token punctuation">]</span> PM: early resume of devices complete after 0.838 msecs<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.753642<span class="token punctuation">]</span> PM: resume of devices complete after 68.106 msecs<span class="token operator">&lt;</span>4<span class="token operator">></span><span class="token punctuation">[</span>14201.755954<span class="token punctuation">]</span> Restarting tasks <span class="token punctuation">..</span>. done.<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.771229<span class="token punctuation">]</span> PM: <span class="token function">suspend</span> <span class="token keyword">exit</span> 2016-08-28 13:31:32.679217193 UTC<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.872373<span class="token punctuation">]</span> PM: <span class="token function">suspend</span> entry 2016-08-28 13:31:32.780363596 UTC<span class="token operator">&lt;</span>6<span class="token operator">></span><span class="token punctuation">[</span>14201.872498<span class="token punctuation">]</span> PM: Syncing filesystems <span class="token punctuation">..</span>. done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中括号里的 <code>[14201.684016]</code> 代表内核开始启动后的时间，单位为秒。</p><p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 <code>Freeing init memory</code> 那一行前面的时间就是。</p><h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><h3 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell dumpsys window displays<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还能看到前后台app的信息</p><h3 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings get secure android_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre><code>2741c803b9501b3a</code></pre><h3 id="Android-系统版本"><a href="#Android-系统版本" class="headerlink" title="Android 系统版本"></a>Android 系统版本</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell getprop ro.build.version.release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash">5.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CPU信息"><a href="#CPU信息" class="headerlink" title="CPU信息"></a>CPU信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token function">cat</span> /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash">Processor    <span class="token keyword">:</span> AArch64 Processor <span class="token function">rev</span> 13 <span class="token punctuation">(</span>aarch64<span class="token punctuation">)</span>processor    <span class="token keyword">:</span> 0BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 1BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 2BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 3BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x7CPU part    <span class="token keyword">:</span> 0x803CPU revision    <span class="token keyword">:</span> 12processor    <span class="token keyword">:</span> 4BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13processor    <span class="token keyword">:</span> 5BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13processor    <span class="token keyword">:</span> 6BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13processor    <span class="token keyword">:</span> 7BogoMIPS    <span class="token keyword">:</span> 38.40Features    <span class="token keyword">:</span> fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhpCPU implementer    <span class="token keyword">:</span> 0x51CPU architecture: 8CPU variant    <span class="token keyword">:</span> 0x6CPU part    <span class="token keyword">:</span> 0x802CPU revision    <span class="token keyword">:</span> 13Hardware    <span class="token keyword">:</span> Qualcomm Technologies, Inc SDM845<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是 SM-G9650 的 CPU 信息，我们从输出里可以看到使用的硬件是 <code>Qualcomm Technologies</code>，processor 的编号是 0 到 8，所以它是八核的，采用的架构是 <code>AArch64 Processor rev 13 (aarch64)</code>。</p><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell <span class="token function">cat</span> /proc/meminfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash"><code class="language-bash">emTotal:        5713076 kBMemFree:          256604 kBMemAvailable:    3030428 kBBuffers:          169656 kBCached:          2573432 kBSwapCached:        62232 kBActive:          2302792 kBInactive:        1728628 kBActive<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:     702956 kBInactive<span class="token punctuation">(</span>anon<span class="token punctuation">)</span>:   605688 kBActive<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:    1599836 kBInactive<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:  1122940 kBUnevictable:        9900 kBMlocked:            9900 kBRbinTotal:        593920 kBRbinAlloced:           0 kBRbinPool:              0 kBRbinFree:              0 kBSwapTotal:       2621436 kBSwapFree:        2056556 kBDirty:               160 kBWriteback:             0 kBAnonPages:       1291056 kBMapped:           779792 kBShmem:             17748 kBSlab:             364484 kBSReclaimable:     159248 kBSUnreclaim:       205236 kBKernelStack:       54464 kBPageTables:        96608 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:     5477972 kBCommitted_AS:   116679068 kBVmallocTotal:   263061440 kBVmallocUsed:           0 kBVmallocChunk:          0 kBCmaTotal:         237568 kBCmaFree:           35708 kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>MemTotal</code> 就是设备的总内存，<code>MemFree</code> 是当前空闲内存。</p><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong> 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p><h3 id="关闭USB调试模式"><a href="#关闭USB调试模式" class="headerlink" title="关闭USB调试模式"></a>关闭USB调试模式</h3><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings put global adb_enabled 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恢复：</p><p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p><p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p><h3 id="允许-禁止访问非-SDK-API"><a href="#允许-禁止访问非-SDK-API" class="headerlink" title="允许/禁止访问非 SDK API"></a>允许/禁止访问非 SDK API</h3><p>允许访问非 SDK API：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings put global hidden_api_policy_pre_p_apps 1adb shell settings put global hidden_api_policy_p_apps 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>禁止访问非 SDK API：</p><pre class="line-numbers language-bash"><code class="language-bash">adb shell settings delete global hidden_api_policy_pre_p_appsadb shell settings delete global hidden_api_policy_p_apps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不需要设备获得 Root 权限。</p><p>命令最后的数字的含义：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>禁止检测非 SDK 接口的调用。该情况下，日志记录功能被禁用，并且令 strict mode API，即 detectNonSdkApiUsage() 无效。不推荐。</td></tr><tr><td>1</td><td>仅警告——允许访问所有非 SDK 接口，但保留日志中的警告信息，可继续使用 strick mode API。</td></tr><tr><td>2</td><td>禁止调用深灰名单和黑名单中的接口。</td></tr><tr><td>3</td><td>禁止调用黑名单中的接口，但允许调用深灰名单中的接口。</td></tr></tbody></table><h2 id="通过adb-shell进入安卓shell后如何退出？"><a href="#通过adb-shell进入安卓shell后如何退出？" class="headerlink" title="通过adb shell进入安卓shell后如何退出？"></a>通过adb shell进入安卓shell后如何退出？</h2><p>Ctrl+C无法退出shell；</p><p>直接输入 exit 即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;转载：&lt;a href=&quot;https://github.com/mzlogin/awesome-adb#%E5%91%BD%E
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>apt-get和tidevice安装与使用</title>
    <link href="https://arthurjq.com/2022/08/08/an-zhuang-tidevice/"/>
    <id>https://arthurjq.com/2022/08/08/an-zhuang-tidevice/</id>
    <published>2022-08-08T02:14:52.000Z</published>
    <updated>2023-03-31T08:57:15.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装tidevice"><a href="#安装tidevice" class="headerlink" title="安装tidevice"></a>安装tidevice</h2><p>看看有没有python3的pip，没有安装一个</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h3><p>apt-get，是一条linux命令，适用于deb包管理式的操作系统（例如Ubuntu系统），主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##更新源文件，并不会做任何安装升级操作</span><span class="token function">apt-get</span> update<span class="token comment" spellcheck="true">##升级所有已安装的包</span><span class="token function">apt-get</span> upgrade<span class="token comment" spellcheck="true">##安装指定的包</span><span class="token function">apt-get</span> <span class="token function">install</span> packagename <span class="token comment" spellcheck="true">##仅升级指定包</span><span class="token function">apt-get</span> <span class="token function">install</span> packagename --only-upgrade<span class="token comment" spellcheck="true">##重新安装包</span><span class="token function">apt-get</span> <span class="token function">install</span> packagename --reinstall<span class="token comment" spellcheck="true">##修复安装</span><span class="token function">apt-get</span> -f <span class="token function">install</span><span class="token comment" spellcheck="true">##安装相关的编译环境</span><span class="token function">apt-get</span> build-dep packagename<span class="token comment" spellcheck="true">##下载该包的源代码</span><span class="token function">apt-get</span> <span class="token function">source</span> packagename<span class="token comment" spellcheck="true">##升级系统</span><span class="token function">apt-get</span> dist-upgrade---------------------------------------------------<span class="token comment" spellcheck="true">##查询指定的包</span>apt-cache search packagename<span class="token comment" spellcheck="true">##显示包的相关信息，如说明、大小、版本等</span>apt-cache show packagename<span class="token comment" spellcheck="true">##了解使用该包依赖那些包</span>apt-cache depends packagename<span class="token comment" spellcheck="true">##查看该包被那些包依赖</span>apt-cache rdepends packagename------------------------------------------------------<span class="token comment" spellcheck="true">##删除包</span><span class="token function">apt-get</span> remove packagename<span class="token comment" spellcheck="true">##删除包，包括删除配置文件等</span><span class="token function">apt-get</span> remove packagename --purge<span class="token comment" spellcheck="true">##删除包及其依赖的软件包+配置文件等（只对6.10有效，推荐使用）</span><span class="token function">apt-get</span> autoremove packagename --purge----------------------------------------------------------<span class="token function">apt-get</span> clean                         <span class="token comment" spellcheck="true">## 清理无用的包 </span><span class="token function">apt-get</span> autoclean                     <span class="token comment" spellcheck="true">## 清理无用的包 </span><span class="token function">apt-get</span> check                         <span class="token comment" spellcheck="true">## 检查是否有损坏的依赖</span>apt-mark hold packagename             <span class="token comment" spellcheck="true">## 将指定的包的版本hold住，这样在更新的时候就会忽略掉这个包</span>apt-mark unhold packagename           <span class="token comment" spellcheck="true">## 取消对这个包版本的锁定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用pip安装tidevice"><a href="#用pip安装tidevice" class="headerlink" title="用pip安装tidevice"></a>用pip安装tidevice</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> tidevice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h3><pre class="line-numbers language-bash"><code class="language-bash">tidevice list<span class="token comment" spellcheck="true">##若手机没连上，杀死占用进程的端口</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> usbmuxd<span class="token function">sudo</span> <span class="token function">kill</span> -9 端口号<span class="token comment" spellcheck="true">##如果提示缺少ffmpeg的话安装一下，没有提示就不安装</span><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> ffmpeg<span class="token comment" spellcheck="true">##测试安装ffmpeg成功没有</span>ffmpeg -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tidevice常用命令"><a href="#tidevice常用命令" class="headerlink" title="tidevice常用命令"></a>tidevice常用命令</h3><pre class="line-numbers language-bash"><code class="language-bash">tidevice list <span class="token comment" spellcheck="true">#查看设备</span>tidevice screenshot screenshot.jpg <span class="token comment" spellcheck="true">#截图</span>tidevice launch 包名 <span class="token comment" spellcheck="true">#启动程序</span>tidevice <span class="token function">kill</span> 包名 <span class="token comment" spellcheck="true">#停止程序</span>tidevice applist <span class="token comment" spellcheck="true">#查看第三方包名</span>tidevice -u <span class="token variable">$UDID</span> xctest -B <span class="token variable">$BUNDLE_ID</span> <span class="token comment" spellcheck="true">#运行WebDriverAgent</span>tidevice <span class="token function">reboot</span> <span class="token comment" spellcheck="true">#重启设备</span>tidevice <span class="token function">install</span> https://…ipa <span class="token comment" spellcheck="true">#远程安装</span>tidevice info <span class="token comment" spellcheck="true">#查看设备信息</span>tidevice -u uuid uninstall 包名 …<span class="token comment" spellcheck="true">#.卸载应用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装tidevice&quot;&gt;&lt;a href=&quot;#安装tidevice&quot; class=&quot;headerlink&quot; title=&quot;安装tidevice&quot;&gt;&lt;/a&gt;安装tidevice&lt;/h2&gt;&lt;p&gt;看看有没有python3的pip，没有安装一个&lt;/p&gt;
&lt;pre class
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://arthurjq.com/2022/07/20/linux/"/>
    <id>https://arthurjq.com/2022/07/20/linux/</id>
    <published>2022-07-20T13:41:27.000Z</published>
    <updated>2023-01-11T09:08:39.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的文件操作指令"><a href="#常用的文件操作指令" class="headerlink" title="常用的文件操作指令"></a>常用的文件操作指令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> --help             <span class="token comment" spellcheck="true"># 查看当前命令下的所有参数用法</span><span class="token function">ls</span> -l                 <span class="token comment" spellcheck="true"># 等于ll</span><span class="token function">ls</span> -al                <span class="token comment" spellcheck="true"># 显示的所有文件与文件夹的详细信息，包括所有被隐藏的文件和文件夹</span><span class="token function">cd</span> <span class="token punctuation">..</span>                 <span class="token comment" spellcheck="true"># 回到上一级</span><span class="token function">cd</span> ~                  <span class="token comment" spellcheck="true"># 回到用户主目录</span><span class="token function">cd</span> ./                 <span class="token comment" spellcheck="true"># 在当前目录下逐级打开下级目录</span><span class="token function">mkdir</span>                 <span class="token comment" spellcheck="true"># 创建文件夹（目录）</span><span class="token function">rm</span>                    <span class="token comment" spellcheck="true"># 删除文件或目录</span><span class="token function">cp</span> 文件名 目标路径      <span class="token comment" spellcheck="true"># 复制文件</span><span class="token function">cp</span> -R 目录名 目标路径   <span class="token comment" spellcheck="true"># 复制文件夹 cp -r /test1/. /test2</span><span class="token function">mv</span> 原文件名 目标文件名  <span class="token comment" spellcheck="true"># 移动文件或文件夹，可以用来重命名</span><span class="token function">touch</span> xxx.txt         <span class="token comment" spellcheck="true"># 更新文件的访问时间戳或者创建一个空文件</span><span class="token function">cat</span>                   <span class="token comment" spellcheck="true"># 查看某个文件的内容</span><span class="token function">nl</span>                    <span class="token comment" spellcheck="true"># 显示时输出行号</span><span class="token function">more</span>                  <span class="token comment" spellcheck="true"># 查看内容，会分页</span><span class="token function">less</span>                  <span class="token comment" spellcheck="true"># 比more好，[pageup] [pagedown]前后翻页</span><span class="token function">chmod</span>                 <span class="token comment" spellcheck="true"># sudo chmod +x run.sh后./run.sh运行脚本</span><span class="token function">chmod</span> u<span class="token operator">=</span>rwx,g<span class="token operator">=</span>rwx,o<span class="token operator">=</span>rwx <span class="token function">file</span> <span class="token operator">=</span> <span class="token function">chmod</span> 777 <span class="token function">file</span> <span class="token operator">=</span> <span class="token function">chmod</span> a<span class="token operator">=</span>rwx <span class="token function">file</span><span class="token function">find</span> 目录 -name 文件名 <span class="token comment" spellcheck="true"># 查找文件</span><span class="token function">which</span>                 <span class="token comment" spellcheck="true"># 寻找“可执行文件”</span><span class="token function">whereis</span> 文件名         <span class="token comment" spellcheck="true"># 由一些特定的目录中寻找文件文件名，比find快</span><span class="token function">vi</span>                    <span class="token comment" spellcheck="true"># 字母i进入编辑模式，esc退出编辑模式，wq是保存修改，q!是强制退出</span><span class="token function">wc</span>                    <span class="token comment" spellcheck="true"># 计算指定文件的行数、字数，以及字节数</span>3 92 598 testfile     <span class="token comment" spellcheck="true"># testfile文件的行数为3、单词数92、字节数598</span><span class="token function">df</span> -h                 <span class="token comment" spellcheck="true"># 列出文件系统的整体磁盘使用量</span><span class="token function">du</span> -sh <span class="token keyword">.</span>              <span class="token comment" spellcheck="true"># 对当前目录下所有的目录和文件的大小进行汇总,-s表示汇总,-h人性化显示</span><span class="token function">du</span> -sh *              <span class="token comment" spellcheck="true"># 对当前目录下每一个目录和文件的大小分别进行汇总</span>sz filename           <span class="token comment" spellcheck="true"># 利用ZModem协议来从Linux服务器传送文件到本地</span><span class="token keyword">echo</span> 参数 <span class="token operator">></span> 输出文件    <span class="token comment" spellcheck="true"># 输出重定向，清空后新增内容</span><span class="token keyword">echo</span> 参数 <span class="token operator">>></span> 输出文件   <span class="token comment" spellcheck="true"># 输出追加重定向，在文件末尾追加字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ifconfig</span>              <span class="token comment" spellcheck="true"># 查看网络接口的状态，ip地址，物理地址等等</span><span class="token function">ping</span>  ip              <span class="token comment" spellcheck="true"># 网络试探</span><span class="token function">netstat</span>               <span class="token comment" spellcheck="true"># 显示当前应用的网络使用情况</span><span class="token function">netstat</span> -an <span class="token operator">|</span> <span class="token function">grep</span> 21 <span class="token comment" spellcheck="true"># 21端口是否已经被占用</span><span class="token function">lsof</span>                  <span class="token comment" spellcheck="true"># 查看某个端口是否被占用 lsof -i:21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="netstat-an"><a href="#netstat-an" class="headerlink" title="netstat -an"></a>netstat -an</h3><p>-a:将目前系统上所有的连接、监听、socket信息都列出来；<br>-t:列出tcp网络封包的信息；<br>-u:列出UDP网络封包的信息；<br>-n:不以进程的服务名，以端口号来显示；<br>-l:列出目前正在网络监听的服务；<br>-p:列出该网络服务的进程ID；</p><p>grep -w（-w用于字符串精确匹配，默认匹配一个单词）例如我想匹配 “like”， 不加 -w 就会匹配到 “liker”， 加 -w 就不会匹配到</p><h2 id="系统操作命令"><a href="#系统操作命令" class="headerlink" title="系统操作命令"></a>系统操作命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">shutdown</span>             <span class="token comment" spellcheck="true"># 关机</span><span class="token function">uname</span>                <span class="token comment" spellcheck="true"># 获取当前系统信息</span><span class="token function">kill</span> -9 进程         <span class="token comment" spellcheck="true"># 杀死进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>-F参数：指定分隔符，可指定一个或多个</p><p>print 后面做字符串的拼接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{pattern + action}'</span> <span class="token punctuation">{</span>filenames<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</span>1.命令行方式<span class="token function">awk</span> <span class="token punctuation">[</span>-F  field-separator<span class="token punctuation">]</span>  <span class="token string">'commands'</span>  input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>其中，commands 是真正awk命令，<span class="token punctuation">[</span>-F域分隔符<span class="token punctuation">]</span>是可选的。 input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> 是待处理的文件。在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。2.shell脚本方式将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。相当于shell脚本首行的：<span class="token comment" spellcheck="true">#!/bin/sh</span>可以换成：<span class="token comment" spellcheck="true">#!/bin/awk</span>3.将所有的awk命令插入一个单独文件，然后调用：<span class="token function">awk</span> -f awk-script-file input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>其中，-f选项加载awk-script-file中的awk脚本，input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>跟上面的是一样的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p> [Page Down]：向下翻页</p><p> [Page Up]：向上翻页</p><p>0或[Home]：移动到这一列的最前面字符处</p><p>$ 或[End]：移动到这一列的最后面字符处</p><p>G：移动到这个文件的最后一列</p><p>/word：向光标之下寻找一个名称为 word 的字串，enter后按n会向下继续搜寻，按N向上搜寻</p><p>dd：删除光标所在的那一整列</p><p>ndd：n 为数字，删除光标所在的向下 n 列</p><p>yy：复制光标所在的那一列</p><p>nyy：n 为数字，复制光标所在的向下 n 列</p><p>p, P：p 为将已复制的数据在光标下一列贴上，P 则 为贴在光标上一列</p><h3 id="vim的全局替换"><a href="#vim的全局替换" class="headerlink" title="vim的全局替换"></a>vim的全局替换</h3><pre class="line-numbers language-bash"><code class="language-bash">:s / old / new / g                    <span class="token comment" spellcheck="true"># 把当前行old的每次出现改为new，而不只是该行的第一个old</span>:1, <span class="token variable">$s</span> / old / new / g                <span class="token comment" spellcheck="true"># 把整个文件中的old的每次出现都改为new</span>:% s / old / new / g                  <span class="token comment" spellcheck="true"># % 等价于1，$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查看某个进程"><a href="#查看某个进程" class="headerlink" title="查看某个进程"></a>查看某个进程</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -p 10997                          <span class="token comment" spellcheck="true"># 查看某个进程占用的CPU、内存</span><span class="token function">ps</span> -a                                 <span class="token comment" spellcheck="true"># 列出所有运行中/激活进程</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span>                           <span class="token comment" spellcheck="true"># 列出需要的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>将telnet客户端开启才能正常使用</p><h3 id="测试网络连通性"><a href="#测试网络连通性" class="headerlink" title="测试网络连通性"></a>测试网络连通性</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Telnet+空格+要访问的服务器或电脑ip地址+空格+端口号</span>telnet 172.21.15.199 9090<span class="token comment" spellcheck="true"># 按回车，出现黑色界面说明连接成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>telnet连通性只能测试tcp端口或服务，不能测试udp</p><h3 id="登录远程主机"><a href="#登录远程主机" class="headerlink" title="登录远程主机"></a>登录远程主机</h3><p><code>-l</code>:指定用户名</p><pre class="line-numbers language-bash"><code class="language-bash">telnet -l admin 192.168.31.105<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#非交互模式</span><span class="token function">nslookup</span> baidu.com<span class="token comment" spellcheck="true">#交互模式</span><span class="token function">nslookup</span>baidu.com<span class="token comment" spellcheck="true">#PTR 反向DNS解析</span><span class="token function">nslookup</span> -ty<span class="token operator">=</span>ptr 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h2><h3 id="proc-meminfo"><a href="#proc-meminfo" class="headerlink" title="/proc/meminfo"></a>/proc/meminfo</h3><p>查看RAM使用情况最简单的方法是通过 /proc/meminfo。/proc/meminfo列出了所有你想了解的内存的使用情况。进程的内存使用信息也可以通过 <code>/proc/&lt;pid&gt;/statm</code> 和 <code>/proc/&lt;pid&gt;/status</code> 来查看。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /proc/meninfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>free命令是一个快速查看内存使用情况的方法，它是对 /proc/meminfo 收集到的信息的一个概述。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">free</span> -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><p>htop命令显示了每个进程的内存实时使用率。它提供了所有进程的常驻内存大小、程序总内存大小、共享库大小等的报告。列表可以水平及垂直滚动。</p><h3 id="top参数"><a href="#top参数" class="headerlink" title="top参数"></a>top参数</h3><p>平均负载（Load Average）是一段时间内系统的平均负载，这个一段时间一般取1分钟、5分钟、15分钟。</p><p>第七行以下：各进程（任务）的状态监控<br>PID — 进程id</p><p>USER — 进程所有者</p><p>PR — 进程优先级</p><p>NI — nice值。负值表示高优先级，正值表示低优先级</p><p>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p><p>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</p><p>SHR — 共享内存大小，单位kb</p><p>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</p><p>%CPU — 上次更新到现在的CPU时间占用百分比</p><p>%MEM — 进程使用的物理内存百分比</p><p>TIME+ — 进程使用的CPU时间总计，单位1/100秒</p><p>COMMAND — 进程名称（命令名/命令行）</p><h2 id="常用SIG信号及其键值"><a href="#常用SIG信号及其键值" class="headerlink" title="常用SIG信号及其键值"></a>常用SIG信号及其键值</h2><p>01 SIGHUP 挂起（hangup）<br>02 SIGINT 中断，当用户从键盘按^c键或^break键时<br>03 SIGQUIT 退出，当用户从键盘按quit键时<br>04 SIGILL 非法指令<br>05 SIGTRAP 跟踪陷阱（trace trap），启动进程，跟踪代码的执行<br>06 SIGIOT IOT指令<br>07 SIGEMT EMT指令<br>08 SIGFPE 浮点运算溢出<br>09 SIGKILL 杀死、终止进程<br>10 SIGBUS 总线错误<br>11 SIGSEGV 段违例（segmentation violation），进程试图去访问其虚地址空间以外的位置<br>12 SIGSYS 系统调用中参数错，如系统调用号非法<br>13 SIGPIPE 向某个非读管道中写入数据<br>14 SIGALRM 闹钟。当某进程希望在某时间后接收信号时发此信号<br>15 SIGTERM 软件终止（software termination）<br>16 SIGUSR1 用户自定义信号1<br>17 SIGUSR2 用户自定义信号2<br>18 SIGCLD 某个子进程死<br>19 SIGPWR 电源故障</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>统计一个文件中某一个字段的次数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> -c <span class="token string">'object'</span> fileName<span class="token function">grep</span> <span class="token string">'object'</span> fileName <span class="token operator">|</span> <span class="token function">wc</span> -l        <span class="token comment" spellcheck="true"># wc -l里-l显示行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>liunx远程复制</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> output.txt root@2g.CentOS.com:/opt/backup <span class="token comment" spellcheck="true"># 把 output.txt 文件从本地系统复制到 2g.CentOS.com 远程系统的 /opt/backup 文件夹下</span><span class="token function">scp</span> -r /home/daygeek/2g/shell-script/ root@:/opt/backup/<span class="token comment" spellcheck="true"># 同shell-script 文件夹下所有的文件一同复制到/opt/back 下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装软件</p><pre class="line-numbers language-bash"><code class="language-bash">rpm -ivh 软件包yum <span class="token function">install</span> package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打包</p><p>常用参数：</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">生成档案文件，创建打包文件</td></tr><tr><td align="left">-v</td><td align="left">列出归档解档的详细过程，显示进度</td></tr><tr><td align="left">-f</td><td align="left">指定档案文件名称，f后面一定是.tar文件，所以必须放选项最后</td></tr><tr><td align="left">-t</td><td align="left">列出档案中包含的文件</td></tr><tr><td align="left">-x</td><td align="left">解开档案文件</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -cvf xxx.tar *                   <span class="token comment" spellcheck="true"># 当前目录所有文件</span><span class="token function">tar</span> -cvf xxx.tar *.txt               <span class="token comment" spellcheck="true"># 以.txt结尾的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvf xxx.tar                     <span class="token comment" spellcheck="true"># 解包到当前目录</span><span class="token function">tar</span> -xvf xxx.tar -C my-dir           <span class="token comment" spellcheck="true"># 解包到指定目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="小文件太多报rm-Argument-list-too-long"><a href="#小文件太多报rm-Argument-list-too-long" class="headerlink" title="小文件太多报rm Argument list too long"></a>小文件太多报rm Argument list too long</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -name <span class="token string">"要删除的文件名"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span> -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意会删掉目录下的所有文件，包括文件夹内的</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p><a href="https://www.kancloud.cn/chunyu/php_basic_knowledge/2106515" target="_blank" rel="noopener">https://www.kancloud.cn/chunyu/php_basic_knowledge/2106515</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用的文件操作指令&quot;&gt;&lt;a href=&quot;#常用的文件操作指令&quot; class=&quot;headerlink&quot; title=&quot;常用的文件操作指令&quot;&gt;&lt;/a&gt;常用的文件操作指令&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>awk</title>
    <link href="https://arthurjq.com/2022/07/19/awk/"/>
    <id>https://arthurjq.com/2022/07/19/awk/</id>
    <published>2022-07-19T09:19:25.000Z</published>
    <updated>2022-07-20T13:32:19.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="awk基础语法"><a href="#awk基础语法" class="headerlink" title="awk基础语法"></a>awk基础语法</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> ‘program’ file1 , file2 , //对于上述语法中的program来说，又可以细分成pattern和action<span class="token function">awk</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> ‘Pattern<span class="token punctuation">{</span>Action<span class="token punctuation">}</span>’ <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h3><table><thead><tr><th align="left"><strong>-F</strong></th><th align="left"><strong>指定分隔符</strong></th></tr></thead><tbody><tr><td align="left"><strong>-v</strong></td><td align="left"><strong>指定变量和默认值</strong></td></tr><tr><td align="left"><strong>$NF</strong></td><td align="left"><strong>代表最后一个字段</strong></td></tr><tr><td align="left"><strong>NR</strong></td><td align="left"><strong>代表第几行</strong></td></tr><tr><td align="left"><strong>&amp;&amp;</strong></td><td align="left"><strong>与</strong></td></tr><tr><td align="left"><strong>||</strong></td><td align="left"><strong>或</strong></td></tr><tr><td align="left"><strong>FS</strong></td><td align="left"><strong>输入分隔符，与-F分隔符一样</strong></td></tr><tr><td align="left"><strong>OFS</strong></td><td align="left"><strong>输出字段分隔符</strong></td></tr><tr><td align="left"><strong>RS</strong></td><td align="left"><strong>输入记录分隔符</strong></td></tr><tr><td align="left"><strong>$0</strong></td><td align="left"><strong>显示整行</strong></td></tr><tr><td align="left"><strong>1…N</strong></td><td align="left"><strong>第一个字段到第N个字段</strong></td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#注意写法细节 awk -F ":" + 空格 + '{print $6}' 中间没有空格报错</span><span class="token function">tail</span> -1 /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'{print <span class="token variable">$6</span>}'</span> <span class="token comment" spellcheck="true">#指定分隔符“:”并截取第六个字段</span><span class="token comment" spellcheck="true">#FS没有优先级写法</span><span class="token function">awk</span> <span class="token string">'{FS=":"}NR==2{print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span> 3.txt<span class="token comment" spellcheck="true">#FS优先级写法</span><span class="token function">awk</span> <span class="token string">'BEGIN{FS=":"}NR==2{print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span> 1.txt<span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'NR==2{OFS="_";print <span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span> 1.txt  <span class="token comment" spellcheck="true">#OFS指定分隔符":",OFS中间的间隔换成你指定的</span><span class="token function">awk</span> <span class="token string">'BEGIN{FS=":";OFS="-"}NR==2{print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$3</span>}'</span> 1.txt <span class="token comment" spellcheck="true">#FS用法与上面意思相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最高：BEGIN是最高优先级，是在执行PROGRAM之前执行的，不需要提供数据源，因为不涉及任何数据，也不依赖PROGRAM代码块；<br>   默认：PROGRAM是对数据流干什么，是必选代码块，也是默认代码块。所以执行的时候必须要加上数据源； 默认优先级（不加优先级就是默认）<br>   最低：END是处理完数据流后，如果需要执行END代码块，就必须要PROGAM的支持，单个无法执行</p><h2 id="awk命令之控制流写法"><a href="#awk命令之控制流写法" class="headerlink" title="awk命令之控制流写法"></a>awk命令之控制流写法</h2><table><thead><tr><th>if</th><th>判断控制语句</th></tr></thead><tbody><tr><td>for</td><td>循环语句</td></tr><tr><td>while</td><td>循环语句</td></tr><tr><td>do…while</td><td>循环</td></tr><tr><td>循环控制语句</td><td>break #只有break可以用</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{if(<span class="token variable">$1</span>>5)print <span class="token variable">$1*</span><span class="token variable">$2</span>;else print <span class="token variable">$1</span>/<span class="token variable">$2</span>}'</span> 2.txt <span class="token comment" spellcheck="true">#如果$1大于5，$1乘以$2，否则$1除以$2</span><span class="token function">awk</span> <span class="token string">'{a=0;for(i=1;i&lt;11;i++){a+=<span class="token variable">$i</span>}print a}'</span> 2.txt  <span class="token comment" spellcheck="true">##初始化值a，然后内容有几行循环就几次，最后将字段相加，就是结果了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="awk小技巧"><a href="#awk小技巧" class="headerlink" title="awk小技巧"></a>awk小技巧</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'END{print NR}'</span> /etc/passwd  <span class="token comment" spellcheck="true">#可以打印一个文件下有多少行</span><span class="token function">awk</span> <span class="token string">'END{print <span class="token variable">$0</span>}'</span> /etc/passwd <span class="token comment" spellcheck="true">#可以打印最后一行</span><span class="token function">awk</span> -F <span class="token string">":"</span> <span class="token string">'END{print NF}'</span> /etc/passwd <span class="token comment" spellcheck="true">#可以打印文件内最后一行有多少个字段</span><span class="token comment" spellcheck="true">##如果文件内有分隔符，需要指定分隔符</span><span class="token function">cat</span> example.txt <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR%2==1'</span>     <span class="token comment" spellcheck="true">#删除example.txt文件中的所有偶数行</span><span class="token keyword">echo</span> <span class="token string">"    false"</span> <span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">' '</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span>        <span class="token comment" spellcheck="true">#去掉前面的空格</span>docker images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'mysql'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf"%s:%s\n",<span class="token variable">$1</span>,<span class="token variable">$2</span>}'</span>    <span class="token comment" spellcheck="true">#获取镜像名:Tag</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'color'</span> <span class="token function">awk</span> <span class="token string">'{for (i=8;i&lt;=NF;i++)printf("%s ", <span class="token variable">$i</span>);print ""}'</span> <span class="token comment" spellcheck="true">#获取从第八列开始到最后一列的内容</span><span class="token comment" spellcheck="true"># 打印各磁盘可用大小</span><span class="token function">df</span> <span class="token operator">|</span> <span class="token function">grep</span> -v tmpfs <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR!=1 {disk[<span class="token variable">$1</span>]=<span class="token variable">$4</span>} \END {for(i in disk) {printf "%-20s %-10s\n",i,disk[i]/1024"M"}}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;awk基础语法&quot;&gt;&lt;a href=&quot;#awk基础语法&quot; class=&quot;headerlink&quot; title=&quot;awk基础语法&quot;&gt;&lt;/a&gt;awk基础语法&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liunx" scheme="https://arthurjq.com/tags/liunx/"/>
    
  </entry>
  
  <entry>
    <title>devicefarm学习</title>
    <link href="https://arthurjq.com/2022/07/19/devicefarm-xue-xi/"/>
    <id>https://arthurjq.com/2022/07/19/devicefarm-xue-xi/</id>
    <published>2022-07-19T09:19:25.000Z</published>
    <updated>2023-03-31T08:59:51.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><h3 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve"></a>path.resolve</h3><p><strong>作用</strong>：<code>path.resolve()</code> 该方法将一些的 路径/路径段 解析为绝对路径。</p><p><strong>语法</strong>：<code>path.resolve( [from…],to )</code></p><p><strong>说明</strong>：将参数to位置的字符解析到一个绝对路径里，[from … ]为选填项，路径源；</p><p>用法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//引入node的path模块</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'./baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/bar/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/bar/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'/baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'/foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/foo/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'./foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/home/foo/baz'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'foo/bar'</span><span class="token punctuation">,</span> <span class="token string">'../baz'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// returns '/home/foo/baz'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>path.resolve总是返回一个以相对于当前的工作目录（working directory）的绝对路径。</p><h3 id="arr-slice"><a href="#arr-slice" class="headerlink" title="arr.slice"></a>arr.slice</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> sliceArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sliceArr '</span><span class="token punctuation">,</span>sliceArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 得到[34,0,56,12,2]</span><span class="token comment" spellcheck="true">// slice(start,end)表示从下标start开始到下标end（不包括end）进行截取，得到的是一个新数组，不改变原数组。</span><span class="token comment" spellcheck="true">// 当start为负值时表示从倒数第几个元素开始往后截取，不填end的话就表示从倒数第几个元素开始截取，一直截取到数组末尾元素。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="arr-splice"><a href="#arr-splice" class="headerlink" title="arr.splice"></a>arr.splice</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> spliceArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'spliceArr'</span><span class="token punctuation">,</span>spliceArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 得到[34,0,56,12,2]</span><span class="token comment" spellcheck="true">// splice()方法有三个参数，分别表示从哪个下标开始，删几个，新元素。可以实现增加，删除，替换数组元素的功能。</span><span class="token comment" spellcheck="true">// arr.splice(-5,5)表示从倒数第五个元素开始，删五个元素。巧妙的是该方法的返回值是删除的元素集合。同时该方法改变了原数组。原数组变成了除了删除的元素剩下的元素集合。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="arr-prototype-join"><a href="#arr-prototype-join" class="headerlink" title="arr.prototype.join"></a>arr.prototype.join</h3><p><code>Array.prototype.join</code> 将数组里的每一个元素都转换为字符串并拼接在一起，带有唯一参数：分隔符，如果省略，则分隔符默认为逗号.</p><p><code>null</code>, <code>undefined</code>, 以及被删除的元素将成为拼接字符串里的空字符串（empty string）：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 删除 "world"</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 分隔符为逗号： "1,,hello,,true,"</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "1hellotrue"</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' -- '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "1 -- -- hello -- -- true --"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><p>JSON串输出去掉反斜杠</p><p><code>JSON.stringify(arr)</code>直接输出的话会带很多反斜杠，而且都挤在一起很不好看</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> list <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"{\"messages\":1}"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> messages<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><h3 id="Yargs"><a href="#Yargs" class="headerlink" title="Yargs"></a>Yargs</h3><p>Yargs 是一个很好的命令行程序库，简单地说，它可以让创建一个在控制台中运行的应用程序的过程变得轻而易举（类似vue-cli）。</p><p><a href="https://www.codenong.com/j5e97ec66518825736a60c1df/" target="_blank" rel="noopener">https://www.codenong.com/j5e97ec66518825736a60c1df/</a></p><h3 id="Joi"><a href="#Joi" class="headerlink" title="Joi"></a>Joi</h3><p>Joi 是用于 JavaScript 的强大的模式描述语言和数据验证器，让你可以使用简单、直观且可读的语言来描述数据。</p><p><a href="https://www.oschina.net/p/joi?hmsr=aladdin1e1" target="_blank" rel="noopener">https://www.oschina.net/p/joi?hmsr=aladdin1e1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;method&quot;&gt;&lt;a href=&quot;#method&quot; class=&quot;headerlink&quot; title=&quot;method&quot;&gt;&lt;/a&gt;method&lt;/h2&gt;&lt;h3 id=&quot;path-resolve&quot;&gt;&lt;a href=&quot;#path-resolve&quot; class=&quot;head
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nodejs" scheme="https://arthurjq.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>ios模拟器构建机环境搭建</title>
    <link href="https://arthurjq.com/2022/07/18/ios-mo-ni-qi-gou-jian-ji-huan-jing-da-jian/"/>
    <id>https://arthurjq.com/2022/07/18/ios-mo-ni-qi-gou-jian-ji-huan-jing-da-jian/</id>
    <published>2022-07-18T13:44:17.000Z</published>
    <updated>2023-03-08T08:06:06.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>打开git bash映射：</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">ssh</span> -L 16031:172.21.213.31:5900 huya@172.21.213.31 -N<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看设备"><a href="#查看设备" class="headerlink" title="查看设备"></a>查看设备</h3><pre class="line-numbers language-bash"><code class="language-bash">idb list-targets <span class="token operator">|</span><span class="token function">grep</span> HY<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>维护脚本会将没起起来的设备启动</p><h2 id="安装Xcode"><a href="#安装Xcode" class="headerlink" title="安装Xcode"></a>安装Xcode</h2><p>传输13GB的安装包：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> /Users/huya/Downloads/Xcode_13.4.xip huya@172.21.213.31:/Users/huya/Downloads/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>双击解压安装</p><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p>首先下载nvm，打开终端</p><p>可以官网查看新版本的命令：<a href="https://github.com/nvm-sh/nvm/blob/master/README.md" target="_blank" rel="noopener">nvm/README.md at master · nvm-sh/nvm · GitHub</a></p><pre class="line-numbers language-bash"><code class="language-bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后安装之后查看 nvm –version</p><p>结果发现报了这个错误 Command not found</p><p>是因为没有配置配置文件，处理方式如下</p><p>在<code>~</code>目录下创建 <code>.bash_prefile</code> 和 <code>.zshrc</code> 两个文件（可以直接重新输入上面的安装命令，它会帮我们自动配置好path，以下操作就能跳过）</p><p>1.在终端输入 vi ~/.zshrc</p><p>2.终端界面会进入Vim的普通模式，普通模式下无法编辑，需要按 <strong>i</strong> 键然后会进入编辑模式 i</p><p>3.把下面的内容复制进去</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> NVM_DIR<span class="token operator">=</span><span class="token string">"<span class="token variable">$HOME</span>/.nvm"</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment" spellcheck="true"># This loads nvm</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token comment" spellcheck="true"># This loads nvm bash_completion</span><span class="token function">export</span> NVM_DIR<span class="token operator">=</span><span class="token string">"<span class="token variable">$HOME</span>/.nvm"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.输入完了按esc退出编辑模式回到普通模式，然后再分别按 :wq （英文冒号）</p><p>就退回到终端出事的位置了，<code>.bash_prefile文件的创建同上</code></p><p>增加这两个文件后，重启终端。</p><p>然后输入nvm –version 就可以看到版本号了</p><p><code>.bash_prefile</code>文件在启用bash终端时执行，<code>.zshrc</code>文件在zsh启用时执行。</p><h3 id="nvm管理node"><a href="#nvm管理node" class="headerlink" title="nvm管理node"></a>nvm管理node</h3><ul><li>nvm ls-remote ：打印出所有的版本</li><li>nvm install stable：安装最稳定的版本</li><li>nvm install v12.22.12 ： 安装node的12.22.12的版本</li><li>nvm uninstall v12.22.12 ： 删除node的12.22.12的版本</li><li>nvm current ：当前使用的node版本</li><li>nvm use v12.22.12 ：将node改为12.22.12版本</li><li>nvm alias default 12.22.12：设置默认 node 版本为 12.22.12（必须设置！）</li></ul><p>在终端我们可以使用 <code>which node</code> 来查看我们的 <code>node</code> 被安装到了哪里，这里终端打印出来的地址其实是你当前使用的 <code>node</code> 版本快捷方式的地址。</p><pre class="line-numbers language-bash"><code class="language-bash">/Users/你的用户名/.nvm/versions/node/v10.13.0/bin/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想查看所有 <code>node</code> 版本的安装文件夹，我们可以在 <code>访达（finder）</code> 中使用快捷键 <code>Command+Shift+G</code> 输入 <code>/Users/你的用户名/.nvm/versions</code> 地址就可以看到。</p><h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><h3 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h3><pre class="line-numbers language-bash"><code class="language-bash">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后按提示添加homebrew到path：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#将eval "$(opt/homebrew/bin/brew shellenv)"写入.zprofile文件</span><span class="token keyword">echo</span> <span class="token string">'eval "<span class="token variable"><span class="token variable">$(</span>/opt/homebrew/bin/brew shellenv<span class="token variable">)</span></span>"'</span> <span class="token operator">>></span> /Users/huya/.zprofile<span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>/opt/homebrew/bin/brew shellenv<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>brew -v查看版本</p><h3 id="第三方安装"><a href="#第三方安装" class="headerlink" title="第三方安装"></a>第三方安装</h3><pre class="line-numbers language-bash"><code class="language-bash">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>brew装完自动帮我安装了python3</p><h2 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h2><pre><code>brew install android-platform-tools# 兼容问题softwareupdate --install-rosetta</code></pre><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span class="token function">git</span> config --global user.email <span class="token string">"你的信息"</span><span class="token function">git</span> config --global user.name <span class="token string">"你的信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>brew -v</code> 命令看看是不是有两个提示，有的话就是homebrew-core和homebrew-cask目录 被git认为不是一个安全的目录，需要手动添加</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global --add safe.directory 你的homebrew-core路径<span class="token function">git</span> config --global --add safe.directory 你的homebrew-cask路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置好这个才能用brew安装node</p><h3 id="配置HTTP1-1"><a href="#配置HTTP1-1" class="headerlink" title="配置HTTP1.1"></a>配置HTTP1.1</h3><p>如果报错信息curl 92 HTTP/2 stream 0 was not closed cleanly，怀疑是HTTP/2协议自己的bug</p><p>需要修改配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.version HTTP/1.1vim ~/.gitconfig <span class="token comment" spellcheck="true">#使用终端命令查看是否更改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>淘宝新源: npm config set registry <a href="https://registry.npmmirror.com/" target="_blank" rel="noopener">https://registry.npmmirror.com/</a></p></blockquote><h2 id="brew安装node"><a href="#brew安装node" class="headerlink" title="brew安装node"></a>brew安装node</h2><p>mac用nvm就是装不上node，只能用brew装</p><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> node@12---------------------nodee12 is keg-only, <span class="token function">which</span> means it was not symlinked into /opt/homebrew, because this is an alternate version of another formula. If you need to have node@12 first <span class="token keyword">in</span> your PATH, run:<span class="token keyword">echo</span> <span class="token string">'export PATH="/opt/homebrew/opt/node@12/bin:<span class="token variable">$PATH</span>"'</span> <span class="token operator">>></span>  ~/. zshrc For compilers to <span class="token function">find</span> node@12 you may need to set:<span class="token function">export</span> LDFLAGS<span class="token operator">=</span><span class="token string">"-L/opt/homebrew/opt/node@12/lib"</span> <span class="token function">export</span> CPPFLAGS<span class="token operator">=</span><span class="token string">"-I/opt/homebrew/opt/node@12/include"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装成功后，终端会显示nde@12只是keg，这意味着它没有符号链接到路径上</p><pre class="line-numbers language-bash"><code class="language-bash">//根据提示打开文件vim ~/.bash_profilevim ~/.zshrc//添加到文件最后一行<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token string">"/opt/homebrew/opt/node@12/bin:<span class="token variable">$PATH</span>"</span>//执行下面的命令<span class="token function">source</span> ~/.bash_profile<span class="token function">source</span> ~/.zshrc//查看node版本node -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> ffmpeg@5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>期间可能会发生依赖安装不上，这是自己单独用brew install安装装不上的依赖就好。</p><h2 id="安装idb"><a href="#安装idb" class="headerlink" title="安装idb"></a>安装idb</h2><pre class="line-numbers language-bash"><code class="language-bash">brew tap Facebook/fbbrew <span class="token function">install</span> idb-companion//idb客户端安装pip3 <span class="token function">install</span> fb-idb//查看该工具的所有功能idb —help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装完idb客户端后提示python没有添加路径，且idb显示command not found，故而将python路径添加到~/.bash_profile上：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> ~/.bash_profile//插入下面两句<span class="token function">export</span> PYTHON_HOME<span class="token operator">=</span>/Users/huya/Library/Python/3.8<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PYTHON_HOME</span>/bin:<span class="token variable">$PATH</span>//生效<span class="token function">source</span> ~/.bash_profile//继续输入pip3 <span class="token function">install</span> fb-idb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后输入idb看看是否正常使用。</p><h3 id="tap命令"><a href="#tap命令" class="headerlink" title="tap命令"></a>tap命令</h3><p>tap命令允许Homebrew进入另一个公式存储库。 完成此操作后，您将扩展可安装软件的选择。</p><p>这些附加的Git存储库（在usr / local / Library / Taps内部）描述了可用于安装的软件包公式集。</p><pre class="line-numbers language-bash"><code class="language-bash">brew tap                     <span class="token comment" spellcheck="true"># list tapped repositories</span>brew tap <span class="token operator">&lt;</span>tapname<span class="token operator">></span>           <span class="token comment" spellcheck="true"># add tap</span>brew untap <span class="token operator">&lt;</span>tapname<span class="token operator">></span>         <span class="token comment" spellcheck="true"># remove a tap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装Simulator"><a href="#安装Simulator" class="headerlink" title="安装Simulator"></a>安装Simulator</h2><p>安装的版本是iOS 14.5 Simulator，直接在Xcode - preferences - components里点击安装，发现安装不了，显示no valid accounts registered with Xcode that have the ability to access this resource。要进行如下操作：</p><ol><li>open term</li><li>sudo /Applications/Xcode.app/Contents/MacOS/Xcode</li><li>Xcode - preferences - components</li><li>download simulator</li><li>cancel download simulator</li><li>copy download url from term</li><li>then in Terminal in some suitable scratch folder, download it:<code>curl [the url you copied] -O</code> （the letter O, not a zero）</li><li>move to ~/Library/Caches/com.apple.dt.Xcode/Downloads/</li><li>restart Xcode</li><li>In Xcode, in the Downloads section, start the Simulator download again, it should find the file you downloaded and install it.</li></ol><blockquote><p>如果是14.5版本的话可以scp直接传过去</p></blockquote><p>安装完后打开xcode→Window→Devices and Simulators界面进行操作</p><h3 id="创建若干个iphone12mini-simulator"><a href="#创建若干个iphone12mini-simulator" class="headerlink" title="创建若干个iphone12mini  simulator"></a>创建若干个iphone12mini  simulator</h3><p>右键坞中的simulator→Device→选择要打开的模拟器</p><p>终端根目录下输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -alvim .simcfg.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>.simcfg.json文件插入以下json串：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"820--------------------"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"egPort"</span><span class="token operator">:</span> <span class="token number">6550</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"HY0 iPhone 12 mini"</span><span class="token punctuation">,</span>        <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"iPhone 12 mini"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"822--------------------"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"egPort"</span><span class="token operator">:</span> <span class="token number">6551</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"HY1 iPhone 12 mini"</span><span class="token punctuation">,</span>        <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"iPhone 12 mini"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拉代码下来"><a href="#拉代码下来" class="headerlink" title="拉代码下来"></a>拉代码下来</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> res/app<span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli@4.5.9<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run build  // 打包前端代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行npm run build之后生成的dist文件，不能直接通过vscode开启服务访问，会报错，需要安装serve</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> serve -S -g   //一定要全局安装不然也会报错serve dist                //然后启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者可以将dist文件拷贝到其他地方，比如使用hbuilder开启服务访问，或者复制到xampp的服务中访问。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run ios-provider-sim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="若npm报错"><a href="#若npm报错" class="headerlink" title="若npm报错"></a>若npm报错</h3><pre><code>npm install报错: npm WARN tar ENOENT: no such file or directory</code></pre><p>解决：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> yarn -gyarn <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>复制其他构建机~/目录下的devicefarm文件夹过来，通过配置devicefarm.sh脚本运行，记得修改name</p><pre class="line-numbers language-bash"><code class="language-bash">./devicefarm.sh<span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> provider <span class="token comment" spellcheck="true"># 查看运行起来没有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Documents/devicefarm/script/simsodu python3 monitor-devices.py start           <span class="token comment" spellcheck="true"># 必须sodu，否则运行不起来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="have-‘arm64’-need-‘x86-64’"><a href="#have-‘arm64’-need-‘x86-64’" class="headerlink" title="have ‘arm64’, need ‘x86_64’"></a>have ‘arm64’, need ‘x86_64’</h3><pre><code>mach-o file, but is an incompatible architecture (have &#39;arm64&#39;, need &#39;x86_64&#39;)</code></pre><p>解决：</p><p>m2 cpu最好使用zsh安装tidevice和其他python包</p><pre class="line-numbers language-bash"><code class="language-bash">arch -x86_64 pip3 <span class="token function">install</span> pillow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="xcodebuild报错"><a href="#xcodebuild报错" class="headerlink" title="xcodebuild报错"></a>xcodebuild报错</h3><pre><code>tool &#39;xcodebuild&#39; requires Xcode, but active developer directory &#39;/Library/Developer/CommandLineTools&#39; is a command line tools instance</code></pre><p>解决：</p><ol><li>Install Xcode</li><li>Run <code>sudo xcode-select -s /Applications/Xcode.app/Contents/Developer</code></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;映射&quot;&gt;&lt;a href=&quot;#映射&quot; class=&quot;headerlink&quot; title=&quot;映射&quot;&gt;&lt;/a&gt;映射&lt;/h2&gt;&lt;p&gt;打开git bash映射：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>提升和作用域</title>
    <link href="https://arthurjq.com/2022/07/11/hoisting/"/>
    <id>https://arthurjq.com/2022/07/11/hoisting/</id>
    <published>2022-07-11T11:07:21.000Z</published>
    <updated>2022-07-11T12:30:24.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>转载：<a href="https://segmentfault.com/a/1190000016514414" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016514414</a></p><p>在最开始之前，我们先来学习一下两种报错。</p><ul><li>ReferenceError 异常</li><li>TypeError</li></ul><p><strong>第一种是因为遍历了所有的作用域都查找不到变量</strong></p><p><strong>第二种是找到了这个变量，但是对这个变量的值进行了错误的操作，比如试图对一个非函数类型的值进行函数调用</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出2，而非undefined</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出undefined，而非ReferenceError</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来。<strong>正确的思考思路是，包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</strong></p><p>这个过程就好像变量从它们在代码中出现的位置被“移动”到了最上面（变量所在作用域）。这个过程就叫作提升。</p><p>对于函数声明也能提升：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>但是，需要注意的是，函数声明会被提升，但是函数表达式却不会。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不是 ReferenceError, 而是 TypeError!</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于以下</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时foo肯定是undefined啦，undefined()? 对undefined值进行函数调用显然是错误操作！TypeError！</span>foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数声明和变量声明都会被提升，函数会首先被提升，然后才是变量。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于以下</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重复声明，可以去掉</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位 置（不仅仅是一行代码，而是整个声明中的位置）。如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</p></blockquote><p><strong>注意：后面的声明会覆盖前面的声明。</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相当于以下</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>foo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// more code</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当函数 fn2 被执行时，同样会经历一个预编译的过程，函数体内的变量 a 的声明同样经历了“提升”，所以当函数体的可执行语句执行时，此时在 fn2 的作用域内已经可以找到变量 a，其初始值为 undefined，而不会再沿着<strong>作用域链</strong>向其上层作用域寻找。同时由于 if false 条件语句，if 分支内 <code>a = 2</code> 的赋值语句将不被执行，造成第二个对变量 a 的打印值也是 undefined。</p><p>究其原因，还要归咎于作用域的问题。早些年的 JS 语言中并没有<strong>块级作用域</strong>的概念，作用域只有函数内和函数外的简单划分，所以 fn2 内的第二次对变量 a 的声明才会被提升至 <strong>if 分支语句块</strong>之外，造成某些隐晦不明的 bug。因为本质上，这个 a 的声明是在 fn2 函数体内的，即函数内的作用域。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>最外层的全局作用域，任何地方都可以访问得到。在最外层作用域下使用 <code>var</code> 关键字会定义全局变量，也就是说会挂载在 <code>window</code> 对象上，或者不使用关键字 <code>var、let、const</code> 直接对变量名字进行赋值，JS也会自动为其创建为全局变量。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        c <span class="token operator">=</span> <span class="token number">30</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span>    <span class="token punctuation">}</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// b和c变量被隐式声明到全局变量了，所以能访问到，这也叫变量提升机制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span class="token comment" spellcheck="true">// 但a，b，c也被挂载在window对象（全局作用域）上面了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>块级作用域指在代码块 <code>{}</code> 里面定义的变量，只会在当前代码块有效，如果外层作用域下想访问该变量，会报引用错误异常。</p><p>使用关键字 <code>let</code> 或 <code>const</code> 定义块级作用域的变量。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError: i is not defined</span><span class="token comment" spellcheck="true">// 因为i只能在for循环内部有效，外部作用域是访问不到的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>作用域只能一层一层往外查询，那么如果获取一个函数里的变量值？我们可以再给这个函数里面整一层作用域，这样函数里面的子作用域不就可以访问它的变量了吗？</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">执行了foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>就返回了一个bar<span class="token punctuation">;</span>现在相当于baz<span class="token operator">=</span>bar<span class="token punctuation">;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们需要获取a的值，我们就在里面写一个函数bar，显然这个bar是有权利访问a的,那我们返回这个有权利访问a的函数不就顶呱呱了吗？</p><p>在 <code>foo()</code>执行后，通常会期待 <code>foo()</code> 的整个内部作用域都被销毁，因为我们知道引擎有垃圾回收器用来释放不再使用的内存空间。由于看上去<code>foo()</code> 的内容不会再被使用，所以很自然地会考虑对其进行回收。<br>而闭包的“神奇”之处正是可以阻止这件事情的发生。<strong>事实上内部作用域依然存在，因此没有被回收</strong>（频繁使用闭包可能导致内存泄漏）。谁在使用这个内部作用域？原来是 <code>bar()</code> 本身在使用。拜 <code>bar()</code>所声明的位置所赐，它拥有涵盖<code>foo()</code>内部作用域的闭包，使得该作用域能够一直存活，以供 <code>bar()</code> 在之后任何时间进行引用。</p><h2 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h2><pre class="line-numbers language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">IIFE</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3 </span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 </span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">//由于函数被包含在一对 ( ) 括号内部，因此成为了一个表达式，</span><span class="token comment" spellcheck="true">//通过在末尾加上另外一个 ( ) 可以立即执行这个函数，</span><span class="token comment" spellcheck="true">//比如 (function foo(){ … })()，</span><span class="token comment" spellcheck="true">//第一个( )将函数变成表达式，第二个( )执行了这个函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;提升&quot;&gt;&lt;a href=&quot;#提升&quot; class=&quot;headerlink&quot; title=&quot;提升&quot;&gt;&lt;/a&gt;提升&lt;/h2&gt;&lt;p&gt;转载：&lt;a href=&quot;https://segmentfault.com/a/1190000016514414&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://arthurjq.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>child_process</title>
    <link href="https://arthurjq.com/2022/07/08/child-process/"/>
    <id>https://arthurjq.com/2022/07/08/child-process/</id>
    <published>2022-07-08T09:19:25.000Z</published>
    <updated>2022-07-21T05:00:48.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建异步进程"><a href="#创建异步进程" class="headerlink" title="创建异步进程"></a>创建异步进程</h2><p>以下四个方法均放回ChildProcess的实例</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p><code>child_process.exec(command[, options][, callback])</code></p><p>注意：<br> 1、command 是一个 shell 命令的字符串，包含了命令的参数<br> 2、可以使用 callback；<br> 3、衍生一个 shell 然后在该 shell 中执行 command，command 一般是 shell 内置的 命令，如 ls,cat 等，也可以是shell脚本组成的文件，如 start.sh 等</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 回调函数版</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat *.js missing_file | wc -l'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`执行出错: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stderr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// promise 版</span><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> exec <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">lsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> stdout<span class="token punctuation">,</span> stderr <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat *.js missing_file | wc -l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stdout:'</span><span class="token punctuation">,</span> stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stderr:'</span><span class="token punctuation">,</span> stderr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">lsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="execFile"><a href="#execFile" class="headerlink" title="execFile"></a>execFile</h3><p><code>child_process.execFile(file[, args][, options][, callback])</code></p><p>注意：<br>1、与 exec 的不同是，命令的参数不能放在第一个参数，只能作为第二个参数传递；<br>2、默认情况下不会衍生 shell，指定的可执行 file 直接作为新进程衍生，使其比 child_process.exec() 稍微更高效<br>3、file 是要运行的可执行文件的名称或路径，如 node.exe，不能是 start.js 这种脚本文件</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 回调函数版</span><span class="token keyword">const</span> <span class="token punctuation">{</span> execFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">execFile</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'--version'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// promise 版</span><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> execFile <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> stdout <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">execFile</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'--version'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p><code>child_process.fork(modulePath[, args][, options])</code></p><p>注意：<br>1、该接口专门用于衍生新的 Node.js 进程<br>2、modulePath 是要在node子进程中运行的模块，由于是 node.js 的进程，所以可以是 start.js 这种 js 文件<br>3、无回调，参数要以第二个参数传入<br>4、返回的子进程将内置一个额外的ipc通信通道，允许消息在父进程和子进程之间来回传递。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// IPC 通道</span><span class="token comment" spellcheck="true">// parent.js</span><span class="token keyword">var</span> child_process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> child_process<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token string">'./child.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'message from child: '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'parent'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// child.js</span>process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'message from parent: '</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'child'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行 node parent.js的 result </span>message <span class="token keyword">from</span> child<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"from"</span><span class="token punctuation">:</span><span class="token string">"child"</span><span class="token punctuation">}</span>message <span class="token keyword">from</span> parent<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"from"</span><span class="token punctuation">:</span><span class="token string">"parent"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h3><p><code>child_process.spawn(command[, args][, options])</code></p><p>注意：使用给定的 command 衍生一个新进程，并带上 args 中的命令行参数。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'bad_command'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to start child process 1.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'nonexistFile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child2<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error msg from process 2: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child2<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Failed to start child process 2.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四个方法的区别"><a href="#四个方法的区别" class="headerlink" title="四个方法的区别"></a>四个方法的区别</h3><p>主要的区别在于第一个参数的含义不同：<br>对于 exec 和 execFile 传递的是 command 或 可执行文件，类似 ls 或者 start.sh 或者 node;可接受回调; 二者不同的是命令的参数位置<br>对于 fork 传递的是node支持的脚本，类似 start.js，无回调<br>对于 spawn，它是以上三个方法实现的基础。</p><p>对于构建开发环境而言，一般至少会起两个进程，主进程起 devServer；还需一个进程起mock API 服务器，所以一般用 fork 较多</p><h3 id="关于-ChildProcess-类"><a href="#关于-ChildProcess-类" class="headerlink" title="关于 ChildProcess 类"></a>关于 ChildProcess 类</h3><p>1、<code>ChildProcess</code> 类的实例都是 <code>EventEmitter</code>，表示衍生的子进程<br>2、每个实例都有 stdout, stdin, stderr 三个流对象<br>3、通过 fork 产生的子进程与父进程可以用 send 方法及监听 message 事件来相互通信<br>4、 几个事件： error , message , exit , close , disconnect</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p><a href="https://zhuanlan.zhihu.com/p/64205442" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/64205442</a></p><h2 id="teen-process"><a href="#teen-process" class="headerlink" title="teen_process"></a>teen_process</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//安装</span>npm i teen_process<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Node 的 child_process 的成熟版本。<code>exec</code>确实很有用，但它有很多限制。这是在后台使用的 es7 ( <code>async</code>/ <code>await</code>) 实现。它负责<strong>包装命令和参数</strong>，因此我们不必关心转义空格。即使命令失败或超时，它也可以返回 stdout/stderr。重要的是，它也不容易受到最大缓冲区问题的影响。</p><h3 id="teen-process-exec"><a href="#teen-process-exec" class="headerlink" title="teen_process.exec"></a>teen_process.exec</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'teen_process'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// basic usage</span><span class="token keyword">let</span> <span class="token punctuation">{</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">,</span> code<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'/usr/local/bin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// array of files</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// ''</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// works with spaces</span><span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'/command/with spaces.sh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'argument with spaces'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// as though we had run: "/command/with spaces.sh" foo "argument with spaces"</span><span class="token comment" spellcheck="true">// nice error handling that still includes stderr/stdout/code</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'echo_and_exit'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "Exited with code 10"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "foo"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该<code>exec</code>函数采用一些选项，具有以下默认值：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  cwd<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  env<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  killSignal<span class="token punctuation">:</span> <span class="token string">'SIGTERM'</span><span class="token punctuation">,</span>  encoding<span class="token punctuation">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>  ignoreOutput<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  stdio<span class="token punctuation">:</span> <span class="token string">"inherit"</span><span class="token punctuation">,</span>  isBuffer<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  shell<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  logger<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  maxStdoutBufferSize<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 100 MB</span>  maxStderrBufferSize<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 100 MB</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中大部分是不言自明的。<code>ignoreOutput</code>如果您有一个非常健谈的进程，您不关心其输出并且不想将其添加到程序消耗的内存中，则此方法很有用。</p><p>需要两个缓冲区大小限制以避免在收集进程输出时内存溢出。如果不同流类型的输出块的总大小超过给定的块，那么最旧的块将被拉出以将内存负载保持在可接受的范围内。</p><p>如果您使用的是Windows，你想传递<code>shell: true</code>的，因为<code>exec</code><br>实际使用<code>spawn</code>引擎盖下的，因此受到有关Windows +提到的问题<code>spawn</code>中的<a href="https://nodejs.org/api/child_process.html" target="_blank" rel="noopener">节点文档</a>。</p><p>如果<code>stdio</code>选项未设置为<code>inheirt</code>，您可能无法从流程中获得彩色输出。在这种情况下，您可以浏览子流程的文档以查看是否可以指定类似<code>--colors</code>或<code>FORCE_COLORS</code>可以指定的选项。您也可以尝试设置<code>env.FORCE_COLOR = true</code>并查看它是否有效。</p><p>例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'sleep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'10'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>timeout<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> killSignal<span class="token punctuation">:</span> <span class="token string">'SIGINT'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "'sleep 10' timed out after 500ms"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该<code>isBuffer</code>选项指定返回的标准 I/O 是Buffer 的一个实例。</p><p>例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>isBuffer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Buffer<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该<code>logger</code>选项允许将 stdout 和 stderr 发送到接收到的特定记录器。这被<code>ignoreOutput</code>选项覆盖。</p><h3 id="teen-process-SubProcess"><a href="#teen-process-SubProcess" class="headerlink" title="teen_process.SubProcess"></a>teen_process.SubProcess</h3><p><code>spawn</code>已经非常棒了，但对于某些用途，有相当多的样板文件，尤其是在<code>async/await</code>上下文中使用时。<code>teen_process</code>还公开了一个<code>SubProcess</code>类，可用于减少一些样板。它有两种方法，<code>start</code>以及<code>stop</code>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> SubProcess <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'teen_process'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> tailFileForABit <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> proc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubProcess</span><span class="token punctuation">(</span><span class="token string">'tail'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'-f'</span><span class="token punctuation">,</span> <span class="token string">'/var/log/foo.log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用上下文中引发启动/停止错误。</p><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>您可以收听 8 个事件：</p><ul><li><code>exit</code></li><li><code>stop</code></li><li><code>end</code></li><li><code>die</code></li><li><code>output</code></li><li><code>lines-stdout</code></li><li><code>lines-stderr</code></li><li><code>stream-line</code></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'exit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, all we know is that the proc exited</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`exited with code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> from signal </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>signal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// exited with code 127 from signal SIGHUP</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'stop'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, we know that we intentionally stopped the proc</span>  <span class="token comment" spellcheck="true">// by calling proc.stop</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, we know that the process stopped outside of our control</span>  <span class="token comment" spellcheck="true">// but with a 0 exit code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'die'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if we get here, we know that the process stopped outside of our control</span>  <span class="token comment" spellcheck="true">// with a non-zero exit code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stderr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// lines-stderr is just the same</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'lines-stdout'</span><span class="token punctuation">,</span> lines <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['foo', 'bar', 'baz']</span>  <span class="token comment" spellcheck="true">// automatically handles rejoining lines across stream chunks</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// stream-line gives you one line at a time, with [STDOUT] or [STDERR]</span><span class="token comment" spellcheck="true">// prepended</span>proc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'stream-line'</span><span class="token punctuation">,</span> line <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [STDOUT] foo</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// so we could do: proc.on('stream-line', console.log.bind(console))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动探测器"><a href="#启动探测器" class="headerlink" title="启动探测器"></a>启动探测器</h4><p>如何<code>SubProcess</code>知道何时从 返回控制权<code>start()</code>？嗯，默认是等到有一些输出。您还可以传入一个数字，这将导致它等待那个毫秒数，或者一个函数（我称之为 a <code>startDetector</code>），它接受 stdout 和 stderr 并在您想要控制时返回 true 。例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue when stdout or stderr has received data</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue immediately</span><span class="token keyword">let</span> sd <span class="token operator">=</span> <span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> stderr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'blarg'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue when stderr receives 'blarg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>startDetector</code>如果要声明启动失败，自定义也可以抛出错误。例如，如果我们知道第一个输出可能包含一个使进程无效的字符串（对我们来说），我们可以定义一个自定义<code>startDetector</code>如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sd <span class="token operator">=</span> <span class="token punctuation">(</span>stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/fail/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>stderr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Encountered failure condition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> stdout <span class="token operator">||</span> stderr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will continue when output is received that doesn't</span>                      <span class="token comment" spellcheck="true">// match 'fail'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，如果要指定等待进程启动的最长时间，可以通过将第二个参数（以毫秒为单位）传递给<code>start()</code>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// use the default startDetector and throw an error if we wait for more than</span><span class="token comment" spellcheck="true">// 1000ms for output</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="精加工工艺"><a href="#精加工工艺" class="headerlink" title="精加工工艺"></a>精加工工艺</h4><p>进程启动后，您可以使用<code>join()</code>等待它自行完成：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will throw on exitcode not 0</span><span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will throw on exitcode not 0 or 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>杀死进程怎么样？您可以提供自定义信号，而不是使用默认信号<code>SIGTERM</code>吗？为什么是：</p><pre><code>await proc.stop(&#39;SIGHUP&#39;);</code></pre><p>如果您的进程可能无法杀死并且您并不真正关心，您还可以传递超时，它会在超时过后以错误的形式将控制权返回给您：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> proc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">'SIGHUP'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Proc failed to stop, ignoring cause YOLO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总而言之，这使得编写一个脚本将文件拖尾 X 秒然后停止，使用 async/await 和非常简单的错误处理变得非常简单。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> boredTail <span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> boredAfter <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubProcess</span><span class="token punctuation">(</span><span class="token string">'tail'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'-f'</span><span class="token punctuation">,</span> filePath<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'stream-line'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Bluebird<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span>boredAfter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建异步进程&quot;&gt;&lt;a href=&quot;#创建异步进程&quot; class=&quot;headerlink&quot; title=&quot;创建异步进程&quot;&gt;&lt;/a&gt;创建异步进程&lt;/h2&gt;&lt;p&gt;以下四个方法均放回ChildProcess的实例&lt;/p&gt;
&lt;h3 id=&quot;exec&quot;&gt;&lt;a href=&quot;#e
      
    
    </summary>
    
      <category term="测试开发" scheme="https://arthurjq.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nodejs" scheme="https://arthurjq.com/tags/nodejs/"/>
    
  </entry>
  
</feed>
