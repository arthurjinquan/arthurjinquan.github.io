<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锦泉^-^</title>
  
  <subtitle>JAVA工程师进阶之旅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arthurjq.com/"/>
  <updated>2021-03-17T15:30:29.091Z</updated>
  <id>https://arthurjq.com/</id>
  
  <author>
    <name>锦泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序单边循环</title>
    <link href="https://arthurjq.com/2021/03/17/algorithm/quicksort/"/>
    <id>https://arthurjq.com/2021/03/17/algorithm/quicksort/</id>
    <published>2021-03-17T14:30:38.000Z</published>
    <updated>2021-03-17T15:30:29.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归导致堆溢出"><a href="#递归导致堆溢出" class="headerlink" title="递归导致堆溢出"></a>递归导致堆溢出</h2><p> <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a></p><h3 id="双边循环写法"><a href="#双边循环写法" class="headerlink" title="双边循环写法"></a>双边循环写法</h3><p>刷leetcode 912时用快排直接堆溢出，只能用单边循环做。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickCore</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">quickCore</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>            nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">></span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>            nums<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token function">quickCore</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickCore</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错：<strong>AddressSanitizer: heap-buffer-overflow on address 0x6020000000a0 at pc 0x00000034b389 bp 0x7ffe1cc91ff0 sp 0x7ffe1cc91fe8</strong></p><h2 id="单边循环快排"><a href="#单边循环快排" class="headerlink" title="单边循环快排"></a>单边循环快排</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//运行时间20ms</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickCore</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">quickCore</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跟以前一样左边第一个为基准</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果小于基准值，m加1，然后跟m位置交换（其实就是把比base小的数换到左边）</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span><span class="token punctuation">{</span>                m<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//把base换到空缺的位置（这时候num[m]肯定小于等于num[left]）</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickCore</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickCore</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;递归导致堆溢出&quot;&gt;&lt;a href=&quot;#递归导致堆溢出&quot; class=&quot;headerlink&quot; title=&quot;递归导致堆溢出&quot;&gt;&lt;/a&gt;递归导致堆溢出&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/sort-an
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://arthurjq.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收机制</title>
    <link href="https://arthurjq.com/2021/03/17/java/jvm-gc/"/>
    <id>https://arthurjq.com/2021/03/17/java/jvm-gc/</id>
    <published>2021-03-17T09:15:22.000Z</published>
    <updated>2021-03-17T16:13:59.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="怎么判断那些对象应该回收"><a href="#怎么判断那些对象应该回收" class="headerlink" title="怎么判断那些对象应该回收"></a>怎么判断那些对象应该回收</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>在对象中添加一个引用计数器，每当一个地方引用它时，计数器就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><p>问题：不能解决循环依赖，<strong>对象1和对象2相互引用的话不会被回收</strong>，比如下面代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> Object instance<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">ReferenceCountingGC</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ReferenceCountingGC a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token string">"objA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ReferenceCountingGC b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token string">"objB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span>instance <span class="token operator">=</span> b<span class="token punctuation">;</span>    b<span class="token punctuation">.</span>instance <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> null<span class="token punctuation">;</span>    b <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>根对象作为起始节点集合，从根节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为引用链，如果某个对象到GC Roots间没有任何引用链相连就可以被回收。</p><p>GCRoots的对象包括下面几种：</p><ol><li>虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。</li><li>方法区中的类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI（Native方法）引用的对象。</li></ol><blockquote><p>被判定不可达对象，不是一定会被回收：经过第一次标记后的对象，根据 此对象是否有必要执行finalize（）方法 进行筛选，随后会由收集器对<code>F-Queue</code>中的对象进行第二次小规模的标记</p></blockquote><h2 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h2><ol><li>白色：表示对象尚未被垃圾回收器访问过。若在分析结束的阶段，仍然是白色的对象，即代表不可达。</li><li>黑色：表示对象已经被垃圾回收器访问过，且<strong>这个对象的所有引用都已经扫描过</strong>。黑色的对象代表已经扫描过，它是安全存活的，如果有其它的对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象。</li><li>灰色：表示对象已经被垃圾回收器访问过，但这个对象<strong>至少存在一个引用还没有被扫描过</strong>。</li></ol><h3 id="为什么会产生浮动垃圾"><a href="#为什么会产生浮动垃圾" class="headerlink" title="为什么会产生浮动垃圾"></a>为什么会产生浮动垃圾</h3><ul><li>一种是把原本消亡的对象错误的标记为存活，这不是好事，但是其实是可以容忍的，只不过产生了一点逃过本次回收的浮动垃圾而已，下次清理就可以。</li><li>一种是把<strong>原本存活的对象错误的标记为已消亡</strong>，这就是非常严重的后果了，一个程序还需要使用的对象被回收了，那程序肯定会因此发生错误。</li></ul><blockquote><p>原来应该是黑色的对象被误标为了白色的两个必要条件：</p><p>条件一：赋值器插入了一条或者多条从黑色对象到白色对象的新引用。</p><p>条件二：赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。</p><p>于是产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）。</p></blockquote><p>在HotSpot虚拟机中，CMS是基于<strong>增量更新</strong>来做并发标记的，G1则采用的是<strong>原始快照</strong>的方式。</p><h3 id="增量更新"><a href="#增量更新" class="headerlink" title="增量更新"></a>增量更新</h3><p>增量更新要破坏的是第一个条件（赋值器插入了一条或者多条从黑色对象到白色对象的新引用），当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。</p><p>可以简化的理解为：<strong>黑色对象一旦插入了指向白色对象的引用之后，它就变回了灰色对象</strong>。</p><h3 id="原始快照"><a href="#原始快照" class="headerlink" title="原始快照"></a>原始快照</h3><p>原始快照要破坏的是第二个条件（赋值器删除了全部从灰色对象到该白色对象的直接或间接引用），当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。</p><p>这个可以简化理解为：<strong>无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照开进行搜索</strong>。</p><p>增量更新用的是写后屏障（Post-Write Barrier），<strong>记录了所有新增的引用关系</strong>。</p><p>原始快照用的是写前屏障（Pre-Write Barrier），<strong>将所有即将被删除的引用关系的旧引用记录下来</strong>。</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>先把内存区域中的这些对象进行标记，哪些属于可回收标记出来，然后把这些垃圾拎出来清理掉。会<strong>产生内存碎片</strong>。</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>它将可用内存<strong>按容量划分为大小相等的两块，每次只使用其中的一块</strong>。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，再清理掉端边界以外的内存区域。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用<strong>复制算法</strong>，只需要付出少量存活对象的复制成本就可以完成收集。</p><p>在老年代中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用<strong>标记-清理算法</strong>或者<strong>标记-整理算法</strong>来进行回收。</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="Serial-Serial-Old"><a href="#Serial-Serial-Old" class="headerlink" title="Serial/Serial Old"></a>Serial/Serial Old</h3><p><strong>单线程</strong>收集器，并且在它进行垃圾收集时，必须暂停所有用户线程。Serial收集器是针对新生代的收集器，采用的是<strong>Copying算法</strong>，Serial Old收集器是针对老年代的收集器，采用的是<strong>Mark-Compact算法</strong>。它的优点是实现简单高效，但是缺点是会给用户带来<strong>停顿</strong>。</p><h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><p>ParNew收集器是Serial收集器的<strong>多线程</strong>版本，使用多个线程进行垃圾收集。</p><h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><p>新生代的多线程收集器（并行收集器），它在回收期间<strong>不需要暂停</strong>其他用户线程，其采用的是Copying算法，该收集器与前两个收集器有所不同，它主要是为了达到一个可控的吞吐量。</p><h3 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h3><p>Parallel Scavenge收集器的老年代版本（并行收集器），使用多线程和Mark-Compact算法。</p><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>CMS（Current Mark Sweep）收集器是一种<strong>以获取最短回收停顿时间为目标</strong>的收集器，它是一种并发收集器，采用的是Mark-Sweep算法。</p><ol><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ol><p>其中，<code>初始标记</code>、<code>重新标记</code>这两个步骤仍然需要Stop-the-world。<strong>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始阶段稍长一些，但远比并发标记的时间短。</strong></p><p><strong>安全点，即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停</strong>。</p><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><p>G1<strong>重新定义了堆空间</strong>，打破了原有的分代模型，将堆划分为一个个区域。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。区域划分的好处就是带来了停顿时间可预测的收集模型：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。</p><p><strong>G1不会产生内存碎片</strong></p><p>G1收集器将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但<strong>新生代和老年代不再是物理隔离</strong>的了，它们都是一部分Region（不需要连续）的集合。Region的大小是一致的，数值是在1M到32M字节之间的一个2的幂值数，JVM会尽量划分2048个左右、同等大小的Region。</p><p><strong>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集</strong>。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol><li><strong>初始标记（Initial Marking）</strong>：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，<strong>这阶段需要<code>停顿线程</code>，但耗时很短</strong>。</li><li><strong>并发标记（Concurrent Marking）</strong>：是从GC Roots开始堆中对象进行可达性分析，找出存活的对象，<strong>这阶段耗时较长</strong>，但可与用户程序并发执行。</li><li><strong>最终标记（Final Marking）</strong>：是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，<strong>这阶段需要<code>停顿线程</code>，但是可并行执行</strong>。</li><li><strong>筛选回收（Live Data Counting and Evacuation）</strong>：首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li></ol><p>使用了Remembered Set来<strong>避免全堆扫描</strong>，G1中每个Region都有一个与之对应的RememberedSet ，在各个 Region 上记录自家的对象被外面对象引用的情况。当进行内存回收时，在GC根节点的枚举范围中加入RememberedSet 即可保证不对全堆扫描也不会有遗漏。</p><h4 id="卡表"><a href="#卡表" class="headerlink" title="卡表"></a>卡表</h4><p>在进行Minor GC的时候，我们可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到Minor GC的GC Roots里。当完成所有脏卡的扫描之后，Java虚拟机便会将所有脏卡的标识位清零。</p><p>想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么Java虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p><p><strong>卡表能用于减少老年代的全堆空间扫描，这能很大的提升GC效率</strong>。</p><h3 id="CMS和G1的对比"><a href="#CMS和G1的对比" class="headerlink" title="CMS和G1的对比"></a>CMS和G1的对比</h3><table><thead><tr><th></th><th><strong>CMS</strong></th><th><strong>G1</strong></th></tr></thead><tbody><tr><td><strong>JDK版本</strong></td><td>1.6以上</td><td>1.7以上</td></tr><tr><td><strong>回收算法</strong></td><td>标记——清除</td><td>标记——整理</td></tr><tr><td><strong>运行环境</strong></td><td>针对70G以内的堆内存</td><td>可针好几百G的大内存</td></tr><tr><td><strong>回收区域</strong></td><td>老年代</td><td>新生代和老年代</td></tr><tr><td><strong>内存布局</strong></td><td>传统连续的新生代和老年代区域</td><td>Region（将新生代和老年代切分成Region，默认一个Region 1 M,默认2048块）</td></tr><tr><td><strong>浮动垃圾</strong></td><td>是</td><td>否</td></tr><tr><td><strong>内存碎片</strong></td><td>是</td><td>否</td></tr><tr><td><strong>全堆扫描</strong></td><td>是</td><td>否</td></tr><tr><td><strong>回收时间可控</strong></td><td>否</td><td>是</td></tr><tr><td><strong>对象进入老年代的年龄</strong></td><td>6</td><td>15</td></tr><tr><td><strong>空间动态调整</strong></td><td>否</td><td>是（新生代5%-60%动态调整，一般不需求指定）</td></tr><tr><td><strong>调优参数</strong></td><td>多（近百个）</td><td>少（十几个）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;怎么判断那些对象应该回收&quot;&gt;&lt;a href=&quot;#怎么判断那些对象应该回收&quot; class=&quot;headerlink&quot; title=&quot;怎么判断那些对象应该回收&quot;&gt;&lt;/a&gt;怎么判断那些对象应该回收&lt;/h2&gt;&lt;h3 id=&quot;引用计数算法&quot;&gt;&lt;a href=&quot;#引用计数算法&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="jvm" scheme="https://arthurjq.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM 调优</title>
    <link href="https://arthurjq.com/2021/03/16/java/jvm-tuning/"/>
    <id>https://arthurjq.com/2021/03/16/java/jvm-tuning/</id>
    <published>2021-03-16T09:31:34.000Z</published>
    <updated>2021-03-16T16:03:39.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-4.jpg" alt></p><h3 id="线程栈"><a href="#线程栈" class="headerlink" title="线程栈"></a>线程栈</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-1.jpg" alt></p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-3.jpg" alt></p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-2.jpg" alt></p><h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>在cmd输入jvisualvm回车就会打开可视化界面。</p><h2 id="arthas"><a href="#arthas" class="headerlink" title="arthas"></a>arthas</h2><p>官网下载arthas的jar包。</p><pre class="line-numbers language-shell"><code class="language-shell">java -jar arthas-boot.jar//会看到存在的java进程，输入序号进入进程dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-4.jpg" alt></p><p>看到线程0占用了90%的cpu，明显有问题。输入thread+id号进入线程：</p><pre class="line-numbers language-shell"><code class="language-shell">thread 8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-5.jpg" alt></p><p>然后去代码里找第39行：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-6.jpg" alt></p><p>反编译：</p><pre class="line-numbers language-shell"><code class="language-shell">jad com.tuling.jvm.ArthasTest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="调优案例"><a href="#调优案例" class="headerlink" title="调优案例"></a>调优案例</h2><h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</p><p>比如如下设置：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-7.jpg" alt></p><p>60MB对象放入幸存者区触发动态对象年龄判定，直接进入老年代，导致频繁full gc。</p><p>解决方法如下，把年轻代调大：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jvm-tuning-8.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/arthurjq/blogimage/raw/master/img/pic/
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="jvm" scheme="https://arthurjq.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://arthurjq.com/2021/03/16/java/singleton/"/>
    <id>https://arthurjq.com/2021/03/16/java/singleton/</id>
    <published>2021-03-16T05:49:35.000Z</published>
    <updated>2021-03-16T05:56:20.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要有单例模式"><a href="#为什么要有单例模式" class="headerlink" title="为什么要有单例模式"></a>为什么要有单例模式</h2><p>实际编程应用场景中，有一些对象其实我们只需要一个，比如线程池对象、缓存、系统全局配置对象等。这样可以就保证一个在全局使用的类不被频繁地创建与销毁，节省系统资源。</p><p>转载：<a href="https://www.cnblogs.com/happyone/p/11221157.html" target="_blank" rel="noopener">https://www.cnblogs.com/happyone/p/11221157.html</a></p><h2 id="实现单例模式的几个要点"><a href="#实现单例模式的几个要点" class="headerlink" title="实现单例模式的几个要点"></a>实现单例模式的几个要点</h2><ol><li>首先要确保全局只有一个类的实例。<br>要保证这一点，至少类的构造器要私有化。</li><li>单例的类只能自己创建自己的实例。<br>因为，构造器私有了，但是还要有一个实例，只能自己创建咯！</li><li>单例类必须能够提供自己的唯一实例给其他类<br>就是要有一个公共的方法能返回该单例类的唯一实例。</li></ol><h2 id="饿汉式—静态常量方式（线程安全）"><a href="#饿汉式—静态常量方式（线程安全）" class="headerlink" title="饿汉式—静态常量方式（线程安全）"></a>饿汉式—静态常量方式（线程安全）</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类加载时就初始化实例，避免了多线程同步问题。天然线程安全。</p><h2 id="懒汉式（线程安全，方法上加同步锁）"><a href="#懒汉式（线程安全，方法上加同步锁）" class="headerlink" title="懒汉式（线程安全，方法上加同步锁）"></a>懒汉式（线程安全，方法上加同步锁）</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上面 懒汉式（线程不安全）实现上唯一不同是：获取实例的getInstance()方法上加了同步锁。保证了多线程场景下的单例。但是效率会有所折损，不过还好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要有单例模式&quot;&gt;&lt;a href=&quot;#为什么要有单例模式&quot; class=&quot;headerlink&quot; title=&quot;为什么要有单例模式&quot;&gt;&lt;/a&gt;为什么要有单例模式&lt;/h2&gt;&lt;p&gt;实际编程应用场景中，有一些对象其实我们只需要一个，比如线程池对象、缓存、系统全局配置
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="设计模式" scheme="https://arthurjq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="https://arthurjq.com/2021/03/15/hashmap/"/>
    <id>https://arthurjq.com/2021/03/15/hashmap/</id>
    <published>2021-03-15T10:45:35.000Z</published>
    <updated>2021-03-16T05:51:35.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap扩容源码（JDK1-7）"><a href="#HashMap扩容源码（JDK1-7）" class="headerlink" title="HashMap扩容源码（JDK1.7）"></a>HashMap扩容源码（JDK1.7）</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当size超过临界阈值threshold，并且即将发生哈希冲突时进行扩容</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//扩容后重新计算插入的位置下标</span>            bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//把元素放入HashMap的桶的对应位置</span>        <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建元素  </span>    <span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//获取待插入位置元素</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//这里执行链接操作，使得新插入的元素指向原有元素，头插法</span>        table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将老的表中的数据转移到新的结构中</span>        <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转移完后旧表指向新表</span>        table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//将老的表中的数据转移到新的结构中  </span>    <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//遍历数组</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//遍历数组上的链表</span>                <span class="token comment" spellcheck="true">//记住下一个要转移的元素</span>                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//重新hash</span>                    e<span class="token punctuation">.</span>hash <span class="token operator">=</span> null <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token comment" spellcheck="true">//定位放入新数组的位置</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//元素指向新数组第i位</span>                e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//新数组第i位指向新插入元素，完成头插法</span>                newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拿到下一个要转移的元素</span>                e <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jdk1-7多线程出现循环链表的栗子"><a href="#jdk1-7多线程出现循环链表的栗子" class="headerlink" title="jdk1.7多线程出现循环链表的栗子"></a>jdk1.7多线程出现循环链表的栗子</h2><p>要扩容的旧的hashmap：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/hashmap-1.jpg" alt></p><p>根据resize方法中的<code>Entry[] newTable = new Entry[newCapacity];</code>，多线程的情况下有多少线程就生成多少个新表，假设有线程A和线程B分别生成了newTableA和newTableB。</p><p>又假设两个线程同时走到了transfer方法，线程A的参数为e1、next1，线程B的参数为e2、next2。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/hashmap-2.jpg" alt></p><p>然后线程B在if（rehash）判断上阻塞了，线程A用头插法走完了三个元素的转移，就变成了这样：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/hashmap-3.jpg" alt></p><p>这时候就发现问题了，因为插入用的是头插法，元素的顺序颠倒了，之前e2.next=next2的，现在变成了next2.next = e2了。</p><p>然后线程B不阻塞了，开始执行：</p><pre class="line-numbers language-java"><code class="language-java">e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头插法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/hashmap-4.jpg" alt></p><p>然后执行<code>e = next;</code>，就是说e2指向2，和next2指向一个元素。然后开始第二次循环：</p><pre class="line-numbers language-java"><code class="language-java">Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next2指向3</span>e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本来就指向3，不变</span>newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头插法</span>e <span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//e2和next2都指向3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/hashmap-5.jpg" alt></p><p>然后开始第三次循环：</p><pre class="line-numbers language-java"><code class="language-java">Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next2指向null</span>e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3的next指向2，形成循环链表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/hashmap-6.jpg" alt></p><h2 id="jdk8扩容源码（尾插法）"><a href="#jdk8扩容源码（尾插法）" class="headerlink" title="jdk8扩容源码（尾插法）"></a>jdk8扩容源码（尾插法）</h2><p>jdk1.6中，HashMap中有个内置Entry类，它实现了Map.Entry接口；</p><p>jdk1.8中，这个Entry类不见了，变成了Node类，也实现了Map.Entry接口，与jdk1.6中的Entry是等价的。</p><p>结构：Node数组+链表+红黑树</p><blockquote><ol><li>oldTab：为数组类型，代表扩容之前HashMap中的数组，也就是所有的桶；</li><li>oldCap：为int类型代表扩容之前总桶数量；</li><li>oldThr：为int类型代表扩容之前下次扩容的阈值；</li><li>newCap：为int类型代表这次扩容之后总桶数量；</li><li>newThr：为int类型代表这次扩容之后下次扩容的阈值；</li><li>newTab：为数组类型，代表扩容之后HashMap中的数组。</li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首次初始化后table为Null</span>        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认构造器的情况下为0</span>        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//table扩容过</span>             <span class="token comment" spellcheck="true">//当前table容量大于最大值得时候返回当前table</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                     oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//table的容量乘以2，threshold的值也乘以2           </span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        <span class="token comment" spellcheck="true">//使用带有初始容量的构造器时，table容量为初始化得到的threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//默认构造器下进行扩容  </span>             <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>            newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用带有初始容量的构造器在此处进行扩容</span>            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                      <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                HashMap<span class="token punctuation">.</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// help gc</span>                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// 当前index没有发生hash冲突，直接对2取模，即移位运算hash &amp;（2^n -1）</span>                        <span class="token comment" spellcheck="true">// 扩容都是按照2的幂次方扩容，因此newCap = 2^n</span>                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>TreeNode</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// 当前index对应的节点为红黑树，这里篇幅比较长且需要了解其数据结构跟算法，因此不进行详解，当树的个数小于等于UNTREEIFY_THRESHOLD则转成链表</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>HashMap<span class="token punctuation">.</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                        <span class="token comment" spellcheck="true">// 把当前index对应的链表分成两个链表，减少扩容的迁移量</span>                        HashMap<span class="token punctuation">.</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        HashMap<span class="token punctuation">.</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        HashMap<span class="token punctuation">.</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                        <span class="token keyword">do</span> <span class="token punctuation">{</span>                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 扩容后不需要移动的链表</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 扩容后需要移动的链表</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// help gc</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// help gc</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 扩容长度为当前index位置+旧的容量</span>                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意扩容前桶中的结点分为两种，一种是依旧在之前那个桶对应的下标的桶中，另一种是之前所在的桶的下标+oldCap</strong>，因为&lt;&lt;1表示容量翻倍，其实就是前面多了一位二进制，要么是0要么是1，是0的话就不变，是1的话就＋oldCap。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashMap扩容源码（JDK1-7）&quot;&gt;&lt;a href=&quot;#HashMap扩容源码（JDK1-7）&quot; class=&quot;headerlink&quot; title=&quot;HashMap扩容源码（JDK1.7）&quot;&gt;&lt;/a&gt;HashMap扩容源码（JDK1.7）&lt;/h2&gt;&lt;pre 
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的集合类</title>
    <link href="https://arthurjq.com/2021/03/14/java-collection/"/>
    <id>https://arthurjq.com/2021/03/14/java-collection/</id>
    <published>2021-03-14T13:51:24.000Z</published>
    <updated>2021-03-15T09:23:42.008Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的集合主要分为以下集合类：<strong>Map、List、Set、Queue和concurrent</strong>包里面供多线程环境下使用的以上几种集合类。</p><p>转载：<a href="https://zhuanlan.zhihu.com/p/112829710" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/112829710</a></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><code>java.util</code>包中提供的常见Map类包括以下几种。这里乱入了个<code>ConcurrentHashMap</code>，放到下面和其他<code>concurrent</code>包的集合一起讲。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-1.jpg" alt></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap 是老生常谈的集合了，学习 HashMap 主要关注点是<strong>哈希算法、rehash、数据存储、扩容方式、性能区别</strong>和结合ConcurrentHashMap 了解为什么线程不安全，后者怎么解决线程安全问题。</p><h4 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//JDK8中 hashCode 的生成方式</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看到，key 不是 null 的情况下，都是取<code>key.hashCode()</code>之后无符号右移16位，然后取异或。这里的<code>key.hashCode()</code>是 native 方法，直接在 JVM 中返回 int 型散列值。</p><blockquote><p>无符号右移&gt;&gt;&gt; ：不管正负标志位为0还是1，将该数的二进制码（补码）整体右移，左边部分总是以0填充，右边部分舍弃。</p><p><code>&gt;&gt;</code>表示右移，如果该数为正，则高位补0，若为负数，则高位补1。</p></blockquote><p>为什么要这么做？</p><p>如果直接拿散列值作为下标访问 HashMap 主数组的话，考虑到 2 进制 32 位带符号的 int 表值范围从<code>-2147483648</code>到<code>2147483648</code>。前后加起来大概 40 亿的映射空间。只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。</p><p>但问题是<strong>一个 40 亿长度的数组，内存是放不下的</strong>。你想，HashMap 扩容之前的数组<strong>初始大小才 16</strong>。所以这个散列值是不能直接拿来用的。用之前还要先做对数组的长度取模运算，得到的余数才能用来访问数组下标。</p><p>这也正好解释了为什么 HashMap 的数组长度要取 2 的整次幂。因为这样（数组长度 -1）正好相当于一个“<strong>低位掩码</strong>”。<strong>“与”操作的结果就是散列值的高位全部归零，只保留低位值，用来做数组下标访问</strong>。以初始长度 16 为例，16-1=15。2 进制表示是<code>00000000 00000000 00001111</code>。和某散列值做“与”操作如下，结果就是截取了最低的四位值。即</p><pre class="line-numbers language-text"><code class="language-text">      10100101 11000100 00100101&     00000000 00000000 00001111-------------------------------------------------      00000000 00000000 00000101    //高位全部归零，只保留末四位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但这时候问题就来了，这样就算我的散列值分布再松散，要是只取最后几位的话，碰撞也会很严重。</p><p>这时候“<strong>扰动函数</strong>”的价值就体现出来了。看下面这个图:</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-2.jpg" alt></p><p>右位移 16 位，正好是 32bit 的一半，<strong>自己的高半区和低半区做异或</strong>，就是为了混合原始哈希码的高位和低位，以此来<strong>加大低位的随机性</strong>。而且混合后的低位<strong>掺杂了高位的部分特征</strong>，这样高位的信息也被变相保留下来。</p><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>HashMap两个关键的初始化参数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前者是初始化容量 16，即新建一个 HashMap 的时候，如果不指定长度，则容量为 16。</p><p>后者是<strong>加载因子</strong>，即当实际长度除以容量高于该因子的时候，进行扩容操作。默认为 0.75，所以 HashMap 空间占用大于 3/4 的时候就开始扩容了。扩容后的容量是原来的两倍。</p><p>HashMap 的 resize 不是简单的把长度扩大，而是有下面两个步骤：</p><ol><li>扩容：<strong>创建一个新的 Entry 空数组</strong>，长度是原数组的2倍。</li><li>reash：遍历原 Entry 数组，把所有的 Entry <strong>重新 hash</strong> 到新数组。为什么要重新 hash ？因为<strong>长度扩大以后，hash 的规则也随之改变</strong>。</li></ol><p>让我们回顾一下 hash 公式：</p><p><code>index = hashCode(key) &amp; (length - 1)</code></p><p>当原数组长度为 8 时，hash 运算是和<code>111B</code>做与运算；新数组长度为 16，hash 运算是和<code>1111B</code>做与运算。hash 结果显然不同。</p><p>那么这里为什么要用 map 容量减去 1 这个数字？好处有两个：分布均匀、速度更快</p><p>在 HashMap 的源码中。<code>get</code>和<code>put</code>方法会根据 key 的 hash 值找到这个 entry 在 hash 表数组中的位置，源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按照我们理想的状况，hashMap 的存取就是 O（1），也就是直接根据 hashcode 就可以找到它，每个 bucket 只存储一个节点，链表指向都是<code>null</code>，这样就比较开心了，不要出现一个链表很长的情况。</p><p>所以我们希望它能分布的均匀一点，如果让我们设计的话，我们肯定是直接对长度取模：<code>hashcode % length</code>，但 HashMap 的设计者却不是这样写的，它写成了 2 进制运算，因为当容量一定是<code>2^n</code>时，<code>h &amp; (length - 1) == h % length</code>，并且<strong>位运算的速度要高于取模</strong>。</p><p>另外，元素在重新计算 hash 之后，因为 n 变为 2 倍，新的 index 的二进制就是在前面多了一位，比如原来的容量为 8 的时候，元素下标为 5，扩容到 16 之后，根据多的那一位是 0 还是 1，元素下标只需要 +8 或者在原位置就可以了，也就是说 resize 操作也会更快。</p><h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>HashMap 实际是一种“数组+链表”数据结构。在 put 操作中，通过内部定义算法寻止找到数组下标，将数据直接放入此数组元素中，若通过算法得到的该数组元素已经有了元素（俗称 hash 冲突，链表结构出现的实际意义也就是为了解决 hash 冲突的问题）。将会把这个数组元素上的链表进行遍历，将新的数据放到链表末尾。</p><p>在 JDK1.8 中，链表元素数量大于等于 8 将会重组该链表结构形成为“红黑树结构”，这种结构使得在 hash 冲突碰撞过多情况下，<code>get</code>效率比链表的效率高很多。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>在没有哈希冲突的情况下，HashMap 存取元素的时间复杂度是 O（1），但是这只是理想情况。当冲突不多的时候，重复元素以链表形式存储，时间复杂度是 O（N），当数据量大的时候，链表转换为红黑树，时间复杂度变成 O（LogN）</p><h4 id="线程安全和其他局限"><a href="#线程安全和其他局限" class="headerlink" title="线程安全和其他局限"></a>线程安全和其他局限</h4><p>HashMap 不是线程安全的，另外如果 HashMap 的 key 是自定义类，需要重写<code>hashCode()</code>方法，并且由于 HashMap 的效率高度依赖<code>hashCode()</code>，需要保证散列分布尽量均匀。</p><p>哪些环节导致了他线程不安全？</p><p>1、<strong>插入</strong>数据的时候</p><pre class="line-numbers language-java"><code class="language-java">java tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假如 A 线程和 B 线程同时添加元素，然后计算出了相同的哈希值对应了相同的数组位置，因为此时该位置还没数据，然后对同一个数组位置添加，B 的写入操作就会覆盖 A 的写入操作造成 A 的写入操作丢失。</p><p>2、<strong>修改</strong>数据跟上边一样</p><p>3、<strong>扩容</strong>的时候</p><p>线程1执行<code>put</code>时，因为元素个数超出<code>threshold</code>而导致 rehash，线程2此时执行<code>get</code>，有可能导致这个问题。</p><p>因为在 resize 的时候，是计算新的容量和<code>threshold</code>，在创建一个新 hash 表，最后将旧 hash 表中元素 rehash 到新的 hash 表中。如果在这个期间，另一个线程执行读取操作，有可能<code>get</code>到<code>null</code>。</p><p>HashMap在resize时候如果多个线程并发操作如何导致<strong>死锁</strong>的。</p><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>LinkedHashMap是继承自HashMap的，跟HashMap最大的区别是，他是基于Hash表和链表的实现，并且<strong>依靠着双向链表保证了迭代顺序是插入的顺序</strong>。</p><p>LinkedHashMap 其实就是可以看成 HashMap 的基础上，多了一个双向链表来维持顺序。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-3.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-4.jpg" alt></p><p>可以用 LinkedHashMap <strong>实现最近访问算法</strong>，即最近访问过的元素在最前面， LinkedHashMap 有这么一个构造方法。</p><p><code>public LinkedHashMap(int initialCapacity, float loadFactor,boolean accessOrder)</code></p><p><code>accessOrder</code>为<code>true</code>的时候按照元素最后访问时间排序（LRU算法：最近最久使用），为<code>false</code>则是按照插入顺序排序，默认为<code>false</code>.</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap 是基于<strong>红黑树</strong>的实现，具有如下特点：</p><ol><li><strong>不允许出现重复的 key</strong>；</li><li>可以插入<code>null</code>键，<code>null</code>值；</li><li>可以对元素进行排序；</li><li><strong>无序</strong>集合（插入和遍历顺序不一致）；</li></ol><p>由于是基于红黑树，TreeMap 在插入、删除、搜索的时候，时间复杂度都是O（LogN）。红黑树的结构单独另外说明，这里就不赘述。</p><h3 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h3><p>EnumMap 是专门为<strong>枚举类型</strong>量身定做的Map实现。虽然使用其它的 Map 实现（如HashMap）也能完成枚举类型实例到值得映射，但是使用 EnumMap 会更加高效：它只能接收同一枚举类型的实例作为键值，并且由于枚举类型实例的数量相对固定并且有限，所以 EnumMap 使用<strong>数组</strong>来存放与枚举类型对应的值。这使得 EnumMap 的效率非常高。EnumMap 在内部使用枚举类型的<code>ordinal()</code>得到当前实例的声明次序，并使用这个次序维护枚举类型实例对应值在数组的位置。</p><p>在 key 是枚举类的时候，EnumMap 可以用来代替 HashMap，并且由于是数组实现，性能更好。</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><h4 id="Hashtable-与-HashMap-的简单比较"><a href="#Hashtable-与-HashMap-的简单比较" class="headerlink" title="Hashtable 与 HashMap 的简单比较"></a>Hashtable 与 HashMap 的简单比较</h4><ol><li><strong>HashTable 基于 Dictionary 类</strong>，而 HashMap 是基于 AbstractMap。Dictionary 是任何可将键映射到相应值的类的抽象父类，而 AbstractMap 是基于 Map 接口的实现，它以最大限度地减少实现此接口所需的工作。</li><li>HashMap 的 key 和 value 都允许为<code>null</code>，而 <strong>Hashtable 的 key 和 value 都不允许为<code>null</code></strong>。HashMap 遇到 key 为<code>null</code>的时候，调用<code>putForNullKey</code>方法进行处理，而对 value 没有处理；Hashtable遇到<code>null</code>，直接返回<code>NullPointerException</code>。</li><li>Hashtable 方法是<strong>同步</strong>，而HashMap则不是。Hashtable 中的几乎所有的 public 的方法都是<code>synchronized</code>的，而有些方法也是在内部通过<code>synchronized</code>代码块来实现。在 Collections 类中存在一个静态方法：<code>synchronizedMap()</code>，该方法创建了一个线程安全的 Map 对象，并把它作为一个封装的对象来返回。</li><li>HashMap的初始容量为 16，Hashtable<strong>初始容量为 11</strong>，两者的填充因子默认都是0.75。</li><li>两者计算 hash 的方法不同</li></ol><p>Hashtable 计算 hash 是直接使用 key 的 hashcode 对 table 数组的长度直接进行取模</p><pre class="line-numbers language-java"><code class="language-java">java <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>HashMap 计算 hash 对 key 的 hashcode 的前后16为进行了<strong>异或操作</strong>，以获得更好的散列值，然后对table数组长度取模（实际上是<strong>位操作</strong>，增加效率）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> h<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IdentityHashMap"><a href="#IdentityHashMap" class="headerlink" title="IdentityHashMap"></a>IdentityHashMap</h3><p>IdentityHashMap 是一致性哈希表，<strong>使用引用相等</strong>，而不是<code>equals</code>方法来比较两个对象的相等性。因此，IdentityHashMap 中，如果存在两个键 key1 和 key2，当且仅当<code>key1==key2</code>时，两个键相等，而其他大部分的哈希表，当且仅当<code>k1 == null ? k2 == null : k1.equals(k2)</code>时，两个键才认为是相等的。</p><p>IdentityHashMap 使用<code>System.identityHashCode</code>来确定对象的哈希码，<strong>该方法返回对象的地址</strong>。</p><p>HashMap 是通过数组+拉链法存储元素并解决哈希冲突的。IdentityHashMap <strong>将所有的 key 和 value 都存储到<code>Object[]</code>数组 table</strong> 中，并且 key 和 value 相邻存储，当出现哈希冲突时，会往下遍历数组，直到找到一个空闲的位置。注意，数组第一个位置存储的是 key，第二个位置存储的是 value。因此<strong>奇数位置处存储的是 key，偶数位置处存储的是 value</strong>。</p><p>IdentityHashMap 同样允许空的键和值，但是不保证 map 中的顺序，尤其是不保证顺序会恒定不变。</p><h3 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h3><p>和 HashMap 一样，WeakHashMap 也是一个散列表，它存储的内容也是键值对（key-value）映射，而且键和值都可以是<code>null</code>。不过 WeakHashMap 的键是“弱键”。</p><p>当弱引用指向的对象只能通过弱引用（没有强引用或弱引用）访问时，GC会清理掉该对象，之后，引用对象会被放到ReferenceQueue中。在 Entry 的构造函数中可以得知，通过<code>super(key, queue)</code>将 key 保存为弱引用，通过<code>this.value = value</code>将 value 保存为强引用。当 key 中的引用被 gc 掉之后，在下次访问 WeakHashMap（调用<code>expungeStaleEntries</code>函数）时相应的 entry 也会自动被移除。</p><p>WeakHashMap 并不是你什么也不干它就能自动释放内部不用的对象的，而是在你<strong>访问它的内容的时候释放内部不用的对象</strong>。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-5.jpg" alt></p><p>LinkedList 和 ArrayList 有什么共同点和区别？</p><p>共同点：</p><ol><li>二者都是继承自 AbstractList 抽象类，AbstractList 实现了 List 接口中除了<code>size()</code>、<code>get(int location)</code>之外的方法。</li><li>二者<strong>都是线程不安全</strong>的。</li></ol><p>区别：</p><ol><li>ArrayList 是实现了<strong>基于动态数组</strong>的数据结构，而 LinkedList 是<strong>基于链表</strong>的数据结构；</li><li>数据更新和查找时，ArrayList 可以直接通过数组下标访问，所以效率更高。</li><li>数据增加和删除的时候，ArrayList 需要移动其他元素的位置，而 LinkedList 只需要修改一个指针，所以后者效率更高。</li></ol><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>Vector 是同样继承于AbstractList的一个列表，而它是线程安全的，实现方式是对所有数据操作的方法添加了 synchronized 关键字。其与 ArrayList 的差别如下：</p><ol><li>构造函数，ArrayList 比 Vector 稍有深度，Vector 默认数组长度为 10，创建是设置。</li><li>扩容方法 <code>grow()</code>，ArrayList 通过位运算进行扩容，而 Vector 则通过增长系数（创建是设置，如果过为空，则增长一倍）</li><li>Vector 方法调用是线程安全的。</li><li>成员变量有所不同</li></ol><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>Stack栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</p><p>他的方法很简单，只有<code>empty()</code>、<code>peek()</code>、<code>pop()</code>、<code>push(Object element)</code>、<code>search(object element)</code>这几个。其中 peek 和 pop 的返回值都是堆栈顶部的对象，但是前者只是查看，后者是移除。</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-6.jpg" alt></p><p><strong>其实就是把 HashMap 封装了一层</strong>，从 HashSet 的构造方法可以看出，就是维护了一个 HashMap，数据的增删改查也是调用的 HashMap 的方法。</p><p>TreeSet 也是一样，其实就是 TreeMap 套了个皮。</p><p>EnumSet 就不一样了，跟 EnumMap 其实没有什么关系。EnumSet 是一个 Set 集合的抽象类，其有两个实现类 JumboEnumSet 和 RegularEnumSet，在使用的时候放入的必须是枚举类型，<strong>其特点是速度非常快。</strong></p><p>EnumSet 的默认子类 RegularEnumSet 和 JumboEnumSet 实现原理都是基于位运算向量，位运算向量的原理就是用一个位表示一个元素的状态（元素的状态只有两种），用一组位表示一个集合的状态，每个位对应一个元素，譬如一个枚举类 DemoEnum 有6个枚举值，则 EnumSet 集合就可以通过一个 byte 字节从右到左（二进制低到高位）来表示，不用的位上用 0 填充，用的位上每个 bit 位代表一个枚举值，1 表示包含该枚举值，0 表示不含该枚举值。因此位向量能表示的枚举值个数与向量长度有关，上面例子中一个 byte 类型最多能表示 8 个枚举值，所以 EnumSet 抽象类的两个实现类 RegularEnumSet 和 JumboEnumSet 分别定义了不同的向量长度。RegularEnumSet 使用 64 位的 long 类型变量作为位向量，而 JumboEnumSet 使用一个 long 类型数组作为向量（数组内存连续），故当我们通过 EnumSet 的工厂方法创建 EnumSet 集合时 EnumSet 会通过判断枚举类的枚举值数量决定使用两个子类的哪一个，如果枚举值个数小于等于 64 就用 RegularEnumSet，大于 64 就用 JumboEnumSet。</p><p>简单来说 EnumSet 就是一个高效的枚举类集合。</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-7.jpg" alt></p><p>队列（Queue）可以当做一种特殊的线性表，遵循先进先出原则。而双向队列（Deque）,是 Queue 的一个子接口，双向队列是指该队列两端的元素既能入队（offer）也能出队（poll）,如果将 Deque 限制为只能从一端入队和出队，则可实现栈的数据结构。</p><p>PriorityQueue 有一种特殊的队列，叫做<strong>优先队列</strong>。优先队列的作用是能保证每次取出的元素都是队列中权值最小的<strong>（Java的优先队列每次取最小元素，C++的优先队列每次取最大元素）。这里牵涉到了大小关系，</strong>元素大小的评判可以通过元素本身的自然顺序（natural ordering），也可以通过构造时传入的比较器（Comparator，类似于C++的仿函数）。</p><p>Java 中 PriorityQueue 实现了 Queue 接口，不允许放入<code>null</code>元素；其通过堆实现，具体说是通过完全二叉树（complete binary tree）实现的<strong>小顶堆</strong>（任意一个非叶子节点的权值，都不大于其左右子节点的权值），也就意味着可以通过数组来作为 PriorityQueue 的底层实现。</p><p>最小堆的完全二叉树有一个特性是根节点必定是最小节点，子女节点一定大于其父节点。还有一个特性是叶子节点数量=全部非叶子节点数量+1。</p><p><strong>每次增删元素都有可能对树结构进行调整，所以 PriorityQueue 队列不适合进场出队入队的频繁操作</strong>，但是他的优先级特性非常适合一些对顺序有要求的数据处理场合。</p><h2 id="concurrent包"><a href="#concurrent包" class="headerlink" title="concurrent包"></a>concurrent包</h2><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>上面 HashMap 已经说到了 HashMap 在多个线程同时存取或者触发扩容的时候，都有可能出现错误，导致操作被覆盖或者丢失，那么怎么解决这个问题呐？</p><p>第一反应当然是加锁，HashTable 就是这么做的，使用了<code>synchronized</code>关键字。虽然解决了并发访问的安全性问题，但是性能不怎么样。HashTable 中的增删改、甚至<code>equals</code>、<code>toString</code>方法等等都是方法级的锁，所以同时只能一个线程去操作，导致效率问题。</p><p>在JDK1.7及之前版本，ConcurrentHashMap 采用的是 <strong>Segment 分段锁</strong>，即将数据分为一段一段的存储，然后给每一段数据加一把锁。当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。</p><p>在JDK1.8以后，ConcurrentHashMap <strong>取消了 Segment 分段锁，采用 CAS 和<code>synchronized</code></strong>来保证并发安全。 数据结构与 HashMap 1.8 的结构类似，数组+链表/红黑二叉树（链表长度&gt;8 时，转换为红黑树）。</p><p>通过 JDK 的源码和官方文档看来， 他们认为的弃用分段锁的原因由以下几点：</p><ol><li>加入多个分段锁浪费内存空间。</li><li>生产环境中， map 在放入时竞争同一个锁的概率非常小，分段锁反而会造成更新等操作的长时间等待。</li><li>为了提高 GC 的效率。</li></ol><p>在 JDK11 下对 HashMap 和 ConcurrentHashMap 进行了简单测试，生成 5000 万条随机数然后插入，分别消耗 16348 毫秒和 19194 毫秒。其中包括随机数生成、插入和扩容的时间消耗，可见两者之间性能差距不大。</p><p>然后使用 HashTable 在单线程下插入，同样的数据量时间在 17 秒左右，跟 HashMap 差别不大，可以当做是误差范围内。然后使用 20 个线程插入，消耗时间在 15 秒左右，提升并不明显。奇怪的是 ConcurrentHashMap 却使用了 45 秒。然后缩小数据量，在 1000 万以下的时候，ConcurrentHashMap 的插入速度又好于 HashTable 了。这个现象很有意思，有空了详细研究一下产生这个问题的原因。</p><p>ConcurrentHashMap 的<strong>整体性能</strong>要优于 HashTable，但是某些场景不能替代 HashTable，例如<strong>强一致性</strong>的场景，ConcurrentHashMap 的<code>get</code>、<code>size</code>等方法都<strong>没有加锁</strong>，ConcurrentHashMap 是<strong>弱一致性</strong>的。</p><h3 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h3><p>ConcurrentSkipListMap 提供了一种线程安全的并发访问的排序映射表。内部是 SkipList（跳表）结构实现，在理论上能够在 O（logN） 时间内完成查找、插入、删除操作。</p><p>ConcurrentHashMap 与 ConcurrentSkipListMap 性能测试 在4线程1.6万数据的条件下，ConcurrentHashMap 存取速度是 ConcurrentSkipListMap 的4倍左右。</p><p>但 ConcurrentSkipListMap 有几个 ConcurrentHashMap 不能比拟的优点：</p><p>1、ConcurrentSkipListMap 的 <strong>key 是有序</strong>的。</p><p>2、ConcurrentSkipListMap <strong>支持更高的并发</strong>。ConcurrentSkipListMap 的存取时间是 log（N），和线程数几乎无关。也就是说在数据量一定的情况下，并发的线程越多， ConcurrentSkipListMap 越能体现出他的优势。</p><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>先讲一下什么是<code>Copy-On-Write</code>，通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行 Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。对 CopyOnWrite 容器进行并发的读的时候，不需要加锁，因为当前容器不会添加任何元素。所以 CopyOnWrite 容器也是一种<strong>读写分离</strong>的思想，延时更新的策略是通过在写的时候针对的是不同的数据容器来实现的，<strong>放弃数据实时性达到数据的最终一致性</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> es<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            es <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>es<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            E oldValue <span class="token operator">=</span> <span class="token function">elementAt</span><span class="token punctuation">(</span>es<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!=</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                es <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                es<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>                <span class="token function">setArray</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CopyOnWriteArrayList 的实现也不复杂，对有并发风险的操作加了锁。注意这里的内部数组是<code>volatile</code>修饰的，<strong>写线程对数组引用的修改对读线程是可见的</strong>。由于在写数据的时候，是在新的数组中插入数据的，从而保证读写实在两个不同的数据容器中进行操作。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-collection-8.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java中的集合主要分为以下集合类：&lt;strong&gt;Map、List、Set、Queue和concurrent&lt;/strong&gt;包里面供多线程环境下使用的以上几种集合类。&lt;/p&gt;
&lt;p&gt;转载：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/112
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Kafka</title>
    <link href="https://arthurjq.com/2021/03/13/kafka/"/>
    <id>https://arthurjq.com/2021/03/13/kafka/</id>
    <published>2021-03-13T13:57:38.000Z</published>
    <updated>2021-03-17T15:18:49.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka架构设计"><a href="#kafka架构设计" class="headerlink" title="kafka架构设计"></a>kafka架构设计</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/kafka-1.jpg" alt></p><p><strong>Consumer Group</strong>：消费者组，消费者组内每个消费者负责消费不同分区的数据，提高消费能力。<strong>逻辑上的一个订阅者</strong>。</p><p><strong>Topic</strong>：可以理解为一个<strong>队列</strong>，Topic将消息分类，<strong>生产者和消费者面向的同一个Topic</strong>，也就是生产者往Topic发，消费者从Topic拿。</p><p><strong>Partition</strong>：为了实现扩展性，提高并发能力，<strong>一个Topic以多个Partition的方式分布到多个Broker上</strong>，每个Partition是一个<strong>有序</strong>的队列。一个Topic的每个Partition都有若干个副本（Replica），一个Leader和若干个Follower。生产者发送数据的对象，以及消费者消费数据的对象，都是Leader。Follower负责实时从Leader中同步数据，保持和Leader数据的同步。Leader发生故障时，某个Follower还会成为新的Leader。</p><p>Offset：消费者消费的位置信息，监控数据消费到什么位置，用于<strong>数据恢复</strong>。</p><p>Zookeeper：Kafka集群能够正常工作，依赖于Zookeeper，<strong>Zookeeper帮助Kafka存储和管理集群信息</strong>，broker的注册（临时节点），注册Topic，重新选举，存储Offset，消费者组中的消费者注册，保证一条消息只被一个消费者组的其中一个消费者消费，消息消费的配置等。</p><h3 id="zk的作用"><a href="#zk的作用" class="headerlink" title="zk的作用"></a>zk的作用</h3><p><strong>/brokers/ids</strong>：临时节点，保存所有broker节点信息，存储broker的物理地址，版本信息，启动时间等，节点名称为brokerID，broker定时发送心跳到zk，如果断开则该brokerID会被删除</p><p><strong>/brokers/topics</strong>：临时节点，节点保存broker节点下所有的topic信息，每一个topic节点下包含一个固定的partitions节点，patitions的子节点就是topic的分区，每个分区下保存一个<strong>state节点，保存着当前leader分区和ISR的brokerID</strong>，<strong>state节点由leader创建</strong>，若leader宕机该节点会被删除，直到有新的leader选举产生，重新生成state节点</p><p>/consumers/[group_id]/<strong>owners</strong>/[topic]/[broker_id-partition_id]：维护消费者和分区的<strong>注册关系</strong></p><p>/consumers/[group_id]/<strong>offset</strong>/[topic]/[broker_id-partition_id]：分区信息的消费进度Offset</p><p>client通过topic找到topic树下的state节点获得leader的brokerID，到broker树中找到broker的物理地址，但是<strong>client不会直连zk</strong>，而是通过配置的broker获取zk中的消息</p><h2 id="消息丢失的场景和解决方案"><a href="#消息丢失的场景和解决方案" class="headerlink" title="消息丢失的场景和解决方案"></a>消息丢失的场景和解决方案</h2><h3 id="消息发送时丢失"><a href="#消息发送时丢失" class="headerlink" title="消息发送时丢失"></a>消息发送时丢失</h3><ol><li><p>ack=0，不重试，producer发送信息完，不管效果，如果发送失败就丢失。</p></li><li><p>ack=1，leader crash，producer发送消息完，只等待lead写入成功就返回，leader crash了，这时如果follower没来得及同步，消息丢失。</p></li><li><p>unclean.leader.election.enable 配置 true</p><p>允许选举ISR以外的副本为leader，会导致数据丢失，默认为false。producer发送异步消息完，只等待lead写入成功就返回了，leader crash了，这时ISR中没有follower，leader从OSR中选举，因为OSR中本来落后于leader造成消息丢失。</p></li></ol><h3 id="消息发送解决方案"><a href="#消息发送解决方案" class="headerlink" title="消息发送解决方案"></a>消息发送解决方案</h3><ol><li><p>配置 <strong>ack = all</strong> / -1（指的是ISR中的所有从节点），tries &gt; 1，unclean.leader.election.enable ：false（不允许选举ISR以外的副本为leader）</p><p>producer发送消息完，等待follower同步完再返回，如果异常则重试，但副本数量影响吞吐量</p></li><li><p>配置 <strong>min.insync.replicas &gt; 1</strong>（同步副本数量指的是ISR中的从节点，<strong>只有ack=all时才会生效</strong>）</p><p>副本指定必须确认写操作成功的最小副本数量。如果不满足这个最小值，则生产者将引发一个异常（NotEnoughReplicas，NotEnoughReplicasAfterAppend）。min.insync.replicas 和 ack 持久性保证，确保如果大多数副本没有收到写操作，则生产者引发异常。</p></li><li><p>失败地offset单独记录</p><p>producer发送消息，会自动重试，遇到不可恢复异常会抛出，这时可以捕获异常记录到数据库或缓存单独处理。</p></li></ol><h3 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h3><p>先commit再处理消息，如果出现异常，但是offset已经提交，消息对于消费者来说丢失了。</p><h3 id="broker的刷盘"><a href="#broker的刷盘" class="headerlink" title="broker的刷盘"></a>broker的刷盘</h3><p>减小刷盘间隔（往pagecache中刷盘的时间）</p><h2 id="Consumer是pull还是push"><a href="#Consumer是pull还是push" class="headerlink" title="Consumer是pull还是push"></a>Consumer是pull还是push</h2><h3 id="pull模式"><a href="#pull模式" class="headerlink" title="pull模式"></a>pull模式</h3><ol><li>根据consumer的消费能力进行数据拉取，可以控制速率</li><li>可以批量拉取或单条拉取</li><li>可以设置不同的提交方式，实现不同的传输语义</li></ol><p>缺点：如果kafka没有数据，会导致consumer<strong>空循环</strong>，消耗资源</p><p>解决：通过参数设置，consumer拉取数据为空或没达到一定数量时阻塞</p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>不会导致consumer循环等待</p><p>缺点：速率固定，忽略consumer的消费能力，可能导致拒绝服务或网络拥塞等</p><h2 id="Kafka中高性能的原因"><a href="#Kafka中高性能的原因" class="headerlink" title="Kafka中高性能的原因"></a>Kafka中高性能的原因</h2><p>kafka不基于内存，而是硬盘存储，因此<strong>消息堆积能力更强</strong></p><p><strong>顺序写</strong>：利用磁盘的顺序访问速度可以接近内存，kafka的消息都是append操作，partition是有序的，节省了磁盘的寻道时间，同时通过 批量操作 节省写入次数，<strong>partition物理上分为多个segment存储，方便删除</strong></p><p>传统和<strong>零拷贝</strong>：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/kafka-2.PNG" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/kafka-3.PNG" alt></p><pre class="line-numbers language-shell"><code class="language-shell">buf = mmap(diskfd, len);write(sockfd, buf, len);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>应用程序调用<code>mmap()</code>，磁盘上的数据会通过<code>DMA</code>被拷贝的内核缓冲区，接着操作系统会把这段内核缓冲区与应用程序共享，这样就<strong>不需要把内核缓冲区的内容往用户空间拷贝</strong>。应用程序再调用<code>write()</code>,操作系统直接将内核缓冲区的内容拷贝到<code>socket</code>缓冲区中，这一切都发生在内核态，最后，<code>socket</code>缓冲区再把数据发到网卡去。</p><blockquote><p>kafka不太依赖jvm（存储数据不依赖堆内存），靠OS的pageCache，如果生产者和消费者速率相当，则直接用pageCache交换数据，不需要经过磁盘IO</p></blockquote><h2 id="Rebalance机制"><a href="#Rebalance机制" class="headerlink" title="Rebalance机制"></a>Rebalance机制</h2><p>consumer group中的消费者与topic下的partition重新匹配的过程</p><p>何时会产生rebalance：</p><ol><li>consumer group中的成员个数发生变化</li><li>consumer消费超时</li><li>group订阅的topic个数发生变化</li><li>group订阅的topic的partition数变化</li></ol><p><strong>coordinator</strong>：通常是partition的leader节点所在的broker，负责监控group中consumer的存活，consumer维持到coordinator的心跳来判断consumer的消费超时</p><ol><li>coordinator<strong>通过心跳</strong>返回通知consumer进行rebalance</li><li>consumer请求coordinator加入组，coordinator<strong>选举</strong>产生leader consumer</li><li>leader consumer从coordinator获取获取所有的consumer，<strong>发送syncGroup</strong>（分配信息）给到coordinator</li><li>coordinator通过心跳机制将syncGroup下发给consumer，完成rebalance</li></ol><p>topic或者patition数量发生变化coordinator是不知道的，此时<strong>leader consumer监控topic的变化</strong>，通知coordinator触发rebalance</p><h3 id="rebalance问题"><a href="#rebalance问题" class="headerlink" title="rebalance问题"></a>rebalance问题</h3><p>如果C1消费者消息超时，触发rebalance，重新分配，该消息被其他消费者消费，此时C1消费完成提交offset导致错误</p><p>解决：coordinator每次rebalance，会<strong>标记一个Generation</strong>给到consumer，每次rebalance该Generation会+1，consumer提交offset时，coordinator会比对Generation，不一致则拒绝</p><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>待补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;kafka架构设计&quot;&gt;&lt;a href=&quot;#kafka架构设计&quot; class=&quot;headerlink&quot; title=&quot;kafka架构设计&quot;&gt;&lt;/a&gt;kafka架构设计&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/arthurjq/blogi
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="中间件" scheme="https://arthurjq.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo的整体架构设计及分层</title>
    <link href="https://arthurjq.com/2021/03/12/java/dubbo/"/>
    <id>https://arthurjq.com/2021/03/12/java/dubbo/</id>
    <published>2021-03-12T11:59:32.000Z</published>
    <updated>2021-03-13T13:19:06.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="五个角色"><a href="#五个角色" class="headerlink" title="五个角色"></a>五个角色</h2><p>注册中心registry：服务注册与发现</p><p>服务提供者provider：暴露服务</p><p>服务消费者consumer：调用远程服务</p><p>监控中心monitor：统计服务的调用次数和调用时间</p><p>容器container：服务允许容器，装载provider</p><h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><ol><li>container容器负责启动、加载、运行provider</li><li>provider在启动时，向regisitry中心注册自己提供的服务，基于心跳机制的长连接</li><li>consumer在启动时，向registry中心订阅自己所需的服务</li><li>consumer返回服务提供者列表给consumer，如果有变更，registry将基于<strong>长连接</strong>推送变更数据给consumer</li><li>consumer调用provider服务，基于负载均衡算法调用</li><li>consumer调用provider的统计，基于短链接定时每分钟一次统计到monitor</li></ol><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>接口服务层（Service）：面向开发者，业务代码，接口，实现等</p><p>配置层（Config）：对外配置接口，以ServiceConfig和ReferenceConfig为配置中心去加载我们的配置和维护我们的配置，当有变化时通常使用Zookeeper去通知客户端</p><p>服务代理层（Proxy）：对于生产者和消费者、dubbo都会<strong>产生一个代理类封装调用细节</strong>，业务层对远程调用无感</p><p>服务注册层（Registry）：封装服务地址的注册和发现，以URL为中心，通常使用ZK</p><p>路由层（Monitor）：封装多个提供者的路由和负载均衡，并桥接注册中心</p><p>监控层（Monitor）：RPC调用次数和调用时间监控</p><p>远程调用层（Protocal）：封装RPC调用（基于TCP）</p><p>信息交换层（Exchange）：封装请求响应模式，同步转异步</p><p>网络传输层（Transport）：抽象mina 和 netty 为统一接口，<strong>统一网络传输接口</strong></p><p>数据序列化层（Serialize）：数据传输的序列化和反序列化</p><p><strong>没有解决服务熔断，服务降级</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;五个角色&quot;&gt;&lt;a href=&quot;#五个角色&quot; class=&quot;headerlink&quot; title=&quot;五个角色&quot;&gt;&lt;/a&gt;五个角色&lt;/h2&gt;&lt;p&gt;注册中心registry：服务注册与发现&lt;/p&gt;
&lt;p&gt;服务提供者provider：暴露服务&lt;/p&gt;
&lt;p&gt;服务消费者con
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶</title>
    <link href="https://arthurjq.com/2021/03/10/java-advance/"/>
    <id>https://arthurjq.com/2021/03/10/java-advance/</id>
    <published>2021-03-10T11:21:38.000Z</published>
    <updated>2021-03-18T14:13:12.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>将程序中的交叉业务逻辑（比如安全，日志，事务等），封装成一个切面，然后注入到目标对象（具体业务逻辑）中去。AOP可以对某个对象或某些对象的功能进行增强，比如对象中的方法进行增强，可以在执行某个方法之前或之后额外做一些事情。</p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h3><p>实际上就是个map（key，value），里面存各种对象（在xml里配置的bean节点、@Component、@Controller），在项目启动的时候会读取配置文件里面的bean节点，根据全限定类名使用反射创建对象放进map里、扫描到注解的类还是通过反射创建对象放到map。</p><p> 在代码需要用到里面对象时，再通过DI注入（autowired、resource等，xml里bean节点内的ref属性，项目启动时会读取xml节点ref属性根据id注入，也会扫描这些注解根据类型或id注入，id就是对象名）。</p><h3 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h3><p>当A运行到需要B时，IOC容器会主动创建一个B注入到对象A需要的地方。对象A获得依赖对象B的过程，由<strong>主动行为变为了被动行为</strong>。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><strong>实现IOC的方法</strong>，IOC容器在运行期间，动态地将某种依赖关系注入到对象中。</p><h2 id="BeanFactory和ApplicationContext"><a href="#BeanFactory和ApplicationContext" class="headerlink" title="BeanFactory和ApplicationContext"></a>BeanFactory和ApplicationContext</h2><p>ApplicationContext是BeanFactory的子接口，提供了更完整的功能：</p><ol><li>继承MessageSource，因此<strong>支持国际化</strong>，比如可以用MessageSource实现资源文件的读取（MessageSource接口中的getMessage方法）</li><li>统一的资源文件访问方式</li><li>提供在监听器中注册bean的事件（疑惑）</li><li>同时加载多个配置文件</li><li>载入多个（有继承关系）上下文，使得每一个上下文都专注于一个特定的层次，比如应用的web层</li></ol><p>不同点：</p><ol><li>BeanFactory延迟加载注入Bean，而ApplicationContext在容器启动时一次性创建所以的Bean，这样<strong>有利于检查所依赖属性是否注入</strong>，无需等待，不足是占用内存空间</li><li>BeanFactory通常以编程方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。</li><li>他们都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，区别：BeanFactory需要手动注册，而ApplicationContext则是自动注册</li></ol><blockquote><p>BeanFactoryPostProcessor在容器实例化任何其它bean之前读取配置元数据，并可以根据需要进行修改。</p><p>BeanPostProcessor是在spring容器加载了bean的定义文件并且实例化bean之后执行的。BeanPostProcessor的执行顺序是在BeanFactoryPostProcessor之后。</p></blockquote><h2 id="Spring-Bean生命周期"><a href="#Spring-Bean生命周期" class="headerlink" title="Spring Bean生命周期"></a>Spring Bean生命周期</h2><ol><li>解析类得到BeanDefinition</li><li>如果有多个构造方法，则推断构造方法</li><li>实例化得到一个对象</li><li>@Autowired注解属性填充</li><li>回调Aware方法，比如BeanNameAware，BeanFactoryAware</li><li>调用BeanPostProcessor的初始化前的方法</li><li>调用初始化方法</li><li>调用BeanPostProcessor的初始化后的方法，在这里会进行AOP</li><li>如果当创建的bean是单例的则放入单例池</li><li>使用bean</li><li>容器关闭时调用DisposableBean中destory方法</li></ol><p>首先是实例化、属性赋值、初始化、销毁这 4 个大阶段；</p><p>再是初始化的具体操作，有 Aware 接口的依赖注入、BeanPostProcessor 在初始化前后的处理以及 InitializingBean 和 init-method 的初始化操作；</p><p>销毁的具体操作，有注册相关销毁回调接口，最后通过DisposableBean 和 destory-method 进行销毁。</p><p><a href="https://arthurjq.com/2020/12/29/java/spring-bean-life-cycle/">https://arthurjq.com/2020/12/29/java/spring-bean-life-cycle/</a></p><h2 id="Spring-Bean作用域"><a href="#Spring-Bean作用域" class="headerlink" title="Spring Bean作用域"></a>Spring Bean作用域</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-1.jpg" alt></p><h2 id="Spring框架中的设计模式"><a href="#Spring框架中的设计模式" class="headerlink" title="Spring框架中的设计模式"></a>Spring框架中的设计模式</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>由一个工厂类根据传入的参数，动态觉得应该创建哪一个产品类</p><p>BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建根据具体情况来定。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>实现了FactoryBean接口的bean，spring会在使用getBean（）调用获得该bean时，会自动调用该bean的getObject（）方法，所以返回的不是factory这个bean，而是这个bean.getObject（）方法的返回值。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><p>Spring提供了全局的访问点BeanFactory，但是没有从构造器级别时控制单例，这是因为spring管理的是任意的java对象。</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>Spring定义了一个适配接口，使每一种Controller有一种对应的适配器实现类（SpringMVC中HandlerAdapter），让适配器代替Controller执行相应的方法（Handler）。这样在扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展。</p><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>动态地给一个对象添加一些额外的职责。增加功能比生成子类更加灵活。</p><p>Spring中用到的装饰器模式在类名上有两种表现：1、类名中含有wrapper；2、类名中含有Decorator</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>切面在应用运行的时候被织入。在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。</p><p>在一个方法上加了@Transactional（申明式事务）注解后，Spring会<strong>基于这个类生成一个代理对象</strong>，Autowired后getBean从AOP容器中取得代理对象，会将这个代理对象作为bean，当在使用这个代理对象的方法时，代理逻辑会先把事务的自动提交设置为false。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>Spring的事件驱动模型使用的是观察者模式，ApplicationContext事件机制是观察者模式的实现，通过ApplicationEvent类和ApplicationListener接口，可以实现ApplicationContext事件处理。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>Spring框架的资源访问Resource接口，该接口提供了更强的资源访问能力，Spring框架本身大量使用了Resource接口来访问底层资源。</p><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><h3 id="autowire属性五种装配方式"><a href="#autowire属性五种装配方式" class="headerlink" title="autowire属性五种装配方式"></a>autowire属性五种装配方式</h3><h4 id="no"><a href="#no" class="headerlink" title="no"></a>no</h4><p>缺省情况下，自动配置时通过“ref”属性手动设定。</p><p>手动装配：以value或ref的方式明确指定属性值</p><h4 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h4><p>根据bean的属性名称进行自动装配</p><p>Customer的属性名称为person，Spring会将bean id为person的bean通过setter方法进行自动装配</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Customer<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h4><p>根据bean的类型进行自动装配</p><p>Customer的属性person的类型为Person，Spring会将Person类型通过setter方法进行自动装配</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Customer<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>类似byType，不过是应用于构造器的参数。如果一个bean与构造器参数的类型相同，则进行自动装配，否则导致异常。</p><p>Customer构造函数的参数person的类型为Person，Spring会将Person类型通过构造方法进行自动装配</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Customer<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>constructor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx.Person<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="autodetect"><a href="#autodetect" class="headerlink" title="autodetect"></a>autodetect</h4><p>如果有默认的构造器，则通过constructor方式进行自动装配，否则使用byType方式进行自动装配</p><h4 id="Autowired自动装配bean"><a href="#Autowired自动装配bean" class="headerlink" title="@Autowired自动装配bean"></a>@Autowired自动装配bean</h4><p>可在<strong>字段，setter方法，构造函数</strong>上使用。</p><h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><ol><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。（Map&lt; url , handler &gt;，其中url可以是bean id、@RequestMapping、key）</li><li>处理器映射器找到具体的处理器（可以根据xml配置、注解进行查找），生成处理器及处理器拦截器（如果有则生成）一并返回给DispatcherServlet</li><li>DispatcherServlet调用HandlerAdapter处理器适配器（Controller接口定义整个类为一个Handler、@RequestMapping定义方法、Servlet三种方法都有各自的适配器，support方法遍历适配器，找到后执行handle调用真正的handler）</li><li>HandlerAdapter经过适配调用具体的处理器（Controller，也叫后端控制器）</li><li>Controller执行完成返回ModelAndView</li><li>HandlerAdapter将ModelAndView返回给DispatcherServlet</li><li>DispatcherServlet把ModelAndView传给ViewReslover视图解析器</li><li>ViewReslover解析后返回具体View</li><li>DispatcherServlet根据View进行渲染视图（将模型数据填充至视图中，比如JSP）</li><li>DispatcherServlet响应用户</li></ol><h2 id="SpringBoot自动装配"><a href="#SpringBoot自动装配" class="headerlink" title="SpringBoot自动装配"></a>SpringBoot自动装配</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-2.jpg" alt></p><h2 id="和"><a href="#和" class="headerlink" title="#{ }和${ }"></a>#{ }和${ }</h2><p>#{ }是预编译处理，是占位符，${ }是字符串替换，是拼接符</p><ol><li>Mybatis在处理#{ }时，会将sql中的#{ }替换为 ？号，调用PreparedStatement来赋值（会自动加单引号）；</li><li>在处理${ }时，就是替换成变量值，调用Statement来赋值；</li></ol><blockquote><p><strong>绝大多数需求为单条记录查询时可以选择哈希索引</strong></p><p><strong>定义有外键的数据列一定要建立索引</strong></p></blockquote><h2 id="慢查询优化"><a href="#慢查询优化" class="headerlink" title="慢查询优化"></a>慢查询优化</h2><ol><li>是否load了额外的数据</li><li>是否走索引</li><li>横向或纵向分表</li></ol><h2 id="ACID靠什么保证"><a href="#ACID靠什么保证" class="headerlink" title="ACID靠什么保证"></a>ACID靠什么保证</h2><ol><li><p>A由<strong>undo log</strong>日志保证，它记录了<strong>需要回滚的日志信息</strong>，事务回滚时撤销已经执行成功的sql</p></li><li><p>C由其他三大特性保证，<strong>程序代码</strong>要保证业务上的一致性</p></li><li><p>I由<strong>MVCC</strong>来保证</p></li><li><p>D由<strong>内存 + redo log</strong>来保证，mysql修改数据同时在内存和redo log记录这次操作，宕机的时候可以从redo log恢复。redo log记录了<strong>数据修改的状态</strong></p><blockquote><p>InnoDB redo log写盘，InnoDB 事务进入prepare 状态。</p><p>如果前面 prepare成功，binlog 写盘，再继续将事务日志持久化到binlog。如果持久化成功，那么InnoDB事务则进入commit状态（在 redo log里面写一个commit记录）</p><p>所以说如果redo log中由commit，说明binlog持久化成功</p></blockquote><p>redo log的刷盘会在系统空闲时进行。（Mysql的主从同步（复制）通过binlog来同步）</p></li></ol><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p><strong>多版本并发控制</strong>（Multi-Version Concurrency Control）：读取数据时通过一种类似快照的方式将数据保存下来，这样读锁就和写锁不冲突了，不同的事务session会看到自己特定版本的数据，版本链</p><p>MVCC只在 READ COMMITED 和REPEATABLE READ 下工作。因为READ UNCOMMITED 总是读取最新的数据行，而不是符合当前事务版本的数据行。而serializable则会对所有读取的行都加锁。</p><p>聚簇索引记录中有两个必要的隐藏列：</p><ol><li><strong>trx_id</strong>：用来存储每次对某条聚簇索引记录进行修改的时候的事务id</li><li><strong>roll_pointer</strong>：每次对聚簇索引修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了个<strong>指针</strong>，指向<strong>索引记录的上一个版本</strong>的位置。（注意插入操作的undo日志没有这个属性，因为它没有老版本）</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-3.jpg" alt></p><h2 id="mysql主从同步原理"><a href="#mysql主从同步原理" class="headerlink" title="mysql主从同步原理"></a>mysql主从同步原理</h2><p>主要由三个线程：master（binlog dump thread）、slave（I / O thread、SQL thread）</p><ol><li>主节点binlog，主从复制的基础是<strong>主库记录数据库的所有变更记录到binlog</strong>。binlog是数据库服务器启动的那一刻起，保存所有修改数据库结构或内容的一个文件。</li><li>主节点log dump线程，当binlog有变动时，log dump线程读取其内容并发送给从节点。</li><li>从节点I /O 线程接受binlog 内容，并将其写入到relay log 文件中。（relay log在从节点）</li><li>从节点的SQL线程读取 relay log 文件内容对数据更新进行重放，最终保证主从数据库一致性。</li></ol><p>注：主从节点使用 <strong>binlog文件 + position</strong> 偏移量来定位主从同步的位置，从节点会保存其已接收到的偏移量，如果从节点发生宕机重启，则会自动从position的位置同步。</p><p>mysql默认的复制方式是异步的，主库把日志发送给从库不关心从库是否已经处理。有一个问题就是假设主库挂了，从库处理失败，这时候从库升为主库，日志丢失了。</p><p><strong>全同步复制</strong>：主库写入binlog后强制同步日志到从库，<strong>所有</strong>从库执行完才返回客户端。</p><p><strong>半同步复制</strong>：从库写入日志成功后返回ACK确认给主库，主库<strong>收到至少一个</strong>从库的确认就认为完成。</p><h2 id="负载均衡类型"><a href="#负载均衡类型" class="headerlink" title="负载均衡类型"></a>负载均衡类型</h2><p>DNS方式实现负载均衡</p><p>硬件负载均衡：F5和A10</p><p>软件负载均衡：</p><ol><li><strong>Nginx</strong>：七层负载均衡，支持HTTP、E-mail协议，同时也支持4层负载均衡（解析url，与客户端和服务端都要保持长连接，性能损耗）</li><li><strong>HAproxy</strong>：支持七层规则，性能不错。OpenStack 默认使用</li><li><strong>LVS</strong>：运行在内核态，性能最高，严格说工作在第三层（ip——&gt;Server）</li></ol><h2 id="分布式下Session共享方案"><a href="#分布式下Session共享方案" class="headerlink" title="分布式下Session共享方案"></a>分布式下Session共享方案</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-4.jpg" alt></p><h2 id="分布式锁解决方案"><a href="#分布式锁解决方案" class="headerlink" title="分布式锁解决方案"></a>分布式锁解决方案</h2><p>需要这个锁独立于每一个服务之外，而不是在服务里面。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>利用<strong>主键冲突</strong>控制一次只有一个线程能获取锁，非阻塞（要自己写阻塞代码）、不可重入（递归不支持，要自己实现AQS）、单点、不支持失效时间（要自己写定时器）</p><p>比如在数据库中建张表，采用唯一约束，要获得锁就往数据库中插入同一个key的记录放到唯一键上面，如果放进去了就是拿到锁了。</p><h3 id="Zookeeper分布式锁"><a href="#Zookeeper分布式锁" class="headerlink" title="Zookeeper分布式锁"></a>Zookeeper分布式锁</h3><p>zk通过Znode解决<strong>死锁</strong>问题，一旦客户端获取锁后突然挂掉，这个临时节点会自动删除，其他客户端自动获取锁。</p><p>临时顺序节点解决<strong>惊群效应</strong>。</p><h3 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h3><p>setNX命令，<strong>单线程处理网络请求</strong>，不需要考虑并发安全性。</p><p>Redis是个第三方中间件，在集群中很方便地实现分布式锁，所有服务节点设置相同地key，返回0则获取锁失败，T1申请到key后T2肯定申请不到。</p><h4 id="setNX问题"><a href="#setNX问题" class="headerlink" title="setNX问题"></a>setNX问题</h4><ol><li>早期版本<strong>没有超时参数</strong>，需要单独设置，存在死锁问题（key不会超时）</li><li>后期版本提供加锁和设置时间原子操作（set（NX,，timeout）），但是存在任务超时，锁自动释放，导致<strong>并发问题</strong>，加锁和释放锁不是同一线程问题（假如T1获得锁要执行15s，锁失效时间为10s，在这5s内T2获得了锁，T1执行完了要把锁释放掉，结果把T2的锁释放了，解决方法可以在value中存上线程的唯一标识或者uuid）</li></ol><p>删除锁：<strong>判断线程唯一标识再删除</strong></p><p>可重入性及<strong>锁续期</strong>没有实现，通过redisson解决（类似AQS实现（count计数），看门狗监听机制（设置一个监听器监听任务，任务没有执行完就延长过期时间））</p><p><strong>redlock</strong>：以上的机制都只操作单节点，即使Redis通过Sentinel保证高可用，如果这个master节点由于某些发生了主从切换，那么就会出现锁丢失的情况（主从节点间是异步通信，Redis同步设置可能数据丢失）。redlock从多个节点申请锁，当一半以上节点获取成功才算成功，redisson有相应的实现</p><h2 id="SpringCloud和Dubbo区别"><a href="#SpringCloud和Dubbo区别" class="headerlink" title="SpringCloud和Dubbo区别"></a>SpringCloud和Dubbo区别</h2><p>底层协议：springcloud基于http协议，dubbo基于tcp协议</p><p>注册中心：springcloud使用eureka，dubbo推荐使用zookeeper</p><p>模型定义：dubbo将一个接口定义为一个服务，springcloud将一个应用定义为一个服务</p><p>springcloud是一个生态，而dubbo是springcloud生态中关于服务调用一种解决方案（服务治理）</p><h2 id="Hystrix实现机制"><a href="#Hystrix实现机制" class="headerlink" title="Hystrix实现机制"></a>Hystrix实现机制</h2><p>分布式容错框架：熔断降级监控</p><h3 id="资源隔离"><a href="#资源隔离" class="headerlink" title="资源隔离"></a>资源隔离</h3><ol><li>线程隔离：Hystrix会给每个Command分配一个单独的线程池，这样在进行单个服务调用的时候，就可以在独立的线程池里面进行，而不会对其他线程池造成影响</li><li>信号量隔离：客户端向依赖服务发起请求时，首先要获取一个信号量才能真正发起调用，由于信号量的数量有限，当并发量超过信号量个数时，后续的请求都会直接拒绝，进入fallback流程。信号量隔离主要是通过控制并发请求量，防止请求线程大面积阻塞，从而达到限流和防止雪崩的目的。</li></ol><h3 id="熔断和降级"><a href="#熔断和降级" class="headerlink" title="熔断和降级"></a>熔断和降级</h3><p>调用服务失败后快速失败</p><p>熔断：为了防止异常不扩散，保证系统的稳定性</p><p>降级：编写好调用失败的补救逻辑，然后对服务直接停止运行，这样这些接口就无法正常调用，但又不至于直接报错，只是服务水平下降</p><ol><li>通过HystrixCommand或者HystrixObservableCommand将所有的外部系统（依赖）包装起来，整个包装对象是单独运行在一个线程之中（这是典型的命令模式）。</li><li>超时请求应该超过你定义的<strong>阈值</strong></li><li><strong>为每个依赖关系维护一个小的线程池</strong>（或信号量）；如果它满了，那么依赖关系的请求将立即被拒绝，而不是排队等待。</li><li>统计成功，失败（由客户端抛出的异常），超时和线程拒绝。</li><li>打开<strong>断路器</strong>可以在一段时间内停止对特定服务的所有请求，如果服务的错误百分比通过阈值，手动或自动地关闭断路器。</li><li><strong>当请求被拒绝、连接超时或者断路器打开，直接执行fallback</strong>。</li><li>近乎实时监控指标和配置变化。</li></ol><h2 id="RabbitMQ如何保证消息发送接收？"><a href="#RabbitMQ如何保证消息发送接收？" class="headerlink" title="RabbitMQ如何保证消息发送接收？"></a>RabbitMQ如何保证消息发送接收？</h2><h3 id="发送方确认机制"><a href="#发送方确认机制" class="headerlink" title="发送方确认机制"></a>发送方确认机制</h3><p>信道需要设置为confirm模式，则所有在信道上发布的消息都会<strong>分配一个唯一 ID</strong>。</p><p>一旦消息被投递到queue（可持久化的消息需要写入磁盘），信道会发送一个确认给生产者（包含消息唯一ID）。</p><p>如果RabbitMQ 发生内部错误从而导致消息丢失，会发送一条nack（未确认）消息给生产者。</p><p>所有被发送的消息都将被confirm（即 ack）或者被nack一次。但是<strong>没有对消息被confirm的快慢做任何保证</strong>，并且同一条消息不会即被confirm又被nack。</p><p>发送方确认模式是<strong>异步</strong>的，生产者应用程序在等待确认的同时，可以继续发送消息。当确认消息到达生产者，生产者的回调方法会被触发。</p><blockquote><p>ConfirmCallback接口：只确认是否正确到达 Exchange 中，成功到达则回调，其中的confirm（ID）方法返回给生产者</p><p>ReturnCallback接口：消息失败返回时回调</p></blockquote><h3 id="消费者的确认"><a href="#消费者的确认" class="headerlink" title="消费者的确认"></a>消费者的确认</h3><p>消费者在声明队列时，可以指定noAck参数，当noAck = false时，RabbitMQ会等待消费者显式发回ack信号后才从内存（或者硬盘，持久化消息）中移除（手动提交），否则，消息被消费后立即删除。</p><p>如果noAck = false，消费者接受每一条消息后都必须确认，只有消费者确认了消息，RabbitMQ才能安全地把消息从队列中删除。</p><p>RabbitMQ不会为未ack的消息设置超时时间，它判断此消息是否需要重新投递给消费者的唯一依据是消费该消息的消费者连接是否已经断开。这样设计的原因是RabbitMQ允许消费者消费一条消息的时间可以很长（也起到<strong>限流</strong>的作用），保证数据的最终一致性。<strong>因为如果消费者不返回ack的话，RabbitMQ也不知道消费者是否处理完了没有，擅自把消息发给其他消费者或者删除都会导致数据不一致</strong>。</p><p>如果消费者返回ack之前断开了链接。RabbitMQ会重新发送给下一个订阅的消费者。（可能存在消息重复消费的隐患，需要业务方保持数据一致，幂等性）</p><h2 id="RabbitMQ事务消息"><a href="#RabbitMQ事务消息" class="headerlink" title="RabbitMQ事务消息"></a>RabbitMQ事务消息</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-5.jpg" alt></p><h2 id="RabbitMQ死信队列和延时队列"><a href="#RabbitMQ死信队列和延时队列" class="headerlink" title="RabbitMQ死信队列和延时队列"></a>RabbitMQ死信队列和延时队列</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-advance-6.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h2&gt;&lt;p&gt;将程序中的交叉业务逻辑（比如安全，日志，事务等），封装成一个切面，然后注入到目标对象（具体业务逻辑）中去。AOP可以对某个对象或某些
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java的守护线程</title>
    <link href="https://arthurjq.com/2021/03/09/java/daemon-thread/"/>
    <id>https://arthurjq.com/2021/03/09/java/daemon-thread/</id>
    <published>2021-03-09T06:56:38.000Z</published>
    <updated>2021-03-10T02:14:37.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>用户线程</strong>即运行在前台的线程，而<strong>守护线程</strong>是运行在后台的线程。 守护线程作用是为其他前台线程的运行提供便利服务，比如垃圾回收线程就是一个守护线程。</p><p>其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没啥线程好服务的了，所以Daemon Thread也就退出了。</p><p>简单的讲就是<strong>JVM的退出不用考虑守护线程的退出，而必须考虑用户线程的退出</strong>。</p><p>用户也可以<strong>自行的设定守护线程</strong>，方法：<code>public final void setDaemon(boolean on)</code> ；但是有几点需要注意：</p><ol><li>thread.setDaemon（true）必须在thread.start（）之前设置，否则会跑出一个IllegalThreadStateException异常。<strong>你不能把正在运行的常规线程设置为守护线程</strong>。 （备注：这点与守护进程有着明显的区别，守护进程是创建后，让进程摆脱原会话的控制+让进程摆脱原进程组的控制+让进程摆脱原控制终端的控制；所以说寄托于虚拟机的语言机制跟系统级语言有着本质上面的区别）</li><li>在Daemon线程中产生的新线程也是Daemon的。 （这一点又是有着本质的区别了：守护进程fork（）出来的子进程不再是守护进程，尽管它把父进程的进程相关信息复制过去了，但是子进程的进程的父进程不是init进程，所谓的守护进程本质上说就是“父进程挂掉，init收养，然后文件0,1,2都是/dev/null，当前目录到/”）</li><li>守护线程<strong>不能用于去访问固有资源</strong>，比如读写操作或者计算逻辑。因为在Daemon Thread还没来的及进行操作时，虚拟机可能已经退出了</li><li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li></ol><p>转载：<a href="https://blog.csdn.net/lc1010078424/article/details/79613348" target="_blank" rel="noopener">https://blog.csdn.net/lc1010078424/article/details/79613348</a></p><h2 id="Daemon-Thread实际应用"><a href="#Daemon-Thread实际应用" class="headerlink" title="Daemon Thread实际应用"></a>Daemon Thread实际应用</h2><h3 id="web服务器中的Servlet"><a href="#web服务器中的Servlet" class="headerlink" title="web服务器中的Servlet"></a>web服务器中的Servlet</h3><p>web服务器中的Servlet，容器启动时后台初始化一个服务线程，即调度线程，负责处理http请求；</p><p>每个请求过来调度线程从线程池中取出一个工作者线程来处理该请求，从而实现并发控制的目的。</p><h3 id="Java的Timer"><a href="#Java的Timer" class="headerlink" title="Java的Timer"></a>Java的Timer</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Timer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerTaskRun</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统当前时间："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上写法任务虽然运行完了，但进程还未销毁，为什么会出现这种情况呢？</p><p>可以看一下Timer的源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"Timer-"</span> <span class="token operator">+</span> <span class="token function">serialNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Timer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出<strong>每创建一个Timer就是启动一个新的线程，那么启动的线程不是守护线程，所以一直运行</strong>。那我们该如何将 新创建的的Timer 改成守护线程呢？更改如上的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerTaskRun</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统当前时间："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyTask task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置Timer为true</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果只想执行一次等待执行完之后调用timer.cancel（）。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;用户线程&lt;/strong&gt;即运行在前台的线程，而&lt;strong&gt;守护线程&lt;/strong&gt;是运行在后台的线程。 守护线程作用
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="thread" scheme="https://arthurjq.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://arthurjq.com/2021/03/08/java-basis/"/>
    <id>https://arthurjq.com/2021/03/08/java-basis/</id>
    <published>2021-03-08T02:23:24.000Z</published>
    <updated>2021-03-18T04:31:23.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>优点： 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p>缺点： 性能比面向过程低</p><h2 id="Java和C"><a href="#Java和C" class="headerlink" title="Java和C++"></a>Java和C++</h2><ol><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li></ol><h2 id="构造器Constructor"><a href="#构造器Constructor" class="headerlink" title="构造器Constructor"></a>构造器Constructor</h2><h3 id="构造器-Constructor-是否可被-override？"><a href="#构造器-Constructor-是否可被-override？" class="headerlink" title="构造器 Constructor 是否可被 override？"></a>构造器 Constructor 是否可被 override？</h3><p>父类的私有属性和构造方法并不能被继承，所以Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h2 id="overload和override"><a href="#overload和override" class="headerlink" title="overload和override"></a>overload和override</h2><p>重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。</p><p>重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 private 则子类就不能重写该方法</p><blockquote><p>方法重载跟返回值类型和修饰符无关</p></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在<strong>程序运行期间</strong>才确定。</p><p>两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）</p><p>条件：1.要有继承 2.要有方法的重写 3.父类引用指向子类对象</p><h2 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h2><ol><li>操作少量的数据 = String</li><li>单线程操作字符串缓冲区下操作大量数据 = StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据 = StringBuffer</li></ol><h2 id="静态方法内调用一个非静态成员"><a href="#静态方法内调用一个非静态成员" class="headerlink" title="静态方法内调用一个非静态成员"></a>静态方法内调用一个非静态成员</h2><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>一、静态方法只能访问静态方法和静态成员。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//加入static关键字，变成静态方法</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态方法调用静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result="</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、非静态方法要被实例化才能被静态方法调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Test test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化类</span>        <span class="token keyword">int</span> result<span class="token operator">=</span>test<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用非静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result="</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无参构造的作用"><a href="#无参构造的作用" class="headerlink" title="无参构造的作用"></a>无参构造的作用</h2><p>Java 程序在执行子类的构造方法之前，如果没有用 super（）来调用父类特定的构造方法，则会调用父类中的无参构造。</p><p>在调用子类构造方法之前会先调用父类无参构造方法，是为了帮助子类做<strong>初始化工作</strong>。</p><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法</li><li>接口中的实例变量默认是 final 类型的，而抽象类中则不一定</li><li>一个类可以实现多个接口，但最多只能实现一个抽象类</li><li>一个类实现接口的话要实现接口的所有方法，而抽象类不一定</li><li>接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象 从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范</li></ol><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><ol><li>从语法形式上，看成员变量是属于类的，而局部变量是在方法中定义的<br>变量或是方法的参数</li><li>从变量在内存中的存储方式来看，成员变量是对象的一部分，而对象存在于堆内存，局部变量存在于栈内存</li><li>从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值，则会自动以类型的默认值而赋值（一种情况例外被 final 修饰的成员变量也必须显示地赋值）；而局部变量则不会自动赋值</li></ol><h2 id="静态方法和实例方法"><a href="#静态方法和实例方法" class="headerlink" title="静态方法和实例方法"></a>静态方法和实例方法</h2><ol><li>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，<strong>调用静态方法可以无需创建对象</strong>。</li><li>静态方法在访问本类的成员时，<strong>只允许访问静态成员</strong>（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制</li></ol><h2 id="equals-方法被覆盖过，则-hashCode-方法也必须被覆盖"><a href="#equals-方法被覆盖过，则-hashCode-方法也必须被覆盖" class="headerlink" title="equals 方法被覆盖过，则 hashCode 方法也必须被覆盖"></a>equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</h2><p>因为两个对象有相同的 hashcode 值，它们也不一定是相等的</p><blockquote><p>hashCode 的默认行为是对堆上的对象产生独特值。如果没有重写hashCode，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p></blockquote><h2 id="类中所有的-private-方法都隐式地指定为-final"><a href="#类中所有的-private-方法都隐式地指定为-final" class="headerlink" title="类中所有的 private 方法都隐式地指定为 final"></a>类中所有的 private 方法都隐式地指定为 final</h2><h2 id="处理不想序列化的字段"><a href="#处理不想序列化的字段" class="headerlink" title="处理不想序列化的字段"></a>处理不想序列化的字段</h2><p>使用 transient 关键字修饰。</p><p>作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。</p><p>transient 只能修饰变量，不能修饰类和方法。</p><h2 id="获取键盘输入"><a href="#获取键盘输入" class="headerlink" title="获取键盘输入"></a>获取键盘输入</h2><p>方法 1：通过 Scanner</p><pre class="line-numbers language-java"><code class="language-java">Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法 2：通过 BufferedReader</p><pre class="line-numbers language-java"><code class="language-java">BufferedReader input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Native方法"><a href="#Native方法" class="headerlink" title="Native方法"></a>Native方法</h2><p>Native Method就是一个java调用非java代码的接口。</p><p>被native关键字修饰的方法叫做本地方法，本地方法和其它方法不一样，本地方法意味着和平台有关，因此使用了native的程序可移植性都不太高。另外native方法在JVM中运行时数据区也和其它方法不一样，它有专门的<strong>本地方法栈</strong>。native方法主要用于加载文件和动态链接库，由于Java语言无法访问操作系统底层信息（比如：底层硬件设备等），这时候就需要借助C语言来完成了。被native修饰的方法可以被C语言重写。</p><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p><strong>堆</strong>是进程和线程共有的空间，唯一目的是<strong>存放对象实例</strong>，创建的对象和数组都保存在堆中。</p><p><strong>栈</strong>是每个线程独有的，每个线程的栈相互独立。每个方法在执行的同时都会创建一个栈帧用来存储<strong>局部变量表、操作数栈、动态链接（代码中的符号引用=&gt;方法区中的直接引用）、方法出口</strong>等信息。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-4.jpg" alt></p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>每条线程都还有<strong>私有的</strong>ThreadLocalMap容器，无需使用同步机制保证多线程访问容器的互斥性。（使用static，又不想考虑线程安全的时候用）</p><p>使用场景：</p><ol><li>在进行<strong>对象跨层传递</strong>的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束</li><li>线程间数据隔离</li><li>进行事务操作，用于存储线程事务信息（Spring框架在事务开始时会给当前线程绑定一个Jdbc Connection）</li><li>数据库连接，Session会话管理</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-1.png" alt></p><p>ThreadLocal内存泄漏的根源：<strong>由于ThreadLocalMap的生命周期跟Thread一样长</strong>，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。</p><p>正确用法：</p><ol><li>每次使用完ThreadLocal都<strong>调用它的remove（）方法</strong>清除数据</li><li>将ThreadLocal变量定义成<strong>private static</strong>，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能通过ThreadLocal的弱引用访问到Entry的value值，进而清除掉。</li></ol><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><h3 id="对象锁（monitor）"><a href="#对象锁（monitor）" class="headerlink" title="对象锁（monitor）"></a>对象锁（monitor）</h3><p>synchronized的具体底层实现，demo:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SynchronizedDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中有一个同步代码块，<strong>锁住的是类对象</strong>，并且还有一个同步静态方法，锁住的依然是该类的类对象。编译之后，切换到SynchronizedDemo.class的同级目录之后，然后用<code>javap -v SynchronizedDemo.class</code>查看字节码文件：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-2.png" alt></p><p>使用Synchronized进行同步，其关键就是必须要对对象的监视器monitor进行获取，当线程获取monitor后才能继续往下执行，否则就只能等待。而这个获取的过程是<strong>互斥</strong>的，即同一时刻只有一个线程能够获取到monitor。</p><p>从上图中就可以看出来，执行静态同步方法的时候就只有一条monitorexit指令，并没有monitorenter获取锁的指令。这就是<strong>锁的重入性</strong>，<strong>每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/java-basis-3.png" alt></p><p>该图可以看出，任意线程对Object的访问，首先要获得Object的监视器，如果获取失败，该线程就进入同步状态，线程状态变为BLOCKED，当Object的监视器占有者释放后，在同步队列中得线程就会有机会重新获取该监视器。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>在J.U.C包中利用CAS实现类有很多，可以说是支撑起整个concurrency包的实现，在Lock实现中会有CAS改变state变量，在atomic包中的实现类也几乎都是用CAS实现</p><h3 id="CAS的问题"><a href="#CAS的问题" class="headerlink" title="CAS的问题"></a>CAS的问题</h3><h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>比如一个旧值A变为了成B，然后再变成A，刚好在做CAS时检查发现旧值并没有变化依然为A，但是实际上的确发生了变化。解决方案可以沿袭数据库中常用的乐观锁方式，添加一个版本号可以解决。原来的变化路径A-&gt;B-&gt;A就变成了1A-&gt;2B-&gt;3C。在java 1.5后的atomic包中提供了AtomicStampedReference来解决ABA问题，解决思路就是这样的。</p><h4 id="自旋时间过长"><a href="#自旋时间过长" class="headerlink" title="自旋时间过长"></a>自旋时间过长</h4><p>使用CAS时非阻塞同步，也就是说不会将线程挂起，会自旋（无非就是一个死循环）进行下一次尝试，如果这里自旋时间过长对性能是很大的消耗。如果JVM能支持处理器提供的pause指令，那么在效率上会有一定的提升。</p><h4 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h4><p>当对一个共享变量执行操作时CAS能保证其原子性，<strong>如果对多个共享变量进行操作，CAS就不能保证其原子性</strong>。有一个解决方案是利用对象整合多个共享变量，即一个类中的成员变量就是这几个共享变量。然后将这个对象做CAS操作就可以保证其原子性。atomic中提供了AtomicReference来保证引用对象之间的原子性。</p><h2 id="并发的三大特性"><a href="#并发的三大特性" class="headerlink" title="并发的三大特性"></a>并发的三大特性</h2><h4 id="总线lock"><a href="#总线lock" class="headerlink" title="总线lock"></a>总线lock</h4><p>在CPU1要操作共享变量的时候，其在总线上发出一个LOCK#信号，其他处理器就不能操作缓存了该共享变量内存地址的缓存。</p><h4 id="缓存一致性协议"><a href="#缓存一致性协议" class="headerlink" title="缓存一致性协议"></a>缓存一致性协议</h4><p>当某块CPU对缓存中的数据进行操作了之后，就通知其他CPU放弃储存在它们内部的缓存，或者从主内存中重新读取</p><p>MESI协议：在每个缓存行上维护两个状态位</p><ol><li><p>​    M：被修改的。处于这一状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且<strong>没有更新到内存</strong>中。</p></li><li><p>​    E：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其<strong>数据没有修改</strong>，即与内存中一致。</p></li><li><p>​    S：共享的。处于这一状态的数据在多个CPU中都有缓存，且<strong>与内存一致</strong>。</p></li><li><p>​    I：无效的。本CPU中的这份缓存已经无效。</p></li><li><p>M状态必须时刻<strong>监听所有试图读取该缓存行</strong>对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。</p></li><li><p>E状态必须时刻<strong>监听其他试图读取该缓存行</strong>对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。</p></li><li><p>S状态必须时刻<strong>监听使该缓存行无效或者独享该缓存行的请求</strong>，如果监听到，则必须把其缓存行状态设置为I。</p></li></ol><blockquote><p>当CPU需要读取数据时，如果其缓存行的状态是I的，则需要从内存中读取，并把自己状态变成S，如果不是I，则可以直接读取缓存中的值，但在此之前，必须要等待其他CPU的监听结果，如其他CPU也有该数据的缓存且状态是M，则需要等待其把缓存更新到内存之后，再读取。</p><p>当CPU需要写数据时，只有在其缓存行是M或者E的时候才能执行，否则需要发出特殊的RFO指令（Read Or Ownership，这是一种总线事务），通知其他CPU置缓存无效（I），这种情况下性能开销是相对较大的。在写入完成后，修改其缓存状态为M。</p></blockquote><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>AtomicInteger.incrementAndGet（用了CAS）</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>quartz实现高级定制化定时任务中用AtomicInteger标识程序执行过程中是否发生了异常</p></blockquote><p>把普通变量升级为原子变量：主要是<code>AtomicIntegerFieldUpdater&lt;T&gt;</code>类</p><p>在高并发情况下，LongAdder（累加器）比AtomicLong原子操作效率更高，LongAdder累加器是java8新加入的</p><p>在高度并发竞争情形下，AtomicLong每次进行add都需要flush和refresh（这一块涉及到java内存模型中的工作内存和主内存的，所有变量操作只能在工作内存中进行，然后写回主内存，其它线程再次读取新值），每次add都需要同步，在高并发时会有比较多冲突，比较耗时导致效率低；而LongAdder中每个线程会维护自己的一个计数器，在最后执行<code>LongAdder.sum()</code>方法时候才需要同步，把所有计数器全部加起来，不需要flush和refresh操作。</p><p>转载：<a href="https://blog.csdn.net/fanrenxiang/article/details/80623884" target="_blank" rel="noopener">https://blog.csdn.net/fanrenxiang/article/details/80623884</a></p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p><strong>final</strong>也保证可见性</p><p><strong>synchronized</strong>（阻塞同步）</p><ol><li>线程解锁前，必须把共享变量的最新值刷新到主内存中</li><li>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新获取最新的值（注意：加锁与解锁需要是同一把锁）</li></ol><p><strong>volatile</strong>（非阻塞同步）：在生成汇编代码时会在volatile修饰的共享变量进行写操作的时候会多出<strong>Lock前缀的指令</strong>（缓存一致性）</p><ol><li><strong>它先对总线和缓存加锁</strong>，然后执行后面的指令，在<strong>Lock锁住总线</strong>的时候，其他CPU的读写请求都会<strong>被阻塞</strong>，<strong>直到锁释放</strong>。</li><li>最后释放锁后会把高速缓存中的脏数据全部刷新回主内存，且这个写回内存的操作会使在其他CPU里缓存了该地址的数据无效。</li></ol><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p><strong>synchronized</strong>：对Java中的对象加锁，一种排他的、可重入的锁。通过排他锁的方式就保证了同一时间内，被synchronized修饰的代码是<strong>单线程</strong>执行的。满足了as-if-serial语义（单线程），单线程的有序性就天然存在了（<strong>不能禁止重排序</strong>）</p><blockquote><p>as-if-serial语义：不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。编译器和处理器不会对存在<strong>数据依赖关系</strong>的操作做重排序，因为这种重排序会改变执行结果。</p></blockquote><p><strong>volatile</strong>：禁止重排序，使用内存屏障，统一由jvm来生成内存屏障的指令，Lock是软件指令。</p><p>内存屏障的作用：</p><ol><li>屏障下面的代码不能跟屏障上面的代码交换执行顺序</li><li>线程修改完共享变量以后会马上把该变量从本地内存写回到主内存，并且让其他线程本地内存中该变量副本失效（使用MESI协议）</li></ol><p><strong>内存屏障</strong>是CPU指令。如果字段是volatile，Java内存模型将在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令：</p><ol><li>对于Load Barrier来说，在指令前插入Load Barrier，可以<strong>让高速缓存中的数据失效，强制从新从主内存加载新数据</strong></li><li>对于Store Barrier来说，在指令后插入Store Barrier，能<strong>让写入缓存中的最新数据更新写入主内存，让其他线程可见</strong></li></ol><p><strong>StoreLoad屏障：</strong>对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能。</p><blockquote><p>如果指令甲happens-before指令乙，那么指令甲必须排序在指令乙之前，并且指令甲的执行结果对指令乙可见。</p></blockquote><h2 id="ThreadPool-中-submit-和-execute"><a href="#ThreadPool-中-submit-和-execute" class="headerlink" title="ThreadPool 中 submit 和 execute"></a>ThreadPool 中 submit 和 execute</h2><p>都是用来执行线程池的，只不过使用 execute 执行线程池<strong>不能有返回方法</strong>，而使用 submit 可以使用 <strong>Future 接收线程池执行的返回值</strong>。</p><h2 id="ThreadPoolExecutor-都需要哪些参数"><a href="#ThreadPoolExecutor-都需要哪些参数" class="headerlink" title="ThreadPoolExecutor 都需要哪些参数"></a>ThreadPoolExecutor 都需要哪些参数</h2><ol><li>corePoolSize：线程池中的核心线程数</li><li>maximumPoolSize：线程池中最大线程数</li><li>keepAliveTime：闲置超时时间</li><li>unit：keepAliveTime 超时时间的<strong>单位</strong>（时/分/秒等）</li><li>workQueue：线程池中的<strong>任务队列</strong></li><li>threadFactory：为线程池提供创建新线程的<strong>线程工厂</strong></li><li>rejectedExecutionHandler：线程池任务队列超过最大值之后的<strong>拒绝策略</strong></li></ol><h2 id="线程池的队列类型"><a href="#线程池的队列类型" class="headerlink" title="线程池的队列类型"></a>线程池的队列类型</h2><p>1、ArrayBlockingQueue<br>是一个基于数组结构的<strong>有界阻塞队列</strong>，此队列按 FIFO（先进先出）原则对元素进行排序。<br>2、LinkedBlockingQueue<br>一个基于链表结构的<strong>阻塞队列</strong>，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool（）使用了这个队列<br>3、SynchronousQueue<br>一个不存储元素的<strong>阻塞队列</strong>。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool（5）使用了这个队列。<br>4、PriorityBlockingQueue<br>一个具有优先级的<strong>无限阻塞队列</strong>。</p><h2 id="线程池中为什么先入队列而不是先创建最大线程"><a href="#线程池中为什么先入队列而不是先创建最大线程" class="headerlink" title="线程池中为什么先入队列而不是先创建最大线程"></a>线程池中为什么先入队列而不是先创建最大线程</h2><p>在创建新线程时，<strong>要获取全局锁</strong>，这时其他都得阻塞，影响效率。</p><h2 id="线程池中线程复用原理"><a href="#线程池中线程复用原理" class="headerlink" title="线程池中线程复用原理"></a>线程池中线程复用原理</h2><p>线程池将线程和任务进行解耦，摆脱了之前通过Thread创建线程时一个线程必须对应一个任务的限制。</p><p>同一个线程可以从阻塞队列中不对获取新任务来执行，其核心原理在于线程池对Thread封装，并<strong>不是每次执行任务都调用Thread.start（）来创建新线程</strong>，而是让每个线程执行一个“循环任务”，不断检查是否有任务需要被执行，有就<strong>调用任务中的run方法</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;p&gt;优点： 易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Helm安装ingress</title>
    <link href="https://arthurjq.com/2021/03/06/project/helm-ingress/"/>
    <id>https://arthurjq.com/2021/03/06/project/helm-ingress/</id>
    <published>2021-03-06T02:15:13.000Z</published>
    <updated>2021-03-06T08:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Helm介绍"><a href="#Helm介绍" class="headerlink" title="Helm介绍"></a>Helm介绍</h2><p>Helm是Kubernetes的包管理器，主要用来管理 Charts。Helm Chart是用来封装Kubernetes原生应用程序的一系列YAML文件。可以在你部署应用的时候自定义应用程序的一些Metadata，以便于应用程序的分发。</p><p>对于应用发布者而言，可以通过Helm打包应用、管理应用依赖关系、管理应用版本并发布应用到软件仓库。对于使用者而言，使用Helm后不用需要编写复杂的应用部署文件，可以以简单的方式在Kubernetes上查找、安装、升级、回滚、卸载应用程序。</p><p>Helm和Kubernetes之间的关系可以如下类比。</p><ul><li>Helm &lt;–&gt; Kubernetes</li><li>Yum &lt;–&gt; CentOS</li></ul><p>Kubernetes的应用编排存在着一些问题，Helm可以用来解决这些问题。</p><p>1：管理、编辑与更新大量的Kubernetes配置文件</p><p>2：部署一个含有大量配置文件的复杂Kubernetes应用</p><p>3：分享和复用Kubernetes配置和应用</p><p>4：参数化配置模板支持多个环境</p><p>5：管理应用的发布：回滚、diff 和查看发布历史</p><p>6：控制一个部署周期中的某一些环节</p><p>7：发布后的测试验证</p><h2 id="Helm原理"><a href="#Helm原理" class="headerlink" title="Helm原理"></a>Helm原理</h2><p>下面两张图描述了 Helm 的几个关键组件 Helm（客户端）、Tiller（服务器）、Repository（Chart 软件仓库）、Chart（软件包）之间的关系以及它们之间如何通信</p><p>helm 组件通信：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-1.png" alt></p><p>helm 架构</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-2.png" alt></p><p><strong>创建release</strong></p><ol><li>helm 客户端从指定的目录或本地tar文件或远程repo仓库解析出chart的结构信息</li><li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li><li>Tiller 服务端根据 chart 和 values 生成一个 release</li><li>Tiller 将install release请求直接传递给 kube-apiserver</li></ol><p><strong>删除release</strong></p><ol><li>helm 客户端从指定的目录或本地tar文件或远程repo仓库解析出chart的结构信息</li><li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li><li>Tiller 服务端根据 chart 和 values 生成一个 release</li><li>Tiller 将delete release请求直接传递给 kube-apiserver</li></ol><p><strong>更新release</strong></p><ol><li>helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller</li><li>Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history</li><li>Tiller 将新的 release 传递给 kube-apiserver 进行更新</li></ol><h3 id="chart基本结构"><a href="#chart基本结构" class="headerlink" title="chart基本结构"></a>chart基本结构</h3><p>Helm的打包格式叫做chart，所谓chart就是一系列文件, 它描述了一组相关的 k8s 集群资源。Chart中的文件安装特定的目录结构组织, 最简单的chart 目录如下所示：</p><pre class="line-numbers language-text"><code class="language-text">./├── charts├── Chart.yaml├── templates│   ├── deployment.yaml│   ├── _helpers.tpl│   ├── ingress.yaml│   ├── NOTES.txt│   ├── serviceaccount.yaml│   ├── service.yaml│   └── tests│       └── test-connection.yaml└── values.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>charts 目录存放依赖的chart</li><li>Chart.yaml 包含Chart的基本信息，包括chart版本，名称等</li><li>templates 目录下存放应用一系列 k8s 资源的 yaml 模板</li><li>_helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用</li><li>NOTES.txt 介绍chart 部署后的帮助信息，如何使用chart等</li><li>values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值</li></ol><h2 id="Helm安装"><a href="#Helm安装" class="headerlink" title="Helm安装"></a>Helm安装</h2><p>下载helm v3.0.2，地址 <a href="https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz" target="_blank" rel="noopener">https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz</a></p><p>上传并解压。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> zxvf helm-v3.0.2-linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将helm拷贝到系统path路径下，以下为 /usr/local/bin/helm</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> linux-amd64/helm /usr/local/bin/helm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看helm版本</p><pre class="line-numbers language-bash"><code class="language-bash">helm versionversion.BuildInfo<span class="token punctuation">{</span>Version:<span class="token string">"v3.0.0"</span>, GitCommit:<span class="token string">"e29ce2a54e96cd02ccfce88bee4f58bb6e2a28b6"</span>, GitTreeState:<span class="token string">"clean"</span>, GoVersion:<span class="token string">"go1.13.4"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>增加常用chart源。helm提供了常用的chart源，可以在helm的hub库：<a href="https://hub.helm.sh/charts" target="_blank" rel="noopener">https://hub.helm.sh/charts</a></p><p>查看提供的各种应用的chart库，左边是各种官方chart库，右边是chart库中的应用chart。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#除了阿里云应该都需要科学，stable是官方的，aliyuncs最快</span>helm repo add stable https://kubernetes-charts.storage.googleapis.comhelm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com helm repo add bitnami https://charts.bitnami.com/bitnamihelm repo add aliyuncs https://apphub.aliyuncs.comhelm repo add aliyun-stable https://acs-k8s-ingress.oss-cn-hangzhou.aliyuncs.com/charts<span class="token comment" spellcheck="true">#查看chart列表</span>helm repo listNAME            URLstable          https://kubernetes-charts.storage.googleapis.comincubator       https://kubernetes-charts-incubator.storage.googleapis.combitnami         https://charts.bitnami.com/bitnamialiyuncs        https://apphub.aliyuncs.comaliyun-stable   https://acs-k8s-ingress.oss-cn-hangzhou.aliyuncs.com/charts<span class="token comment" spellcheck="true">#更新依赖源</span>helm repo update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="采用Deployment-多Replica的部署形式安装ingress"><a href="#采用Deployment-多Replica的部署形式安装ingress" class="headerlink" title="采用Deployment+多Replica的部署形式安装ingress"></a>采用Deployment+多Replica的部署形式安装ingress</h4><p>下载<a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml" target="_blank" rel="noopener">https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml</a></p><p>修改对应的镜像源：image:<a href="http://quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.31.1" target="_blank" rel="noopener">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.31.1</a></p><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f ingress.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看对应的ingress pod是否有启动成功</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get po -n ingress-nginxkubectl describe pod pod_id -n ingress-nginx<span class="token comment" spellcheck="true">#查看ingress服务是否正常</span>kubectl get svc -n ingress-nginx<span class="token comment" spellcheck="true">#删除辅助的POD</span>kubectl delete pod xxxxx -n ingress-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看对应的节点端口</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get svc -n ingress-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器用<code>物理节点IP:31434</code>访问，看是否正常</p><h2 id="用ingress对服务做路由"><a href="#用ingress对服务做路由" class="headerlink" title="用ingress对服务做路由"></a>用ingress对服务做路由</h2><h3 id="ingress概述"><a href="#ingress概述" class="headerlink" title="ingress概述"></a>ingress概述</h3><p>k8s 对外暴露服务（service）主要有两种方式：NotePort, LoadBalance， 此外externalIPs也可以使各类service对外提供服务</p><ol><li>但是当集群服务很多的时候，NodePort方式最大的缺点是会占用很多集群机器的端口；</li><li>LB方式最大的缺点则是每个service一个LB又有点浪费和麻烦，并且需要k8s之外的支持； </li><li>而ingress则<strong>只需要一个NodePort或者一个LB</strong>就可以满足所有service对外服务的需求。</li></ol><p>ingress工作机制大致可以用下图表示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-3.png" alt></p><p>实际上，ingress相当于一个<strong>7层的负载均衡器</strong>，是k8s对反向代理的一个抽象。大概的工作原理也确实类似于Nginx，可以理解成<strong>在 Ingress 里建立一个个映射规则 , ingress Controller 通过监听 Ingress这个api对象里的配置规则并转化成 Nginx 的配置</strong>（kubernetes声明式API和控制循环） , 然后<strong>对外部提供服务</strong>。ingress包括：ingress controller 和 ingress resources</p><p><strong>ingress controller</strong>：核心是一个deployment，实现方式有很多，比如nginx, Contour, Haproxy, trafik, Istio，需要编写的yaml有：Deployment, Service, ConfigMap, ServiceAccount（Auth），其中service的类型可以是NodePort或者LoadBalancer。</p><p><strong>ingress resources</strong>：这个就是一个类型为Ingress的k8s api对象了，这部分则是面向开发人员。</p><p>Kubernetes给出的方案就是Ingress，Ingress包含了两大主件Ingress Controller和Ingress。</p><p>Ingress解决的是新的服务加入后，域名和服务的对应问题，基本上是一个ingress的对象，通过yaml进行创建和更新进行加载。</p><p>Ingress Controller是将Ingress这种变化生成一段Nginx的配置，然后将这个配置通过Kubernetes API写到Nginx的Pod中，然后reload.（注意：写入 nginx.conf 的不是service的地址，而是service backend 的 pod 的地址，避免在 service 在增加一层负载均衡转发）</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-4.png" alt></p><p>从上图中可以很清晰的看到，实际上请求进来还是被<strong>负载均衡器</strong>拦截，比如 nginx，然后 Ingress Controller 通过跟 Ingress 交互得知某个域名对应哪个 service，再通过跟 kubernetes API 交互得知 service 地址等信息；综合以后生成配置文件实时写入负载均衡器，然后负载均衡器 reload 该规则便可实现服务发现，即动态映射</p><p>了解了以上内容以后，这也就很好的说明了我为什么喜欢把负载均衡器部署为 Daemon Set；因为无论如何请求首先是被负载均衡器拦截的，所以在每个 node 上都部署一下，同时 hostport 方式监听 80 端口；那么就解决了其他方式部署不确定 负载均衡器在哪的问题，同时访问每个 node 的 80 都能正确解析请求；如果前端再 放个 nginx 就又实现了一层负载均衡。<br>Ingress Controller 会根据你定义的 Ingress 对象，提供对应的代理能力。业界常用的各种反向代理项目，比如 Nginx、HAProxy、Envoy、Traefik 等，都已经为Kubernetes 专门维护了对应的 Ingress Controller。</p><p>Ingress Controller 会根据你定义的 Ingress 对象，提供对应的代理能力。业界常用的各种反向代理项目，比如 Nginx、HAProxy、Envoy、Traefik 等，都已经为Kubernetes 专门维护了对应的 Ingress Controller。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/helm-5.png" alt></p><h3 id="ingress-nginx-部署"><a href="#ingress-nginx-部署" class="headerlink" title="ingress-nginx 部署"></a>ingress-nginx 部署</h3><p>ingress调度的是后端的service，而不是pod</p><p>ingress调度hello-service这个服务</p><p>创建对应的hello-ingress.yaml部署文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>ingress  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/service-upstream</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> hello.abc.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>service            <span class="token key atrule">port</span><span class="token punctuation">:</span>              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行部署</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl apply -f hello-ingress.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Helm介绍&quot;&gt;&lt;a href=&quot;#Helm介绍&quot; class=&quot;headerlink&quot; title=&quot;Helm介绍&quot;&gt;&lt;/a&gt;Helm介绍&lt;/h2&gt;&lt;p&gt;Helm是Kubernetes的包管理器，主要用来管理 Charts。Helm Chart是用来封装Kube
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="运维开发" scheme="https://arthurjq.com/tags/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
      <category term="kubernetes" scheme="https://arthurjq.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s部署栗子</title>
    <link href="https://arthurjq.com/2021/03/04/project/k8s-exp/"/>
    <id>https://arthurjq.com/2021/03/04/project/k8s-exp/</id>
    <published>2021-03-04T10:45:34.000Z</published>
    <updated>2021-03-04T11:28:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1：mvn对应的项目的jar"><a href="#1：mvn对应的项目的jar" class="headerlink" title="1：mvn对应的项目的jar"></a>1：mvn对应的项目的jar</h2><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>以最简单的可以运行java的镜像举例</p><pre class="line-numbers language-shell"><code class="language-shell">FROM openjdk:8COPY study-0.0.1-SNAPSHOT.jar /study-0.0.1-SNAPSHOT.jarCMD ["java","-jar","/study-0.0.1-SNAPSHOT.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3：build出对应的image"><a href="#3：build出对应的image" class="headerlink" title="3：build出对应的image"></a>3：build出对应的image</h2><pre class="line-numbers language-shell"><code class="language-shell">docker build -t helloworld .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4：docker-push到指定的镜像中心"><a href="#4：docker-push到指定的镜像中心" class="headerlink" title="4：docker push到指定的镜像中心"></a>4：docker push到指定的镜像中心</h2><h2 id="5：编写deployment-yaml部署文件"><a href="#5：编写deployment-yaml部署文件" class="headerlink" title="5：编写deployment.yaml部署文件"></a>5：编写deployment.yaml部署文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true"># tells deployment to run 2 pods matching the template</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot        <span class="token key atrule">image</span><span class="token punctuation">:</span> helloworld        <span class="token comment" spellcheck="true">#本地拉取镜像</span>        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Never        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6：发布部署"><a href="#6：发布部署" class="headerlink" title="6：发布部署"></a>6：发布部署</h2><pre class="line-numbers language-shell"><code class="language-shell">kubectl apply -f helloworld-deployment.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看部署是否成功</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get pods<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7：编写service-yaml部署文件"><a href="#7：编写service-yaml部署文件" class="headerlink" title="7：编写service.yaml部署文件"></a>7：编写service.yaml部署文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看部署是否成功</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get services<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8：查看服务端口绑定到物理节点的端口"><a href="#8：查看服务端口绑定到物理节点的端口" class="headerlink" title="8：查看服务端口绑定到物理节点的端口"></a>8：查看服务端口绑定到物理节点的端口</h2><pre class="line-numbers language-shell"><code class="language-shell">kubectl get svc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务端口映射到物理主机的端口是32405</p><h2 id="9：验证是否可以使用访问"><a href="#9：验证是否可以使用访问" class="headerlink" title="9：验证是否可以使用访问"></a>9：验证是否可以使用访问</h2><p>那么一个最基本的boot服务从package到打入docker镜像，再到k8s集群去负责编排调度，到完成使用就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1：mvn对应的项目的jar&quot;&gt;&lt;a href=&quot;#1：mvn对应的项目的jar&quot; class=&quot;headerlink&quot; title=&quot;1：mvn对应的项目的jar&quot;&gt;&lt;/a&gt;1：mvn对应的项目的jar&lt;/h2&gt;&lt;h2 id=&quot;编写Dockerfile&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="运维开发" scheme="https://arthurjq.com/tags/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/"/>
    
      <category term="kubernetes" scheme="https://arthurjq.com/tags/kubernetes/"/>
    
      <category term="docker" scheme="https://arthurjq.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>sql注意要点和规范</title>
    <link href="https://arthurjq.com/2021/03/04/database/sql-standard/"/>
    <id>https://arthurjq.com/2021/03/04/database/sql-standard/</id>
    <published>2021-03-04T06:33:32.000Z</published>
    <updated>2021-03-04T15:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL语句书写规则"><a href="#SQL语句书写规则" class="headerlink" title="SQL语句书写规则"></a>SQL语句书写规则</h2><p>1：SQL语句中出现的所有表名、表别名、字段名、序列等数据库对象都应<strong>小写</strong>。</p><p>2：SQL 语句中出现的系统保留字、内置函数名、SQL保留字、绑定变量等都应<strong>大写</strong>。</p><p>3：SQL语句中出现的变量参数应遵循各语言编码规范的要求。</p><p>4：SQL语句中的表别名应简短明了，宜反映表名的实际意义。</p><p>5：应遵循各语言的编码规范的要求。</p><p>6：单引号应与所属的 SQL子句位于同一行。</p><p>7：SQL语句内的算术运算符、逻辑运算符（AND、OR、NOT）、 比较运算符（=、&lt;=、&gt;=、&gt;、&lt;、&lt;&gt;、BETWEEN AND）、IN、LIKE等运算符<strong>前后都应加一空格</strong>。</p><p>8：SQL语句中逗号后应加一空格。</p><p>9：<strong>不等于应统一使用符号“&lt;&gt;”</strong>。</p><p>10：应遵循各语言编码规范的代码注释要求。</p><p>11：对较为复杂的 SQL语句应注释，并说明算法和功能。</p><p>12：对重要的计算应说明其功能。</p><p>13：对常量及变量注释时，应注释被保存值的含义，宜包括合法取值的范围。</p><h2 id="SQL优化要点"><a href="#SQL优化要点" class="headerlink" title="SQL优化要点"></a>SQL优化要点</h2><h3 id="“inner-join”-和直接“-”等号的区别"><a href="#“inner-join”-和直接“-”等号的区别" class="headerlink" title="“inner join” 和直接“=”等号的区别"></a>“inner join” 和直接“=”等号的区别</h3><p>效果一样，但是实现原理不一样，join是基于hashtable连接比较，而=直接就是取笛卡尔集再过滤，所以后者效率低，是<code>O(N^2)</code>，前者是<code>O(LogN)</code></p><h3 id="Union-amp-Union-All"><a href="#Union-amp-Union-All" class="headerlink" title="Union &amp; Union All"></a>Union &amp; Union All</h3><ol><li>Union：对两个结果集进行并集操作，不包括重复行，同时进行<strong>默认规则的排序</strong>；</li><li>Union All：对两个结果集进行并集操作，包括重复行，<strong>不进行排序</strong>；</li></ol><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>（1）主键索引 （ PRIMARY ）</p><p>（2）唯一索引 （ UNIQUE ）</p><p>（3）普通索引 （ INDEX ）</p><p>（4）全文索引（FULLTEXT , MYISAM 及 mysql 5.6 以上的 Innodb ）</p><p>更多索引分类可以看：<a href="https://arthurjq.com/2020/12/17/database/mysql-index/">https://arthurjq.com/2020/12/17/database/mysql-index/</a></p><h3 id="慢SQL问题"><a href="#慢SQL问题" class="headerlink" title="慢SQL问题"></a>慢SQL问题</h3><p>（1）SQL编写问题，由于语句编写的问题导致的慢查询。</p><p>（2）锁，由于锁的问题导致表被锁无法进行正常的读取或写入。</p><p>（3）IO资源竞争，创建索引或者大量插入数据会占用大量的IO。</p><p>（4）服务器硬件问题</p><h3 id="SQL编写问题"><a href="#SQL编写问题" class="headerlink" title="SQL编写问题"></a>SQL编写问题</h3><p><strong>语句写完后，建议大家务必使用explain检查下自己写的语句是否有用到索引，是否导致了全表扫描</strong>。</p><p>关于explain的返回结果的字段意思可以看：<a href="https://arthurjq.com/2020/12/30/database/mysql-explain/">https://arthurjq.com/2020/12/30/database/mysql-explain/</a></p><p>我们在编写SQL的时候需要注意：</p><p>（1）<strong>字段类型转换导致不用索引</strong>，如字符串类型的不用引号，数字类型的用引号等，这有可能会用不到索引导致全表扫描；</p><p>（2）mysql <strong>不支持函数转换</strong>，所以字段前面不能加函数，否则这将用不到索引；</p><p>（3）不要在字段前面加减运算；</p><p>（4）字符串比较长的可以考虑索引一部分减少索引文件大小，提高写入效率；</p><p>（5）like % 在前面用不到索引；</p><p>（6）根据联合索引的第二个及以后的字段单独查询用不到索引；</p><p>（7）不要使用 select *；</p><p>（8）or 的查询尽量用 union 代替 （Innodb）；</p><p>（9）复合索引高选择性的字段排在前面；</p><p>（10）order by / group by 字段包括在索引当中减少排序，效率会更高。</p><p>（11）尽量规避大事务的 SQL，大事务的 SQL 会影响数据库的并发性能及主从同步；</p><p>（12）<strong>删除表所有记录请用 truncate</strong>，不要用 delete；</p><p>（13）<strong>不让 mysql 干多余的事情，如计算</strong>；</p><p>（14）<strong>输写 SQL 带字段</strong>，以防止后面表变更带来的问题，性能也是比较优的 ( 涉及到数据字典解析，请自行查询资料)；</p><p>（15）在 Innodb上用 <code>select count(*)</code>，因为 Innodb 会存储统计信息；</p><p>（16）慎用<code>Order by rand()</code>。</p><p>（17）索引列的数据长度满足业务的情况下能少则少。</p><p>（18）表中的<strong>索引并不是越多越好</strong>，冗余或者无用索引会占用磁盘空间并且会影响增删改的效率。</p><p>之前也发布过mysql数据库优化方法：<a href="https://arthurjq.com/2021/02/03/database/mysql-optimization/">https://arthurjq.com/2021/02/03/database/mysql-optimization/</a></p><h3 id="索引失效的条件"><a href="#索引失效的条件" class="headerlink" title="索引失效的条件"></a>索引失效的条件</h3><p>（1）不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p><p>（2）存储引擎不能使用索引</p><p>（3）联合索引右边的列</p><p>（4）尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</p><p>（5）mysql在使用不等于（！=或者&lt;&gt;）的时候无法使用索引会导致全表扫描</p><p>（6）like以通配符开头（’%abc…’）mysql索引失效会变成全表扫描的操作。</p><p>（7）WHERE条件中IN可以使用索引， NOT IN 无法使用索引。</p><p>更多索引失效的现象可以看：<a href="https://arthurjq.com/2020/12/26/database/index-missing/">https://arthurjq.com/2020/12/26/database/index-missing/</a></p><h3 id="联合索引注意要点"><a href="#联合索引注意要点" class="headerlink" title="联合索引注意要点"></a>联合索引注意要点</h3><p>索引是key index （a,b,c）。 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">5</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">----  abc顺序</span><span class="token number">abc</span>三个索引都在<span class="token keyword">where</span>条件里面用到了，而且都发挥了作用<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span>  <span class="token number">c</span><span class="token operator">=</span><span class="token number">4</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">6</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">where</span>里面的条件顺序在查询之前会被mysql自动优化，效果跟上一句一样<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token number">a</span>用到索引，<span class="token number">b</span>没有用，所以<span class="token number">c</span>是没有用到索引效果的<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">></span><span class="token number">7</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">---- b范围值，断点，阻塞了c的索引</span><span class="token number">a</span>用到了，<span class="token number">b</span>也用到了，<span class="token number">c</span>没有用到，这个地方<span class="token number">b</span>是范围值，也算断点，只不过自身用到了索引<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--- 联合索引必须按照顺序使用，并且需要全部使用</span>因为<span class="token number">a</span>索引没有使用，所以这里 <span class="token number">bc</span>都没有用上索引效果<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">></span><span class="token number">4</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">7</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token number">a</span>用到了  <span class="token number">b</span>没有使用，<span class="token number">c</span>没有使用<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">b</span><span class="token punctuation">;</span><span class="token number">a</span>用到了索引，<span class="token number">b</span>在结果排序中也用到了索引的效果，<span class="token number">a</span>下面任意一段的<span class="token number">b</span>是排好序的<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTest  <span class="token keyword">where</span> <span class="token number">a</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c</span><span class="token punctuation">;</span><span class="token number">a</span>用到了索引，但是这个地方<span class="token number">c</span>没有发挥排序效果，因为中间断点了，使用 <span class="token keyword">explain</span> 可以看到 filesort<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mytable <span class="token keyword">where</span> <span class="token number">b</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">;</span><span class="token number">b</span>没有用到索引，排序中<span class="token number">a</span>也没有发挥索引效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SQL语句书写规则&quot;&gt;&lt;a href=&quot;#SQL语句书写规则&quot; class=&quot;headerlink&quot; title=&quot;SQL语句书写规则&quot;&gt;&lt;/a&gt;SQL语句书写规则&lt;/h2&gt;&lt;p&gt;1：SQL语句中出现的所有表名、表别名、字段名、序列等数据库对象都应&lt;strong&gt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="sql" scheme="https://arthurjq.com/tags/sql/"/>
    
      <category term="index" scheme="https://arthurjq.com/tags/index/"/>
    
      <category term="数据库优化" scheme="https://arthurjq.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>timestamp时间格式</title>
    <link href="https://arthurjq.com/2021/03/03/database/timestamp/"/>
    <id>https://arthurjq.com/2021/03/03/database/timestamp/</id>
    <published>2021-03-03T11:10:35.000Z</published>
    <updated>2021-03-04T05:09:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="timestamp和datetime"><a href="#timestamp和datetime" class="headerlink" title="timestamp和datetime"></a>timestamp和datetime</h2><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>timestamp</td><td>4个字节</td><td>支持默认值</td><td>支持自动更新</td><td>时间范围1970–</td></tr><tr><td>datetime</td><td>8个字节</td><td>不支持</td><td>不支持</td><td>时间范围1900 –</td></tr></tbody></table><p>以前的一些项目，所有表字段里都会有个update_time字段，设置为根据时间戳更新</p><p>以下timestamp介绍转载：<a href="https://www.cnblogs.com/csl0910/p/4956815.html" target="_blank" rel="noopener">https://www.cnblogs.com/csl0910/p/4956815.html</a></p><h2 id="TIMESTAMP的变体（用法）"><a href="#TIMESTAMP的变体（用法）" class="headerlink" title="TIMESTAMP的变体（用法）"></a>TIMESTAMP的变体（用法）</h2><p>TIMESTAMP时间戳在创建的时候可以有多重不同的特性，如：</p><p>1.在<strong>创建新记录和修改现有记录</strong>的时候都对这个数据列刷新：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.在创建新记录的时候把这个字段设置为当前时间，但<strong>以后修改时，不再刷新它</strong>：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.在创建新记录的时候<strong>把这个字段设置为0</strong>，以后修改时刷新它：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在创建新记录的时候<strong>把这个字段设置为给定值</strong>，以后修改时刷新它：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token string">'yyyy-mm-dd hh:mm:ss'</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>MySQL目前不支持列的Default 为函数的形式,如达到你某列的默认值为当前更新日期与时间的功能,你可以使用TIMESTAMP列类型</strong></p><h2 id="timestamp列类型"><a href="#timestamp列类型" class="headerlink" title="timestamp列类型"></a>timestamp列类型</h2><p>TIMESTAMP值可以从<strong>1970</strong>的某时的开始一直到<strong>2037</strong>年，精度为一秒，其值作为数字显示。<br>TIMESTAMP值显示尺寸的格式如下表所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+----------------+</span><span class="token operator">|</span> 列类型　　　　<span class="token operator">|</span> 显示格式　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">|</span> YYYYMMDDHHMMSS <span class="token operator">|</span>　<span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> YYMMDDHHMMSS　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> YYMMDDHHMM　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YYYYMMDD　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YYMMDD　　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YYMM　　　　　 <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>　<span class="token operator">|</span> YY　　　　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“完整”TIMESTAMP格式是14位，但TIMESTAMP列也可以用更短的显示尺寸，创造最常见的显示尺寸是6、8、12、和14。</p><p>你可以在创建表时指定一个任意的显示尺寸，但是定义列长为0或比14大均会被强制定义为列长14。<br><strong>列长在从1～13范围的奇数值尺寸均被强制为下一个更大的偶数</strong>：</p><pre class="line-numbers language-sql"><code class="language-sql">定义字段长度　　 强制字段长度<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>　<span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的TIMESTAMP列都有同样的存储大小，使用被指定的时期时间值的完整精度（14位）存储合法的值不考虑显示尺寸。不合法的日期，将会被强制为0存储</p><h3 id="含意"><a href="#含意" class="headerlink" title="含意"></a>含意</h3><ol><li><p>虽然你建表时定义了列TIMESTAMP（8），但在你进行数据插入与更新时TIMESTAMP列<strong>实际上保存了14位的数据</strong>（包括年月日时分秒），只不过在你进行查询时MySQL返回给你的是8位的年月日数据。如果你使用ALTER TABLE拓宽一个狭窄的TIMESTAMP列，以前被“隐蔽”的信息将被显示。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span><span class="token string">'id'</span> <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token string">'date1'</span><span class="token keyword">TIMESTAMP</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token keyword">SET</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114</span>　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> test CHANGE <span class="token string">'date1'</span> <span class="token string">'date1'</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以使用TIMESTAMP列类型自动地用当前的日期和时间标记INSERT或UPDATE的操作。</p></li><li><p>同样，<strong>缩小一个TIMESTAMP列不会导致信息失去</strong>，除了感觉上值在显示时，较少的信息被显示出。</p></li><li><p>尽管TIMESTAMP值被存储为完整精度，直接操作存储值的唯一函数是<code>UNIX_TIMESTAMP()</code>；由于MySQL返回 TIMESTAMP列的列值是进过格式化后的检索的值，这意味着你可能不能使用某些函数来操作TIMESTAMP列（例如<code>HOUR()或 SECOND()</code>），除非TIMESTAMP值的相关部分被包含在格式化的值中。<br>例如，一个TIMESTAMP列只有被定义为TIMESTAMP（10）以上时，TIMESTAMP列的HH部分才会被显示，因此在更短的TIMESTAMP值上使用<code>HOUR()</code>会产生一个不可预知的结果。</p></li><li><p>不合法TIMESTAMP值被变换到适当类型的“零”值（00000000000000）。（DATETIME,DATE亦然）</p></li></ol><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>如果你有多个TIMESTAMP列，只有第一个自动更新。自动更新第一个TIMESTAMP列在下列任何条件下发生：</p><ol><li>列值没有明确地在一个INSERT或LOAD DATA INFILE语句中指定。</li><li>列值没有明确地在一个UPDATE语句中指定且另外一些的列改变值。（注意一个UPDATE设置一个列为它已经有的值，这将不引起TIMESTAMP列被更新，因为如果你设置一个列为它当前的值，MySQL为了效率而忽略更改）</li><li>你明确地设定TIMESTAMP列为NULL</li><li>除第一个以外的TIMESTAMP列也可以设置到当前的日期和时间，只要将列设为NULL，或NOW（）。</li></ol><p>建两个timestamp字段后执行insert操作：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span> <span class="token string">'id'</span> <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token string">'date1'</span> <span class="token keyword">TIMESTAMP</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'date2'</span> <span class="token keyword">TIMESTAMP</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token punctuation">(</span>id<span class="token punctuation">,</span> date1<span class="token punctuation">,</span> date2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span> date2　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">20021114093724</span> <span class="token operator">|</span> <span class="token number">00000000000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一条指令因设date1、date2为NULL,所以date1、date2值均为当前时间第二条指令因没有设date1、date2列值，第一 个TIMESTAMP列date1为更新为当前时间，而二个TIMESTAMP列date2因日期不合法而变为“00000000000000”</p><p>然后进行update操作：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span> date2　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span>　<span class="token number">3</span> <span class="token operator">|</span> <span class="token number">20021114094009</span> <span class="token operator">|</span> <span class="token number">20021114093723</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">20021114093724</span> <span class="token operator">|</span> <span class="token number">00000000000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条指令没有明确地设定date2的列值，所以第一个TIMESTAMP列date1将被更新为当前时间</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>date1<span class="token operator">=</span>date1<span class="token punctuation">,</span>date2<span class="token operator">=</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　<span class="token operator">|</span> date2　　　　　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">20021114094009</span> <span class="token operator">|</span> <span class="token number">20021114094320</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">20021114093724</span> <span class="token operator">|</span> <span class="token number">00000000000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+----------------+----------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条指令因设定date1=date1，所以在更新数据时date1列值并不会发生改变而因设定date2=NOW（），所以在更新数据时date2列值会被更新为当前时间此指令等效为：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> test <span class="token keyword">SET</span> id<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>date1<span class="token operator">=</span>date1<span class="token punctuation">,</span>date2<span class="token operator">=</span><span class="token boolean">NULL</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因MySQL返回的 TIMESTAMP 列为数字显示形式，你可以用<code>DATE_FROMAT()</code>函数来格式化 TIMESTAMP 列，如下所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date1<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date1<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date2<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d %H:%i:%s'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date2 <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　　　　　 <span class="token operator">|</span> date2　　　　　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+---------------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">09</span>:<span class="token number">40</span>:<span class="token number">09</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">09</span>:<span class="token number">43</span>:<span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">09</span>:<span class="token number">37</span>:<span class="token number">24</span> <span class="token operator">|</span> <span class="token number">0000</span><span class="token operator">-</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+---------------------+---------------------+</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date1<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date1<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span>date2<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">As</span> date2 <span class="token keyword">FROM</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> date1　　　 <span class="token operator">|</span> date2　　　 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------------+</span><span class="token operator">|</span>　<span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span>　<span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span>　<span class="token operator">|</span><span class="token operator">|</span>　<span class="token number">2</span> <span class="token operator">|</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">14</span>　<span class="token operator">|</span> <span class="token number">0000</span><span class="token operator">-</span><span class="token number">00</span><span class="token operator">-</span><span class="token number">00</span>　<span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在某种程度上，你可以把一种日期类型的值赋给一个不同的日期类型的对象。</p><p>然而，而尤其注意的是：值有可能发生一些改变或信息的损失：</p><ol><li>如果你将一个DATE值赋给一个DATETIME或TIMESTAMP对象，结果值的时间部分被设置为’00:00:00’，因为DATE值中不包含有时间信息。　</li><li>如果你将一个DATETIME或TIMESTAMP值赋给一个DATE对象，结果值的时间部分被删除，因为DATE类型不存储时间信息。</li><li>尽管DATETIME, DATE和TIMESTAMP值全都可以用同样的格式集来指定，但所有类型不都有同样的值范围。</li></ol><p>例如，<strong>TIMESTAMP值不能比1970早，也不能比2037晚，这意味着，一个日期例如’1968-01-01’，当作为一个 DATETIME或DATE值时它是合法的，但它不是一个正确TIMESTAMP值！并且如果将这样的一个对象赋值给TIMESTAMP列，它将被变换为 0</strong>。  </p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ol><li><p><strong>允许作为字符串指定值的宽松格式能被欺骗。</strong>例如，因为“:”分隔符的使用，值’10:11:12’可能看起来像时间值，但是如果在一个日期中使用，上下文将作为年份被解释成’2010-11-12’。值’10:45:15’将被变换到’0000-00-00’，因为’45’不是一个合法的月份。</p></li><li><p><strong>以2位数字指定的年值是模糊的，因为世纪是未知的。</strong>MySQL使用下列规则解释2位年值：在00-69范围的年值被变换到2000-2069。 在范围70-99的年值被变换到1970-1999。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;timestamp和datetime&quot;&gt;&lt;a href=&quot;#timestamp和datetime&quot; class=&quot;headerlink&quot; title=&quot;timestamp和datetime&quot;&gt;&lt;/a&gt;timestamp和datetime&lt;/h2&gt;&lt;table&gt;
&lt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://arthurjq.com/tags/mysql/"/>
    
      <category term="数据库优化" scheme="https://arthurjq.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>事务不生效</title>
    <link href="https://arthurjq.com/2021/03/02/java/transaction-no-effect/"/>
    <id>https://arthurjq.com/2021/03/02/java/transaction-no-effect/</id>
    <published>2021-03-02T11:51:15.000Z</published>
    <updated>2021-03-11T08:44:28.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>支付模块是事务操作，如果在支付逻辑执行的过程中有异常，需要做回滚。比如你支付—订单表里插入了订单数据—成功—-然后调起支付失败，此时需要回滚订单表数据。</p><h2 id="transactional注解不生效"><a href="#transactional注解不生效" class="headerlink" title="transactional注解不生效"></a>transactional注解不生效</h2><p>transactional注解什么时候不生效？</p><p>1、检查你的方法是不是public的。@Transactional注解只能应用到public可见度的方法上，如果应用在protected、private或者package可见度的方法上，也不会报错，不过事务设置不会起作用。</p><p>2、检查你的异常类型是不是unchecked异常。默认情况下，Spring会对unchecked异常进行事务回滚，如果是checked异常则不回滚。如空指针异常、算术异常等，会被回滚；文件读写、网络出问题，spring就没法回滚了。如果你想check异常也回滚怎么办，注解上面写明异常类型即可：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类型的还有norollbackFor，自定义不回滚的异常。</p><p>3、是否在service中进行了try…catch的操作，由于已经被捕获异常，故事务也不会回滚。如果非要在service中try…catch异常，又想要事务回滚，可在catch块中抛出运行时异常：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法有个不足之处，就是不能在catch块中存在return子句，若想捕获异常时回滚事务，同时返回提示信息，可以使用手动回滚：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    TransactionAspectSupport<span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ERROR_MESSAGE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另外说明一下，在controller层捕获了service层的异常，事务还会回滚吗？答案是会的，只要你service层抛出了异常，并且你加的事务可以处理这个异常，也就是rollbackFor = Exception.class这个符合你抛出的异常，不管外面有没有捕获都可以回滚。</p></blockquote><p>4、是否开启了对注解的解析：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、数据库引擎要支持事务，如果是mysql，注意表要使用支持事务的引擎，比如innodb，如果是myisam，事务是不起作用的。</p><p>6、spring是否扫描到你这个包，如下是扫描到org.test下面的包：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.test<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、检查是不是同一个类中的方法调用（如A方法无@Transactional注解，调用了一个有@Transactional注解的方法），这样事务也是不生效的。</p><p>原因：我们知道spring事务的原理是采用aop,其实质是给你的service对象另外造了一个代理对象。这个代理对象和你的service对象有同样的方法名,但是额外在你的 方法前后加了对事务的处理,处理完后再通过this调用你自己service对象的相关方法。<br>所以,当调用方是处于你的service的外面,你拿到的其实不是你写的service的实例,是spring加上事务处理特性后的代理对象,这样子调用事务是能够生效的。<br>但是,你用service 内部方法调用注解了@Transactional的方法, <strong>内部方法得通过this调用这个注解了@Transactional的方法</strong>,此时this对象并不是spring的代理对象,而是你自己写的service的实例.而你自己写的service实例的所有方法都没有事务特性,所以事务必然不生效了。</p><p>8、请确保你的业务和事务入口在<strong>同一个线程</strong>里，否则事务也是不生效的，比如下面代码事务不生效：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>User user1<span class="token punctuation">,</span> User user2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">saveError</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>数据库不支持事务</li><li>注解放在了私有方法上</li><li>类内部调用，类里面使用this调用本类方法（this通常省略）</li><li>未捕获异常</li><li>没有被Spring管理（没加@Service等注解）</li><li>多线程场景</li></ol><p>这些场景都会导致@Transactional失效</p><h2 id="Transactional注解的使用场景和注意点"><a href="#Transactional注解的使用场景和注意点" class="headerlink" title="Transactional注解的使用场景和注意点"></a>Transactional注解的使用场景和注意点</h2><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>分布式事务，能避免尽量避免，使用分布式事务中间件不是变慢这么简单，比如你用了事务包围里的一个函数是有一个数据库的写操作，spring会通过jdbc进行锁表的，而此时你又要RPC去调用其他服务，其他服务同样又要都这个表进行写入操作，此时就会死锁。所以如果是分布式事务的话，能避免就避免，因为不同的service是不同的人做，设计到的数据读写，你不是很清楚的情况下，很容易这样的。</p><h3 id="单一表写操作"><a href="#单一表写操作" class="headerlink" title="单一表写操作"></a>单一表写操作</h3><p>单一表的写操作。。就没必要加事务了。。会降低性能的，多表才需要加事务</p><p>mysql会帮你做好并发处理的，单表操作，对于程序逻辑而言是原子性的，不用加事务处理</p><blockquote><p>pagehelper github上有给这个中间件，分页用的，很好用，SQL拦截的</p></blockquote><p>待补充。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;支付模块是事务操作，如果在支付逻辑执行的过程中有异常，需要做回滚。比如你支付—订单表里插入了订单数据—成功—-然后调起支付失败，此时需要回滚
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="事务" scheme="https://arthurjq.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="annotation" scheme="https://arthurjq.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Redis的cache</title>
    <link href="https://arthurjq.com/2021/03/01/database/redis-cache/"/>
    <id>https://arthurjq.com/2021/03/01/database/redis-cache/</id>
    <published>2021-03-01T08:56:15.000Z</published>
    <updated>2021-03-03T13:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思考步骤"><a href="#思考步骤" class="headerlink" title="思考步骤"></a>思考步骤</h2><ol><li><p>评估是否真的需要缓存</p><p>1.1 使用场景？有返回时间要求吗？</p><p>1.2 是否频繁？落到数据库压力大吗？</p><p>1.3 计算难度有多大？</p></li><li><p>真的需要缓存了</p><p>2.1 数据粒度？<br>2.2 数据类型？<br>2.3 数据大小？<br>2.4 数据有效时长？<br>2.5 加载进缓存的时机？<br>2.6 删除缓存的时机？<br>2.7 更新缓存的时机？</p></li><li><p>根据多个缓存对缓存进行操作</p><p>3.1 缓存值可信吗？</p><p>3.2 为什么要根据缓存值对缓存操作？想要的是过程值还是结果值？</p><p>3.3 考虑过拿第一个缓存成功，拿第二个缓存成功，但是第一个缓存在第二个缓存操作的时候失效的情况和后果吗？</p><p>3.4 缓存联动管理是否困难？</p></li></ol><h2 id="简易操作缓存方案"><a href="#简易操作缓存方案" class="headerlink" title="简易操作缓存方案"></a>简易操作缓存方案</h2><ol><li>使用饿汉模式进行管理。只有在要读的时候，才进行缓存加载，其他操作删除相关缓存。</li><li>缓存时间设置不宜过长，5分钟内为宜（因为现在业务没什么对数据库压力特别大、计算又很复杂的时候）</li><li>不同Key的缓存失效时间尽量随机</li><li>考虑缓存穿透问题</li><li>不要使用redis事务</li><li>先进行数据库操作，再操作缓存</li><li>数据粒度要很大时，借助定时任务定期刷新内存</li><li>缓存中找不到时，应该去查找数据库中是否存在，记得用一定策略保证击穿问题得到解决</li><li>用service屏蔽缓存的直接操作，避免造成缓存管理困难（因为service的操作一定可以反映到数据库上，直接操作缓存不一定能落到数据库）</li></ol><p>ps: 数据一致性可以借助<strong>数据库</strong>事务进行实现，保证最坏结果是一次最近更新的值</p><h2 id="补充规范"><a href="#补充规范" class="headerlink" title="补充规范"></a>补充规范</h2><p>1：key定义的规范，这个是用的时候比较容易出错的，重名，和系统关键字冲突，长度等，都需要给出规范来<br>2：value上，应该控制数据的长度，比如防止一些大数据类型，redis本来是提速的，不要因为数据长度影响了自身性能，另外就是合理的使用数据类型，节省存储提升性能，比如能整型的就不要字符串型<br>3：提前评估生命周期，必须保证每个变量都有过期时间；需要对数据进行手动清理，打散过期时间，防止雪崩<br>4：尽可能只使用set和get，避免使用其他命令，特别是flushXXX<br>5：尽量不要使用事务，事务逻辑尽量通过对应的框架实现，包括分布式事务seata<br>6：做好防穿透，击穿，雪崩的常规逻辑处理，比如增加有效数据校验，防止数据库压力过大，增加互斥锁，降低并发，打乱过期时间等。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>原本是用RedisTemplate实现</p><p>建议每个函数还可以重载一个默认值的函数，不然每个函数都要写入太多的参数，一般除了KEY值外，其他的值，都可以根据规范来给一个默认的</p><p>还有封装的话最好用原生提供的jedis：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/redis-cache-1.png" alt></p><p>就是从redis读取对应的key的值，使用100次耗费的时长，单位毫秒</p><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><p>属于只读缓存方案，1.就是删改直接删缓存，2.增加直接加入数据库。3.查时到缓存取，没有再从数据库中加载，再放到缓存</p><p>回复：数据库那块不属于缓存工具类的职责，不用写</p><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思考步骤&quot;&gt;&lt;a href=&quot;#思考步骤&quot; class=&quot;headerlink&quot; title=&quot;思考步骤&quot;&gt;&lt;/a&gt;思考步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;评估是否真的需要缓存&lt;/p&gt;
&lt;p&gt;1.1 使用场景？有返回时间要求吗？&lt;/p&gt;
&lt;p&gt;1.2 是否频繁？
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="事务" scheme="https://arthurjq.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="redis" scheme="https://arthurjq.com/tags/redis/"/>
    
      <category term="cache" scheme="https://arthurjq.com/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>Lucene 查询原理</title>
    <link href="https://arthurjq.com/2021/02/25/database/lucene/"/>
    <id>https://arthurjq.com/2021/02/25/database/lucene/</id>
    <published>2021-02-25T09:44:37.000Z</published>
    <updated>2021-02-26T07:27:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Lucene 是一个基于 Java 的全文信息检索工具包，目前主流的搜索系统Elasticsearch和solr都是基于lucene的索引和搜索能力进行。想要理解搜索系统的实现原理，就需要深入lucene这一层，看看lucene是如何存储需要检索的数据，以及如何完成高效的数据检索。</p><p>转载至阿里云：<a href="https://zhuanlan.zhihu.com/p/35814539" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35814539</a>  |   <a href="https://blog.csdn.net/baichoufei90/article/details/111303223" target="_blank" rel="noopener">https://blog.csdn.net/baichoufei90/article/details/111303223</a></p><h2 id="Lucene数据模型"><a href="#Lucene数据模型" class="headerlink" title="Lucene数据模型"></a>Lucene数据模型</h2><p>Lucene中包含了四种基本数据类型，分别是：</p><ol><li><strong>Index</strong>：索引，由很多的Document组成。</li><li><strong>Document</strong>：由很多的Field组成，是Index和Search的最小单位。</li><li><strong>Field</strong>：由很多的Term组成，包括Field Name和Field Value。</li><li><strong>Term</strong>：由很多的字节组成。一般将Text类型的Field Value分词之后的每个最小单元叫做Term。</li></ol><p>在lucene中，<strong>读写路径是分离的</strong>。写入的时候创建一个IndexWriter，而读的时候会创建一个IndexSearcher。</p><p>下面是一个简单的代码示例，如何使用lucene的IndexWriter建索引以及如何使用indexSearch进行搜索查询。</p><pre class="line-numbers language-java"><code class="language-java">Analyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Store the index in memory:</span>    Directory directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RAMDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// To store an index on disk, use this instead:</span>    <span class="token comment" spellcheck="true">//Directory directory = FSDirectory.open("/tmp/testindex");</span>    IndexWriterConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>    IndexWriter iwriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    Document doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String text <span class="token operator">=</span> <span class="token string">"This is the text to be indexed."</span><span class="token punctuation">;</span>    doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token string">"fieldname"</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> TextField<span class="token punctuation">.</span>TYPE_STORED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iwriter<span class="token punctuation">.</span><span class="token function">addDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>    iwriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Now search the index:</span>    DirectoryReader ireader <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>    IndexSearcher isearcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>ireader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Parse a simple query that searches for "text":</span>    QueryParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">"fieldname"</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>    Query query <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ScoreDoc<span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> isearcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//assertEquals(1, hits.length);</span>    <span class="token comment" spellcheck="true">// Iterate through the results:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Document hitDoc <span class="token operator">=</span> isearcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>hits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hitDoc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fieldname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ireader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    directory<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这个示例中可以看出，lucene的读写有各自的操作类。本文重点关注读逻辑，在使用IndexSearcher类的时候，需要一个DirectoryReader和QueryParser：</p><ol><li>DirectoryReader需要对应写入时候的Directory实现。</li><li>QueryParser主要用来解析你的查询语句，例如你想查 “A and B”，lucene内部会有机制解析出是term A和term B的交集查询。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-8.png" alt></p><ul><li>虚线箭头（a、b、c、d）表示<strong>写索引</strong>的主要过程</li><li>实线箭头（1-9）表示<strong>查询</strong>的主要过程</li></ul><p>Lucene 中的主要模块及模块说明如下：</p><ol><li>analysis：主要负责词法分析及语言处理，也就是我们常说的<strong>分词</strong>，通过该模块可最终形成存储或者搜索的最小单元 Term。</li><li>index 模块：主要负责<strong>索引的创建工作</strong>。</li><li>store 模块：主要负责<strong>索引的读写</strong>，主要是对文件的一些操作，其主要目的是抽象出和平台文件系统无关的存储。</li><li>queryParser 模块：主要负责<strong>语法分析</strong>，把我们的查询语句生成 Lucene 底层可以识别的条件。</li><li>search 模块：主要负责<strong>对索引的搜索工作</strong>。</li><li>similarity 模块：主要负责<strong>相关性打分和排序的实现</strong></li></ol><h2 id="Lucene-查询过程"><a href="#Lucene-查询过程" class="headerlink" title="Lucene 查询过程"></a>Lucene 查询过程</h2><p>在lucene中查询是基于segment。每个segment可以看做是一个独立的subindex，在建立索引的过程中，lucene会不断的flush内存中的数据持久化形成新的segment。多个segment也会不断的被merge成一个大的segment，在老的segment还有查询在读取的时候，不会被删除，没有被读取且被merge的segement会被删除。这个过程类似于LSM数据库的merge过程。下面我们主要看在一个segment内部如何实现高效的查询。</p><p>为了方便大家理解，我们以人名字，年龄，学号为例，如何实现查某个名字（有重名）的列表。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-1.jpg" alt></p><p>在lucene中为了查询 name=XXX 的这样一个条件，会建立基于name的倒排链。以上面的数据为例，倒排链如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-2.png" alt></p><p>如果我们还希望按照年龄查询，例如想查 年龄=18 的列表，我们还可以建立另一个倒排链：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-3.png" alt></p><p>在这里，Alice，Alan，18，这些都是term。所以<strong>倒排本质上就是基于term的反向列表</strong>，方便进行属性查找。到这里我们有个很自然的问题，如果term非常多，如何快速拿到这个倒排链呢？在lucene里面就引入了term dictonary的概念，也就是term的字典。term字典里我们可以按照term进行排序，那么用一个二分查找就可以定为这个term所在的地址。这样的复杂度是logN，在term很多，内存放不下的时候，效率还是需要进一步提升。可以用一个hashmap，当有一个term进入，hash继续查找倒排链。这里hashmap的方式可以看做是term dictionary的一个index。 从lucene4开始，为了方便实现rangequery或者前缀，后缀等复杂的查询语句，lucene使用FST数据结构来存储term字典，下面就详细介绍下FST的存储结构。</p><h2 id="FST"><a href="#FST" class="headerlink" title="FST"></a>FST</h2><p>我们就用Alice和Alan这两个单词为例，来看下FST的构造过程。首先对所有的单词做一下排序为“Alice”，“Alan”。</p><ol><li><p>插入“Alan”</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-4.png" alt></p></li><li><p>插入“Alice”</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-5.jpg" alt></p></li></ol><p>这样你就得到了一个<strong>有向无环图</strong>，有这样一个数据结构，就可以很快查找某个人名是否存在。FST在单term查询上可能相比hashmap并没有明显优势，甚至会慢一些。但是在范围，前缀搜索以及压缩率上都有明显的优势。</p><p>在通过FST定位到倒排链后，有一件事情需要做，就是倒排链的合并。因为查询条件可能不止一个，例如上面我们想找 name= “alan” and age = “18” 的列表。lucene是如何实现倒排链的合并呢。这里就需要看一下倒排链存储的数据结构</p><h2 id="SkipList"><a href="#SkipList" class="headerlink" title="SkipList"></a>SkipList</h2><p>为了能够快速查找docid，lucene采用了SkipList这一数据结构。SkipList有以下几个特征：</p><ol><li>元素排序的，对应到我们的倒排链，lucene是按照docid进行排序，从小到大。</li><li>跳跃有一个固定的间隔，这个是需要建立SkipList的时候指定好，例如下图以间隔是3</li><li>SkipList的层次，这个是指整个SkipList有几层</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-6.jpg" alt></p><p>有了这个SkipList以后比如我们要查找docid=12，原来可能需要一个个扫原始链表，1，2，3，5，7，8，10，12。有了SkipList以后先访问第一层看到是然后大于12，进入第0层走到3，8，发现15大于12，然后进入原链表的8继续向下经过10和12。</p><p>SkipList本质上是在有序的链表上实现实现二分查找，它能有效的提升链表的查找效率，其时间复杂度为O(logn)（其中n为链表长度）。简单说SkipList优化了Postings的随机查找的性能问题。</p><p>SkipList的节点存储了三部分数据：</p><ol><li>当前节点指向Block的信息，是关于Block本身的信息；</li><li>指向下层的索引；</li><li>存储freq和norm的信息，它被封装在Impact里面。</li></ol><p>Impact结构仅是 &lt;freq, norm&gt; 的键值对，与文档无关，在SkipList的索引节点中。Impacts表示一系列Impact结构，用有序的TreeSet存储。这里强调的是Impact并没有与具体文档关联，其次按freq和norm作为主键去重。也就是Impacts代表了该索引节点指向数据点以及之前所有数据节点所包含的文档得分的分布。</p><p>如果此索引节点中最大的Impact都小于Scorer的水位线，那么此节点的范围内的所有节点都不需要再进入Scorer评分程序，在TOP_SCORE模式下。</p><p>实际上SkipList的性能提升是通过在链表上加上多级索引获得的，所以说它属于<strong>空间换时间</strong>的做法，在索引时牺牲小量空间换取在搜索时的性能提升。而层级越高，索引的步长越短，构建索引的空间代价也会越高。这也解释了Lucene为什么要采用8个Block作为步长，虽然它的查询性能相比会差一些，但是需要的空间也缩减少n/8，是一种存储空间和性能的折中方案。</p><h2 id="倒排结构图解"><a href="#倒排结构图解" class="headerlink" title="倒排结构图解"></a>倒排结构图解</h2><p>有了FST和SkipList的介绍以后，我们大体上可以画一个下面的图来说明lucene是如何实现整个倒排结构的：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-7.jpg" alt></p><p>有了这张图，我们可以理解为什么基于lucene可以快速进行倒排链的查找和docid查找，下面就来看一下有了这些后如何进行倒排链合并返回最后的结果。</p><h2 id="倒排合并"><a href="#倒排合并" class="headerlink" title="倒排合并"></a>倒排合并</h2><p>假如我们的查询条件是name = “Alice”，那么按照之前的介绍，首先在term字典中定位是否存在这个term，如果存在的话进入这个term的倒排链，并根据参数设定返回分页返回结果即可。这类查询，在数据库中使用二级索引也是可以满足，那lucene的优势在哪呢。</p><p>假如我们有多个条件，例如我们需要按名字或者年龄单独查询，也需要进行组合 name = “Alice” and age = “18”的查询，那么使用传统二级索引方案，你可能需要建立两张索引表，然后分别查询结果后进行合并，这样如果age = 18的结果过多的话，查询合并会很耗时。那么在lucene这两个倒排链是怎么合并呢。</p><p>假如我们有下面三个倒排链需要进行合并。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/lucene-9.png" alt></p><p>在lucene中会采用下列顺序进行合并：</p><ol><li>在termA开始遍历，得到第一个元素docId=1</li><li>Set currentDocId=1</li><li>在termB中 search（currentDocId） = 1 （返回大于等于currentDocId的一个doc，这一步搜索时就会进行SkipList数据跳过）,<ol><li>因为currentDocId ==search结果1，继续</li><li>如果currentDocId 和search返回的不相等，则执行2，然后继续（执行2是什么意思。。。）</li></ol></li><li>到termC后搜索结果依然符合，返回结果</li><li>Set currentDocId = termC.nextItem = 2</li><li>然后继续步骤3 依次循环。直到某个倒排链到末尾。</li></ol><blockquote><p>这里有点看不明白，留个坑</p></blockquote><p>整个合并步骤我可以发现，如果某个链很短，会大幅减少比对次数，并且由于SkipList结构的存在，在某个倒排中定位某个docid的速度会比较快不需要一个个遍历（该例子所需的时间比完整遍历三个posting list要快得多，但是前提是每个list需要使用SkipList独有的Advance操作）。可以很快的返回最终的结果。从倒排的定位，查询，合并整个流程组成了lucene的查询过程，和传统数据库的索引相比，lucene合并过程中的优化减少了读取数据的IO，倒排合并的灵活性也解决了传统索引较难支持多条件查询的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Lucene 是一个基于 Java 的全文信息检索工具包，目前主流的搜索系统Elasticsearch和solr都是基于lucene的索引和
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="elasticsearch" scheme="https://arthurjq.com/tags/elasticsearch/"/>
    
      <category term="lucene" scheme="https://arthurjq.com/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 集群架构学习</title>
    <link href="https://arthurjq.com/2021/02/25/database/es/"/>
    <id>https://arthurjq.com/2021/02/25/database/es/</id>
    <published>2021-02-25T02:30:05.000Z</published>
    <updated>2021-03-16T12:49:41.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch-集群架构"><a href="#Elasticsearch-集群架构" class="headerlink" title="Elasticsearch 集群架构"></a>Elasticsearch 集群架构</h2><p><strong>转载至阿里云</strong>：<a href="https://zhuanlan.zhihu.com/p/32990496" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32990496</a></p><p>Elasticsearch的详细介绍可以到<a href="https://link.zhihu.com/?target=https%3A//www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">官网</a>查看。我们先来看一下Elasticsearch中几个关键概念：</p><ol><li><strong>节点</strong>（Node）：<strong>物理</strong>概念，一个运行的Elasticearch实例，一般是一台机器上的一个进程。</li><li><strong>索引</strong>（Index），<strong>逻辑</strong>概念，包括<strong>配置信息mapping和倒排正排数据文件</strong>，一个索引的数据文件可能会分布于一台机器，也有可能分布于多台机器。索引的另外一层意思是倒排索引文件。</li><li><strong>分片</strong>（Shard）：为了支持更大量的数据，索引一般会按某个维度分成多个部分，每个部分就是一个分片，分片被节点（Node）管理。一个节点一般会管理多个分片，这些分片可能是属于同一份索引，也有可能属于不同索引，但是为了可靠性和可用性，同一个索引的分片尽量会分布在不同节点上。分片有两种，主分片和副本分片。</li><li><strong>副本</strong>（Replica）：同一个分片（Shard）的备份数据，一个分片可能会有0个或多个副本，这些副本中的数据保证强一致或最终一致。</li></ol><p>用图形表示出来可能是这样子的：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-1.png" alt></p><ol><li>Index 1：蓝色部分，有3个shard，分别是P1，P2，P3，位于3个不同的Node中，这里<strong>没有Replica</strong>。</li><li>Index 2：绿色部分，有2个shard，分别是P1，P2，位于2个不同的Node中。并且每个shard有一个replica，分别是R1和R2。<strong>基于系统可用性的考虑，同一个shard的 primary 和 replica 不能位于同一个Node中。</strong>这里Shard1的P1和R1分别位于Node3和Node2中，如果某一刻Node2发生宕机，服务基本不会受影响，因为还有一个P1和R2都还是可用的。因为是主备架构，当主分片发生故障时，需要切换，这时候需要选举一个副本作为新主，这里除了会耗费一点点时间外，也会有丢失数据的风险。</li></ol><h2 id="建Index流程"><a href="#建Index流程" class="headerlink" title="建Index流程"></a>建Index流程</h2><p>建索引（Index）的时候，一个Doc先是经过路由规则定位到主Shard，发送这个doc到主Shard上建索引，成功后再发送这个Doc到这个Shard的副本上建索引，等副本上建索引成功后才返回成功。</p><p>在这种架构中，索引数据全部位于Shard中，主Shard和副本Shard各存储一份。当某个副本Shard或者主Shard丢失（比如机器宕机，网络中断等）时，需要将丢失的Shard在其他Node中恢复回来，这时候就需要从其他副本（Replica）全量拷贝这个Shard的所有数据到新Node上构造新Shard。这个拷贝过程需要一段时间，这段时间内只能由剩余主副本来承载流量，在恢复完成之前，整个系统会处于一个比较危险的状态，直到failover结束。</p><p>这里就体现了副本（Replica）存在的一个理由，<strong>避免数据丢失，提高数据可靠性</strong>。副本（Replica）存在的另一个理由是读请求量很大的时候，一个Node无法承载所有流量，这个时候就需要一个副本来分流查询压力，目的就是<strong>扩展查询能力</strong>。</p><h2 id="角色部署方式"><a href="#角色部署方式" class="headerlink" title="角色部署方式"></a>角色部署方式</h2><p>看看角色分工的两种不同方式：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-2.jpg" alt></p><p>Elasticsearch支持上述两种方式：</p><p><strong>混合部署</strong>（左图）：</p><ul><li><ol><li>默认方式。</li><li>不考虑 MasterNode 的情况下，还有两种Node，<strong>Data Node 和 Transport Node</strong> ，这种部署模式下，这两种不同类型Node角色都位于同一个Node中，相当于一个Node具备两种功能：Data和Transport。</li><li>当有index或者query请求的时候，请求随机（自定义）发送给任何一个Node，这台<strong>Node中会持有一个全局的路由表</strong>，通过路由表选择合适的Node，将请求发送给这些Node，然后等所有请求都返回后，合并结果，然后返回给用户。一个Node分饰两种角色。</li><li>好处就是使用极其<strong>简单</strong>，易上手，对推广系统有很大价值。最简单的场景下只需要启动一个Node，就能完成所有的功能。</li><li>缺点就是<strong>多种类型的请求会相互影响</strong>，在大集群如果某一个 Data Node 出现热点，那么就会影响途经这个Data Node的所有其他跨Node请求。如果发生故障，故障影响面会变大很多。</li><li>Elasticsearch中每个Node都需要和其余的每一个Node都保持13个连接。这种情况下，每个Node都需要和其他所有Node保持连接，而一个系统的连接数是有上限的，这样连接数就会限制集群规模。</li><li>还有就是<strong>不能支持集群的热更新</strong>。</li></ol></li></ul><p><strong>分层部署</strong>（右图）：</p><ul><li><ol><li>通过配置可以隔离开Node。</li><li>设置部分Node为Transport Node，<strong>专门用来做请求转发和结果合并</strong>。</li><li>其他Node可以设置为DataNode，<strong>专门用来处理数据</strong>。</li><li>缺点是上手复杂，需要提前设置好Transport的数量，且数量和Data Node、流量等相关，否则要么资源闲置，要么机器被打爆。</li><li>好处就是<strong>角色相互独立</strong>，不会相互影响，一般Transport Node的流量是平均分配的，很少出现单台机器的CPU或流量被打满的情况，而DataNode由于处理数据，很容易出现单机资源被占满，比如CPU，网络，磁盘等。独立开后，DataNode如果出了故障只是影响单节点的数据处理，不会影响其他节点的请求，影响限制在最小的范围内。</li><li>角色独立后，只需要Transport Node连接所有的DataNode，而DataNode则不需要和其他DataNode有连接。一个集群中DataNode的数量远大于Transport Node，这样集群的规模可以更大。另外，还可以通过分组，使Transport Node只连接固定分组的DataNode，这样Elasticsearch的连接数问题就彻底解决了。</li><li>可以<strong>支持热更新</strong>：先一台一台的升级DataNode，升级完成后再升级Transport Node，整个过程中，可以做到让用户无感知。</li></ol></li></ul><h2 id="Elasticsearch-数据层架构"><a href="#Elasticsearch-数据层架构" class="headerlink" title="Elasticsearch 数据层架构"></a>Elasticsearch 数据层架构</h2><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>Elasticsearch的Index和meta，目前支持存储在本地文件系统中，同时支持niofs，mmap，simplefs，smb等不同加载方式，性能最好的是直接将索引LOCK进内存的MMap方式。默认，Elasticsearch会自动选择加载方式，另外可以自己在配置文件中配置。这里有几个细节，具体可以看官方文档。</p><p>索引和meta数据都存在本地，会带来一个问题：当某一台机器宕机或者磁盘损坏的时候，数据就丢失了。为了解决这个问题，可以使用Replica（副本）功能。</p><h3 id="副本（Replica）"><a href="#副本（Replica）" class="headerlink" title="副本（Replica）"></a>副本（Replica）</h3><p>可以为每一个Index设置一个配置项：副本（Replicda）数，如果设置副本数为2，那么就会有3个Shard，其中一个是PrimaryShard，其余两个是ReplicaShard，这三个Shard会被Mater尽量调度到不同机器，甚至机架上，这三个Shard中的数据一样，提供同样的服务能力。</p><p>副本（Replica）的目的有三个：</p><ol><li><strong>保证服务可用性</strong>：当设置了多个Replica的时候，如果某一个Replica不可用的时候，那么请求流量可以继续发往其他Replica，服务可以很快恢复开始服务。</li><li><strong>保证数据可靠性</strong>：如果只有一个Primary，没有Replica，那么当Primary的机器磁盘损坏的时候，那么这个Node中所有Shard的数据会丢失，只能reindex了。</li><li><strong>提供更大的查询能力</strong>：当Shard提供的查询能力无法满足业务需求的时候， 可以继续加N个Replica，这样查询能力就能提高N倍，轻松增加系统的并发度。</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上面说了一些优势，这种架构同样在一些场景下会有些问题。</p><p>Elasticsearch采用的是基于本地文件系统，使用Replica保证数据可靠性的技术架构，这种架构一定程度上可以满足大部分需求和场景，但是也存在一些遗憾：</p><ol><li>Replica带来<strong>成本浪费</strong>。为了保证数据可靠性，必须使用Replica，但是当一个Shard就能满足处理能力的时候，另一个Shard的计算能力就会浪费。</li><li>Replica带来<strong>写性能和吞吐的下降</strong>。每次Index或者update的时候，需要先更新Primary Shard，更新成功后再并行去更新Replica，再加上长尾，写入性能会有不少的下降。</li><li>当出现热点或者需要紧急扩容的时候<strong>动态增加Replica慢</strong>。新Shard的数据需要完全从其他Shard拷贝，拷贝时间较长。</li></ol><p>上面介绍了Elasticsearch数据层的架构，以及副本策略带来的优势和不足，下面简单介绍了几种不同形式的分布式数据系统架构。</p><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><h3 id="第一种：基于本地文件系统的分布式系统"><a href="#第一种：基于本地文件系统的分布式系统" class="headerlink" title="第一种：基于本地文件系统的分布式系统"></a>第一种：基于本地文件系统的分布式系统</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-3.jpg" alt></p><p>上图中是一个基于本地磁盘存储数据的分布式系统。Index一共有3个Shard，每个Shard除了Primary Shard外，还有一个Replica Shard。当Node 3机器宕机或磁盘损坏的时候，首先确认P3已经不可用，重新选举R3位Primary Shard，此Shard发生主备切换。然后重新找一台机器Node 7，在Node7 上重新启动P3的新Replica。由于数据都会存在本地磁盘，此时需要将Shard 3的数据从Node 6上拷贝到Node7上。如果有200G数据，千兆网络，拷贝完需要1600秒。如果没有replica，则这1600秒内这些Shard就不能服务。</p><p>为了保证可靠性，就需要冗余Shard，会导致更多的物理资源消耗。</p><p>这种思想的另外一种表现形式是<strong>使用双集群</strong>，集群级别做备份。</p><p>在这种架构中，如果你的数据是在其他存储系统中生成的，比如HDFS/HBase，那么你还需要一个数据传输系统，将准备好的数据分发到相应的机器上。</p><p>这种架构中为了保证可用性和可靠性，需要双集群或者Replica才能用于生产环境，优势和副作用在上面介绍Elasticsearch的时候已经介绍过了，这里就就不赘述了。</p><p>Elasticsearch使用的就是这种架构方式。</p><h3 id="第二种：基于分布式文件系统的分布式系统（共享存储）"><a href="#第二种：基于分布式文件系统的分布式系统（共享存储）" class="headerlink" title="第二种：基于分布式文件系统的分布式系统（共享存储）"></a>第二种：基于分布式文件系统的分布式系统（共享存储）</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-4.png" alt></p><p>针对第一种架构中的问题，另一种思路是：<strong>存储和计算分离</strong>。</p><p>第一种思路的问题根源是数据量大，拷贝数据耗时多，那么有没有办法可以不拷贝数据？为了实现这个目的，一种思路是底层存储层使用共享存储，每个Shard只需要连接到一个分布式文件系统中的一个目录/文件即可，Shard中不含有数据，只含有计算部分。相当于每个Node中只负责计算部分，存储部分放在底层的另一个分布式文件系统中，比如<strong>HDFS</strong>。</p><p>上图中，Node 1 连接到第一个文件；Node 2连接到第二个文件；Node3连接到第三个文件。当Node 3机器宕机后，只需要在Node 4机器上新建一个空的Shard，然后构造一个新连接，连接到底层分布式文件系统的第三个文件即可，创建连接的速度是很快的，总耗时会非常短。</p><p>这种是一种典型的存储和计算分离的架构，优势有以下几个方面：</p><ol><li>在这种架构下，资源可以更加弹性，当存储不够的时候只需要扩容存储系统的容量；当计算不够的时候，只需要扩容计算部分容量。</li><li>存储和计算是独立管理的，资源管理粒度更小，管理更加精细化，浪费更少，结果就是总体成本可以更低。</li><li>负载更加突出，抗热点能力更强。一般热点问题基本都出现在计算部分，对于存储和计算分离系统，计算部分由于没有绑定数据，可以实时的扩容、缩容和迁移，当出现热点的时候，可以第一时间将计算调度到新节点上。</li></ol><p>这种架构同时也有一个不足：</p><p><strong>访问分布式文件系统的性能可能不及访问本地文件系统</strong>。在上一代分布式文件系统中，这是一个比较明显的问题，但是目前使用了各种用户态协议栈后，这个差距已经越来越小了。</p><p>HBase使用的就是这种架构方式。</p><p>Solr也支持这种形式的架构。</p><h2 id="Lucene数据模型"><a href="#Lucene数据模型" class="headerlink" title="Lucene数据模型"></a>Lucene数据模型</h2><p>Lucene中包含了四种基本数据类型，分别是：</p><ol><li>Index：索引，由很多的Document组成。</li><li>Document：由很多的Field组成，是Index和Search的最小单位。</li><li>Field：由很多的Term组成，包括Field Name和Field Value。</li><li>Term：由很多的字节组成，可以分词。</li></ol><p>上述四种类型在Elasticsearch中同样存在，意思也一样。</p><p>Lucene中存储的索引主要分为三种类型：</p><ol><li>Invert Index：<strong>倒排索引</strong>，或者简称Index，<strong>通过Term可以查询到拥有该Term的文档</strong>。可以配置为是否分词，如果分词可以配置不同的分词器。索引存储的时候有多种存储类型，分别是：<ol><li>DOCS：只存储DocID。</li><li>DOCS_AND_FREQS：存储DocID和词频（Term Freq）。</li><li>DOCS_AND_FREQS_AND_POSITIONS：存储DocID、词频（Term Freq）和位置。</li><li>DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS：存储DocID、词频（Term Freq）、位置和偏移。</li></ol></li><li>DocValues：正排索引，采用列式存储。<strong>通过DocID可以快速读取到该Doc的特定字段的值</strong>。由于是列式存储，性能会比较好。一般用于sort，agg等需要高频读取Doc字段值的场景。</li><li>Store：字段原始内容存储，同一篇文章的多个Field的Store会存储在一起，适用于一次读取少量且多个字段内存的场景，比如摘要等。</li></ol><p>Lucene中提供索引和搜索的最小组织形式是Segment，Segment中按照索引类型不同，分成了Invert Index，Doc Values和Store这三大类（还有一些辅助类，这里省略），每一类里面都是按照Doc为最小单位存储。</p><ol><li>Invert Index中存储的Key是Term，Value是Doc ID的链表；</li><li>Doc Value中Key 是Doc ID和Field Name，Value是Field Value；</li><li>Store的Key是Doc ID，Value是Filed Name和Filed Value。</li></ol><p>由于Lucene中没有主键概念和更新逻辑，所有对Lucene的更新都是Append一个新Doc，类似于一个只能Append的队列，所有Doc都被同等对等，同样的处理方式。其中的Doc由众多Field组成，没有特殊Field，每个Field也都被同等对待，同样的处理方式。</p><p>从上面介绍来看，Lucene只是提供了一个索引和查询的最基本的功能，距离一个完全可用的完整搜索引擎还有一些距离</p><h2 id="Lucene-gt-Elasticsearch"><a href="#Lucene-gt-Elasticsearch" class="headerlink" title="Lucene =&gt; Elasticsearch"></a>Lucene =&gt; Elasticsearch</h2><p>在Elasticsearch中，为了支持分布式，增加了一个系统字段<code>_routing</code>（路由），通过<code>_routing</code>将Doc分发到不同的Shard，不同的Shard可以位于不同的机器上，这样就能实现简单的分布式了。</p><p>采用类似的方式，Elasticsearch增加了<code>_id、_version、_source和_seq_no</code>等等多个系统字段，通过这些Elasticsearch中特有的系统字段可以有效解决上述的几个问题，新增的系统字段主要是下列几个：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-5.jpg" alt></p><h3 id="1-id"><a href="#1-id" class="headerlink" title="1. _id"></a>1. _id</h3><p><strong>Doc的主键</strong>，在写入的时候，可以指定该Doc的ID值，<strong>如果不指定，则系统自动生成一个唯一的UUID</strong>值。</p><p>Lucene中没有主键索引，要保证系统中同一个Doc不会重复，Elasticsearch引入了<code>_id</code>字段来实现主键。每次写入的时候都会先查询id，如果有，则说明已经有相同Doc存在了。</p><p>通过<code>_id</code>值（ES内部转换成_uid）可以唯一在Elasticsearch中确定一个Doc。</p><p>Elasticsearch中，<code>_id</code>只是一个用户级别的虚拟字段，在Elasticsearch中并不会映射到Lucene中，所以也就不会存储该字段的值。</p><p><code>_id</code>的值可以由<code>_uid</code>解析而来（<code>_uid =type + &#39;#&#39; + id</code>），Elasticsearch中会存储<code>_uid</code>。</p><h3 id="2-uid"><a href="#2-uid" class="headerlink" title="2. _uid"></a>2. _uid</h3><p>_uid的格式是：<code>type + &#39;#&#39; + id</code>。</p><p>_uid会存储在Lucene中，在Lucene中的映射关系如下：dex下可能存在多个id值相同的Doc，而6.0.0之后只支持单Type，同Index下id值是唯一的。</p><p>uid会存储在Lucene中，在Lucene中的映射关系如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-6.png" alt></p><p><code>_uid</code> <strong>只是存储了倒排Index和原文store</strong>：倒排Index的目的是可以通过<code>_id</code>快速查询到文档；原文store用来在返回的Response里面填充完整的<code>_id</code>值。</p><p>在Lucene中存储<code>_uid</code>，而不是<code>_id</code>的原因是，在6.0.0之前版本里面，<code>_uid</code>可以比<code>_id</code>表示更多的信息，比如Type。在6.0.0版本之后，同一个Index只能有一个Type，这时候Type就没多大意义了，后面Type应该会消失，那时候<code>_id</code>就会和<code>_uid</code>概念一样，到时候两者会合二为一，也能简化大家的理解。</p><h3 id="3-version"><a href="#3-version" class="headerlink" title="3. _version"></a>3. _version</h3><p>Elasticsearch中每个Doc都会有一个Version，该Version可以由用户指定，也可以由系统自动生成。如果是系统自动生成，那么每次Version都是递增1。</p><p><code>_version</code>是实时的，不受搜索的近实时性影响，原因是可以通过<code>_uid</code>从内存中versionMap或者TransLog中读取到。</p><p>Version在Lucene中也是映射为一个特殊的Field存在。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-7.png" alt></p><p>Elasticsearch中Version字段的主要目的是<strong>通过doc_id读取Version</strong>，所以Version只要存储为DocValues就可以了，类似于KeyValue存储。</p><p>Elasticsearch通过使用version来<strong>保证对文档的变更能以正确的顺序执行</strong>，避免乱序造成的数据丢失。</p><h3 id="4-source"><a href="#4-source" class="headerlink" title="4. _source"></a>4. _source</h3><p>Elasticsearch中有一个重要的概念是source，<strong>存储原始文档</strong>，也可以通过过滤设置只存储特定Field。</p><p>Source在Lucene中也是映射为了一个特殊的Field存在：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-8.png" alt></p><p>Elasticsearch中_source字段的主要目的是通过doc_id读取该文档的原始内容，所以只需要存储Store即可。</p><p><code>_source</code>其实是名为<code>_source</code>的虚拟Store Field。</p><p>Elasticsearch中使用_source字段可以实现以下功能：</p><ol><li>Update：部分更新时，需要从读取文档保存在<code>_source</code>字段中的原文，然后和请求中的部分字段合并为一个完整文档。如果没有<code>_source</code>，则不能完成部分字段的Update操作。</li><li>Rebuild：最新的版本中新增了rebuild接口，可以通过Rebuild API完成索引重建，过程中不需要从其他系统导入全量数据，而是从当前文档的<code>_source</code>中读取。如果没有<code>_source</code>，则不能使用Rebuild API。</li><li>Script：不管是Index还是Search的Script，都可能用到存储在Store中的原始内容，如果禁用了<code>_source</code>，则这部分功能不再可用。</li><li>Summary：摘要信息也是来源于<code>_source</code>字段。</li></ol><h3 id="5-seq-no"><a href="#5-seq-no" class="headerlink" title="5. _seq_no"></a>5. _seq_no</h3><p><strong>严格递增的顺序号</strong>，每个文档一个，Shard级别严格递增，保证后写入的Doc的<code>_seq_no</code>大于先写入的Doc的<code>_seq_no</code>。</p><p>任何类型的写操作，包括index、create、update和Delete，都会生成一个<code>_seq_no</code>。</p><p><code>_seq_no</code>在Primary Node中由SequenceNumbersService生成，但其实真正产生这个值的是LocalCheckpointTracker，每次递增1：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * The next available sequence number.     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> nextSeqNo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Issue the next sequence number.     *     * @return the next assigned sequence number     */</span>    <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">generateSeqNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextSeqNo<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个文档在使用Lucene的document操作接口之前，会获取到一个<code>_seq_no</code>，这个<code>_seq_no</code>会以系统保留Field的名义存储到Lucene中，文档写入Lucene成功后，会标记该seq_no为完成状态，这时候会使用当前seq_no更新local_checkpoint。</p><p>checkpoint分为 local_checkpoint 和 global_checkpoint ，主要是用于保证有序性，以及减少Shard恢复时数据拷贝的数据拷贝量，更详细的介绍可以看这篇文章：<a href="https://link.zhihu.com/?target=https%3A//www.elastic.co/blog/elasticsearch-sequence-ids-6-0" target="_blank" rel="noopener">Sequence IDs: Coming Soon to an Elasticsearch Cluster Near You</a>。</p><p><code>_seq_no</code>在Lucene中的映射：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-9.png" alt></p><p>Elasticsearch中<code>_seq_no</code>的作用有两个：</p><ol><li>通过doc_id查询到该文档的seq_no，</li><li>通过seq_no范围查找相关文档，所以也就需要存储为Index和DocValues（或者Store）。</li></ol><p>由于是在冲突检测时才需要读取文档的<code>_seq_no</code>，而且此时只需要读取<code>_seq_no</code>，不需要其他字段，这时候存储为列式存储的DocValues比Store在性能上更好一些。</p><p><code>_seq_no</code>是严格递增的，写入Lucene的顺序也是递增的，所以DocValues存储类型可以设置为Sorted。</p><p>另外，<code>_seq_no</code>的索引应该仅需要支持存储DocId就可以了，不需要FREQS、POSITIONS和分词。如果多存储了这些，对功能也没影响，就是多占了一点资源而已。</p><h3 id="6-primary-term"><a href="#6-primary-term" class="headerlink" title="6. _primary_term"></a>6. _primary_term</h3><p><code>_primary_term</code>也和<code>_seq_no</code>一样是一个整数，每当Primary Shard发生重新分配时，比如重启，Primary选举等，<code>_primary_term</code>会递增1。</p><p><code>_primary_term</code>主要是用来恢复数据时处理当多个文档的<code>_seq_no</code>一样时的冲突，避免Primary Shard上的写入被覆盖。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-10.png" alt></p><p>Elasticsearch中<code>_primary_term</code>只需要通过doc_id读取到即可，所以只需要保存为DocValues就可以了</p><h3 id="7-routing"><a href="#7-routing" class="headerlink" title="7. _routing"></a>7. _routing</h3><p><strong>路由规则</strong>，写入和查询的routing需要一致，否则会出现写入的文档没法被查到情况。</p><p>在mapping中，或者Request中可以指定按某个字段路由。默认是按照<code>_Id</code>值路由。</p><p><code>_routing</code>在Lucene中映射为：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-11.png" alt></p><p>Elasticsearch中文档级别的<code>_routing</code>主要有两个目的：</p><ol><li>可以查询到使用某种<code>_routing</code>的文档有哪些，当发生<code>_routing</code>变化时，可以对历史<code>_routing</code>的文档重新读取再Index，这个需要倒排Index。</li><li>查询到文档后，在Response里面展示该文档使用的<code>_routing</code>规则，这里需要存储为Store。</li></ol><h3 id="8-field-names"><a href="#8-field-names" class="headerlink" title="8. _field_names"></a>8. _field_names</h3><p>该字段会索引某个Field的名称，用来<strong>判断某个Doc中是否存在某个Field</strong>，用于exists或者missing请求。</p><p><code>_field_names</code>在Lucene中的映射：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/es-12.png" alt></p><p>Elasticsearch中<code>_field_names</code>的目的是查询哪些Doc的这个Field是否存在，所以<strong>只需要倒排Index</strong>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Elasticsearch-集群架构&quot;&gt;&lt;a href=&quot;#Elasticsearch-集群架构&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 集群架构&quot;&gt;&lt;/a&gt;Elasticsearch 集群架构&lt;/h2&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="elasticsearch" scheme="https://arthurjq.com/tags/elasticsearch/"/>
    
      <category term="分布式系统" scheme="https://arthurjq.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="lucene" scheme="https://arthurjq.com/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper的原理和分布式锁</title>
    <link href="https://arthurjq.com/2021/02/24/project/zookeeper/"/>
    <id>https://arthurjq.com/2021/02/24/project/zookeeper/</id>
    <published>2021-02-24T06:56:18.000Z</published>
    <updated>2021-03-13T09:42:21.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper介绍"><a href="#Zookeeper介绍" class="headerlink" title="Zookeeper介绍"></a>Zookeeper介绍</h2><p>Zookeeper是一个高性能的分布式一致系统，在分布式系统中有着广泛的应用。基于它，可以实现分布式同步、配置管理、命名空间管理等众多功能，是分布式系统中常见的基础系统。</p><p>Zookeeper主要用来解决分布式集群中应用系统的一致性问题，它有着树状结构的节点，每个节点均可存储少量的数据。同时，用户可以修改和订阅节点中的内容。分布式系统中的节点通过监控这些数据状态的变化，从而可以达到基于数据的集群管理。</p><p>从设计模式角度来看，Zookeeper是基于观察者模式实现的。可以把它作为一个信息的中心。使用该服务的生产者和消费者都以Zookeeper中的数据为基准。即：</p><ol><li>生产者可以改变Zookeeper的节点，或者节点上的数据</li><li>消费者通过订阅Zookeeper节点，从而能够在节点变动时收到通知</li></ol><p>基于这样的机制，将Zookeeper作为信息中心，便可以实现分布式系统中节点状态的最终一致性。</p><p><strong>Zookeeper具有以下特点</strong>：</p><ol><li>最终一致性：客户端不论连接到哪个Zookeeper的哪一个节点，都会收到同一份状态。这是zookeeper最重要的性能。</li><li>可靠性：Zookeeper集群具有简单、健壮、良好的性能，如果消息m被到一台server接受，那么它将被所有的server接受。</li><li>实时性：Zookeeper保证client将在一个时间间隔范围内获得server的更新信息，或者server失效的信息。但由于网络延时等原因，Zookeeper不能保证两个client能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</li><li>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</li><li>原子性：更新只能成功或者失败，没有中间状态。</li><li>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台server上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</li></ol><h2 id="zookeeper应用场景"><a href="#zookeeper应用场景" class="headerlink" title="zookeeper应用场景"></a>zookeeper应用场景</h2><ol><li><p><strong>数据发布与订阅</strong>：应用配置集中到节点上，应用启动时主动获取，并在节点上注册一个watcher，每次配置更新都会通知到应用。</p></li><li><p><strong>命名服务</strong>：分布式命名服务，创建一个节点后，<strong>节点的路径就是全局唯一</strong>的，这个路径可以作为全局名称使用。一些分布式服务框架（RPC，RMI）中的服务地址列表，通过使用命名服务，客户端应该能够根据特定的命中来获取资源的实体、服务地址和提供者信息等</p></li><li><p><strong>分布式通知/协调</strong>：不同的系统都监听同一个节点，一旦有了更新，另一个系统能够收到通知。</p></li><li><p><strong>分布式锁</strong>：Zookeeper能<strong>保证数据的强一致性</strong>，用户任何时候都可以相信集群中每个节点的数据都是相同的。一个用户创建一个节点作为锁，另一个用户检测该节点，如果存在，代表别的用户已经锁住，如果不存在，则可以创建一个节点，代表拥有一个锁。</p></li><li><p><strong>集群管理</strong>：包括集群监控和集群控制，就是监控集群机器状态，剔除集群和加入机器。zookeeper可以方便集群机器的管理，它可以实时监控znode节点的变化，一旦发现有机器挂了，该机器就会与zk断开连接，对应的临时目录节点会被删除，其他所有机器都收到通知。新机器加入类似，如图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zookeeper-1.jpg" alt></p></li><li><p><strong>配置管理</strong>：在分布式应用环境中很常见，例如同一个应用系统需要多台节点运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的.properties或者xml配置，这样非常麻烦而且容易出错。</p><p>像这样的配置信息完全可以交给 Zookeeper 来管理，<strong>将配置信息保存在 Zookeeper 的某个目录节点</strong>中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，利用watcher通知给各个客户端，从而修改配置。如图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zookeeper-2.jpg" alt></p></li></ol><h2 id="ZK的数据模型和节点类型"><a href="#ZK的数据模型和节点类型" class="headerlink" title="ZK的数据模型和节点类型"></a>ZK的数据模型和节点类型</h2><p>zk采用事务日志及快照文件的方案来落盘数据，保障数据在不丢失的情况下能快速恢复。</p><h3 id="Znode"><a href="#Znode" class="headerlink" title="Znode"></a>Znode</h3><p>Znode兼具<strong>文件和目录</strong>两种特点，可以做路径标识，也可以存储数据，并可以具有子Znode。具有增删改查等操作。</p><p>Znode具有原子性操作，读操作一次性获取与节点相关的<strong>所有数据</strong>，写操作也将替换掉节点的<strong>所有数据</strong>。每一个节点都有自己的访问控制表，这个表规定了用户的权限。</p><p>Znode存储数据大小有限制。每个Znode数据大小之多1M。</p><p>Znode通过路径引用，如同Unix中的文件路径。路径必须是绝对的，唯一的。</p><h3 id="Znode节点类型"><a href="#Znode节点类型" class="headerlink" title="Znode节点类型"></a>Znode节点类型</h3><ol><li>持久节点：一旦创建，该数据节点会一直存储在zk服务器上，即使创建该节点的客户端与服务端的会话关闭了节点也不会删除</li><li>临时节点：当创建该节点的客户端会话因超时或发生异常而关闭时，该节点也相应的在zk上被删除。</li><li>有序节点：不是一种单纯种类的节点，而是在持久节点和临时节点的基础上，增加了一个节点有序的性质。</li></ol><h2 id="Zookeeper-watch机制"><a href="#Zookeeper-watch机制" class="headerlink" title="Zookeeper watch机制"></a>Zookeeper watch机制</h2><p>客户端，可以通过在Znode上设置watch，实现实时监听znode的变化</p><p>watch事件是一个一次性的触发器，当被设置了watch的数据发生了变化的时候，则服务器将这个改变发送给设置了watch的客户端</p><ol><li>父节点的创建、修改、删除都会出发watcher事件</li><li>子节点的创建，删除会触发watcher事件</li></ol><p>一次性：一旦被触发就会移除，再次使用需要重新注册，因为每次变动都需要通知所有客户端</p><p>轻量：只通知发生了事件，不告知事件内容，减轻服务器和带宽压力</p><h3 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h3><p>watcher机制包括三个角色：客户端线程、客户端的watch manager以及zookeeper服务器</p><ol><li>客户端向zookeeper服务器注册一个watcher监听</li><li>把这个监听信息存储到客户端的WatchManager中</li><li>当zookeeper中的节点发生变化时，会通知客户端，客户端会调用相应watcher对象中的回调方法。watch回调时串行同步的（FIFO）</li></ol><h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><p>ZAB协议是为Zookeeper专门设计的一种支持崩溃恢复的原子广播协议，实现分布式数据一致性。</p><p>所有客户端的请求都写入到Leader进程中，然后，由Leader同步到其他节点Follower。</p><p>ZAB协议包括两种基本模式：<strong>崩溃恢复和消息广播</strong>。</p><h3 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h3><p>集群中所有事务请求都由Leader节点处理，Leader将客户端的事务请求转换为事务Proposal，并分发给集群中的所有Follower。</p><p>完成广播后，Leader等Follower反馈，当有过半数的Follower反馈消息后，Leader将再次向Follower广播Commit信息，确认之前的Proposal提交。（有点像2PC）</p><p>Leader节点的写入是一个两步操作，第一步是广播事务操作，第二步时广播提交操作，其中过半数指的是<strong>反馈节点数 &gt;= N/2 + 1</strong>，N是全部Follower节点数。</p><h3 id="崩溃恢复"><a href="#崩溃恢复" class="headerlink" title="崩溃恢复"></a>崩溃恢复</h3><p>以下状态进入崩溃恢复：</p><ol><li>初始化集群，刚刚启动的时候</li><li>Leader崩溃，故障宕机</li><li>Leader失去了半数机器支持，与集群中超过一半的节点断连</li></ol><p>此时开启新一轮Leader选举，选举产生的Leader会与过半的Follower进行同步，<strong>强一致性</strong>（CP），当与过半机器同步完成后，推出恢复模式，进入消息广布模式</p><p>整个Zookeeper集群的一致性保证都是在以上两个状态之间切换。</p><h3 id="ZAB节点的三种状态"><a href="#ZAB节点的三种状态" class="headerlink" title="ZAB节点的三种状态"></a>ZAB节点的三种状态</h3><p><strong>following</strong>：服从leader的命令（从节点，负责读）</p><p><strong>leading</strong>：负责协调事务（主节点）</p><p><strong>election/looking</strong>：选举状态</p><h3 id="Zxid"><a href="#Zxid" class="headerlink" title="Zxid"></a>Zxid</h3><p>ZAB协议的一个事务编号，<strong>一次事务意味着出现了一次选举</strong>，Zxid是一个64位的数字，其中低32位是一个简单的单调递增计数器，针对客户端每一个事务请求，计数器加1；而高32位则代表Leader周期年代编号。</p><p>Leader周期（epoch），每当一个新的leader选举出来，会从这个leader服务器上取出本地日志中最大事务的Zxid并从中读取epoch值，然后加1作为新的周期ID。</p><p><strong>高32位代表每代Leader的唯一性，低32位代表了每代Leader中事务的唯一性</strong>。</p><h2 id="分布式锁的流程"><a href="#分布式锁的流程" class="headerlink" title="分布式锁的流程"></a>分布式锁的流程</h2><p>分布式锁的应用上面已经讲到了，具体流程如下：</p><p>假如说有n个分布式的工作点，定义为a1,a2,a3,a4……</p><p>当某个分布式点做一件事时，先去zk某个固定位置判断（例如：/aTask/sync目录下）是否存在一个特定节点（例如节点名：lock）:</p><ol><li>如果没有，则创建该节点，即声明自己持有该锁。然后进行分布式任务，任务结束后。去删除该节点，表明释放该锁。</li><li>如果有，表明其他工作点持有了锁，不能开展分布式任务。</li></ol><h2 id="分布式锁的应用"><a href="#分布式锁的应用" class="headerlink" title="分布式锁的应用"></a>分布式锁的应用</h2><p>举一个最简单的例子：</p><p>1、假如有一个系统，能够提供报表查看功能——&gt;于是我们开发了一个单节点应用</p><p>2、该系统访量非常大，系统难以支撑——&gt;我们部署了多个节点（加入为5个），分担访问请求。于是成了分布式应用</p><p>3、老板要求增加一个每天晚上向指定邮件发送该日统计报表的功能—–&gt;应用中增加个定时线程，每天晚上半夜跑报表，发邮件</p><p>这个时候，出问题了，老板每天晚上会收到5封邮件！因为同样的程序我们部署了5个节点！怎么解决呢？</p><p><strong>方案一</strong>：有一个节点和其他节点不一样，具有每日汇总功能。</p><p>优点：开发简单。</p><p>缺点：这样，一个应用便成了两个应用。我们必须维护两份代码。一份是不具有每日汇总功能的，一份是具有每日汇总功能的。</p><p><strong>方案二</strong>：增加分布式锁。这样，5个节点中，只有获取到锁的节点才会发出邮件。</p><p>优点：代码还是只有一份，维护简单。扩展性强，可以继续扩展类似的需要锁的功能（例如某个业务流程只允许处理一次，还可以继续复用相关逻辑）。</p><p>缺点：开发稍微复杂一点。</p><p>因此，方案二是最好的选择。</p><h2 id="基于ZooKeeper的三种分布式锁实现"><a href="#基于ZooKeeper的三种分布式锁实现" class="headerlink" title="基于ZooKeeper的三种分布式锁实现"></a>基于ZooKeeper的三种分布式锁实现</h2><p><a href="https://www.cnblogs.com/codestory/p/11387116.html" target="_blank" rel="noopener">https://www.cnblogs.com/codestory/p/11387116.html</a></p><h2 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 版本信息：3.5.8</span><span class="token comment" spellcheck="true"># 路径：/home/rndii/projects/zookeeper/apache-zookeeper-3.5.8</span><span class="token comment" spellcheck="true"># 服务器节点：10.0.1.104   10.0.1.117    10.0.1.127</span><span class="token comment" spellcheck="true"># 操作系统用户：rndii</span><span class="token comment" spellcheck="true"># 1.修改zoo.conf文件，如果该文件不存在，则cp zoo.simple.cnf zoo.cnf</span><span class="token comment" spellcheck="true"># zoo.cnf 如下修改：</span><span class="token comment" spellcheck="true"># The number of milliseconds of each tick</span>tickTime<span class="token operator">=</span>2000<span class="token comment" spellcheck="true"># The number of ticks that the initial </span><span class="token comment" spellcheck="true"># synchronization phase can take</span>initLimit<span class="token operator">=</span>10<span class="token comment" spellcheck="true"># The number of ticks that can pass between </span><span class="token comment" spellcheck="true"># sending a request and getting an acknowledgement</span>syncLimit<span class="token operator">=</span>5<span class="token comment" spellcheck="true"># the directory where the snapshot is stored.</span><span class="token comment" spellcheck="true"># do not use /tmp for storage, /tmp here is just </span><span class="token comment" spellcheck="true"># example sakes.</span>dataDir<span class="token operator">=</span>/home/rndii/projects/zookeeper/apache-zookeeper-3.5.8/data<span class="token comment" spellcheck="true"># the port at which the clients will connect</span>clientPort<span class="token operator">=</span>2181<span class="token comment" spellcheck="true"># the maximum number of client connections.</span><span class="token comment" spellcheck="true"># increase this if you need to handle more clients</span><span class="token comment" spellcheck="true">#maxClientCnxns=60</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Be sure to read the maintenance section of the </span><span class="token comment" spellcheck="true"># administrator guide before turning on autopurge.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The number of snapshots to retain in dataDir</span><span class="token comment" spellcheck="true">#autopurge.snapRetainCount=3</span><span class="token comment" spellcheck="true"># Purge task interval in hours</span><span class="token comment" spellcheck="true"># Set to "0" to disable auto purge feature</span><span class="token comment" spellcheck="true">#autopurge.purgeInterval=1</span>server.1<span class="token operator">=</span>10.0.1.104:2888:3888server.2<span class="token operator">=</span>10.0.1.117:2888:3888server.3<span class="token operator">=</span>10.0.1.127:2888:3888<span class="token comment" spellcheck="true"># 配置文件到此结束</span><span class="token comment" spellcheck="true"># 2.在data文件夹中新增myid文本文件，内容为对应ip的节点id。对应zoo.cnf下的server.x=10.0.1.104:2888:3888的x</span><span class="token comment" spellcheck="true"># 3.如果未配置全局环境变量可修改zoo下的bin/zkServer.sh文件增加JAVA_HOME=xx</span><span class="token comment" spellcheck="true"># 4. 常规命令</span><span class="token comment" spellcheck="true"># 启动</span>bin/zkServer.sh start<span class="token comment" spellcheck="true"># 停止</span>bin/zkServer.sh stop<span class="token comment" spellcheck="true"># 查看zookeeper的状态</span>bin/zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Zookeeper介绍&quot;&gt;&lt;a href=&quot;#Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper介绍&quot;&gt;&lt;/a&gt;Zookeeper介绍&lt;/h2&gt;&lt;p&gt;Zookeeper是一个高性能的分布式一致系统，在分布式系统中有着广
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="lock" scheme="https://arthurjq.com/tags/lock/"/>
    
      <category term="zookeeper" scheme="https://arthurjq.com/tags/zookeeper/"/>
    
      <category term="分布式锁" scheme="https://arthurjq.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
</feed>
