<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锦泉^-^</title>
  
  <subtitle>锦泉的备忘笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arthurjq.com/"/>
  <updated>2021-09-27T18:08:02.579Z</updated>
  <id>https://arthurjq.com/</id>
  
  <author>
    <name>锦泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些面试题</title>
    <link href="https://arthurjq.com/2021/09/28/yi-xie-mian-shi-ti/"/>
    <id>https://arthurjq.com/2021/09/28/yi-xie-mian-shi-ti/</id>
    <published>2021-09-27T18:00:25.000Z</published>
    <updated>2021-09-27T18:08:02.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限流器"><a href="#限流器" class="headerlink" title="限流器"></a>限流器</h2><p>固定窗口，滑动窗口，漏桶（阻塞队列），令牌桶（算数和时间差实现）</p><p><a href="https://cloud.tencent.com/developer/article/1165247" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1165247</a></p><h2 id="快排，归并，堆排序一定要会写"><a href="#快排，归并，堆排序一定要会写" class="headerlink" title="快排，归并，堆排序一定要会写"></a>快排，归并，堆排序一定要会写</h2><h3 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h3><p>底层是基于动态数组，初始容量为<strong>10</strong>，<strong>达到当前上限 + 1时才扩容</strong>，根据下标随机访问数组元素的效率高，向数组尾部添加元素的效率高；但是，删除数组中的数据以及向数组中间添加数据效率低，因为需要移动数组。例如最坏的情况是删除第一个数组元素，则需要将第2至第n个数组元素各向前移动一位。</p><p>而之所以称为动态数组，是因为Arraylist在数组元素超过其容量大，Arraylist可以进行扩容（针对JDK1.8  数组扩容后的容量是扩容前的1.5倍），Arraylist源码中最大的数组容量是Integer.MAX_VALUE-8，对于空出的8位，目前解释是 ：①存储Headerwords；②避免一些机器内存溢出，减少出错几率，所以少分配③最大还是能支持到Integer.MAX_VALUE（当Integer.MAX_VALUE-8依旧无法满足需求时）。</p><p>大端将高位存放在低地址，记住大端才是符合人类正常思维！</p><h3 id="HashMap的put过程，存null怎么存"><a href="#HashMap的put过程，存null怎么存" class="headerlink" title="HashMap的put过程，存null怎么存"></a>HashMap的put过程，存null怎么存</h3><p>前面那个for循环，是在table[0]链表中查找key为null的元素，如果找到，则将value重新赋值给这个元素的value，并返回原来的value。<br>如果上面for循环没找到则将这个元素添加到talbe[0]链表的表头。</p><h3 id="利用sql语句统计各年龄段的数量"><a href="#利用sql语句统计各年龄段的数量" class="headerlink" title="利用sql语句统计各年龄段的数量"></a>利用sql语句统计各年龄段的数量</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> age_temp<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> age<span class="token punctuation">,</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> age <span class="token operator">BETWEEN</span> <span class="token number">10</span> <span class="token operator">AND</span> <span class="token number">20</span> <span class="token keyword">THEN</span> <span class="token string">'10-20'</span><span class="token keyword">WHEN</span> age <span class="token operator">BETWEEN</span> <span class="token number">20</span> <span class="token operator">AND</span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">'20-30'</span><span class="token keyword">END</span> <span class="token keyword">AS</span> age_temp<span class="token keyword">FROM</span> t_user<span class="token punctuation">)</span><span class="token keyword">AS</span> temp_table <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> age_temp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段查重"><a href="#字段查重" class="headerlink" title="字段查重"></a>字段查重</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 只对一个字段查重，只有PLAN_NUMBER这一列结果</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> PLAN_NUMBER  <span class="token keyword">FROM</span> psur_list<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 对多个字段去重，只有选了多个字段的结果</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> PLAN_NUMBER<span class="token punctuation">,</span>PRODUCT_NAME <span class="token keyword">FROM</span> psur_list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>期望结果：只对第一个参数PLAN_NUMBER取唯一值，可以显示其他字段</p><p>解决办法一： 使用 group_concat 函数</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> PLAN_NUMBER<span class="token punctuation">)</span> <span class="token keyword">AS</span> PLAN_NUMBER<span class="token punctuation">,</span>PRODUCT_NAME <span class="token keyword">FROM</span> psur_list <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> PLAN_NUMBER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决办法二：使用group by</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> PLAN_NUMBER<span class="token punctuation">,</span>PRODUCT_NAME <span class="token keyword">FROM</span> psur_list <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> PLAN_NUMBER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 六、Linux相关命令。查看日志中某一个时间点之后的日志信息？</p><pre class="line-numbers language-java"><code class="language-java">grep <span class="token string">'时间'</span> <span class="token string">'日志文件名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 八、虚拟内存和物理内存讨论？ </p><p>当每个进程创建的时候，内核会为进程分配4G的虚拟内存，当进程还没有开始运行时，这只是一个内存布局。实际上并不立即就把虚拟内存对应位置的程序数据和代码（比如.text .data段）拷贝到物理内存中，只是建立好虚拟内存和磁盘文件之间的映射就好（叫做存储器映射）。这个时候数据和代码还是在磁盘上的。当运行到对应的程序时，进程去寻找页表，发现页表中地址没有存放在物理内存上，而是在磁盘上，于是发生缺页异常，于是将磁盘上的数据拷贝到物理内存中。</p><p>另外在进程运行过程中，要通过malloc来动态分配内存时，也只是分配了虚拟内存，即为这块虚拟内存对应的页表项做相应设置，当进程真正访问到此数据时，才引发缺页异常。</p><p>可以认为虚拟空间都被映射到了磁盘空间中（事实上也是按需要映射到磁盘空间上，通过mmap，mmap是用来建立虚拟空间和磁盘空间的映射关系的）</p><p>协程，是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。<strong>协程在子程序内部是可中断的，然后转而执行别的子程序，在适当的时候再返回来接着执行</strong>。</p><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>封装一些作用于某种数据结构中的各元素的操作，它可以在<strong>不改变这个数据结构的前提</strong>下，定义作用于这些元素的新操作。 </p><h3 id="String的两种初始化方法的一点区别"><a href="#String的两种初始化方法的一点区别" class="headerlink" title="String的两种初始化方法的一点区别"></a>String的两种初始化方法的一点区别</h3><pre class="line-numbers language-java"><code class="language-java">String str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>“XXX”<span class="token punctuation">)</span><span class="token punctuation">;</span>String str<span class="token operator">=</span>”XXX”<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前者是java中标准的对象创建方式，其创建的对象将直接放置到堆中，每调用一次就会在堆上面创建一个新的对象；后者则会在栈中创建一个对象引用变量str，然后查看字符串池中是否存在”XXX”，如果没有，则将”XXX”存放字符串池，并令引用变量str指向它；如果已经有”XXX”，则直接令str指向它。这样充分利用了栈的数据共享优点，当然也可能是一个陷阱，对象很有可能没有创建，只不过指向一个先前已经创建的对象；而<code>new()</code>方法则能保证每次都指向新创建象。</p><h2 id="避免内存泄漏、溢出的几种常用方法"><a href="#避免内存泄漏、溢出的几种常用方法" class="headerlink" title="避免内存泄漏、溢出的几种常用方法"></a>避免内存泄漏、溢出的几种常用方法</h2><p><strong>尽早释放无用对象的引用</strong></p><p><strong>程序进行字符串处理时，尽量避免使用String，而应使用StringBuffer</strong></p><p><strong>尽量少用静态变量</strong></p><p>因为静态变量是全局的，GC不会回收</p><p><strong>避免集中创建对象尤其是大对象，如果可以的话尽量使用流操作</strong></p><p>JVM会突然需要大量内存，这时会触发GC优化系统内存环境； 一个案例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用jspsmartUpload作文件上传，运行过程中经常出现java.outofMemoryError的错误，    </span><span class="token comment" spellcheck="true">// 检查之后发现问题：组件里的代码    </span>m_totalBytes <span class="token operator">=</span> m_request<span class="token punctuation">.</span><span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_binArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>m_totalBytes<span class="token punctuation">]</span><span class="token punctuation">;</span>    totalBytes这个变量得到的数极大，导致该数组分配了很多内存空间，而且该数组不能及时释放。    <span class="token comment" spellcheck="true">// 解决办法只能换一种更合适的办法，至少是不会引发outofMemoryError的方式解决。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>尽量运用对象池技术以提高系统性能</strong></p><p>生命周期长的对象拥有生命周期短的对象时容易引发内存泄漏，例如大集合对象拥有大数据量的业务对象的时候，可以考虑分块进行处理，然后解决一块释放一块的策略。</p><p><strong>不要在经常调用的方法中创建对象，尤其是忌讳在循环中创建对象。</strong></p><p>可以适当的使用hashtable，vector 创建一组对象容器，然后从容器中去取那些对象，而不用每次new之后又丢弃。</p><p><strong>优化配置</strong></p><ul><li>设置-Xms、-Xmx相等；</li><li>设置NewSize、MaxNewSize相等；</li><li>设置Heap size, PermGen space；</li></ul><h2 id="Exception-vs-Error"><a href="#Exception-vs-Error" class="headerlink" title="Exception vs Error"></a>Exception vs Error</h2><p>Exception：可以预见到的异常情况，应该被捕获或者处理，分为IOException和RuntimeException</p><p>Error：出现乐错误系统不能正常运行或恢复，一般情况不容易发送</p><h2 id="调用api阻塞，怎么处理？"><a href="#调用api阻塞，怎么处理？" class="headerlink" title="调用api阻塞，怎么处理？"></a>调用api阻塞，怎么处理？</h2><p>死锁</p><p>被拦截了</p><p>读从库时在执行sql</p><p>在排队</p><p>服务挂了</p><h2 id="动态内存与静态内存的区别"><a href="#动态内存与静态内存的区别" class="headerlink" title="动态内存与静态内存的区别"></a>动态内存与静态内存的区别</h2><ol><li>静态内存</li></ol><p>静态内存是指在程序开始运行时由编译器分配的内存，它的分配是在程序开始编译时完成的，不占用CPU资源。</p><p>程序中的各种变量，在编译时系统已经为其分配了所需的内存空间，当该变量在作用域内使用完毕时，系统会</p><p>自动释放所占用的内存空间。</p><p>变量的分配与释放，都无须程序员自行考虑。</p><p>eg:</p><p>基本类型，数组</p><ol start="2"><li>动态内存</li></ol><p>用户无法确定空间大小，或者空间太大，栈上无法分配时，会采用动态内存分配。</p><ol start="3"><li>区别</li></ol><p>a) 静态内存分配在编译时完成，不占用CPU资源; 动态内存分配在运行时，分配与释放都占用CPU资源。</p><p>b) 静态内存在栈上分配; 动态内存在堆上分配。</p><p>c) 动态内存分配需要指针和引用类型支持，静态不需要。</p><p>d) 静态内存分配是按计划分配，由编译器负责; 动态内存分配是按需分配，由程序员负责。</p><h2 id="Spring和SpringBoot区别"><a href="#Spring和SpringBoot区别" class="headerlink" title="Spring和SpringBoot区别"></a>Spring和SpringBoot区别</h2><p>Spring包含SpringBoot</p><p>SpringBoot的核心能力：</p><p>1、内嵌 Servlet 容器，可以直接打成jar包，通过 java -jar xx.jar 运行项目。</p><p>2、提供 starter pom 系列，简化maven的依赖加载，减少依赖冲突的发生。</p><p>3、支持自动化配置，如下图。application.properties 文件在引入springboot和未引入springboot时，是不一样的。</p><p><strong>目标是提高使用者的开发效率</strong></p><h2 id="范围查询是否走索引"><a href="#范围查询是否走索引" class="headerlink" title="范围查询是否走索引"></a>范围查询是否走索引</h2><ol><li>假如where条件中，涉及到了多个索引，MySQL会选择一个最佳索引。最佳索引就是选择性最高的索引，因为它可以过滤掉很多的无用数据行。</li><li>0.30比例值。以前可能是&gt;0.30就不走索引，但文档最低版本是5.6已无从考证。</li></ol><p>并不是给一个列建立了索引，对这个列进行<strong>范围查询</strong>的时候，就会走索引，他是有一个比例值的。比例值会随着<strong>版本、服务器、IO、数据量、数据重复情况</strong>而不同。也就是说，同一个版本，同一个库表，此时和下一时刻，比例值就可能不一样。测试中途遇到过该问题。</p><p>MySQL5.6版本的时候，进行了优化，ICP 和 MRR，极大提升性能。</p><p>FORCE INDEX 的作用，特殊情况下，可以只返回索引列。</p><p><a href="https://juejin.cn/post/6864150089905274893" target="_blank" rel="noopener">https://juejin.cn/post/6864150089905274893</a></p><h2 id="数据库的dml、ddl和dcl的概念"><a href="#数据库的dml、ddl和dcl的概念" class="headerlink" title="数据库的dml、ddl和dcl的概念"></a>数据库的dml、ddl和dcl的概念</h2><p>DML就是我们经常用到的SELECT、INSERT、UPDATE和DELETE语句</p><p>DDL就是我们在创建表的时候用到的一些语句，比如说CREATE、ALTER、DROP等。DDL主要是用在定义或改变表的结构、数据类型、表之间的链接或约束等初始化工作上。</p><p>DCL是用来设置或更改数据库用户或角色权限的语句，包括GRANT、DENY、REVOKE等语句，这个层面应该主要是DBA做的事情了，但是如果是在小公司可能你还是要干，像部署数据库的时候你不会怎么行，特别是ORACLE这种用户驱动的数据库。</p><h2 id="mysql大数据分页查询优化"><a href="#mysql大数据分页查询优化" class="headerlink" title="mysql大数据分页查询优化"></a>mysql大数据分页查询优化</h2><p>基于索引再排序</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名称 <span class="token keyword">WHERE</span> id_pk <span class="token operator">></span> <span class="token punctuation">(</span>pageNum<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id_pk <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql大数据量使用limit分页，随着页码的增大，查询效率越低下</p><h3 id="对limit分页问题的性能优化方法"><a href="#对limit分页问题的性能优化方法" class="headerlink" title="对limit分页问题的性能优化方法"></a>对limit分页问题的性能优化方法</h3><p>利用表的覆盖索引来加速分页查询：我们都知道，利用了索引查询的语句中如果只包含了那个索引列（覆盖索引），那么这种情况会查询很快。</p><p>因为利用索引查找有优化算法，且数据就在查询索引上面，不用再去找相关的数据地址了，这样节省了很多时间。另外Mysql中也有相关的索引缓存，在并发高的时候利用缓存就效果更好了。</p><p>在我们的例子中，我们知道id字段是主键，自然就包含了默认的主键索引。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//这次我们之间查询最后一页的数据（利用覆盖索引，只包含id列），如下：</span><span class="token keyword">select</span> id <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">866613</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token number">0.2</span>秒<span class="token comment" spellcheck="true">//相对于查询了所有列的37.44秒，提升了大概100多倍的速度</span><span class="token comment" spellcheck="true">//那么如果我们也要查询所有列，有两种方法，</span><span class="token comment" spellcheck="true">//一种是id>=的形式，</span><span class="token comment" spellcheck="true">//另一种就是利用join，看下实际情况：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> ID <span class="token operator">></span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">866613</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">20</span><span class="token comment" spellcheck="true">//查询时间为0.2秒！</span><span class="token comment" spellcheck="true">//另一种写法</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token number">a</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">866613</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token comment" spellcheck="true">//查询时间也很短！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1024-768的24位真彩色BMP图像至少需要多大存储空间"><a href="#1024-768的24位真彩色BMP图像至少需要多大存储空间" class="headerlink" title="1024*768的24位真彩色BMP图像至少需要多大存储空间"></a>1024*768的24位真彩色BMP图像至少需要多大存储空间</h2><p><code>1024*768*24/8/1024/1024=2.25MB</code></p><p>RGB三管道，每个管道8bit</p><h2 id="线程从阻塞到就绪的方式"><a href="#线程从阻塞到就绪的方式" class="headerlink" title="线程从阻塞到就绪的方式"></a>线程从阻塞到就绪的方式</h2><p>线程从阻塞状态恢复到就绪状态，有三种途径：自动恢复、用<code>resume()</code>方法恢复，notify方法恢复</p><h2 id="netty处理大小端"><a href="#netty处理大小端" class="headerlink" title="netty处理大小端"></a>netty处理大小端</h2><p>不太懂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;限流器&quot;&gt;&lt;a href=&quot;#限流器&quot; class=&quot;headerlink&quot; title=&quot;限流器&quot;&gt;&lt;/a&gt;限流器&lt;/h2&gt;&lt;p&gt;固定窗口，滑动窗口，漏桶（阻塞队列），令牌桶（算数和时间差实现）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.ten
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://arthurjq.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二维矩阵原地旋转</title>
    <link href="https://arthurjq.com/2021/09/16/algorithm/matrix-rotate/"/>
    <id>https://arthurjq.com/2021/09/16/algorithm/matrix-rotate/</id>
    <published>2021-09-15T16:31:25.000Z</published>
    <updated>2021-09-15T16:35:30.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h4 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像</a></h4><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><p>思路是这样的：</p><pre><code>[1,2,3][4,5,6][7,8,9]</code></pre><p>先由对角线 <code>[1, 5, 9]</code> 为轴进行翻转：</p><pre><code>[1,4,7][2,5,8][3,6,9]</code></pre><p>再对每一行以中点进行翻转，就得到了</p><pre><code>[7,4,1][8,5,2][9,6,3]</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先以对角线（左上-右下）为轴进行翻转</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 再对每一行以中点进行翻转</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">,</span>right<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h4 id=&quot;48-旋转图像&quot;&gt;&lt;a href=&quot;#48-旋转图像&quot; class=&quot;headerlink&quot; title=&quot;48. 旋转图像&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>sql的时间格式</title>
    <link href="https://arthurjq.com/2021/09/12/sql-time/"/>
    <id>https://arthurjq.com/2021/09/12/sql-time/</id>
    <published>2021-09-12T11:06:21.000Z</published>
    <updated>2021-09-12T11:17:45.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CONVERT"><a href="#CONVERT" class="headerlink" title="CONVERT"></a>CONVERT</h2><p><code>CONVERT(varchar(16), 时间字段, 20)</code> 结果：2021-09-12 19:16</p><p><code>CONVERT(varchar(10), 时间字段, 23)</code> 结果：2021-09-12 </p><p><code>varchar(10)</code>表示日期输出的格式，如果不够长会发生截取</p><h2 id="日期相减操作"><a href="#日期相减操作" class="headerlink" title="日期相减操作"></a>日期相减操作</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>year<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔年</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>quarter<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔季</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>month<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔月</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>day<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔天</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>week<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔周</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>hour<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔小时</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>minute<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔分</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>second<span class="token punctuation">,</span> 开始日期<span class="token punctuation">,</span>结束日期<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两日期间隔秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CONVERT&quot;&gt;&lt;a href=&quot;#CONVERT&quot; class=&quot;headerlink&quot; title=&quot;CONVERT&quot;&gt;&lt;/a&gt;CONVERT&lt;/h2&gt;&lt;p&gt;&lt;code&gt;CONVERT(varchar(16), 时间字段, 20)&lt;/code&gt; 结果：202
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="sql" scheme="https://arthurjq.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>微服务保证高可用的方式</title>
    <link href="https://arthurjq.com/2021/09/10/project/springcloud-available/"/>
    <id>https://arthurjq.com/2021/09/10/project/springcloud-available/</id>
    <published>2021-09-10T11:20:13.000Z</published>
    <updated>2021-09-27T18:11:53.732Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文章部分内容参考 李云华《从 0 开始学架构》杨波老师《微服务》</strong></p><h2 id="如何保障服务的高可用"><a href="#如何保障服务的高可用" class="headerlink" title="如何保障服务的高可用"></a>如何保障服务的高可用</h2><p>服务冗余、无状态化、数据存储高可用、柔性化、兜底容错、负载均衡、服务限流、服务监控等。。。</p><h3 id="服务冗余"><a href="#服务冗余" class="headerlink" title="服务冗余"></a>服务冗余</h3><p>每一个访问可能都会有多个服务组成而成，每个机器每个服务都可能出现问题，所以第一个考虑到的就是每个服务必须不止一份可以是多份，所谓多份一致的服务就是服务的冗余，这里说的服务泛指了机器的服务，容器的服务，还有微服务本身的服务。</p><p>在<strong>机器服务</strong>层面需要考虑，各个机器间的冗余是否有在物理空间进行隔离冗余，例如<strong>是否所有机器是否有分别部署在不同机房</strong>，如果在同一个机房是否做到了部署在不同的机柜，如果是docker容器<strong>是否部署在分别不同的物理机上面</strong>。采取的策略其实也还是根据服务的业务而定，所以需要对服务进行分级评分，从而采取不同的策略，不同的策略安全程度不同，伴随这的成本也是不同，安全等级更高的服务可能还不止考虑不同机房，还需要把各个机房所处的区域考虑进行，例如，两个机房不要处在同一个地震带上等等。</p><h4 id="无状态化"><a href="#无状态化" class="headerlink" title="无状态化"></a>无状态化</h4><p>服务的冗余会要求我们可以随时对服务进行扩容或者缩容，有可能我们想要对服务进行随时随地的扩缩容，就要求我们的服务是一个无状态化，所谓无状态化就是<strong>每个服务的服务内容和数据都是一致</strong>的。</p><p>状态保存在后端有状态的中间件中，如缓存、数据库、对象存储、大数据平台、消息队列等，这些中间件设计之初，就考虑了扩容时状态的迁移、复制、同步等机制，不用业务层关心。</p><p>假设，我们需要对网关进行扩容，我们只需要增加服务就可以，而不需要去考虑网关是否存储了一个额外的数据。</p><h3 id="存储高可用"><a href="#存储高可用" class="headerlink" title="存储高可用"></a>存储高可用</h3><ul><li>数据怎么进行复制</li><li>架构中每个节点的职责是什么</li><li>数据复制出现延迟怎么处理</li><li>当架构中节点出现错误怎么保证高可用</li></ul><h4 id="数据主从复制"><a href="#数据主从复制" class="headerlink" title="数据主从复制"></a>数据主从复制</h4><p>最常见最简单的存储高可用，如Mysql，redis等等。读写分离，缺点就是客户端必须感知主从关系的存在，将不同的操作发送给不同的机器进行处理，而且主从复制中，从机器负责读操作，可能因为主从复制时延大，出现数据不一致性的问题。</p><h4 id="数据主从切换"><a href="#数据主从切换" class="headerlink" title="数据主从切换"></a>数据主从切换</h4><p>刚说了主从切换存在两个问题： 1.主机故障写操作无法进行 2.需要人工将其中一台从机器升级为主机</p><p>为了解决这个两个问题，我们可以设计一套主从自动切换的方案，其中设计到对主机的状态检测，切换的决策，数据丢失和冲突的问题。</p><h4 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h4><p>分库分表</p><ul><li>做数据分片，如何将数据映射到节点</li><li>数据分片的特征值，即按照数据中的哪一个属性（字段）来分片</li><li>数据分片的元数据的管理，如何保证元数据服务器的高性能、高可用，如果是一组服务器，如何保证强一致性</li></ul><h3 id="异步化"><a href="#异步化" class="headerlink" title="异步化"></a>异步化</h3><p>如果在业务允许的情况下，用户调用只给用户必须要的结果，而不是需要同步的结果可以放在另外的地方异步去操作，这就减少了超时的风险也把复杂业务进行拆分减低复杂度。</p><p>当然异步化的好处是非常多，例如削峰解耦等等，这里只是从可用的角度出发。</p><p>异步化大致有这三种的实现方式：</p><ul><li>服务端接收到请求后，创建新的线程处理业务逻辑，服务端先回应答给客户端。</li></ul><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/springcloud-available-1.jpg" alt></p><ul><li>服务端接收到请求后，服务端先回应答给客户端，再继续处理业务逻辑。</li></ul><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/springcloud-available-2.jpg" alt></p><ul><li>服务端接收到请求后，服务端把信息保存在消息队列或者数据库，回应答给客户端，服务端业务处理进程再从消息队列或者数据库上读取信息处理业务逻辑。</li></ul><h3 id="柔性化"><a href="#柔性化" class="headerlink" title="柔性化"></a>柔性化</h3><p>在电商订单的场景中，下单，扣库存，支付是一定要执行的步骤，如果失败则订单失败，但是<strong>加积分，发货，售后是可以柔性处理，就算出错也可以通过日志报警让人工去检查</strong>，没必要为加积分损失整个下单的可用性。</p><h3 id="兜底-容错"><a href="#兜底-容错" class="headerlink" title="兜底/容错"></a>兜底/容错</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/springcloud-available-3.jpg" alt></p><p>兜底是可能我们经常谈论的是一种降级的方案，方案是用来实施，但是这里兜底可能更多是一种思想，更多的是一种预案，每个操作都可以犯错，我们也可以接受犯错，但是每个犯错我们都必须有一个兜底的预案，这个兜底的预案其实就是我们的容错或者说最大程度避免更大伤害的措施，实际上也是一个不断降级的过程。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡的实现有硬件和软件，硬件有F5，A10等机器，软件有LVS，nginx，HAProxy等等，负载均衡的算法有 random ， RoundRobin ， ConsistentHash等等。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/springcloud-available-4.jpg" alt></p><p>转移流程：Nginx 根据给定好的负载均衡算法进行调度，当请求到 Tomcat1，Nginx 发现 Tomcat1 出现连接错误（节点失效），Nginx 会根据一定的机制将 Tomcat1 从调用的负载列表中清除。</p><p>在下一次请求，Nginx 不会分配请求到有问题的 Tomcat1 上面，会将请求转移到其他的 Tomcat 之上。</p><p>节点失效：Nginx 默认判断节点失效是以 connect refuse 和 timeout 为标准，在对某个节点进行 fails 累加，当 fails 大于 max_fails 时，该节点失效。</p><p>节点恢复：当某个节点失败的次数大于 max_fails 时，但不超过 fail_timeout，Nginx 将不再对该节点进行探测，直到超过失效时间或者所有的节点都失效，Nginx 会对节点进行重新探测。</p><h3 id="服务限流降级熔断"><a href="#服务限流降级熔断" class="headerlink" title="服务限流降级熔断"></a>服务限流降级熔断</h3><p>如果你的某个服务挂了，那么你的hystrix会走熔断器，然后就会降级，你需要考虑到各个服务的降级逻辑。</p><p>举一些常见的例子：</p><ul><li>如果查询数据的服务挂了，你可以查本地的缓存</li><li>如果写入数据的服务挂了，你可以先把这个写入操作记录日志到比如mysql里，或者写入MQ里，后面再慢慢恢复</li><li>如果redis挂了，你可以查mysql</li><li>如果mysql挂了，你可以把操作日志记录到es里去，后面再慢慢恢复数据。</li></ul><p>具体用什么降级策略，要根据业务来定，不是一成不变的。</p><h3 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h3><p>服务监控是微服务治理的一个重要环节，监控系统的完善程度直接影响到我们微服务质量的好坏，我们的微服务在线上运行的时候有没有一套完善的监控体系能去了解到它的健康情况，对整个系统的可靠性和稳定性是非常重要，可靠性和稳定性是高可用的一个前提保证。</p><h2 id="从手段看高可用"><a href="#从手段看高可用" class="headerlink" title="从手段看高可用"></a>从手段看高可用</h2><p>主要使用的技术手段是服务和数据的冗余备份和失效转移，一组服务或一组数据都能在多节点上，之间相互备份。</p><p>当一台机器宕机或出现问题的时候，可以从当前的服务切换到其他可用的服务，不影响系统的可用性，也不会导致数据丢失。</p><h2 id="从架构看高可用"><a href="#从架构看高可用" class="headerlink" title="从架构看高可用"></a>从架构看高可用</h2><p>保持简单的架构，目前多数网站采用的是比较经典的分层架构，应用层，服务层，数据层。</p><p>应用层是处理一些业务逻辑，服务层提供一些数据和业务紧密相关服务，数据层负责对数据进行读写。</p><p>简单的架构可以使应用层，服务层可以保持无状态化进行水平扩展，这个属于计算高可用。</p><p>相比计算高可用，在数据层思考的高可用则属于数据高可用，数据高可用相比计算高可用需要考虑到数据的一致性问题会更加的复杂。</p><p>这个时候 CAP 理论在里面会发挥关键的作用，究竟是选择 AP 或 CP，这个得根据业务去选择模型。</p><h2 id="从硬件看高可用"><a href="#从硬件看高可用" class="headerlink" title="从硬件看高可用"></a>从硬件看高可用</h2><p>首先得确认硬件总是可能坏的，网络总是不稳定的。解决它的方法也是一个服务器不够就来多几个，一个机柜不够就来几个，一个机房不够就来几个。</p><h2 id="从软件看高可用"><a href="#从软件看高可用" class="headerlink" title="从软件看高可用"></a>从软件看高可用</h2><p>软件的开发不严谨，发布不规范也是导致各种不可用出现，通过控制软件开发过程质量监控，通过测试，预发布，灰度发布等手段也是减少不可用的措施。</p><h2 id="从治理看高可用"><a href="#从治理看高可用" class="headerlink" title="从治理看高可用"></a>从治理看高可用</h2><p>一个系统在线上跑的好好的，但我们也不能确保它在下一秒会不会出现不可用状态。</p><p>将服务规范化，事前做好服务分割，做好服务监控，预判不可用的出现，在不可用出现之前发现问题，解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;文章部分内容参考 李云华《从 0 开始学架构》杨波老师《微服务》&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何保障服务的高可用&quot;&gt;&lt;a href=&quot;#如何保障服务的高可用&quot; class=&quot;headerlink&quot; title=&quot;如何保障服务的高可用&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="springcloud" scheme="https://arthurjq.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://arthurjq.com/2021/09/09/java/factorypattern/"/>
    <id>https://arthurjq.com/2021/09/09/java/factorypattern/</id>
    <published>2021-09-09T12:50:41.000Z</published>
    <updated>2021-09-10T15:41:42.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>简单工厂模式、工厂方法模式、抽象工厂模式，都是属于创建型设计模式。比较容易弄混淆。</p><p>工厂模式将类的创建和类的使用分离出来，当 Class A 想调用 Class B ，那么A只是调用B的方法，而至于B的实例化，就交给工厂类。</p><p>那又有人说，也可以把这些创建过程的代码放到类的构造函数里，同样可以降低重复率，而且构造函数本身的作用也是初始化对象。针对这个观点，我们可以对比下工厂模式相较于构造函数的优点：</p><p>优点：</p><ol><li>静态工厂方法有名字而构造函数没有，因为工厂方法可以有多个，通过名字来区别各个方法，但构造函数名字只能有一个，只能通过参数来区别，所以使用静态工厂方法更明了。</li><li>静态工厂方法支持条件性实例化，就是说你创建对象时，有时需要添加一些条件判断是否应该创建，如果满足条件则返回一个实例，不满足则返回NULL，比如单例模式。构造函数时做不到这样的，构造函数的功能需要保持单一，只为了构造而存在，而静态工厂方法可以很简单的做到。</li><li>方法能够返回返回类型的子类型</li></ol><p>工厂模式最核心的知识点是：<strong>将对象的创建和使用做分离</strong>。</p><p>参考：<a href="https://www.cnblogs.com/chinaxieshuai/p/12557538.html" target="_blank" rel="noopener">https://www.cnblogs.com/chinaxieshuai/p/12557538.html</a></p><h2 id="简单静态工厂模式"><a href="#简单静态工厂模式" class="headerlink" title="简单静态工厂模式"></a>简单静态工厂模式</h2><p>简单工厂，首先创建phone的抽象类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现小米手机和华为手机类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mi phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"huawei phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再创建phone的构建工厂类，根据传入的类型创建不同类型的手机</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> MiPhone <span class="token function">createMiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HuaWeiPhone <span class="token function">createHuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Phone <span class="token function">createPhone</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"Mi"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>一样的先定义一个phone抽象类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个手机的工厂接口，里面有个createPhone方法，其他类型手机都要继承这个接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    Phone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建小米手机类。继承phone，实现call方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mi phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建小米手机工厂</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPhoneFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>华为也类似：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"huawei phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiPhoneFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>定义：为创建一组相关或相互依赖的对象提供一个接口，而且<strong>无须指定它们的具体类</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/factorypattern-1.png" alt></p><p>还是用创建手机的方式来实现抽象工厂，先创建一个phone的抽象类，里面不仅有call方法，还有手机的屏幕类型</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">screenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再创建一个手机构建工厂的父接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    Phone <span class="token function">createMiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Phone <span class="token function">createHuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先所有小米手机和华为手机都必须实现通话功能，重写call方法（注意是抽象类）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mi phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HuaWeiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"huawei phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据手机的屏幕类型分为小米type1屏手机：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type1ScreenMiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">MiPhone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">screenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"type1 screen Mi phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据手机的屏幕类型分为华为type1屏手机：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type1ScreenHuaWeiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">HuaWeiPhone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">screenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"type1 screen huawei phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据手机的屏幕类型分为小米type2屏手机：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type2ScreenMiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">MiPhone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">screenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"type2 screen Mi phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据手机的屏幕类型分为华为type2屏手机：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type2ScreenHuaWeiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">HuaWeiPhone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">screenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"type2 screen huawei phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对不同的屏幕类型手机，抽象出根据屏幕类型的构建工厂，有type1屏手机工厂和type2屏手机工厂：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type1ScreenPhoneFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createMiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Type1ScreenMiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createHuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Type1ScreenHuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type2ScreenPhoneFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createMiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Type2ScreenMiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">createHuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Type2ScreenHuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再写一个测试类测试一下结果：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Phone miPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type1ScreenPhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createMiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"miPhone的手机类型为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        miPhone<span class="token punctuation">.</span><span class="token function">screenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone huaWeiPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type2ScreenPhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createHuaWeiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HuaweiPhone的手机类型为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        huaWeiPhone<span class="token punctuation">.</span><span class="token function">screenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>output<span class="token operator">:</span>miPhone的手机类型为：type1 screen Mi phoneHuaweiPhone的手机类型为：type2 screen huawei phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象工厂模式的使用场景：一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。通过工厂类，只要知道工厂类是谁，我就能创建出一个需要的对象</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>缺点</strong> ：</p><p>扩展产品族困难。比如在phone中类型增加一个带手写笔类型的手机，那么每个已经实现的手机类就都需要实现这个方法。这严重违反了开闭原则。</p><p><strong>优点：</strong></p><p>增加等级简单。如果在折叠屏手机下增加一个双折叠屏和三折叠屏的手机这就比较简单，只需要在折叠屏手机构建工厂下面修改就行。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实际上，一般开发过程中，我们使用简单工厂模式比较多，抽象工厂模式的话需要业务比较大的情况下才会用到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;简单工厂模式、工厂方法模式、抽象工厂模式，都是属于创建型设计模式。比较容易弄混淆。&lt;/p&gt;
&lt;p&gt;工厂模式将类的创建和类的使用分离出来，当 
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="设计模式" scheme="https://arthurjq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java读取大文件</title>
    <link href="https://arthurjq.com/2021/09/07/algorithm/readbigfile/"/>
    <id>https://arthurjq.com/2021/09/07/algorithm/readbigfile/</id>
    <published>2021-09-07T05:24:24.000Z</published>
    <updated>2021-09-09T15:55:55.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java读取大文件"><a href="#Java读取大文件" class="headerlink" title="Java读取大文件"></a>Java读取大文件</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadBigFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"C:\\Users\\Administrator\\Desktop\\_posts\\java-basis.md"</span><span class="token punctuation">;</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>bis<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意在实例化BufferedReader时，增加一个分配缓存的参数即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java读取大文件&quot;&gt;&lt;a href=&quot;#Java读取大文件&quot; class=&quot;headerlink&quot; title=&quot;Java读取大文件&quot;&gt;&lt;/a&gt;Java读取大文件&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>多线程交替打印ABC</title>
    <link href="https://arthurjq.com/2021/09/07/algorithm/printabc/"/>
    <id>https://arthurjq.com/2021/09/07/algorithm/printabc/</id>
    <published>2021-09-06T17:17:25.000Z</published>
    <updated>2021-09-12T16:12:54.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wait和notify"><a href="#wait和notify" class="headerlink" title="wait和notify"></a>wait和notify</h2><ul><li><code>wait( )，notify( )，notifyAll( )</code>都不属于Thread类，而是属于Object基础类，也就是每个对象都有<code>wait( )，notify( )，notifyAll( )</code>的功能，因为每个对象都有锁，锁是每个对象的基础，当然操作锁的方法也是最基础了。</li><li>当需要调用以上的方法的时候，一定要对竞争资源进行加锁，<strong>如果不加锁的话，则会报 IllegalMonitorStateException 异常</strong></li><li>当想要调用<code>wait( )</code>进行线程等待时，必须要取得这个锁对象的控制权（对象监视器），一般是放到<code>synchronized(obj)</code>代码中。</li><li>在while循环里而不是if语句下使用wait，这样，会在线程暂停恢复后都检查wait的条件，并在条件实际上并未改变的情况下处理唤醒通知</li><li>调用<code>obj.wait( )</code>释放了obj的锁，否则其他线程也无法获得obj的锁，也就无法在<code>synchronized(obj){ obj.notify() }</code>代码段内唤醒A。</li><li><code>notify( )</code>方法只会通知等待队列中的第一个相关线程（不会通知优先级比较高的线程）</li><li><code>notifyAll( )</code>通知所有等待该竞争资源的线程（也不会按照线程的优先级来执行）</li><li>假设有三个线程执行了<code>obj.wait( )</code>，那么<code>obj.notifyAll( )</code>则能全部唤醒tread1，thread2，thread3，但是要继续执行obj.wait（）的下一条语句，必须获得obj锁，因此，tread1，thread2，thread3只有一个有机会获得锁继续执行，例如tread1，其余的需要等待thread1释放obj锁之后才能继续执行。</li><li>当调用obj.notify/notifyAll后，调用线程依旧持有obj锁，因此，thread1，thread2，thread3虽被唤醒，但是仍无法获得obj锁。直到调用线程退出synchronized块，释放obj锁后，thread1，thread2，thread3中的一个才有机会获得锁继续执行。</li></ul><h2 id="交替打印ABC"><a href="#交替打印ABC" class="headerlink" title="交替打印ABC"></a>交替打印ABC</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintABC</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object pre<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PrintABC</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Object pre<span class="token punctuation">,</span>Object next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    next<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    pre<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Object a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintABC pa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintABC</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintABC pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintABC</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintABC pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintABC</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>obj.wait()</code>之后的代码不会执行，直到其他线程t2调用了<code>obj.notify()</code>；<br>在其他线程t2调用了<code>obj.notify()</code>线程t1不会立刻开始执行，需要等待线程t2的synchronized代码块执行完毕</p></blockquote><h2 id="交替打印AB"><a href="#交替打印AB" class="headerlink" title="交替打印AB"></a>交替打印AB</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个变通好一点，上边那个不知道怎么改</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintAB</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object LOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printAB</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> targetNum<span class="token punctuation">)</span><span class="token punctuation">{</span>                    LOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>                cnt<span class="token operator">--</span><span class="token punctuation">;</span>                LOCK<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PrintAB printAB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintAB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                printAB<span class="token punctuation">.</span><span class="token function">printAB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                printAB<span class="token punctuation">.</span><span class="token function">printAB</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用ReentrantLock"><a href="#使用ReentrantLock" class="headerlink" title="使用ReentrantLock"></a>使用ReentrantLock</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintABC_Lock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前状态值：保证三个线程之间交替打印</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printABC</span><span class="token punctuation">(</span><span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> aim<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PrintABC_Lock printABC_lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintABC_Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>printABC_lock<span class="token punctuation">.</span><span class="token function">printABC</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>printABC_lock<span class="token punctuation">.</span><span class="token function">printABC</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>printABC_lock<span class="token punctuation">.</span><span class="token function">printABC</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用condition"><a href="#使用condition" class="headerlink" title="使用condition"></a>使用condition</h3><p>可以使用Lock+Condition实现对线程的精准唤醒，减少对同步锁的无意义竞争，浪费资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintABC_Lock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition conditionA <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition conditionB <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition conditionC <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printABC</span><span class="token punctuation">(</span><span class="token keyword">int</span> aim<span class="token punctuation">,</span>Condition curThread<span class="token punctuation">,</span> Condition nextThread<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> aim<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//阻塞当前线程</span>                    curThread<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//唤醒下一个线程，而不是唤醒所有线程</span>                nextThread<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PrintABC_Lock printABC_lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintABC_Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>printABC_lock<span class="token punctuation">.</span><span class="token function">printABC</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>printABC_lock<span class="token punctuation">.</span>conditionA<span class="token punctuation">,</span>printABC_lock<span class="token punctuation">.</span>conditionB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>printABC_lock<span class="token punctuation">.</span><span class="token function">printABC</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>printABC_lock<span class="token punctuation">.</span>conditionB<span class="token punctuation">,</span>printABC_lock<span class="token punctuation">.</span>conditionC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>printABC_lock<span class="token punctuation">.</span><span class="token function">printABC</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>printABC_lock<span class="token punctuation">.</span>conditionC<span class="token punctuation">,</span>printABC_lock<span class="token punctuation">.</span>conditionA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;wait和notify&quot;&gt;&lt;a href=&quot;#wait和notify&quot; class=&quot;headerlink&quot; title=&quot;wait和notify&quot;&gt;&lt;/a&gt;wait和notify&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wait( )，notify( )，noti
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ScheduledThreadPoolExecutor实现限流算法</title>
    <link href="https://arthurjq.com/2021/08/31/algorithm/scheduledthreadpoolexecutor/"/>
    <id>https://arthurjq.com/2021/08/31/algorithm/scheduledthreadpoolexecutor/</id>
    <published>2021-08-31T14:54:25.000Z</published>
    <updated>2021-08-31T15:21:21.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>正常情况下，定时器我们都是用Timer和TimerTask这两个类就能完成定时任务，并且设置延长时间和循环时间间隔。<br>ScheduledThreadPoolExecutor也能完成Timer一样的定时任务，并且时间间隔更加准确。</p><p>我在后台程序看看一下Timer执行程序是有可能延迟1、2毫秒，如果是1秒执行一次的任务，1分钟有可能延迟60毫秒，一小时延迟3600毫秒，相当于3秒，实际用户看不出什么区别。<br>但是，如果我的程序需要每40毫秒就执行一次任务，如果还是有1、2毫秒的误差，1秒钟就有25毫秒的误差，大概40秒就有1秒的误差，十几分钟就有十几秒的误差，这对UI显示来说是延迟非常严重的了。<br>而我用ScheduledThreadPoolExecutor来做40毫秒的间隔任务，一般十几分钟才有1秒多的误差，这个还是能接受的。<br>这也是我用ScheduledThreadPoolExecutor这个类的原因。</p><h3 id="使用Timer和TimerTask存在一些缺陷"><a href="#使用Timer和TimerTask存在一些缺陷" class="headerlink" title="使用Timer和TimerTask存在一些缺陷"></a>使用Timer和TimerTask存在一些缺陷</h3><ol><li>Timer只创建了一个线程。当你的任务执行的时间超过设置的延时时间将会产生一些问题。</li><li>Timer创建的线程没有处理异常，因此一旦抛出非受检异常，该线程会立即终止。</li></ol><p>JDK 5.0以后推荐使用ScheduledThreadPoolExecutor。该类属于Executor Framework，它除了能处理异常外，还可以创建多个线程解决上面的问题</p><h2 id="令牌桶的Java实现"><a href="#令牌桶的Java实现" class="headerlink" title="令牌桶的Java实现"></a>令牌桶的Java实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ScheduledExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ScheduledThreadPoolExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Schedule</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增长速率</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> RATE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//桶最大值</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> TOTAL <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始值</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> WATER <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ScheduledExecutorService executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        executorService<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                WATER <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>WATER <span class="token operator">+</span> RATE<span class="token punctuation">,</span>TOTAL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>WATER <span class="token operator">>=</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>            WATER <span class="token operator">-=</span> num<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Schedule schedule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        schedule<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿到了"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿不到"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;正常情况下，定时器我们都是用Timer和TimerTask这两个类就能完成定时任务，并且设置延长时间和循环时间间隔。&lt;br&gt;Schedule
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://arthurjq.com/2021/08/28/os/"/>
    <id>https://arthurjq.com/2021/08/28/os/</id>
    <published>2021-08-28T15:25:25.000Z</published>
    <updated>2021-09-13T14:10:35.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统简介篇"><a href="#操作系统简介篇" class="headerlink" title="操作系统简介篇"></a>操作系统简介篇</h2><p>转载：<a href="https://www.zhihu.com/question/446980297/answer/1755892330" target="_blank" rel="noopener">https://www.zhihu.com/question/446980297/answer/1755892330</a></p><p><strong>操作系统是管理硬件和软件的一种应用程序</strong></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-1.jpg" alt></p><h3 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h3><p><code>进程管理</code>: 进程管理的主要作用就是任务调度，在单核处理器下，操作系统会为每个进程分配一个任务，进程管理的工作十分简单；而在多核处理器下，操作系统除了要为进程分配任务外，还要解决处理器的调度、分配和回收等问题</p><p><code>内存管理</code>：内存管理主要是操作系统负责管理内存的分配、回收，在进程需要时分配内存以及在进程完成时回收内存，协调内存资源，通过合理的页面置换算法进行页面的换入换出</p><p><code>设备管理</code>：根据确定的设备分配原则对设备进行分配，使设备与主机能够并行工作，为用户提供良好的设备使用界面。</p><p><code>文件管理</code>：有效地管理文件的存储空间，合理地组织和管理文件系统，为文件访问和文件保护提供更有效的方法及手段。</p><p><code>提供用户接口</code>：操作系统提供了访问应用程序和硬件的接口，使用户能够通过应用程序发起系统调用从而操纵硬件，实现想要的功能。</p><h3 id="软件访问硬件的几种方式"><a href="#软件访问硬件的几种方式" class="headerlink" title="软件访问硬件的几种方式"></a>软件访问硬件的几种方式</h3><p>软件访问硬件其实就是一种 IO 操作，软件访问硬件的方式，也就是 I/O 操作的方式有哪些。</p><p>硬件在 I/O 上大致分为<strong>并行和串行</strong>，同时也对应串行接口和并行接口。</p><p>随着计算机技术的发展，I/O 控制方式也在不断发展。选择和衡量 I/O 控制方式有如下三条原则</p><blockquote><p>（1） 数据传送速度足够快，能满足用户的需求但又不丢失数据；<br>（2） 系统开销小，所需的处理控制程序少；<br>（3） 能充分发挥硬件资源的能力，使 I/O 设备尽可能忙，而 CPU 等待时间尽可能少。</p></blockquote><p>根据以上控制原则，I/O 操作可以分为四类</p><ul><li><code>直接访问</code>：直接访问由用户进程直接控制主存或 CPU 和外围设备之间的信息传送。直接程序控制方式又称为忙/等待方式。</li><li><code>中断驱动</code>：为了减少程序直接控制方式下 CPU 的等待时间以及提高系统的并行程度，系统引入了中断机制。中断机制引入后，外围设备仅当操作正常结束或异常结束时才向 CPU 发出中断请求。在 I/O 设备输入每个数据的过程中，由于无需 CPU 的干预，一定程度上实现了 CPU 与 I/O 设备的并行工作。</li></ul><p>上述两种方法的特点都是以 <code>CPU</code> 为中心，数据传送通过一段程序来实现，软件的传送手段限制了数据传送的速度。接下来介绍的这两种 I/O 控制方式采用硬件的方法来显示 I/O 的控制</p><ul><li><code>DMA 直接内存访问</code>：为了进一步减少 CPU 对 I/O 操作的干预，防止因并行操作设备过多使 CPU 来不及处理或因速度不匹配而造成的数据丢失现象，引入了 DMA 控制方式。</li><li><code>通道控制方式</code>：通道，独立于 CPU 的专门负责输入输出控制的处理机，它控制设备与内存直接进行数据交换。有自己的通道指令，这些指令由 CPU 启动，并在操作结束时向 CPU 发出中断信号。</li></ul><h3 id="什么是用户态和内核态"><a href="#什么是用户态和内核态" class="headerlink" title="什么是用户态和内核态"></a>什么是用户态和内核态</h3><p>用户态和内核态是操作系统的两种运行状态。</p><ul><li><code>内核态</code>：处于内核态的 <strong>CPU 可以访问任意的数据</strong>，包括外围设备，比如网卡、硬盘等，处于内核态的 CPU 可以从一个程序切换到另外一个程序，并且占用 CPU 不会发生抢占情况，一般处于特权级 0 的状态我们称之为内核态。</li><li><code>用户态</code>：处于用户态的 CPU 只能受限的访问内存，并且不允许访问外围设备，用户态下的 <strong>CPU 不允许独占</strong>，也就是说 CPU 能够被其他程序获取。</li></ul><blockquote><p>那么为什么要有用户态和内核态呢？</p></blockquote><p>这个主要是访问能力的限制的考量，计算机中有一些比较危险的操作，比如设置时钟、内存清理，这些都需要在内核态下完成，如果随意进行这些操作，那你的系统得崩溃多少次。</p><h3 id="CPU运行安全等级"><a href="#CPU运行安全等级" class="headerlink" title="CPU运行安全等级"></a>CPU运行安全等级</h3><p>CPU有4个运行级别，分别为：</p><ul><li>ring0，ring1，ring2，ring3 </li></ul><p>ring0只给操作系统用，ring3谁都能用。</p><p>ring0是指CPU的运行级别，是最高级别，ring1次之，ring2更次之…… </p><p>系统（内核）的代码运行在最高运行级别ring0上，可以使用特权指令，控制中断、修改页表、访问设备等等。</p><p>应用程序的代码运行在最低运行级别上ring3上，不能做受控操作。</p><p>如果要做，比如要访问磁盘，写文件，那就要通过执行系统调用（函数），执行系统调用的时候，CPU的运行级别会发生从ring3到ring0的切换，并跳转到系统调用对应的内核代码位置执行，这样内核就为你完成了设备访问，完成之后再从ring0返回ring3。</p><p>这个过程也称作用户态和内核态的切换。</p><h2 id="进程和线程篇"><a href="#进程和线程篇" class="headerlink" title="进程和线程篇"></a>进程和线程篇</h2><h3 id="什么是线程，线程和进程的区别"><a href="#什么是线程，线程和进程的区别" class="headerlink" title="什么是线程，线程和进程的区别"></a>什么是线程，线程和进程的区别</h3><p>我们上面说到进程是正在运行的程序的实例，而线程其实就是进程中的单条流向，因为线程具有进程中的某些属性，所以线程又被称为轻量级的进程。浏览器如果是一个进程的话，那么浏览器下面的每个 tab 页可以看作是一个个的线程。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-2.jpg" alt="线程和进程持有资源的区别"></p><p>创建线程的开销要比进程小很多，因为创建线程仅仅需要<code>堆栈指针</code>和<code>程序计数器</code>就可以了，而创建进程需要操作系统分配新的地址空间，数据资源等，这个开销比较大。</p><h3 id="多进程和多线程的区别"><a href="#多进程和多线程的区别" class="headerlink" title="多进程和多线程的区别"></a>多进程和多线程的区别</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-13.jpg" alt></p><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>对于单核单线程 CPU 而言，在某一时刻只能执行一条 CPU 指令。上下文切换（Context Switch） 是一种 <strong>将 CPU 资源从一个进程分配给另一个进程的机制</strong>。从用户角度看，计算机能够并行运行多个进程，这恰恰是操作系统通过快速上下文切换造成的结果。在切换的过程中，操作系统需要先存储当前进程的状态（包括内存空间的指针，当前执行完的指令等等），再读入下一个进程的状态，然后执行此进程。</p><h3 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-3.jpg" alt></p><p><strong>管道（pipe）</strong></p><p>管道包括三种：</p><ol><li>普通管道：通常有两种限制,一是单工,只能单向传输;二是只能在父子或者兄弟进程间使用</li><li>流管道：去除了第一种限制,为半双工，只能在父子或兄弟进程间使用，可以双向传输</li><li>命名管道：可以在许多并不相关的进程之间进行通讯</li></ol><p><strong>信号量（semophore）</strong></p><p>信号量是一个计数器，可以用来控制多个进程对共享资源的访问，它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同进程之间的同步手段。</p><p><strong>消息队列（message queue）</strong></p><p>消息队列是消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信号少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p><p><strong>共享内存（shared memory）</strong></p><p>共享内存就是映射一段能被其他进程锁访问的内存。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制如信号量配合使用。</p><p><strong>套接字（socket）</strong></p><p>可以用于不同机器间的进程通信。</p><h3 id="各进程通信方式的原理"><a href="#各进程通信方式的原理" class="headerlink" title="各进程通信方式的原理"></a>各进程通信方式的原理</h3><p>管道：管道是由内核管理的一个缓冲区，相当于我们放入内存中的一个纸条。管道的一端连接一个进程的输出。这个进程会向管道中放入信息。管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息。一个缓冲区不需要很大，它被设计成为环形的数据结构，以便管道可以被循环利用。当管道中没有信息的话，从管道中读取的进程会等待，直到另一端的进程放入信息。当管道被放满信息的时候，尝试放入信息的进程会等待，直到另一端的进程取出信息。当两个进程都终结的时候，管道也自动消失。</p><p>信号量：临界区域是指执行数据更新的代码需要独占式地执行。而信号量就可以提供这样的一种访问机制，让一个临界区同一时间只有一个线程在访问它，也就是说信号量是用来调协进程对共享资源的访问的。信号量是一个特殊的变量，程序对其访问都是原子操作，且只允许对它进行等待（即P）和发送（即V）信息操作。最简单的信号量是只能取0和1的变量，这也是信号量最常见的一种形式，叫做二进制信号量。而可以取多个正整数的信号量被称为通用信号量。</p><p>消息队列：消息队列是消息的链表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列<strong>克服了信号承载信息量少</strong>，管道只能承载无格式字节流以及缓冲区大小受限等缺点。消息队列是随内核持续的。</p><p>共享内存：两个不同进程A、B共享内存的意思是，同一块物理内存被映射到进程A、B各自的进程地址空间。进程A可以即时看到进程B对共享内存中数据的更新，反之亦然。由于多个进程共享同一块内存区域，必然需要某种同步机制，互斥锁和信号量都可以。</p><p>套接字：两个基本概念：客户方和服务方。当两个应用之间需要采用SOCKET通信时，首先需要在两个应用之间（可能位于同一台机器，也可能位于不同的机器）建立SOCKET连接。</p><h3 id="进程的三态模型"><a href="#进程的三态模型" class="headerlink" title="进程的三态模型"></a>进程的三态模型</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-4.jpg" alt></p><ol><li><code>运行态</code>：运行态指的就是进程实际占用 CPU 时间片运行时</li><li><code>就绪态</code>：就绪态指的是可运行，但因为其他进程正在运行而处于就绪状态</li><li><code>阻塞态</code>：阻塞态又被称为睡眠态，它指的是进程不具备运行条件，正在等待被 CPU 调度。</li></ol><h3 id="进程的五态模型"><a href="#进程的五态模型" class="headerlink" title="进程的五态模型"></a>进程的五态模型</h3><p>在三态模型的基础上，增加了两个状态，即 <code>新建</code> 和 <code>终止</code> 状态。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-5.jpg" alt></p><ul><li>新建态：进程的新建态就是进程刚创建出来的时候（分配所需要的资源和空间）</li></ul><ul><li>终止态：进程的终止态就是指进程执行完毕，到达结束点，或者因为错误而不得不中止进程。</li></ul><p>终止一个进程需要两个步骤：</p><ol><li>先等待操作系统或相关的进程进行善后处理。</li><li>然后回收占用的资源并被系统删除。</li></ol><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><p>调度算法分为三大类：批处理中的调度、交互系统中的调度、实时系统中的调度</p><h4 id="批处理中的调度"><a href="#批处理中的调度" class="headerlink" title="批处理中的调度"></a>批处理中的调度</h4><p><strong>先来先服务</strong></p><p>缺点：没有优先级关系</p><p><strong>最短作业优先</strong></p><p>在所有的进程都可以运行的情况下，最短作业优先的算法才是最优的。</p><p>缺点：会饿死时间长的进程</p><p><strong>最短剩余时间优先</strong></p><h4 id="交互式系统中的调度"><a href="#交互式系统中的调度" class="headerlink" title="交互式系统中的调度"></a>交互式系统中的调度</h4><p><strong>轮询调度</strong></p><p><strong>优先级调度</strong></p><p><strong>彩票调度</strong>：把彩票理解为 buff，这个 buff 有 15% 的几率能让你产生 <code>速度之靴</code> 的效果</p><p><strong>公平分享调度</strong>：无论一个用户有多少个进程，都将获得相同的 CPU 份额</p><p> <strong>RR 调度算法</strong>：主要针对分时系统，RR 的调度算法会把时间片以相同的部分并循环的分配给每个进程，RR 调度算法没有优先级的概念</p><h2 id="内存管理篇"><a href="#内存管理篇" class="headerlink" title="内存管理篇"></a>内存管理篇</h2><h3 id="虚拟内存的实现方式"><a href="#虚拟内存的实现方式" class="headerlink" title="虚拟内存的实现方式"></a>虚拟内存的实现方式</h3><ul><li>分页存储管理。</li><li>分段存储管理。</li><li>段页式存储管理。</li></ul><p>不管哪种方式，都需要有一定的硬件支持。一般需要的支持有以下几个方面：</p><ul><li>一定容量的内存和外存。</li><li>页表机制（或段表机制），作为主要的数据结构。</li><li>中断机构，当用户程序要访问的部分尚未调入内存，则产生中断。</li><li>地址变换机构，逻辑地址到物理地址的变换。</li></ul><p>程序中需要用到哪块内存，就需要先加载合适的段到<strong>段基址</strong>寄存器中，再给出相对于该段基址的<strong>段偏移地址</strong>即可。CPU 中的地址加法器会将这两个地址进行合并，从地址总线送入内存。</p><h3 id="物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别"><a href="#物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别" class="headerlink" title="物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别"></a>物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别</h3><p>物理地址就是内存中真正的地址，它就相当于是你家的门牌号，你家就肯定有这个门牌号，具有唯一性。<strong>不管哪种地址，最终都会映射为物理地址</strong>。</p><p>在<code>实模式</code>下，段基址 + 段内偏移经过地址加法器的处理，经过地址总线传输，最终也会转换为<code>物理地址</code>。</p><p>但是在<code>保护模式</code>下，段基址 + 段内偏移被称为<code>线性地址</code>，不过此时的段基址不能称为真正的地址，而是会被称作为一个<code>选择子</code>的东西，选择子就是个索引，相当于数组的下标，通过这个索引能够在 GDT 中找到相应的段描述符，段描述符记录了<strong>段的起始、段的大小</strong>等信息，这样便得到了基地址。如果此时没有开启内存分页功能，那么这个线性地址可以直接当做物理地址来使用，直接访问内存。如果开启了分页功能，那么这个线性地址又多了一个名字，这个名字就是<code>虚拟地址</code>。</p><p>不论在实模式还是保护模式下，段内偏移地址都叫做<code>有效地址</code>。有效抵制也是逻辑地址。</p><p>线性地址可以看作是<code>虚拟地址</code>，虚拟地址不是真正的物理地址，但是虚拟地址会最终被映射为物理地址。下面是虚拟地址 -&gt; 物理地址的映射。</p><h3 id="空闲内存管理的方式"><a href="#空闲内存管理的方式" class="headerlink" title="空闲内存管理的方式"></a>空闲内存管理的方式</h3><p>操作系统在动态分配内存时（malloc，new），需要对空间内存进行管理。一般采用了两种方式：位图和空闲链表。</p><h4 id="位图进行管理"><a href="#位图进行管理" class="headerlink" title="位图进行管理"></a>位图进行管理</h4><p>使用位图方法时，内存可能被划分为小到几个字或大到几千字节的分配单元。每个分配单元对应于位图中的一位，0 表示空闲， 1 表示占用（或者相反）。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-8.jpg" alt></p><h4 id="空闲链表"><a href="#空闲链表" class="headerlink" title="空闲链表"></a>空闲链表</h4><p>另一种记录内存使用情况的方法是，维护一个记录已分配内存段和空闲内存段的链表，段会包含进程或者是两个进程的空闲区域。链表中的每一项都可以代表一个 <code>空闲区(H)</code> 或者是<code>进程(P)</code>的起始标志，长度和下一个链表项的位置。</p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-6.jpg" alt></p><ul><li><code>最优算法</code>在当前页面中置换最后要访问的页面。不幸的是，没有办法来判定哪个页面是最后一个要访问的，<code>因此实际上该算法不能使用</code>。然而，它可以作为衡量其他算法的标准。</li><li><code>NRU</code> 算法根据 R 位和 M 位的状态将页面氛围四类。从编号最小的类别中随机选择一个页面。NRU 算法易于实现，但是性能不是很好。存在更好的算法。</li><li><code>FIFO</code> 会跟踪页面加载进入内存中的顺序，并把页面放入一个链表中。有可能删除存在时间最长但是还在使用的页面，因此这个算法也不是一个很好的选择。</li><li><code>第二次机会</code>算法是对 FIFO 的一个修改，它会在删除页面之前检查这个页面是否仍在使用。如果页面正在使用，就会进行保留。这个改进大大提高了性能。</li><li><code>时钟</code> 算法是第二次机会算法的另外一种实现形式，时钟算法和第二次算法的性能差不多，但是会花费更少的时间来执行算法。</li><li><code>LRU</code> 算法是一个非常优秀的算法，但是没有<code>特殊的硬件(TLB)</code>很难实现。如果没有硬件，就不能使用 LRU 算法。</li><li><code>NFU</code> 算法是一种近似于 LRU 的算法，它的性能不是非常好。</li><li><code>老化</code> 算法是一种更接近 LRU 算法的实现，并且可以更好的实现，因此是一个很好的选择</li><li>最后两种算法都使用了工作集算法。工作集算法提供了合理的性能开销，但是它的实现比较复杂。<code>WSClock</code> 是另外一种变体，它不仅能够提供良好的性能，而且可以高效地实现。</li></ul><p><strong>最好的算法是老化算法和WSClock算法</strong>。他们分别是基于 LRU 和工作集算法。他们都具有良好的性能并且能够被有效的实现。还存在其他一些好的算法，但实际上这两个可能是最重要的。</p><h2 id="文件系统篇"><a href="#文件系统篇" class="headerlink" title="文件系统篇"></a>文件系统篇</h2><h3 id="提高文件系统性能的方式"><a href="#提高文件系统性能的方式" class="headerlink" title="提高文件系统性能的方式"></a><strong>提高文件系统性能的方式</strong></h3><h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p>管理高速缓存有不同的算法，常用的算法是：检查全部的读请求，查看在高速缓存中是否有所需要的块。如果存在，可执行读操作而无须访问磁盘。如果检查块不再高速缓存中，那么首先把它读入高速缓存，再复制到所需的地方。之后，对同一个块的请求都通过<code>高速缓存</code>来完成。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-7.jpg" alt></p><p>由于在高速缓存中有许多块，所以需要某种方法快速确定所需的块是否存在。常用方法是将设备和磁盘地址进行散列操作。然后在散列表中查找结果。具有相同散列值的块在一个链表中连接在一起（这个数据结构是不是很像 HashMap?），这样就可以沿着冲突链查找其他块。</p><p>如果高速缓存<code>已满</code>，此时需要调入新的块，则要把原来的某一块调出高速缓存，如果要调出的块在上次调入后已经被修改过，则需要把它写回磁盘。这种情况与分页非常相似。</p><h3 id="块提前读"><a href="#块提前读" class="headerlink" title="块提前读"></a>块提前读</h3><p>只适用于实际顺序读取的文件。对随机访问的文件，提前读丝毫不起作用。</p><h3 id="减少磁盘臂运动"><a href="#减少磁盘臂运动" class="headerlink" title="减少磁盘臂运动"></a><strong>减少磁盘臂运动</strong></h3><p>把有可能顺序访问的块放在一起，当然最好是在同一个柱面上，从而减少磁盘臂的移动次数。</p><h3 id="磁盘碎片整理"><a href="#磁盘碎片整理" class="headerlink" title="磁盘碎片整理"></a><strong>磁盘碎片整理</strong></h3><p>Windows 有一个程序 <code>defrag</code> 就是做这个事。固态硬盘并不受磁盘碎片的影响</p><h3 id="磁盘臂调度算法"><a href="#磁盘臂调度算法" class="headerlink" title="磁盘臂调度算法"></a>磁盘臂调度算法</h3><p>一般情况下，影响磁盘快读写的时间由下面几个因素决定</p><ul><li>寻道时间 - 寻道时间指的就是将磁盘臂移动到需要读取磁盘块上的时间</li><li>旋转延迟 - 等待合适的扇区旋转到磁头下所需的时间</li><li>实际数据的读取或者写入时间</li></ul><p>这三种时间参数也是磁盘寻道的过程。一般情况下，寻道时间对总时间的影响最大，所以，有效的降低寻道时间能够提高磁盘的读取速度。</p><p>一种对先来先服务的算法改良的方案是使用 <code>最短路径优先(SSF)</code> 算法</p><p>电梯算法通常情况下不如 SSF 算法</p><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><p>RAID 称为 <code>磁盘冗余阵列</code>，简称 <code>磁盘阵列</code>。利用虚拟化技术把多个硬盘结合在一起，成为一个或多个磁盘阵列组，目的是提升性能或数据冗余。</p><p>RAID 有不同的级别</p><ul><li>RAID 0 - 无容错的条带化磁盘阵列</li><li>RAID 1 - 镜像和双工</li><li>RAID 2 - 内存式纠错码</li><li>RAID 3 - 比特交错奇偶校验</li><li>RAID 4 - 块交错奇偶校验</li><li>RAID 5 - 块交错分布式奇偶校验</li><li>RAID 6 - P + Q冗余</li></ul><h2 id="IO-篇"><a href="#IO-篇" class="headerlink" title="IO 篇"></a>IO 篇</h2><h3 id="操作系统中的时钟是什么"><a href="#操作系统中的时钟是什么" class="headerlink" title="操作系统中的时钟是什么"></a>操作系统中的时钟是什么</h3><p><code>时钟(Clocks)</code> 也被称为<code>定时器(timers)</code>，时钟/定时器对任何程序系统来说都是必不可少的。时钟负责维护时间、<strong>防止一个进程长期占用 CPU 时间</strong>等其他功能。<code>时钟软件(clock software)</code>也是一种设备驱动的方式。</p><h3 id="时钟硬件"><a href="#时钟硬件" class="headerlink" title="时钟硬件"></a>时钟硬件</h3><p>由晶体振荡器、计数器和寄存器组成，示意图如下所示</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-9.jpg" alt></p><p>这种时钟称为<code>可编程时钟</code> ，可编程时钟有两种模式，一种是 <code>一键式(one-shot mode)</code>，当时钟启动时，会把存储器中的值复制到计数器中，然后，每次晶体的振荡器的脉冲都会使计数器 -1。当计数器变为 0 时，会产生一个中断，并停止工作，直到软件再一次显示启动。还有一种模式时 <code>方波(square-wave mode)</code> 模式，在这种模式下，当计数器变为 0 并产生中断后，存储寄存器的值会自动复制到计数器中，这种周期性的中断称为一个时钟周期。</p><h3 id="设备控制器的主要功能"><a href="#设备控制器的主要功能" class="headerlink" title="设备控制器的主要功能"></a>设备控制器的主要功能</h3><p>设备控制器是一个<code>可编址</code>的设备，当它仅控制一个设备时，它只有一个唯一的设备地址；如果设备控制器控制多个可连接设备时，则应含有多个设备地址，并使每一个设备地址对应一个设备。</p><p>设备控制器主要分为两种：字符设备和块设备</p><p>设备控制器的主要功能有下面这些</p><ul><li>接收和识别命令：设备控制器可以接受来自 CPU 的指令，并进行识别。设备控制器内部也会有寄存器，用来存放指令和参数</li><li>进行数据交换：CPU、控制器和设备之间会进行数据的交换，CPU 通过总线把指令发送给控制器，或从控制器中并行地读出数据；控制器将数据写入指定设备。</li><li>地址识别：每个硬件设备都有自己的地址，设备控制器能够识别这些不同的地址，来达到控制硬件的目的，此外，为使 CPU 能向寄存器中写入或者读取数据，这些寄存器都应具有唯一的地址。</li><li>差错检测：设备控制器还具有对设备传递过来的数据进行检测的功能。</li></ul><h3 id="中断处理过程"><a href="#中断处理过程" class="headerlink" title="中断处理过程"></a>中断处理过程</h3><p>下面是一些通用的中断处理程序的步骤，不同的操作系统实现细节不一样</p><ul><li>保存所有没有被中断硬件保存的寄存器</li><li>为中断服务程序设置上下文环境，可能包括设置 <code>TLB</code>、<code>MMU</code> 和页表，如果不太了解这三个概念，请参考另外一篇文章</li><li>为中断服务程序设置栈</li><li>对中断控制器作出响应，如果不存在集中的中断控制器，则继续响应中断</li><li>把寄存器从保存它的地方拷贝到进程表中</li><li>运行中断服务程序，它会从发出中断的设备控制器的寄存器中提取信息</li><li>操作系统会选择一个合适的进程来运行。如果中断造成了一些优先级更高的进程变为就绪态，则选择运行这些优先级高的进程</li><li>为进程设置 MMU 上下文，可能也会需要 TLB，根据实际情况决定</li><li>加载进程的寄存器，包括 PSW 寄存器</li><li>开始运行新的进程</li></ul><p>上面我们罗列了一些大致的中断步骤，不同性质的操作系统和中断处理程序能够处理的中断步骤和细节也不尽相同，下面是一个嵌套中断的具体运行步骤</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-10.jpg" alt></p><h3 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h3><p>DMA 的中文名称是<code>直接内存访问</code>，它意味着 CPU 授予 I/O 模块权限在<strong>不涉及 CPU</strong> 的情况下读取或写入内存。也就是 DMA 可以不需要 CPU 的参与。这个过程由称为 DMA 控制器（DMAC）的芯片管理。由于 DMA 设备可以直接在内存之间传输数据，而不是使用 CPU 作为中介，因此可以<strong>缓解总线上的拥塞</strong>。DMA 通过允许 CPU 执行任务，同时 DMA 系统通过系统和内存总线传输数据来提高系统并发性。</p><h3 id="直接内存访问的特点"><a href="#直接内存访问的特点" class="headerlink" title="直接内存访问的特点"></a>直接内存访问的特点</h3><p>DMA 方式有如下特点：</p><ul><li>数据传送以<strong>数据块</strong>为基本单位</li><li>所传送的数据从设备直接送入主存，或者从主存直接输出到设备上</li><li>仅在传送一个或多个数据块的<strong>开始和结束时才需 CPU 的干预</strong>，而整块数据的传送则是在控制器的控制下完成。</li></ul><p>DMA 方式和中断驱动控制方式相比，减少了 CPU 对 I/O 操作的干预，进一步提高了 CPU 与 I/O 设备的并行操作程度。</p><p>DMA 方式的线路简单、价格低廉，适合高速设备与主存之间的成批数据传送，小型、微型机中的快速设备均采用这种方式，但其功能较差，不能满足复杂的 I/O 要求。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h3><p>正常情况下，子进程是通过父进程创建的，子进程在创建新的进程。子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程 到底什么时候结束。 当一个 进程完成它的工作终止之后，它的父进程需要调用<code>wait()</code>或者<code>waitpid()</code>系统调用取得子进程的终止状态。</p><p>孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程（进程号为1）所收养，并由init进程对它们完成状态收集工作。</p><p>僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。</p><h3 id="死锁产生的原因"><a href="#死锁产生的原因" class="headerlink" title="死锁产生的原因"></a>死锁产生的原因</h3><p><strong>资源竞争</strong>和<strong>程序执行顺序不当</strong></p><h3 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h3><p>1.互斥条件:一个资源每次只能被一个进程使用;</p><p>2.请求与保持条件:一个进程因请求资源而阻塞时,对已获得的资源保持不放;</p><p>3.不剥夺条件:进程已获得的资源,在末使用完之前,不能强行剥夺;</p><p>4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系; </p><h3 id="死锁的恢复方式"><a href="#死锁的恢复方式" class="headerlink" title="死锁的恢复方式"></a>死锁的恢复方式</h3><h4 id="通过抢占进行恢复"><a href="#通过抢占进行恢复" class="headerlink" title="通过抢占进行恢复"></a>通过抢占进行恢复</h4><p>这种恢复方式一般比较困难而且有些简单粗暴，并不可取。</p><h4 id="通过回滚进行恢复"><a href="#通过回滚进行恢复" class="headerlink" title="通过回滚进行恢复"></a>通过回滚进行恢复</h4><p>定期检查流程，记录检测点。检测点不仅包含<code>存储映像(memory image)</code>，还包含<code>资源状态(resource state)</code>。一种更有效的解决方式是不要覆盖原有的检测点，而是每出现一个检测点都要把它写入到文件中，这样当进程执行时，就会有一系列的检查点文件被累积起来。</p><h4 id="杀死进程恢复"><a href="#杀死进程恢复" class="headerlink" title="杀死进程恢复"></a>杀死进程恢复</h4><p>但是杀死一个进程可能照样行不通，这时候就需要杀死别的资源进行恢复。</p><p>另外一种方式是选择一个环外的进程作为牺牲品来释放进程资源。</p><h3 id="如何破坏死锁"><a href="#如何破坏死锁" class="headerlink" title="如何破坏死锁"></a>如何破坏死锁</h3><h4 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h4><p>两个打印机同时使用一个资源会造成混乱</p><h4 id="破坏保持等待的条件"><a href="#破坏保持等待的条件" class="headerlink" title="破坏保持等待的条件"></a>破坏保持等待的条件</h4><p>果我们能阻止持有资源的进程请求其他资源，我们就能够消除死锁。一种实现方式是让所有的进程开始执行前请求全部的资源。<strong>无法合理有效利用资源</strong>。</p><p>允许进程只获得运行初期需要的资源，便开始运行，在运行过程中逐步释放掉分配到的已经使用完毕的资源，然后再去请求新的资源。这样的话，资源的利用率会得到提高，也会减少进程的饥饿问题。</p><h4 id="破坏不可抢占条件"><a href="#破坏不可抢占条件" class="headerlink" title="破坏不可抢占条件"></a>破坏不可抢占条件</h4><p>当一个已经持有了一些资源的进程在提出新的资源请求没有得到满足时，它必须释放已经保持的所有资源，待以后需要使用的时候再重新申请。这就意味着进程已占有的资源会被短暂地释放或者说是被抢占了。</p><p>该种方法实现起来比较复杂，且代价也比较大。释放已经保持的资源很有可能会导致进程之前的工作实效等，<strong>反复的申请和释放资源会导致进程的执行被无限的推迟</strong>，这不仅会延长进程的周转周期，还会影响系统的吞吐量。</p><h4 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h4><p>制定一个标准，一个进程在任何时候只能使用一种资源。如果需要另外一种资源，必须释放当前资源。</p><p>还可以通过定义资源类型的线性顺序来预防，可将每个资源编号，当一个进程占有编号为i的资源时，那么它下一次申请资源只能申请编号大于i的资源。如图所示：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-11.jpg" alt></p><p>这样虽然避免了循环等待，但是这种方法是比较低效的，资源的执行速度回变慢，并且可能在没有必要的情况下拒绝资源的访问，比如说，进程c想要申请资源1，如果资源1并没有被其他进程占有，此时将它分配个进程c是没有问题的，但是为了避免产生循环等待，该申请会被拒绝，这样就降低了资源的利用率</p><h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><p><strong>在使用前进行判断，只允许不会产生死锁的进程申请资源</strong></p><h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><p>银行家算法的相关数据结构：</p><p> 可利用资源向量Available：用于表示系统里边各种资源剩余的数目。由于系统里边拥有的资源通常都是有很多种（假设有m种），所以，我们用一个有m个元素的数组来表示各种资源。数组元素的初始值为系统里边所配置的该类全部可用资源的数目，其数值随着该类资源的分配与回收动态地改变。</p><p>  最大需求矩阵Max：用于表示各个进程对各种资源的额最大需求量。进程可能会有很多个（假设为n个），那么，我们就可以用一个nxm的矩阵来表示各个进程多各种资源的最大需求量</p><p>  分配矩阵Allocation：顾名思义，就是用于表示已经分配给各个进程的各种资源的数目。也是一个nxm的矩阵。</p><p>  需求矩阵Need：用于表示进程仍然需要的资源数目，用一个nxm的矩阵表示。系统可能没法一下就满足了某个进程的最大需求（通常进程对资源的最大需求也是只它在整个运行周期中需要的资源数目，并不是每一个时刻都需要这么多），于是，为了进程的执行能够向前推进，通常，系统会先分配个进程一部分资源保证进程能够执行起来。那么，进程的最大需求减去已经分配给进程的数目，就得到了进程仍然需要的资源数目了。</p><p>银行家算法通过对进程需求、占有和系统拥有资源的实时统计，确保系统在分配给进程资源不会造成死锁才会给与分配。</p><p>死锁避免的优点：不需要死锁预防中的抢占和重新运行进程，并且比死锁预防的限制要少。</p><p>死锁避免的限制：</p><ol><li>必须事先声明每个进程请求的最大资源量</li><li>考虑的进程必须无关的，也就是说，它们执行的顺序必须没有任何同步要求的限制</li><li>分配的资源数目必须是固定的。</li><li>在占有资源时，进程不能退出</li></ol><h3 id="死锁类型"><a href="#死锁类型" class="headerlink" title="死锁类型"></a>死锁类型</h3><h4 id="两阶段加锁"><a href="#两阶段加锁" class="headerlink" title="两阶段加锁"></a>两阶段加锁</h4><p>虽然很多情况下死锁的避免和预防都能处理，但是效果并不好。随着时间的推移，提出了很多优秀的算法用来处理死锁。例如在数据库系统中，一个经常发生的操作是请求锁住一些记录，然后更新所有锁定的记录。当同时有多个进程运行时，就会有死锁的风险。</p><p>一种解决方式是使用 <code>两阶段提交(two-phase locking)</code>。顾名思义分为两个阶段，一阶段是进程尝试一次锁定它需要的所有记录。如果成功后，才会开始第二阶段，第二阶段是执行更新并释放锁。第一阶段并不做真正有意义的工作。</p><p>如果在第一阶段某个进程所需要的记录已经被加锁，那么该进程会释放所有锁定的记录并重新开始第一阶段。从某种意义上来说，这种方法类似于预先请求所有必需的资源或者是在进行一些不可逆的操作之前请求所有的资源。</p><p>不过在一般的应用场景中，两阶段加锁的策略并不通用。如果一个进程缺少资源就会半途中断并重新开始的方式是不可接受的。</p><h4 id="通信死锁"><a href="#通信死锁" class="headerlink" title="通信死锁"></a>通信死锁</h4><p>我们上面一直讨论的是资源死锁，资源死锁是一种死锁类型，但并不是唯一类型，还有通信死锁，也就是两个或多个进程在发送消息时出现的死锁。进程 A 给进程 B 发了一条消息，然后进程 A 阻塞直到进程 B 返回响应。假设请求消息丢失了，那么进程 A 在一直等着回复，进程 B 也会阻塞等待请求消息到来，这时候就产生<code>死锁</code>。</p><p>尽管会产生死锁，但是这并不是一个资源死锁，因为 A 并没有占据 B 的资源。事实上，通信死锁并没有完全可见的资源。根据死锁的定义来说：每个进程因为等待其他进程引起的事件而产生阻塞，这就是一种死锁。相较于最常见的通信死锁，我们把上面这种情况称为<code>通信死锁(communication deadlock)</code>。</p><p>通信死锁不能通过调度的方式来避免，但是可以使用通信中一个非常重要的概念来避免：<code>超时(timeout)</code>。在通信过程中，只要一个信息被发出后，发送者就会启动一个定时器，定时器会记录消息的超时时间，如果超时时间到了但是消息还没有返回，就会认为消息已经丢失并重新发送，通过这种方式，可以避免通信死锁。</p><p>但是并非所有网络通信发生的死锁都是通信死锁，也存在资源死锁，下面就是一个典型的资源死锁。</p><p>当一个数据包从主机进入路由器时，会被放入一个缓冲区，然后再传输到另外一个路由器，再到另一个，以此类推直到目的地。缓冲区都是资源并且数量有限。如下图所示，每个路由器都有 10 个缓冲区（实际上有很多）。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/os-12.jpg" alt></p><p>假如路由器 A 的所有数据需要发送到 B ，B 的所有数据包需要发送到 D，然后 D 的所有数据包需要发送到 A 。没有数据包可以移动，因为在另一端没有缓冲区可用，这就是一个典型的资源死锁。</p><h4 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h4><p>某些情况下，当进程意识到它不能获取所需要的下一个锁时，就会尝试礼貌的释放已经获得的锁，然后等待非常短的时间再次尝试获取。可以想像一下这个场景：当两个人在狭路相逢的时候，都想给对方让路，相同的步调会导致双方都无法前进。</p><p>现在假想有一对并行的进程用到了两个资源。它们分别尝试获取另一个锁失败后，两个进程都会释放自己持有的锁，再次进行尝试，这个过程会一直进行重复。很明显，这个过程中没有进程阻塞，但是进程仍然不会向下执行，这种状况我们称之为 <code>活锁(livelock)</code>。</p><h2 id="收集的题目"><a href="#收集的题目" class="headerlink" title="收集的题目"></a>收集的题目</h2><h3 id="page-fault"><a href="#page-fault" class="headerlink" title="page fault"></a>page fault</h3><p>内存映射，其实就是将虚拟内存地址映射到物理内存地址。为了完成内存映射，内核为每个进程都维护了一张页表，记录虚拟地址与物理地址的映射关系。页表实际上存储在 CPU 的内存管理单元 MMU 中。而当进程访问的虚拟地址在页表中查不到时，系统会产生一个缺页异常，进入内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行，这是一个次缺页异常（minor page fault）。minor page fault 也称为 soft page fault, 指需要访问的内存不在虚拟地址空间，但是在物理内存中，只需要MMU建立物理内存和虚拟地址空间的映射关系即可。</p><p>major page fault指需要访问的内存不在虚拟地址空间，也不在物理内存中，进入内核空间分配物理内存，更新进程页表，还需要swap从磁盘中读取数据换入物理内存中。</p><ol><li>当一个进程在调用 malloc 获取虚拟空间地址后，首次访问该地址会发生一次soft page fault。</li><li>通常是多个进程访问同一个共享内存中的数据，可能某些进程还没有建立起映射关系，所以访问时会出现soft page fault</li></ol><p>invalid fault 也称为 segment fault，指进程需要访问的内存地址不在它的虚拟地址空间范围内，属于越界访问，内核会报 segment fault错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作系统简介篇&quot;&gt;&lt;a href=&quot;#操作系统简介篇&quot; class=&quot;headerlink&quot; title=&quot;操作系统简介篇&quot;&gt;&lt;/a&gt;操作系统简介篇&lt;/h2&gt;&lt;p&gt;转载：&lt;a href=&quot;https://www.zhihu.com/question/4469802
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>泛型实现</title>
    <link href="https://arthurjq.com/2021/08/17/algorithm/bigo20210817/"/>
    <id>https://arthurjq.com/2021/08/17/algorithm/bigo20210817/</id>
    <published>2021-08-17T14:24:22.000Z</published>
    <updated>2021-09-04T15:24:50.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型实现插入排序"><a href="#泛型实现插入排序" class="headerlink" title="泛型实现插入排序"></a>泛型实现插入排序</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">insertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用不了int，只能换包装类</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">213</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">4235</span><span class="token punctuation">,</span><span class="token number">426</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// compareTo方法相当于 - 号</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    T temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;泛型实现插入排序&quot;&gt;&lt;a href=&quot;#泛型实现插入排序&quot; class=&quot;headerlink&quot; title=&quot;泛型实现插入排序&quot;&gt;&lt;/a&gt;泛型实现插入排序&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code cla
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>存图方式</title>
    <link href="https://arthurjq.com/2021/08/17/algorithm/graph/"/>
    <id>https://arthurjq.com/2021/08/17/algorithm/graph/</id>
    <published>2021-08-17T07:38:32.000Z</published>
    <updated>2021-08-17T10:18:49.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存图方式"><a href="#存图方式" class="headerlink" title="存图方式"></a>存图方式</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>这是一种使用二维矩阵来进行存图的方式。</p><p>适用于<strong>边数较多</strong>的稠密图使用，当边数量接近点的数量的平方时，可定义为稠密图。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 邻接矩阵数组：w[a][b] = c 代表从 a 到 b 有权重为 c 的边</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加边操作</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    w<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>这也是一种在图论中十分常见的存图方式，与数组存储单链表的实现一致（头插法）。这种存图方式又叫链式前向星存图。</p><p>适用于<strong>边数较少</strong>的稀疏图使用，当边数量接近点的数量，可定义为稀疏图。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// N 为节点数，M 为边数</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> he <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> ne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 边的编号</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 头插法！遍历到he[a] = -1代表结束</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> he<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    he<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先 idx 是用来对边进行编号的，然后对存图用到的几个数组作简单解释：</p><ol><li>he 数组：存储是某个节点所对应的边的集合（链表）的头结点；</li><li>e 数组：存储访问某一条边指向的节点；</li><li>ne 数组：由于是以链表的形式进行存边，该数组就是用于找到下一条边；</li><li>w 数组：用于记录某条边的权重为多少。</li></ol><p>因此当我们想要遍历所有由 a 点发出的边时，可以使用如下方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> he<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存在由 a 指向 b 的边，权重为 c</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>这是一种最简单，但是相比上述两种存图方式，使用得较少的存图方式。</p><p>只有当我们需要确保某个操作复杂度严格为 O（m） 时，才会考虑使用。</p><p>具体的，我们建立一个类来记录有向边信息：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代表从 a 到 b 有一条权重为 c 的边</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> _a<span class="token punctuation">,</span> <span class="token keyword">int</span> _b<span class="token punctuation">,</span> <span class="token keyword">int</span> _c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> _a<span class="token punctuation">;</span> b <span class="token operator">=</span> _b<span class="token punctuation">;</span> c <span class="token operator">=</span> _c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常我们会使用 List 存起所有的边对象，并在需要遍历所有边的时候，进行遍历：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> es <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Edge e <span class="token operator">:</span> es<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://leetcode-cn.com/problems/network-delay-time/solution/gong-shui-san-xie-yi-ti-wu-jie-wu-chong-oghpz/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/network-delay-time/solution/gong-shui-san-xie-yi-ti-wu-jie-wu-chong-oghpz/</a></p><h2 id="743-网络延迟时间"><a href="#743-网络延迟时间" class="headerlink" title="743. 网络延迟时间"></a><a href="https://leetcode-cn.com/problems/network-delay-time/" target="_blank" rel="noopener">743. 网络延迟时间</a></h2><h3 id="Floyd（邻接矩阵）"><a href="#Floyd（邻接矩阵）" class="headerlink" title="Floyd（邻接矩阵）"></a>Floyd（邻接矩阵）</h3><p>跑一遍 Floyd，可以得到「<strong>从任意起点出发，到达任意起点的最短距离</strong>」。然后从所有 <code>w[k][x]</code>中取 max 即是「从 k 点出发，到其他点 x 的最短距离的最大值」。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">;</span>    <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        N <span class="token operator">=</span> n<span class="token punctuation">;</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化邻接矩阵</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">==</span> j <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> INF<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 存图</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">:</span> times<span class="token punctuation">)</span><span class="token punctuation">{</span>            w<span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret <span class="token operator">></span> INF <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// floyd 基本流程为三层循环：</span>        <span class="token comment" spellcheck="true">// 枚举中转点 - 枚举起点 - 枚举终点 - 松弛操作</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dijkstra（邻接矩阵）"><a href="#dijkstra（邻接矩阵）" class="headerlink" title="dijkstra（邻接矩阵）"></a>dijkstra（邻接矩阵）</h2><p>同理，我们可以使用复杂度为 O（n^2） 的「单源最短路」算法朴素 Dijkstra 算法进行求解，同时使用「邻接矩阵」来进行存图。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 邻接矩阵数组：w[a][b] = c 代表从 a 到 b 有权重为 c 的边</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span>    <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// dist[x] = y 代表从「源点/起点」到 x 的最短距离为 y</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录哪些点已经被更新过</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        N <span class="token operator">=</span> n<span class="token punctuation">;</span>        K <span class="token operator">=</span> k<span class="token punctuation">;</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化邻接矩阵</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">==</span> j <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> INF<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 存图</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">:</span> times<span class="token punctuation">)</span>w<span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意这里不能用增强for循环，因为dist[0] = INF</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret <span class="token operator">></span> INF <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 起始先将所有的点标记为「未更新」和「距离为正无穷」</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只有起点最短距离为 0</span>        dist<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 迭代 n 次，这里p没有意义</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 每次找到「最短距离最小」且「未被更新」的点 t</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 标记点 t 为已更新</span>            visited<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 用点 t 的「最小距离」更新其他点</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dijkstra（邻接表）"><a href="#dijkstra（邻接表）" class="headerlink" title="dijkstra（邻接表）"></a>dijkstra（邻接表）</h3><p>由于边数据范围不算大，我们还可以使用复杂度为 O（m logn） 的堆优化 Dijkstra 算法进行求解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">,</span>M <span class="token operator">=</span> <span class="token number">6010</span><span class="token punctuation">,</span>K<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> he <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>ne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idx<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 头插法</span>        ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> he<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        he<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>        w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        idx<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">networkDelayTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> times<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        K <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化链表头</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>he<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存图</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">:</span> times<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret <span class="token operator">></span> INF <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只有起点最短距离为 0</span>        dist<span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用「优先队列」存储所有可用于更新的点</span>        <span class="token comment" spellcheck="true">// 以 (点编号, 到起点的距离) 进行存储，优先弹出「最短距离」较小的点</span>        PriorityQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>K<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> poll <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果弹出的点被标记「已更新」，则跳过</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 标记该点「已更新」，并使用该点更新其他点的「最短距离」</span>            visited<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> he<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> b <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>b<span class="token punctuation">,</span>dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;存图方式&quot;&gt;&lt;a href=&quot;#存图方式&quot; class=&quot;headerlink&quot; title=&quot;存图方式&quot;&gt;&lt;/a&gt;存图方式&lt;/h2&gt;&lt;h3 id=&quot;邻接矩阵&quot;&gt;&lt;a href=&quot;#邻接矩阵&quot; class=&quot;headerlink&quot; title=&quot;邻接矩阵&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://arthurjq.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>dfs优化套路</title>
    <link href="https://arthurjq.com/2021/08/15/algorithm/dfs/"/>
    <id>https://arthurjq.com/2021/08/15/algorithm/dfs/</id>
    <published>2021-08-15T15:01:24.000Z</published>
    <updated>2021-08-21T14:23:29.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本优化方法"><a href="#基本优化方法" class="headerlink" title="基本优化方法"></a>基本优化方法</h2><h3 id="可行性剪枝"><a href="#可行性剪枝" class="headerlink" title="可行性剪枝"></a>可行性剪枝</h3><p>所谓可行性剪枝，顾名思义，就是当当前状态和题意不符，并且由于题目可以推出，往后的所有情况和题意都不符，那么就可以进行剪枝，直接把这种情况及后续的所有情况判负，直接返回。</p><h3 id="排除等效冗余"><a href="#排除等效冗余" class="headerlink" title="排除等效冗余"></a>排除等效冗余</h3><p>所谓排除等效冗余，就是当几个枝桠具有完全相同的效果的时候，只选择其中一个走就可以了。</p><h3 id="最优性剪枝"><a href="#最优性剪枝" class="headerlink" title="最优性剪枝"></a>最优性剪枝</h3><p>所谓最优性剪枝，是在我们用搜索方法解决最优化问题的时候的一种常用剪枝。就是当你搜到一半的时候，已经比已经搜到的最优解要不优了，那么这个方案肯定是不行的，即刻停止搜索，进行回溯。</p><h3 id="顺序剪枝"><a href="#顺序剪枝" class="headerlink" title="顺序剪枝"></a>顺序剪枝</h3><p>普遍来讲，搜索的顺序是不固定的，对一个问题来讲，算法可以进入搜索树的任意的一个子节点。但假如我们要搜索一个最小值，而非要从最大值存在的那个节点开搜，就可能存在搜索到最后才出解。而我们从最小的节点开搜很可能马上就出解。这就是顺序剪枝的一个应用。一般来讲，有单调性存在的搜索问题可以和贪心思想结合，进行顺序剪枝。</p><h3 id="记忆化"><a href="#记忆化" class="headerlink" title="记忆化"></a>记忆化</h3><p>记忆化搜索其实是搜索的另外一个分支。在这里简单介绍一下记忆化的原理：</p><p>就是记录搜索的每一个状态，当重复搜索到相同的状态的时候直接返回。</p><h2 id="何时用dfs，何时用动态规划"><a href="#何时用dfs，何时用动态规划" class="headerlink" title="何时用dfs，何时用动态规划"></a>何时用dfs，何时用动态规划</h2><ol><li>首先看取值范围，递归回溯一维数组，100就是深度的极限了（但是只要会剪枝和记忆化也是可以的）</li><li>如果是求走迷宫的【路径】，必然是回溯；如果是走迷宫的【路径的条数】，必然是dp——–(这个竟然屡试不爽！！！！)</li></ol><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><h3 id="576-出界的路径数"><a href="#576-出界的路径数" class="headerlink" title="576. 出界的路径数"></a><a href="https://leetcode-cn.com/problems/out-of-boundary-paths/" target="_blank" rel="noopener">576. 出界的路径数</a></h3><p>给你一个大小为 m x n 的网格和一个球。球的起始坐标为 [startRow, startColumn] 。你可以将球移到在四个方向上相邻的单元格内（可以穿过网格边界到达网格之外）。你 最多 可以移动 maxMove 次球。</p><p>给你五个整数 m、n、maxMove、startRow 以及 startColumn ，找出并返回可以将球移出边界的路径数量。因为答案可能非常大，返回对 109 + 7 取余 后的结果。</p><h4 id="第一个版本的垃圾代码"><a href="#第一个版本的垃圾代码" class="headerlink" title="第一个版本的垃圾代码"></a>第一个版本的垃圾代码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1表示出轨，0表示没出轨</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMove<span class="token punctuation">,</span> <span class="token keyword">int</span> startRow<span class="token punctuation">,</span> <span class="token keyword">int</span> startColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> maxMove<span class="token punctuation">;</span>        mat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>startRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>startColumn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">>=</span> mat<span class="token punctuation">.</span>length <span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">>=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> step <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ret<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>col<span class="token punctuation">,</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>col<span class="token punctuation">,</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>因为dfs函数返回值为空，导致很难使用cache记忆化</strong>，以前写dfs留下了的坏习惯，不喜欢dfs有返回值觉得麻烦。</p><h4 id="第二个版本"><a href="#第二个版本" class="headerlink" title="第二个版本"></a>第二个版本</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1表示出轨，0表示没出轨</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 四个方向</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取余</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMove<span class="token punctuation">,</span> <span class="token keyword">int</span> startRow<span class="token punctuation">,</span> <span class="token keyword">int</span> startColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> maxMove<span class="token punctuation">;</span>        mat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>startRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>startColumn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">>=</span> mat<span class="token punctuation">.</span>length <span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">>=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> step <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">:</span> dir<span class="token punctuation">)</span><span class="token punctuation">{</span>            ret <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>row <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>col <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化了dfs递归的写法</p><h4 id="剪枝优化版本"><a href="#剪枝优化版本" class="headerlink" title="剪枝优化版本"></a>剪枝优化版本</h4><p>就是可行性剪枝，剪枝技巧就是每次DFS的时候判断如果小球不管怎么移动都无法超出网格，那从这个点开始往后的枝就都可以剪掉了，简单修改下代码即可：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMove<span class="token punctuation">,</span> <span class="token keyword">int</span> startRow<span class="token punctuation">,</span> <span class="token keyword">int</span> startColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> maxMove<span class="token punctuation">;</span>        mat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>startRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>startColumn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">>=</span> mat<span class="token punctuation">.</span>length <span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">>=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> step <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> max <span class="token operator">-</span> step<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剩余的步数</span>        <span class="token comment" spellcheck="true">// 剪枝：如果小球不管怎么移动都无法越出网格，那就剪掉这个枝</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">-</span> last <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">+</span> last <span class="token operator">&lt;</span> mat<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">-</span> last <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">+</span> last <span class="token operator">&lt;</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">:</span> dir<span class="token punctuation">)</span><span class="token punctuation">{</span>            ret <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>row <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>col <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            ret <span class="token operator">%=</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 剪枝了依然超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h4><p>增加一个缓存，记录下来从每个位置在给定移动次数的范围内可以越界的次数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1表示出轨，0表示没出轨</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 缓存</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4个方向</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMove<span class="token punctuation">,</span> <span class="token keyword">int</span> startRow<span class="token punctuation">,</span> <span class="token keyword">int</span> startColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> maxMove<span class="token punctuation">;</span>        mat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mat<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> maxMove <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>startRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>startColumn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">>=</span> mat<span class="token punctuation">.</span>length <span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">>=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> step <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 缓存中存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> cache<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> max <span class="token operator">-</span> step<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 剪枝：如果小球不管怎么移动都无法越出网格，那就剪掉这个枝</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">-</span> last <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">+</span> last <span class="token operator">&lt;</span> mat<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">-</span> last <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">+</span> last <span class="token operator">&lt;</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">:</span> dir<span class="token punctuation">)</span><span class="token punctuation">{</span>            ret <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>row <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>col <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            ret <span class="token operator">%=</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录缓存</span>        cache<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ak</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>一般来说，能使用记忆化搜索的题目都可以使用动态规划来解：</p><p><code>dp[i][j][k]</code>表示从 [i,j] 位置最多移动 k 次能够把小球移出去的最大路径数量</p><p><code>dp[i][j][k] = dp[i-1][j][k-1] + dp[i+1][j][k-1] + dp[i][j-1][k-1] + dp[i][j+1][k-1]</code></p><p>注意边界条件，如果是正方形的四个顶点，有两种方法越界，其他边上的位置只有一种方法越界。</p><p>另外，要注意移动次数2的都是从移动次数为1的扩展来的，同理，移动次数3的都是从移动次数为2的扩展来的，所以要注意循环的顺序。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMove<span class="token punctuation">,</span> <span class="token keyword">int</span> startRow<span class="token punctuation">,</span> <span class="token keyword">int</span> startColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> direct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 移动步数2的都是从移动步数1的转移来的</span>        <span class="token comment" spellcheck="true">// 移动步数3的都是从移动步数2的转移来的</span>        <span class="token comment" spellcheck="true">// 所以，要从移动步数从1开始递增</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> maxMove<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 初始化，处理四条边</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 中间的位置，向四个方向延伸</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">:</span> direct<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y <span class="token operator">=</span> j <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>startRow<span class="token punctuation">]</span><span class="token punctuation">[</span>startColumn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，仍然没办法跟记忆化搜索相比，因为记忆化搜索我们可以通过剪枝等手段减少循环（递归）的次数，但是动态规划的方法每一轮都要把（m∗n）个格子重新计算一遍。</p><h3 id="526-优美的排列"><a href="#526-优美的排列" class="headerlink" title="526. 优美的排列"></a><a href="https://leetcode-cn.com/problems/beautiful-arrangement/" target="_blank" rel="noopener">526. 优美的排列</a></h3><p>假设有从 1 到 N 的 N 个整数，如果从这 N 个数字中成功构造出一个数组，使得数组的第 i 位 (1 &lt;= i &lt;= N) <strong>满足如下两个条件中的一个</strong>，我们就称这个数组为一个优美的排列。条件：</p><ul><li>第 i 位的数字能被 i 整除</li><li>i 能被第 i 位上的数字整除</li></ul><p>现在给定一个整数 N，请问可以构造多少个优美的排列？</p><h4 id="暴力版本"><a href="#暴力版本" class="headerlink" title="暴力版本"></a>暴力版本</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countArrangement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>idx <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> idx <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> idx <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    ans <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h4><p>我们仔细看题目给的限制条件是：n不会超过15，所以，我们可以只使用一个 int 类型的变量<strong>代替used数组</strong>，这其实就是状态压缩了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countArrangement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span><span class="token keyword">int</span> used<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>idx <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> used<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> idx <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> idx <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ans <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">|</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="记忆化搜索-1"><a href="#记忆化搜索-1" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h4><p>有了状态压缩基础就可以把used数组当成一个状态，idx当成一个状态缓存起来避免重复计算</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countArrangement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span><span class="token keyword">int</span> used<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>idx <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>used<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> cache<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>used<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> used<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> idx <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> idx <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ans <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">|</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cache<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>used<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h4><p>定义 <code>dp[i][used]</code> 为考虑前 i 个数，且当前选择方案为 used 的所有方案数量</p><p>一个显然的初始化条件为<code>dp[0][0] = 1</code>，代表当我们不考虑任何数（i=0）的情况下，一个数都不被选择（used = 0）为一种合法方案。</p><p>根据状态定义，位置 i 选了数值 num，通过位运算我们可以直接得出决策位置 i 之前的状态是什么：used&amp;(¬(1&lt;&lt;(num−1)))，代表将 used 的二进制表示中的第 num 位置为 0。</p><blockquote><p>一些细节：由于给定的数值范围为 [1,n]，但实现上为了方便，我们使用 used 从右往左的第 0 位表示数值 1 选择情况，第 1 位表示数值 2 的选择情况 … 即对选择数值 num 做一个 −1 的偏移。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countArrangement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>mask<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 枚举所有的状态</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> used <span class="token operator">&lt;</span> mask<span class="token punctuation">;</span> used<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 枚举位置 i（最后一位）选的数值是 num</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> num <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 首先 num 在 used 中必须是 1</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>used <span class="token operator">>></span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 数值 num 和位置 i 之间满足任一整除关系</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> num <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// used &amp; (~(1 &lt;&lt; (num - 1))) 代表将 used 中数值 num 的位置置零</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>used<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>used <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>mask <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63. 不同路径 II"></a><a href="https://leetcode-cn.com/problems/unique-paths-ii/" target="_blank" rel="noopener">63. 不同路径 II</a></h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>有了上边两题的基础这题迎刃而解~</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mat<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不记忆化的话会超时，毕竟100²的范围</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obstacleGrid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mat <span class="token operator">=</span> obstacleGrid<span class="token punctuation">;</span>        m <span class="token operator">=</span> mat<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        n <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> m <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">>=</span> n <span class="token operator">||</span> mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> cache<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">:</span> dist<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cache<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态规划-2"><a href="#动态规划-2" class="headerlink" title="动态规划"></a>动态规划</h4><p>根据上边的dfs很自然的得到递推公式：<code>dp[i][j] = dp[i][j - 1] + dp[x - 1][j]</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obstacleGrid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> obstacleGrid<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本优化方法&quot;&gt;&lt;a href=&quot;#基本优化方法&quot; class=&quot;headerlink&quot; title=&quot;基本优化方法&quot;&gt;&lt;/a&gt;基本优化方法&lt;/h2&gt;&lt;h3 id=&quot;可行性剪枝&quot;&gt;&lt;a href=&quot;#可行性剪枝&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://arthurjq.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>美团笔试</title>
    <link href="https://arthurjq.com/2021/08/15/algorithm/meituan20210815/"/>
    <id>https://arthurjq.com/2021/08/15/algorithm/meituan20210815/</id>
    <published>2021-08-15T11:11:24.000Z</published>
    <updated>2021-08-15T14:59:05.993Z</updated>
    
    <content type="html"><![CDATA[<p>一共五个题，四个编程，一个附加题写测试用例的。我的第四题打车题只过了9％，剩下的都A了，下面是题干和代码</p><h2 id="小美的序列检查"><a href="#小美的序列检查" class="headerlink" title="小美的序列检查"></a>小美的序列检查</h2><p>小美给小团一个n个数字构成的数字序列，问小团能不能经过重新排列后形成1到n的排列。</p><p>举例：</p><p>小美给小团[2, 1, 3]，则可以经过重新排列后构成[1, 2, 3]，这是可行的。</p><p>小美给小团[4, 4, 1, 3]，则无法经过重新排列后构成[1, 2, 3, 4]，这是不可行的。</p><p>为了防止小团靠运气碰对答案，小美会进行多组询问。</p><p>输入描述<br>第一行是一个数T，表示有T组数据。</p><p>对于每组数据：</p><p>第一行一个数字n表示小美给出的序列由n个数字构成。</p><p>接下来一行n个空格隔开的正整数。</p><p>输出描述<br>对于每组数据，如果可以重新排列后得到1到n的排列，回答一行Yes，如果不可以，回答No</p><p>请<strong>注意大小写</strong>。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> T <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> T<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> item <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小美的回文串构建"><a href="#小美的回文串构建" class="headerlink" title="小美的回文串构建"></a>小美的回文串构建</h2><p>小美现在有一个字符串，小美现在想知道能不能通过在字符串的<strong>尾端</strong>增加若干字符使得整个字符串变成一个回文串。</p><p>回文串的定义：若一个字符串，对他正序遍历和倒序遍历得到的结果是完全一致的，就称它是一个回文串。例如 abcba 就是一个回文串，因为无论正序还是倒序都是一样的。</p><p>对于字符串 abaaca，显然在该字符串末尾继续补上三个字符 aba 就可以构成 abaacaaba，就可以把原字符串变成回文串。换句话说，最少补上三个字符。</p><p>你的任务就是找到使得原来的字符串变成回文串所需要的最少字符数量。</p><p>本题数据保证没有空串，因此不考虑空串是否为回文串。</p><p>保证输入的字符串仅包含小写字母。</p><p>输入描述<br>一行一个字符串，代表小美交给你的字符串。</p><p>输出描述<br>一行一个整数，表示将小美给出的字符串变成回文字符串所需要添补的最少字符数量。</p><p>样例输入<br>abaaca<br>样例输出<br>3</p><p>输入样例2</p><p>aba</p><p>输出样例2</p><p>0</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>一开始看到回文串以为是动态规划，仔细看了看发现根本不是，题目其实在找从最右边开始的最长回文串是多长，找到这个长度后直接用字符串长度减去最长回文串长度就是答案了，这样看的话这个最长回文串的最后边的字符其实已经顶死了，就是字符串最后一个字符！</p><p>我的思路是先遍历一遍字符串找到与最后一个字符相同字符的位置，再用贪心算法，从左往右依次判断两个相同字符间形成的字符串是不是回文串，是的话直接返回就行了，最差的情况就是只剩最后一个字符是回文串返回的是n-1。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> last <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> last<span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> idx<span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>                ret <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小美的机器人"><a href="#小美的机器人" class="headerlink" title="小美的机器人"></a>小美的机器人</h2><p>小美在数轴上放置了若干个机器人，这些机器人每到整数时刻，就会检查是否和其他机器人重合。如果重合，它就会原地爆炸。</p><p>这些机器人的移动速度均为 1 。举例来说，如果一个机器人初始位于点3，然后它的方向是向右的，则时刻1会位于点4，时刻2会位于点5。</p><p>小美现在给小团这样一个任务：小美将给出所有机器人的初始位置和初始朝向。小团的任务是判断每个机器人的爆炸时刻。当然，如果有一些机器人永远不会爆炸，则输出-1。</p><p>小团向你求助。你能帮帮小团吗？</p><p>注意事项1：一个机器人爆炸了之后，就不会再继续存在在这个数轴上。</p><p>举例来说，如果有三个机器人，一个位于位置0，向右，一个位于位置2，向右，一个位于位置4，向左。则时刻1的时候，后两个机器人会在位置3相遇并发生爆炸，此后第一个机器人和第三个机器人不会在时刻2继续爆炸（因为此时已经不存在第三个机器人了）</p><p>注意事项2：请注意，只有整数时刻机器人才会检查重合。</p><p>举例来说，如果有两个机器人，一个位于位置1，向右，一个位于位置2，向左，则它们并不会在整数时刻重合。因此它们两个不存在相遇爆炸。</p><p>注意事项3：保证机器人初始时刻不会重叠。换句话说，不存在在时刻0就立刻爆炸的机器人。</p><p>输入描述<br>第一行一个正整数 n 表示有 n 个机器人。</p><p>接下来 n 行，每行一个正整数和一个字符，以空格分隔。正整数代表机器人的坐标，字符为大写字母 L 和 R 的其中一个，分别表示机器人向左运动 和 向右运动。</p><p>输出描述<br>输出 n 行，每行一个数字，对应表示每个机器人的答案：</p><p>若该机器人会爆炸，输出爆炸时间；若该机器人不会爆炸，输出-1。</p><p>样例输入<br>10<br>94 R<br>74 L<br>90 L<br>75 R<br>37 R<br>99 R<br>62 R<br>4 L<br>92 L<br>44 R<br>样例输出<br>-1<br>6<br>23<br>-1<br>-1<br>-1<br>6<br>-1<br>-1<br>23</p><p>提示<br>数据范围和说明</p><p>对于所有数据都保证机器人的坐标处于[1, 1e9]的正整数范围内。</p><p>其中，对于30%的数据，保证机器人数量 n &lt;= 10</p><p>对于100%的数据，保证机器人数量 n &lt;= 1,000</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>一开始处理输入数据时是把所有机器人的初始位置放到一个数组中，方向放到另一个数组中，然后想模拟每一时刻机器人的运动，但这个思路存在是个很致命的问题，就是没法判断什么时候该停止，因为不是每一个时刻都必须有机器人爆炸，所有还是要从头来处理数据。</p><p>机器人爆炸的一个必须条件是一个机器人向左而另一个机器人向右，这样才有可能相遇，所有我把机器人按左右分为两组放到两个hashmap中，key是机器人的index，value是机器人的初始位置。</p><p>每次循环分别遍历两个map找到向左的机器人的初始位置大于向右并且相减是偶数（只有相减是偶数才能相遇）的相邻最小的多组机器人处理，用一个jump数组处理已经爆炸或者没有可能爆炸的机器人。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> leftMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> rightMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                leftMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                rightMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jump <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>rightMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> minTime <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> key1 <span class="token operator">:</span> leftMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jump<span class="token punctuation">[</span>key1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> pos1 <span class="token operator">=</span> leftMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> key2 <span class="token operator">:</span> rightMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>jump<span class="token punctuation">[</span>key2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> pos2 <span class="token operator">=</span> rightMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos1 <span class="token operator">></span> pos2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pos1 <span class="token operator">-</span> pos2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>pos1 <span class="token operator">-</span> pos2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> minTime<span class="token punctuation">)</span><span class="token punctuation">{</span>                            minTime <span class="token operator">=</span> t<span class="token punctuation">;</span>                            list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>                            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> minTime<span class="token punctuation">)</span><span class="token punctuation">{</span>                            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">;</span>                            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>jump<span class="token punctuation">[</span>key1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>                    ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> minTime<span class="token punctuation">;</span>                    jump<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小美的最快到达时间"><a href="#小美的最快到达时间" class="headerlink" title="小美的最快到达时间"></a>小美的最快到达时间</h2><p>小美现在临时接到一个会议通知，需要立刻赶往对应地点开会。</p><p>不妨将小美所在的地点抽象成一个图。小美位于节点x的位置，将要赶往节点y开会。</p><p>小美启动了打车软件，该打车软件可以将起点定位在任何一个节点开始叫车。但是，叫车是需要时间的，不同位置叫车的等车时间不同。</p><p>这就意味着，考虑到叫车的时间，小美可以不选自己所在的节点叫车，而选择一个附近的点叫车，在等车时间内自行走路到对应的节点以缩短综合时间，更快地赶到目的地开会。</p><p>请注意：小美的叫车终点只能是开会处，即此题不考虑通过多次打车来缩短时间，只考虑更改起点带来的时间减少。</p><p>下面给出一个简单的例子来帮助你理解：</p><p>小美位于节点1，开会的地点位于节点3</p><p>节点1和节点2之间有一条汽车通行时长为1，步行通行时间为2的通路；</p><p>节点2和节点3之间有一条汽车通行时长为2，步行通行时间为5的道路；</p><p>节点1的打车等候时间为10，节点2的打车等候时间为1，节点3的打车等候时间为5</p><p>此时，显然小美有如下几种方案：</p><p>第一种方案：小美在节点1打车，此时小美需要先等时间10上车，之后花费3的时间抵达节点3，共计花费时长13；</p><p>第二种方案：小美在节点2打车，此时小美需要步行时长2抵达节点2，此时汽车司机已经等候在节点2，小美直接上车，通行时长2后抵达节点3。共计花费时长为4。</p><p>第三种方案：小美直接步行到节点3（因为节点3是开会地点，显然在节点3打车无意义），此时花费的时长为7。</p><p>以上三种方案中，应选第二种方案能最快抵达开会地点。共计花费时长为4。</p><p>注意：实际打车过程中，司机会存在客人太久没来上车自行取消的可能，这里为了简化问题，我们假设司机耐心是充分的，可以无限制等候乘客。</p><p>输入描述<br>第一行四个正整数n,m,x,y，空格隔开，其中 n 表示点的数量，点的序号依次表示为 1 到 n；m表示边的数量；x表示小美当前的节点位置，y表示小美开会的节点位置。</p><p>接下来 m 行，每行四个正整数，空格隔开，x, y, p, q，表示节点 x 和节点 y 之间有一条汽车通行时长 p，步行通行时长 q 的双向道路。</p><p>接下来一行 n 个空格隔开的正整数，第 i 个正整数表示在第i个节点打车所需要花费的等车时间。</p><p>输出描述<br>输出一行一个正整数表示小美最快抵达开会地点的时间。</p><p>样例输入<br>3 2 1 3<br>1 2 1 2<br>2 3 2 5<br>10 1 5<br>样例输出<br>4</p><p>提示<br>数据范围和说明</p><p>对于全体数据保证p和q（即汽车通行时间和步行时间）都是[1, 50]内的正整数，保证每个点打车的等候时间都是[1, 1000]内的正整数</p><p>对于n和m，对于60%的数据，保证 1&lt;= n &lt;= 10, 1 &lt;= m &lt;= 30, 对于100%的数据，保证 1&lt;= n &lt;= 50, 1 &lt;= m &lt;= 200，数据保证没有重复的边。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>没写出来，只碰了9%，动态规划，等我学习明白先</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一共五个题，四个编程，一个附加题写测试用例的。我的第四题打车题只过了9％，剩下的都A了，下面是题干和代码&lt;/p&gt;
&lt;h2 id=&quot;小美的序列检查&quot;&gt;&lt;a href=&quot;#小美的序列检查&quot; class=&quot;headerlink&quot; title=&quot;小美的序列检查&quot;&gt;&lt;/a&gt;小美的序列
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>差分数组</title>
    <link href="https://arthurjq.com/2021/08/14/algorithm/diff-array/"/>
    <id>https://arthurjq.com/2021/08/14/algorithm/diff-array/</id>
    <published>2021-08-14T13:26:15.000Z</published>
    <updated>2021-08-15T16:13:39.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>差分数组本质上也是一个数组，我们暂且定义差分数组为d，差分数组d的大小和原来arr数组大小一样，而且d[i]=arr[i]-arr[i-1]，且d[i]=0，它的含义是什么？就是原来数组i位置上的元素和i-1位置上的元素作差，得到的值就是d[i]的值。</p><p>如果需要对L-R范围内所有数都进行相同的操作，我们不需要从L-R遍历arr然后在每个值上进行相同操作，只需要在差分数组d中改变L和R+1的值即可。但是在查询arr数组中某个位置的数时，却要根据差分数组从前往后递推求值。</p><p>所以，该方法适用于<strong>区间频繁修改</strong>，而且这个<strong>区间范围是比较大</strong>的，<strong>离线查询</strong>的情况。</p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><h4 id="1674-使数组互补的最少操作次数"><a href="#1674-使数组互补的最少操作次数" class="headerlink" title="1674. 使数组互补的最少操作次数"></a><a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/" target="_blank" rel="noopener">1674. 使数组互补的最少操作次数</a></h4><p>给你一个长度为 偶数 n 的整数数组 nums 和一个整数 limit 。每一次操作，你可以将 nums 中的任何整数替换为 1 到 limit 之间的另一个整数。</p><p>如果对于所有下标 i（下标从 0 开始），nums[i] + nums[n - 1 - i] 都<strong>等于同一个数</strong>，则数组 nums 是 互补的 。例如，数组 [1,2,3,4] 是互补的，因为对于所有下标 i ，nums[i] + nums[n - 1 - i] = 5 。</p><p>返回使数组 互补 的 最少 操作次数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>有n个数字，即n/2个数对，每个数字的取值范围是1<del>limit，所以显然一个数对的和的取值范围是2</del>2 * limit。<br>我们用一个数组arr[ ]来记录将所有数对和转化成某一个数需要的操作次数，其中arr[i]表示将所有数对和转化成i需要的次数。<br>接下来我们举几个例子寻找一下规律：<br>假设数组是1,3,4,2。limit = 5，则第一个数对为（1,2）<br>我们找出每一个数对的最大值max和最小值min。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/diff-array-1.png" alt></p><p>如图中数对，将该数对和转化成3所需要的操作次数显然是0，接下来还要讨论转化次数为1和转化次数为2的情况。<br>显然转化1次能取到的最小值是min + 1，能取到的最大值是max + limit，那么在这范围之外的就是需要转化次数2次。<br>所以对于每一对数对：分如下几种情况</p><ol><li>在[2, min]这个区间，arr[i] += 2;</li><li>在[min + 1, min + max]区间，arr[i] += 1;</li><li>在min + max上，arr[i] += 0;</li><li>在[min + max + 1, max + limit]区间上，arr[i] += 1;</li><li>在[max + limit + 1, limit + limit]区间上，arr[i] += 2;</li></ol><p>对于上述的操作，是<strong>典型的区间加减</strong>，需要用到差分数组</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMoves</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> diff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>limit <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>                diff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                diff<span class="token punctuation">[</span>min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            diff<span class="token punctuation">[</span>max <span class="token operator">+</span> min<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> min <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                diff<span class="token punctuation">[</span>max <span class="token operator">+</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> limit <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                diff<span class="token punctuation">[</span>max <span class="token operator">+</span> limit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> diff<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            now <span class="token operator">+=</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;差分数组本质上也是一个数组，我们暂且定义差分数组为d，差分数组d的大小和原来arr数组大小一样，而且d[i]=arr[i]-arr[i-1]
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://arthurjq.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>测试用例七大设计方法</title>
    <link href="https://arthurjq.com/2021/08/04/ce-shi-yong-li-she-ji-fang-fa/"/>
    <id>https://arthurjq.com/2021/08/04/ce-shi-yong-li-she-ji-fang-fa/</id>
    <published>2021-08-04T15:15:55.000Z</published>
    <updated>2021-09-10T08:54:59.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用例编写步骤"><a href="#用例编写步骤" class="headerlink" title="用例编写步骤"></a>用例编写步骤</h2><p>拿到测试需求 -&gt; 分析需求（画思维导图） -&gt; 编写用例 -&gt; 划分用例优先级</p><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p>需求阶段：开会讨论需求是否合理，排期</p><p>设计阶段：架构设计（画架构设计图），概要设计（分析需求），实现算法，再开会讨论（对接口，对测试用例）</p><p>技术选型：申请资源，搭环境，写代码，单元测试，发布测试环境</p><p>测试</p><p>验证阶段：是否符合预期，提出新的需求</p><p>合并主分支</p><p>构建部署：预发布测试没问题再发布正式环境</p><h2 id="用例编写特性"><a href="#用例编写特性" class="headerlink" title="用例编写特性"></a>用例编写特性</h2><ol><li><strong>一致性</strong>：主要包括用例模板一致；各同事的编写手法一致；以及用例的细粒度一致。</li><li><strong>覆盖率</strong>：主要包括对需求的覆盖（也包含隐含的需求）；新需求可能对哪些功能会产生影响的覆盖；</li><li><strong>可执行性</strong>：主要是指步骤易于理解、信息描述准确、且能快速识别出测试点。</li><li><strong>执行准确性</strong>：是指用例执行的准确度，本身没有什么技术含量。执行人对待测试用例的态度要端正。</li><li><strong>持续更新</strong>：要及时不断地更新，要尽量减少用例库中失效的用例。</li><li><strong>复用性</strong>：主要用例可以被不断的复用，从而减少维护成本。</li></ol><h2 id="用例设计方法"><a href="#用例设计方法" class="headerlink" title="用例设计方法"></a>用例设计方法</h2><h3 id="等价类与边界值（重点）"><a href="#等价类与边界值（重点）" class="headerlink" title="等价类与边界值（重点）"></a>等价类与边界值（重点）</h3><p>等价类：等价类划分法是把所有可能输入的数据，有无效等价类和有效等价类（即正确输入和非法输入），即程序的输入域划分策划国内若干部分（子集），然后从每一个子集中选取少数具有代表性的数据作为测试用例。方法是一种重要的、常用的黑盒测试用例设计方法。</p><p>边界值：边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。</p><p>与等价类区别：</p><p>边界值分析不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。</p><p>边界值分析不仅考虑输入条件，还要考虑输出空间产生的测试情况。</p><p>等价类与边界值的结合使用：</p><p>例：一个文本框的输入长度为 6-10 个字符</p><p>分析：有效等价类： &gt;=6个字符，&lt;=10个字符</p><p>​           无效等价类：&lt;6个字符，&gt;10个字符</p><p>​           边界值：5,6,7,9,10,11个字符</p><h3 id="场景法（重点）"><a href="#场景法（重点）" class="headerlink" title="场景法（重点）"></a>场景法（重点）</h3><p>定义：通过运用场景来对系统的功能点或业务流程的描述，从而提高测试效果的一种方法。用例场景来测试需求是指模拟特定场景边界发生的事情，通过事件来触发某个动作的发生，观察事件的最终结果，从而用来发现需求中存在的问题。</p><p>基本流：是经过用例的最简单的路径（无任何差错，程序从开始直接执行到结束）</p><p>备选流：一个备选流可能从基本流开始，在某个特定条件下执行，然后重新加入基本流中，也可以起源于另一个备选流，或终止用例，不在加入到基本流中；（各种错误情况）</p><p>场景法的运用：</p><p>例：有一个在线购物的实例，用户进入一个在线购物网站进行购物，选购物品后，进行在线购买，这时需要使用帐号登录，登录成功后，进行付钱交易，交易成功后，生成订购单，完成整个购物过程。</p><p>​        · 基本流</p><p>​        · 备选流： 1) 进入购物网站，选择物品，登录账号，付费，生成订单</p><p>​                2）账号不存在</p><p>​                3) 账户余额不足</p><p>​                更多的备选流。。。。。。</p><h3 id="正交排列驱动法"><a href="#正交排列驱动法" class="headerlink" title="正交排列驱动法"></a>正交排列驱动法</h3><p>定义：在界面中有多个控件，控件之间有多种组合关系，如果组合的数量巨大（一般超过20种），没有必要将所有组合都测试，可以通过正交排列法将组合中最优，最少的组合进行测试。</p><h3 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h3><p>1.定义：是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。</p><p>2.因果图法产生的背景：</p><p>等价类划分法和边界值分析方法都是着重考虑输入条件，但没有考虑输入条件的各种组合、输入条件之间的相互制约关系。这样虽然各种输入条件可能出错的情况已经测试到了，但多个输入条件组合起来可能出错的情况却被忽视了。</p><p>如果在测试时必须考虑输入条件的各种组合，则可能的组合数目将是天文数字，因此必须考虑采用一种适合于描述多种条件的组合、相应产生多个动作的形式来进行测试用例的设计，这就需要利用因果图（逻辑模型）。</p><p>根据输入条件的各种组合，以及相互制约关系的一种方法<br>设计步骤：<br>（a）确定原因和结果，并为每个原因和结果编号<br>（b）确定原因和结果的制约关系，生成因果图<br>（c）根据因果图，产生判定表<br>（d）把判定表的每一列拿出来，作为数据，设计测试用例<br>原因和原因之间的关系有：异E（最多有一个，互斥），或I（至少有一个），唯一O（有且只能有一个），要求R（a为1时，b也必须为1）<br>原因和结果之间的关系有：与，或，非，恒等<br>缺点：因果关系庞大，生成判定表麻烦，设计测试用例较复杂</p><h3 id="判定表"><a href="#判定表" class="headerlink" title="判定表"></a>判定表</h3><p>定义：判定表是分析和表达多逻辑条件下执行不同操作的情况的工具。</p><p> 判定表的优点</p><p> · 能够将复杂的问题按照各种可能的情况全部列举出来，简明并避免遗漏。因此，利用判定表能够设计出完整的测试用例集合。</p><p>  ·在一些数据处理问题当中，某些操作的实施依赖于多个逻辑条件的组合，即：针对不同逻辑条件的组合值，分别执行不同的操作。判定表很适合于处理这类问题。</p><p>  判定表通常由四个部分组成如下图所示：</p><p>1)条件桩（Condition Stub）：列出了问题得所有条件。通常认为列出的条件的次序无关紧要。</p><p>2)动作桩（Action Stub）：列出了问题规定可能采取的操作。这些操作的排列顺序没有约束。</p><p>3)条件项（Condition Entry）：列出针对它左列条件的取值。在所有可能情况下的真假值。</p><p>4)动作项（Action Entry）：列出在条件项的各种取值情况下应该采取的动作。</p><h3 id="错误推测法"><a href="#错误推测法" class="headerlink" title="错误推测法"></a>错误推测法</h3><p>定义：基于经验和直觉推测程序中所有可能存在的各种错误, 从而有针对性的设计测试用例的方法</p><p>错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况,根据他们选择测试用例</p><p>转载：<a href="https://www.cnblogs.com/jingxuan-li/p/9051945.html" target="_blank" rel="noopener">https://www.cnblogs.com/jingxuan-li/p/9051945.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用例编写步骤&quot;&gt;&lt;a href=&quot;#用例编写步骤&quot; class=&quot;headerlink&quot; title=&quot;用例编写步骤&quot;&gt;&lt;/a&gt;用例编写步骤&lt;/h2&gt;&lt;p&gt;拿到测试需求 -&amp;gt; 分析需求（画思维导图） -&amp;gt; 编写用例 -&amp;gt; 划分用例优先级&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>最近刷Leetcode时遇到的坑</title>
    <link href="https://arthurjq.com/2021/07/30/leetcodenote/"/>
    <id>https://arthurjq.com/2021/07/30/leetcodenote/</id>
    <published>2021-07-29T16:34:25.000Z</published>
    <updated>2021-09-04T14:57:36.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="double-转-int"><a href="#double-转-int" class="headerlink" title="double 转 int"></a>double 转 int</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">double</span> a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换底公式，相当于log2()</span><span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个方法需要创建Double对象，才能调用这个方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似的转byte的方法：byteValue（）</p><p>转long：longValue（）</p><p>转float：floatValue（）</p><h2 id="找二叉树的同一层的对称节点"><a href="#找二叉树的同一层的对称节点" class="headerlink" title="找二叉树的同一层的对称节点"></a>找二叉树的同一层的对称节点</h2><p>该层的最大值+最小值 = A节点 + A节点的对称节点</p><p>=》 该层的最大值+最小值 - A节点 = A节点的对称节点</p><h2 id="环形数组下标移动"><a href="#环形数组下标移动" class="headerlink" title="环形数组下标移动"></a>环形数组下标移动</h2><p>计算下一个跳转点 next = cur + nums[cur] 时，对于越过数组的情况进行处理：</p><p>如果 next 为负数：在 next的基础上增加 <code>n *⌈next/n⌉</code>，将其映射回正值；</p><p>如果 next 为正数：将 next 模 数组长度 n，确保不会越界。</p><p>整理一下，我们可以统一写成 <code>next = ((cur + nums[cur]) % n + n ) % n</code>。</p><h2 id="Pair-lt-K-V-gt-键值对"><a href="#Pair-lt-K-V-gt-键值对" class="headerlink" title="Pair&lt;K,V&gt;键值对"></a>Pair&lt;K,V&gt;键值对</h2><p>Pair 类在 javafx.util 包中</p><p>Pair键值对只有get方法，<strong>没有set方法</strong></p><h2 id="子数组必须是连续的！！！"><a href="#子数组必须是连续的！！！" class="headerlink" title="子数组必须是连续的！！！"></a>子数组必须是连续的！！！</h2><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>PriorityQueue的peek和element操作是常数时间，add, offer, 无参数的remove以及poll方法的时间复杂度都是<code>log(N)</code></p><p>实现从小到大排序：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityQ</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PriorityQueue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// compareTo方法比较不了int！！！</span>                    Integer temp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> temp<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//output</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;double-转-int&quot;&gt;&lt;a href=&quot;#double-转-int&quot; class=&quot;headerlink&quot; title=&quot;double 转 int&quot;&gt;&lt;/a&gt;double 转 int&lt;/h2&gt;&lt;pre class=&quot;line-numbers language
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://arthurjq.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>一键构建流程图</title>
    <link href="https://arthurjq.com/2021/07/15/project/onekey/"/>
    <id>https://arthurjq.com/2021/07/15/project/onekey/</id>
    <published>2021-07-15T04:34:51.000Z</published>
    <updated>2021-08-04T10:25:02.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="点击放大"><a href="#点击放大" class="headerlink" title="点击放大"></a>点击放大</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/onekey.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;点击放大&quot;&gt;&lt;a href=&quot;#点击放大&quot; class=&quot;headerlink&quot; title=&quot;点击放大&quot;&gt;&lt;/a&gt;点击放大&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/arthurjq/blogimage/raw/master/img/
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="流程图" scheme="https://arthurjq.com/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
      <category term="一键构建" scheme="https://arthurjq.com/tags/%E4%B8%80%E9%94%AE%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>sql的三值逻辑</title>
    <link href="https://arthurjq.com/2021/07/05/database/sql-null/"/>
    <id>https://arthurjq.com/2021/07/05/database/sql-null/</id>
    <published>2021-07-05T03:58:15.000Z</published>
    <updated>2021-07-13T09:34:07.005Z</updated>
    
    <content type="html"><![CDATA[<p>在SQL中，NULL是一种特有的数据类型，其等价于没知有任何值、是未知数。NULL与0、空道字符串、空格都不同。SQL默认情况下对WHERE XX！= Null的判断会永远返回0行，却不会提示语法错误。内容<br>非ANSI SQL标准中data=NULL等同于data IS NULL，data&lt;&gt;NULL等同于data IS NOT NULL。<br>所以：默认情况下做比较条件时使用关键字“is null”和“is not null”。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- SQL 不报错，但查不出结果</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_sample_null <span class="token keyword">WHERE</span> remark <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三值逻辑"><a href="#三值逻辑" class="headerlink" title="三值逻辑"></a>三值逻辑</h2><p>在主流的编程语言中（C、JAVA、Python、JS等）中，逻辑值确实只有 2 个，但在 SQL 中却存在第三个逻辑值：unknown。这有点类似于我们平时所说的：对、错、不知道。</p><p>逻辑值 unknown 和作为 NULL 的一种的 UNKNOWN （未知）是不同的东西。前者是明确的布尔型的逻辑值，后者既不是值也不是变量。为了便于区分，前者采用小写字母 unknown ，后者用大写字母 UNKNOWN 来表示。为了让大家理解两者的不同，我们来看一个 x=x 这样的简单等式。x 是逻辑值 unknown 时，x=x 被判断为 true ，而 x 是 UNKNOWN 时被判断为 unknown </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 这个是明确的逻辑值的比较</span>unknown <span class="token operator">=</span> unknown → <span class="token boolean">true</span><span class="token comment" spellcheck="true">-- 这个相当于NULL = NULL</span>UNKNOWN <span class="token operator">=</span> UNKNOWN → unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三值逻辑的逻辑值表"><a href="#三值逻辑的逻辑值表" class="headerlink" title="三值逻辑的逻辑值表"></a>三值逻辑的逻辑值表</h2><p>NOT:</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/sql-null-1.jpg" alt></p><p>AND:</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/sql-null-2.jpg" alt></p><p>OR:</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/sql-null-3.jpg" alt></p><p>图中蓝色部分是三值逻辑中独有的运算，这在二值逻辑中是没有的。其余的 SQL 谓词全部都能由这三个逻辑运算组合而来。从这个意义上讲，这个几个逻辑表可以说是 SQL 的母体（matrix）。</p><p>NOT 的话，因为逻辑值表比较简单，所以很好记；但是对于 AND 和 OR，因为组合出来的逻辑值较多，所以全部记住非常困难。为了便于记忆，请注意这三个逻辑值之间有下面这样的优先级顺序。</p><p>AND 的情况： false ＞ unknown ＞ true</p><p>OR 的情况： true ＞ unknown ＞ false</p><p>　　　　优先级高的逻辑值会决定计算结果。例如 true AND unknown ，因为 unknown 的优先级更高，所以结果是 unknown 。而 true OR unknown 的话，因为 true 优先级更高，所以结果是 true 。记住这个顺序后就能更方便地进行三值逻辑运算了。特别需要记住的是，当 AND 运算中包含 unknown 时，结果肯定不会是 true （反之，如果AND 运算结果为 true ，则参与运算的双方必须都为 true ）。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 假设 a = 2, b = 5, c = NULL，下列表达式的逻辑值如下</span><span class="token number">a</span> <span class="token operator">&lt;</span> <span class="token number">b</span> <span class="token operator">AND</span> <span class="token number">b</span> <span class="token operator">></span> <span class="token number">c</span>  → unknown<span class="token number">a</span> <span class="token operator">></span> <span class="token number">b</span> <span class="token operator">OR</span> <span class="token number">b</span> <span class="token operator">&lt;</span> <span class="token number">c</span>   → unknown<span class="token number">a</span> <span class="token operator">&lt;</span> <span class="token number">b</span> <span class="token operator">OR</span> <span class="token number">b</span> <span class="token operator">&lt;</span> <span class="token number">c</span>   → <span class="token boolean">true</span><span class="token operator">NOT</span> <span class="token punctuation">(</span><span class="token number">b</span> <span class="token operator">&lt;></span> <span class="token number">c</span><span class="token punctuation">)</span>     → unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="“IS-NULL”-而非-“-NULL”"><a href="#“IS-NULL”-而非-“-NULL”" class="headerlink" title="“IS NULL” 而非 “= NULL”"></a>“IS NULL” 而非 “= NULL”</h2><p>我们再回到问题：为什么必须写成“IS NULL”，而不是“＝ NULL”</p><p>对 NULL 使用比较谓词后得到的结果总是 unknown 。而查询结果只会包含 WHERE 子句里的判断结果为 true 的行，不会包含判断结果为 false 和 unknown 的行。不只是等号，对 NULL 使用其他比较谓词，结果也都是一样的。所以无论 remark 是不是 NULL ，比较结果都是 unknown ，那么永远没有结果返回。以下的式子都会被判为 unknown</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 以下的式子都会被判为 unknown</span><span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token operator">></span> <span class="token boolean">NULL</span><span class="token operator">&lt;</span> <span class="token boolean">NULL</span><span class="token operator">&lt;></span> <span class="token boolean">NULL</span><span class="token boolean">NULL</span> <span class="token operator">=</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，为什么对 NULL 使用比较谓词后得到的结果永远不可能为真呢？这是因为，NULL 既不是值也不是变量。NULL 只是一个表示“没有值”的标记，而比较谓词只适用于值。因此，对并非值的 NULL 使用比较谓词本来就是没有意义的。“列的值为 NULL ”、“NULL 值” 这样的说法本身就是错误的。因为 NULL不是值，所以不在定义域（domain）中。相反，如果有人认为 NULL 是值，那么我们可以倒过来想一下：它是什么类型的值？关系数据库中存在的值必然属于某种类型，比如字符型或数值型等。所以，假如 NULL 是值，那么它就必须属于某种类型。</p><p>NULL 容易被认为是值的原因有两个。第一个是高级编程语言里面，NULL 被定义为了一个常量（很多语言将其定义为了整数0），这导致了我们的混淆。但是，SQL 里的 NULL 和其他编程语言里的 NULL 是完全不同的东西。第二个原因是，IS NULL 这样的谓词是由两个单词构成的，所以我们容易把 IS 当作谓词，而把 NULL 当作值。特别是 SQL 里还有 IS TRUE 、IS FALSE 这样的谓词，我们由此类推，从而这样认为也不是没有道理。但是正如讲解标准 SQL 的书里提醒人们注意的那样，我们应该把 IS NULL 看作是一个谓词。因此，写成 IS_NULL 这样也许更合适。</p><p>转载：<a href="https://www.cnblogs.com/youzhibing/p/11337745.html" target="_blank" rel="noopener">https://www.cnblogs.com/youzhibing/p/11337745.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SQL中，NULL是一种特有的数据类型，其等价于没知有任何值、是未知数。NULL与0、空道字符串、空格都不同。SQL默认情况下对WHERE XX！= Null的判断会永远返回0行，却不会提示语法错误。内容&lt;br&gt;非ANSI SQL标准中data=NULL等同于data I
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="sql" scheme="https://arthurjq.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="https://arthurjq.com/2021/07/01/linux/"/>
    <id>https://arthurjq.com/2021/07/01/linux/</id>
    <published>2021-06-30T18:07:27.000Z</published>
    <updated>2021-09-17T03:23:27.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用的文件操作指令"><a href="#常用的文件操作指令" class="headerlink" title="常用的文件操作指令"></a>常用的文件操作指令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> --help             <span class="token comment" spellcheck="true"># 查看当前命令下的所有参数用法</span><span class="token function">ls</span> -l                 <span class="token comment" spellcheck="true"># 等于ll</span><span class="token function">cd</span> <span class="token punctuation">..</span>                 <span class="token comment" spellcheck="true"># 回到上一级</span><span class="token function">cd</span> ~                  <span class="token comment" spellcheck="true"># 回到用户主目录</span><span class="token function">cd</span> ./                 <span class="token comment" spellcheck="true"># 在当前目录下逐级打开下级目录</span><span class="token function">mkdir</span>                 <span class="token comment" spellcheck="true"># 创建文件夹（目录）</span><span class="token function">rm</span>                    <span class="token comment" spellcheck="true"># 删除文件或目录</span><span class="token function">cp</span> 文件名 目标路径     <span class="token comment" spellcheck="true"># 复制文件</span><span class="token function">cp</span> -R 目录名 目标路径  <span class="token comment" spellcheck="true"># 复制文件夹 cp -r /test1/. /test2</span><span class="token function">mv</span> 原文件名 目标文件名 <span class="token comment" spellcheck="true"># 移动文件或文件夹，可以用来重命名</span><span class="token function">touch</span> xxx.txt         <span class="token comment" spellcheck="true"># 更新文件的访问时间戳或者创建一个空文件</span><span class="token function">cat</span>                   <span class="token comment" spellcheck="true"># 查看某个文件的内容</span><span class="token function">more</span>                  <span class="token comment" spellcheck="true"># 查看内容，会分页</span><span class="token function">chmod</span>                 <span class="token comment" spellcheck="true"># sudo chmod +x run.sh后./run.sh运行脚本</span><span class="token function">chmod</span> u<span class="token operator">=</span>rwx,g<span class="token operator">=</span>rwx,o<span class="token operator">=</span>rwx <span class="token function">file</span> <span class="token operator">=</span> <span class="token function">chmod</span> 777 <span class="token function">file</span> <span class="token operator">=</span> <span class="token function">chmod</span> a<span class="token operator">=</span>rwx <span class="token function">file</span><span class="token function">find</span> 目录 -name 文件名 <span class="token comment" spellcheck="true"># 查找文件</span><span class="token function">vi</span>                    <span class="token comment" spellcheck="true"># 字母i进入编辑模式，esc退出编辑模式，wq是保存修改，q!是强制退出</span><span class="token function">wc</span>                    <span class="token comment" spellcheck="true"># 计算指定文件的行数、字数，以及字节数</span>3 92 598 testfile     <span class="token comment" spellcheck="true"># testfile文件的行数为3、单词数92、字节数598</span><span class="token function">du</span> -sh <span class="token keyword">.</span>              <span class="token comment" spellcheck="true"># 对当前目录下所有的目录和文件的大小进行汇总,-s表示汇总,-h人性化显示</span><span class="token function">du</span> -sh *              <span class="token comment" spellcheck="true"># 对当前目录下每一个目录和文件的大小分别进行汇总</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ifconfig</span>              <span class="token comment" spellcheck="true"># 查看网络接口的状态，ip地址，物理地址等等</span><span class="token function">ping</span>  ip              <span class="token comment" spellcheck="true"># 网络试探</span><span class="token function">netstat</span>               <span class="token comment" spellcheck="true"># 显示当前应用的网络使用情况</span><span class="token function">netstat</span> -an <span class="token operator">|</span> <span class="token function">grep</span> 21 <span class="token comment" spellcheck="true"># 21端口是否已经被占用</span><span class="token function">lsof</span>                  <span class="token comment" spellcheck="true"># 查看某个端口是否被占用 lsof -i:21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="netstat-an"><a href="#netstat-an" class="headerlink" title="netstat -an"></a>netstat -an</h3><p>“-a”选项意在显示所有连接，当不附加”-n”选项时，它显示的是本地计算机的netbios名字+端口号。而加了”-n”选项后，它显示的是本地IP地址+端口号。</p><p>grep -w（-w用于字符串精确匹配，默认匹配一个单词）例如我想匹配 “like”， 不加 -w 就会匹配到 “liker”， 加 -w 就不会匹配到</p><h2 id="系统操作命令"><a href="#系统操作命令" class="headerlink" title="系统操作命令"></a>系统操作命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">shutdown</span>             <span class="token comment" spellcheck="true"># 关机</span><span class="token function">uname</span>                <span class="token comment" spellcheck="true"># 获取当前系统信息</span><span class="token function">kill</span> -9 进程         <span class="token comment" spellcheck="true"># 杀死进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>-F参数：指定分隔符，可指定一个或多个</p><p>print 后面做字符串的拼接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{pattern + action}'</span> <span class="token punctuation">{</span>filenames<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</span>1.命令行方式<span class="token function">awk</span> <span class="token punctuation">[</span>-F  field-separator<span class="token punctuation">]</span>  <span class="token string">'commands'</span>  input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>其中，commands 是真正awk命令，<span class="token punctuation">[</span>-F域分隔符<span class="token punctuation">]</span>是可选的。 input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> 是待处理的文件。在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。2.shell脚本方式将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。相当于shell脚本首行的：<span class="token comment" spellcheck="true">#!/bin/sh</span>可以换成：<span class="token comment" spellcheck="true">#!/bin/awk</span>3.将所有的awk命令插入一个单独文件，然后调用：<span class="token function">awk</span> -f awk-script-file input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>其中，-f选项加载awk-script-file中的awk脚本，input-file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>跟上面的是一样的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>vim的全局替换</p><pre class="line-numbers language-bash"><code class="language-bash">:s / old / new / g                    <span class="token comment" spellcheck="true"># 把当前行old的每次出现改为new，而不只是该行的第一个old</span>:1, <span class="token variable">$s</span> / old / new / g                <span class="token comment" spellcheck="true"># 把整个文件中的old的每次出现都改为new</span>:% s / old / new / g                  <span class="token comment" spellcheck="true"># % 等价于1，$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>! 是强制的意思</p><p>按键 Esc 可编辑命令 ， Esc ：wq 之后回车就能强制保存修改内容</p><h2 id="查看某个进程"><a href="#查看某个进程" class="headerlink" title="查看某个进程"></a>查看某个进程</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -p 10997                          <span class="token comment" spellcheck="true"># 查看某个进程占用的CPU、内存</span><span class="token function">ps</span> -a                                 <span class="token comment" spellcheck="true"># 列出所有运行中/激活进程</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span>                           <span class="token comment" spellcheck="true"># 列出需要的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="top参数"><a href="#top参数" class="headerlink" title="top参数"></a>top参数</h2><p>平均负载（Load Average）是一段时间内系统的平均负载，这个一段时间一般取1分钟、5分钟、15分钟。</p><p>第七行以下：各进程（任务）的状态监控<br>PID — 进程id</p><p>USER — 进程所有者</p><p>PR — 进程优先级</p><p>NI — nice值。负值表示高优先级，正值表示低优先级</p><p>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p><p>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</p><p>SHR — 共享内存大小，单位kb</p><p>S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</p><p>%CPU — 上次更新到现在的CPU时间占用百分比</p><p>%MEM — 进程使用的物理内存百分比</p><p>TIME+ — 进程使用的CPU时间总计，单位1/100秒</p><p>COMMAND — 进程名称（命令名/命令行）</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>统计一个文件中某一个字段的次数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> -c <span class="token string">'object'</span> fileName<span class="token function">grep</span> <span class="token string">'object'</span> fileName <span class="token operator">|</span> <span class="token function">wc</span> -l        <span class="token comment" spellcheck="true"># wc -l里-l显示行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>liunx远程复制</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> output.txt root@2g.CentOS.com:/opt/backup <span class="token comment" spellcheck="true"># 把 output.txt 文件从本地系统复制到 2g.CentOS.com 远程系统的 /opt/backup 文件夹下</span><span class="token function">scp</span> -r /home/daygeek/2g/shell-script/ root@:/opt/backup/<span class="token comment" spellcheck="true"># 同shell-script 文件夹下所有的文件一同复制到/opt/back 下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装软件</p><pre class="line-numbers language-bash"><code class="language-bash">rpm -ivh 软件包yum <span class="token function">install</span> package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打包</p><p>常用参数：</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">生成档案文件，创建打包文件</td></tr><tr><td align="left">-v</td><td align="left">列出归档解档的详细过程，显示进度</td></tr><tr><td align="left">-f</td><td align="left">指定档案文件名称，f后面一定是.tar文件，所以必须放选项最后</td></tr><tr><td align="left">-t</td><td align="left">列出档案中包含的文件</td></tr><tr><td align="left">-x</td><td align="left">解开档案文件</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -cvf xxx.tar *                   <span class="token comment" spellcheck="true"># 当前目录所有文件</span><span class="token function">tar</span> -cvf xxx.tar *.txt               <span class="token comment" spellcheck="true"># 以.txt结尾的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvf xxx.tar                     <span class="token comment" spellcheck="true"># 解包到当前目录</span><span class="token function">tar</span> -xvf xxx.tar -C my-dir           <span class="token comment" spellcheck="true"># 解包到指定目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用的文件操作指令&quot;&gt;&lt;a href=&quot;#常用的文件操作指令&quot; class=&quot;headerlink&quot; title=&quot;常用的文件操作指令&quot;&gt;&lt;/a&gt;常用的文件操作指令&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="测试开发" scheme="https://arthurjq.com/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>最大公约数算法gcd</title>
    <link href="https://arthurjq.com/2021/06/24/algorithm/gcd/"/>
    <id>https://arthurjq.com/2021/06/24/algorithm/gcd/</id>
    <published>2021-06-24T10:34:38.000Z</published>
    <updated>2021-09-06T15:26:07.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><p>欧几里德算法（Euclid）阐述了一种gcd算法。gcd最大公约数（greatest common divisor），简言之，我们想求<code>gcd(x,y)</code>，假设<code>(x&gt;y)</code>，如果存在下式:x = q*y + r，那么则有<code>gcd(x,y) = gcd(y,r)</code> ，其实上式也称为gcd递归定理，即<code>gcd(a,b) = gcd (b,a mod b)</code>。<br>这个递归式看似很简单。实则它还是很值得推敲的，首先，它怎么证明？其次，该算法的运行时间为如何？<br>在密码学中，欧几里德算法有着相当广泛的应用，譬如求乘法逆元，大整数分解等等。。<br>在&lt;&lt;编程之美&gt;&gt;一书中，给出了不少gcd算法的简单实现。因为gcd算法的实现是递归，所以要特别注意栈溢出。</p><p><strong>最简单的gcd算法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">GCD</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">GCD</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>  <span class="token keyword">return</span> <span class="token function">GCD</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GCD&quot;&gt;&lt;a href=&quot;#GCD&quot; class=&quot;headerlink&quot; title=&quot;GCD&quot;&gt;&lt;/a&gt;GCD&lt;/h2&gt;&lt;p&gt;欧几里德算法（Euclid）阐述了一种gcd算法。gcd最大公约数（greatest common divisor），简言之，我们想
      
    
    </summary>
    
      <category term="编程算法" scheme="https://arthurjq.com/categories/%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://arthurjq.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
