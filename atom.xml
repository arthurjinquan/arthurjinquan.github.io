<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锦泉^-^</title>
  
  <subtitle>JAVA工程师进阶之旅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arthurjq.com/"/>
  <updated>2021-02-24T08:40:13.840Z</updated>
  <id>https://arthurjq.com/</id>
  
  <author>
    <name>锦泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zookeeper的原理和分布式锁</title>
    <link href="https://arthurjq.com/2021/02/24/zookeeper/"/>
    <id>https://arthurjq.com/2021/02/24/zookeeper/</id>
    <published>2021-02-24T06:56:18.000Z</published>
    <updated>2021-02-24T08:40:13.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zookeeper介绍"><a href="#Zookeeper介绍" class="headerlink" title="Zookeeper介绍"></a>Zookeeper介绍</h2><p>Zookeeper是一个高性能的分布式一致系统，在分布式系统中有着广泛的应用。基于它，可以实现分布式同步、配置管理、命名空间管理等众多功能，是分布式系统中常见的基础系统。</p><p>Zookeeper主要用来解决分布式集群中应用系统的一致性问题，它有着树状结构的节点，每个节点均可存储少量的数据。同时，用户可以修改和订阅节点中的内容。分布式系统中的节点通过监控这些数据状态的变化，从而可以达到基于数据的集群管理。</p><p>从设计模式角度来看，Zookeeper是基于观察者模式实现的。可以把它作为一个信息的中心。使用该服务的生产者和消费者都以Zookeeper中的数据为基准。即：</p><ol><li>生产者可以改变Zookeeper的节点，或者节点上的数据</li><li>消费者通过订阅Zookeeper节点，从而能够在节点变动时收到通知</li></ol><p>基于这样的机制，将Zookeeper作为信息中心，便可以实现分布式系统中节点状态的最终一致性。</p><p><strong>Zookeeper具有以下特点</strong>：</p><ol><li>最终一致性：客户端不论连接到哪个Zookeeper的哪一个节点，都会收到同一份状态。这是zookeeper最重要的性能。</li><li>可靠性：Zookeeper集群具有简单、健壮、良好的性能，如果消息m被到一台server接受，那么它将被所有的server接受。</li><li>实时性：Zookeeper保证client将在一个时间间隔范围内获得server的更新信息，或者server失效的信息。但由于网络延时等原因，Zookeeper不能保证两个client能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</li><li>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</li><li>原子性：更新只能成功或者失败，没有中间状态。</li><li>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台server上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</li></ol><h2 id="zookeeper应用场景"><a href="#zookeeper应用场景" class="headerlink" title="zookeeper应用场景"></a>zookeeper应用场景</h2><ol><li><p><strong>数据发布与订阅</strong>：应用配置集中到节点上，应用启动时主动获取，并在节点上注册一个watcher，每次配置更新都会通知到应用。</p></li><li><p><strong>名空间服务</strong>：分布式命名服务，创建一个节点后，节点的路径就是全局唯一的，可以作为全局名称使用。</p></li><li><p><strong>分布式通知/协调</strong>：不同的系统都监听同一个节点，一旦有了更新，另一个系统能够收到通知。</p></li><li><p><strong>分布式锁</strong>：Zookeeper能<strong>保证数据的强一致性</strong>，用户任何时候都可以相信集群中每个节点的数据都是相同的。一个用户创建一个节点作为锁，另一个用户检测该节点，如果存在，代表别的用户已经锁住，如果不存在，则可以创建一个节点，代表拥有一个锁。</p></li><li><p><strong>集群管理</strong>：每个加入集群的机器都创建一个节点，写入自己的状态。监控父节点的用户会受到通知，进行相应的处理。离开时删除节点，监控父节点的用户同样会收到通知。如图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zookeeper-1.jpg" alt></p></li><li><p><strong>配置管理</strong>：在分布式应用环境中很常见，例如同一个应用系统需要多台节点运行，但是它们运行的应用系统的某些配置项是相同的，如果要修改这些相同的配置项，那么就必须同时修改每台运行这个应用系统的 PC Server，这样非常麻烦而且容易出错。像这样的配置信息完全可以交给 Zookeeper 来管理，<strong>将配置信息保存在 Zookeeper 的某个目录节点</strong>中，然后将所有需要修改的应用机器监控配置信息的状态，一旦配置信息发生变化，每台应用机器就会收到 Zookeeper 的通知，然后从 Zookeeper 获取新的配置信息应用到系统中。如图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/zookeeper-2.jpg" alt></p></li></ol><h2 id="分布式锁的流程"><a href="#分布式锁的流程" class="headerlink" title="分布式锁的流程"></a>分布式锁的流程</h2><p>分布式锁的应用上面已经讲到了，具体流程如下：</p><p>假如说有n个分布式的工作点，定义为a1,a2,a3,a4……</p><p>当某个分布式点做一件事时，先去zk某个固定位置判断（例如：/aTask/sync目录下）是否存在一个特定节点（例如节点名：lock）:</p><ol><li>如果没有，则创建该节点，即声明自己持有该锁。然后进行分布式任务，任务结束后。去删除该节点，表明释放该锁。</li><li>如果有，表明其他工作点持有了锁，不能开展分布式任务。</li></ol><h2 id="分布式锁的应用"><a href="#分布式锁的应用" class="headerlink" title="分布式锁的应用"></a>分布式锁的应用</h2><p>举一个最简单的例子：</p><p>1、假如有一个系统，能够提供报表查看功能——&gt;于是我们开发了一个单节点应用</p><p>2、该系统访量非常大，系统难以支撑——&gt;我们部署了多个节点（加入为5个），分担访问请求。于是成了分布式应用</p><p>3、老板要求增加一个每天晚上向指定邮件发送该日统计报表的功能—–&gt;应用中增加个定时线程，每天晚上半夜跑报表，发邮件</p><p>这个时候，出问题了，老板每天晚上会收到5封邮件！因为同样的程序我们部署了5个节点！怎么解决呢？</p><p><strong>方案一</strong>：有一个节点和其他节点不一样，具有每日汇总功能。</p><p>优点：开发简单。</p><p>缺点：这样，一个应用便成了两个应用。我们必须维护两份代码。一份是不具有每日汇总功能的，一份是具有每日汇总功能的。</p><p><strong>方案二</strong>：增加分布式锁。这样，5个节点中，只有获取到锁的节点才会发出邮件。</p><p>优点：代码还是只有一份，维护简单。扩展性强，可以继续扩展类似的需要锁的功能（例如某个业务流程只允许处理一次，还可以继续复用相关逻辑）。</p><p>缺点：开发稍微复杂一点。</p><p>因此，方案二是最好的选择。</p><h2 id="基于ZooKeeper的三种分布式锁实现"><a href="#基于ZooKeeper的三种分布式锁实现" class="headerlink" title="基于ZooKeeper的三种分布式锁实现"></a>基于ZooKeeper的三种分布式锁实现</h2><p><a href="https://www.cnblogs.com/codestory/p/11387116.html" target="_blank" rel="noopener">https://www.cnblogs.com/codestory/p/11387116.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Zookeeper介绍&quot;&gt;&lt;a href=&quot;#Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper介绍&quot;&gt;&lt;/a&gt;Zookeeper介绍&lt;/h2&gt;&lt;p&gt;Zookeeper是一个高性能的分布式一致系统，在分布式系统中有着广
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="zookeeper" scheme="https://arthurjq.com/tags/zookeeper/"/>
    
      <category term="分布式锁" scheme="https://arthurjq.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>RefreshScope注解和Spring bean scope</title>
    <link href="https://arthurjq.com/2021/02/23/java/refreshscope/"/>
    <id>https://arthurjq.com/2021/02/23/java/refreshscope/</id>
    <published>2021-02-23T10:01:53.000Z</published>
    <updated>2021-02-23T14:46:09.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-bean-scope详解"><a href="#Spring-bean-scope详解" class="headerlink" title="Spring bean scope详解"></a>Spring bean scope详解</h2><p>Scope是定义Spring如何创建bean的实例的。@Scope 代表了Bean的作用域</p><p>在创建bean的时候可以带上scope属性，scope有下面几种类型。</p><ol><li><strong>Singleton</strong>：这也是Spring默认的scope，表示Spring容器<strong>只创建一个bean的实例</strong>，Spring在创建第一次后会缓存起来，之后不再创建，就是设计模式中的<strong>单例模式</strong>。</li><li><strong>Prototype</strong>：代表线程每次调用这个bean都新创建一个实例。</li><li><strong>Request</strong>：表示每个request作用域内的请求只创建一个实例。</li><li><strong>Session</strong>：表示每个session作用域内的请求只创建一个实例。</li><li><strong>GlobalSession</strong>：这个只在porlet的web应用程序中才有意义，它映射到porlet的global范围的session，如果普通的web应用使用了这个scope，容器会把它作为普通的session作用域的scope创建。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/RefreshScope-1.jpg" alt></p><h3 id="在创建bean的时候如何指定"><a href="#在创建bean的时候如何指定" class="headerlink" title="在创建bean的时候如何指定"></a>在创建bean的时候如何指定</h3><p><strong>xml方式</strong>：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注解方式</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doGetBean中的使用"><a href="#doGetBean中的使用" class="headerlink" title="doGetBean中的使用"></a>doGetBean中的使用</h3><p>AbstractBeanFactory#doGetBean（）</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>          Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Singleton和Prototype是硬编码的，并不是Scope子类。 Scope实际上是自定义扩展的接口</li><li>Scope Bean实例交由Scope自己创建，例如SessionScope是从Session中获取实例的，ThreadScope是从ThreadLocal中获取的，而RefreshScope是在内建缓存中获取的。</li></ol><blockquote><p>硬编码和软编码的区别是：软编码可以在运行时确定，修改；而硬编码是不能够改变的。</p></blockquote><h3 id="Scope-的属性"><a href="#Scope-的属性" class="headerlink" title="Scope 的属性"></a>Scope 的属性</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Alias for {@link #scopeName}.     * @see #scopeName     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"scopeName"</span><span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  singleton  表示该bean是单例的。(默认)     *  prototype    表示该bean是多例的，即每次使用该bean时都会新建一个对象。     *  request        在一次http请求中，一个bean对应一个实例。     *  session        在一个httpSession中，一个bean对应一个实例     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String <span class="token function">scopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    *   DEFAULT            不使用代理。(默认)    *     NO                不使用代理，等价于DEFAULT。    *     INTERFACES        使用基于接口的代理(jdk dynamic proxy)。    *     TARGET_CLASS    使用基于类的代理(cglib)。    */</span>    ScopedProxyMode <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们需要关心的就是ScopedProxyMode.TARGET_CLASS 这个属性，当ScopedProxyMode 为TARGET_CLASS 的时候会给当前创建的bean 生成一个代理对象，会通过代理对象来访问，每次访问都会创建一个新的对象。</strong></p><h2 id="RefreshScope的实现原理"><a href="#RefreshScope的实现原理" class="headerlink" title="RefreshScope的实现原理"></a>RefreshScope的实现原理</h2><h3 id="先来看下-RefreshScope"><a href="#先来看下-RefreshScope" class="headerlink" title="先来看下@RefreshScope"></a>先来看下@RefreshScope</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RefreshScope</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @see Scope#proxyMode()     */</span>    ScopedProxyMode <span class="token function">proxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ScopedProxyMode<span class="token punctuation">.</span>TARGET_CLASS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，它使用就是 @Scope ，其内部就一个属性默认 ScopedProxyMode.TARGET_CLASS。知道了是通过Spring Scope 来实现的那就简单了，我们来看下Scope 这个接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Return the object with the given name from the underlying scope,     * {@link org.springframework.beans.factory.ObjectFactory#getObject() creating it}     * if not found in the underlying storage mechanism.     * &lt;p>This is the central operation of a Scope, and the only operation     * that is absolutely required.     * @param name the name of the object to retrieve     * @param objectFactory the {@link ObjectFactory} to use to create the scoped     * object if it is not present in the underlying storage mechanism     * @return the desired object (never {@code null})     * @throws IllegalStateException if the underlying scope is not currently active     */</span>    Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    Object <span class="token function">remove</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">registerDestructionCallback</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Runnable callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    Object <span class="token function">resolveContextualObject</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    String <span class="token function">getConversationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看下接口，我们只看<code>Object get(String name, ObjectFactory&lt;?&gt; objectFactory)</code>; 这个方法帮助我们来<strong>创建一个新的bean</strong> ，也就是说，@RefreshScope 在调用 刷新的时候会使用此方法来给我们创建新的对象，这样就可以通过spring 的装配机制将属性重新注入了，也就实现了所谓的动态刷新。</p><h3 id="get（）方法"><a href="#get（）方法" class="headerlink" title="get（）方法"></a>get（）方法</h3><p>它究竟是怎么处理老的对象，又怎么除法创建新的对象呢？</p><p>因为RefreshScope extends GenericScope和 GenericScope implements Scope，RefreshScope继承GenericScope。</p><p>通过查看代码，是GenericScope 实现了 Scope 最重要的 <code>get(String name, ObjectFactory&lt;?&gt; objectFactory)</code>方法，在GenericScope 里面 包装了一个内部类 BeanLifecycleWrapperCache 来对加了 @RefreshScope 从而创建的对象进行缓存，使其在不刷新时获取的都是同一个对象。（这里你可以把 BeanLifecycleWrapperCache 想象成为一个大Map 缓存了所有@RefreshScope 标注的对象）</p><p>知道了对象是缓存的，所以在进行动态刷新的时候，只需要清除缓存，重新创建就好了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ContextRefresher 外面使用它来进行方法调用 ============================== 我是分割线</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> <span class="token function">refreshEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">refreshAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keys<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// RefreshScope 内部代码  ============================== 我是分割线</span>    <span class="token annotation punctuation">@ManagedOperation</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"Dispose of the current instance of all beans in this scope and force a refresh on next method execution."</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refreshAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshScopeRefreshedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// GenericScope 里的方法 ============================== 我是分割线</span>    <span class="token comment" spellcheck="true">//进行对象获取，如果没有就创建并放入缓存</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objectFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanLifecycleWrapper value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">BeanLifecycleWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> objectFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        locks<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//进行缓存的数据清理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>BeanLifecycleWrapper<span class="token operator">></span> wrappers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanLifecycleWrapper wrapper <span class="token operator">:</span> wrappers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Lock lock <span class="token operator">=</span> locks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    wrapper<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们截取了三个片段所得之，ContextRefresher 就是外层调用方法用的，GenericScope 里面的 get 方法<strong>负责对象的创建和缓存</strong>，destroy 方法负责再刷新时缓存的清理工作。</p><h3 id="总结下-RefreshScope-实现流程"><a href="#总结下-RefreshScope-实现流程" class="headerlink" title="总结下@RefreshScope 实现流程"></a>总结下@RefreshScope 实现流程</h3><ol><li>需要动态刷新的类标注@RefreshScope 注解</li><li>@RefreshScope 注解标注了@Scope 注解，并默认了ScopedProxyMode.TARGET_CLASS; 属性，此属性的功能就是在创建一个代理，在每次调用的时候都用它来调用GenericScope get 方法来获取对象</li><li>如属性发生变更会调用 ContextRefresher refresh（） -》RefreshScope refreshAll（） 进行缓存清理方法调用，并发送刷新事件通知 -》 GenericScope 真正的 清理方法destroy（）实现清理缓存</li><li>在下一次使用对象的时候，会调用GenericScope get（String name, ObjectFactory&lt;?&gt; objectFactory） 方法创建一个新的对象，并存入缓存中，此时新对象因为Spring 的装配机制就是新的属性了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-bean-scope详解&quot;&gt;&lt;a href=&quot;#Spring-bean-scope详解&quot; class=&quot;headerlink&quot; title=&quot;Spring bean scope详解&quot;&gt;&lt;/a&gt;Spring bean scope详解&lt;/h2&gt;&lt;p&gt;Sc
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="springcloud" scheme="https://arthurjq.com/tags/springcloud/"/>
    
      <category term="spring" scheme="https://arthurjq.com/tags/spring/"/>
    
      <category term="annotation" scheme="https://arthurjq.com/tags/annotation/"/>
    
      <category term="bean" scheme="https://arthurjq.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>doGetBean方法</title>
    <link href="https://arthurjq.com/2021/02/23/java/dogetbean/"/>
    <id>https://arthurjq.com/2021/02/23/java/dogetbean/</id>
    <published>2021-02-23T04:23:15.000Z</published>
    <updated>2021-02-23T14:44:08.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过三种形式获取beanName</span>        <span class="token comment" spellcheck="true">//一个是原始的beanName，一个是加了&amp;的，一个是别名</span>        <span class="token keyword">final</span> String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Eagerly check singleton cache for manually registered singletons.</span>        <span class="token comment" spellcheck="true">//尝试从单例缓存集合里获取bean实例</span>        Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object bean<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果先前已经创建过单例Bean的实例，并且调用的getBean方法传入的参数为空</span>        <span class="token comment" spellcheck="true">//则执行if里面的逻辑</span>        <span class="token comment" spellcheck="true">//args之所以要求为空是因为如果有args，则需要做进一步赋值，因此无法直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果Bean还在创建中，则说明是循环引用</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning eagerly cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                            <span class="token string">"' that is not fully initialized yet - a consequence of a circular reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果是普通bean，直接返回，如果是FactoryBean，则返回它的getObject</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//若scope为prototype或者单例模式但是缓存中还不存在bean</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果scope为prototype并且 显示还在创建中，则基本是循环依赖的情况</span>            <span class="token comment" spellcheck="true">//针对prototype的循环依赖，spring误解，直接抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Check if bean definition exists in this factory.</span>            BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从当前容器中找不到指定名称的bean，此时递归去parentFactory查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Not found -> check parent.</span>                <span class="token comment" spellcheck="true">//主要针对FactoryBean，将Bean的&amp;重新加上</span>                String nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果parent容器依旧是AbstractBeanFactory的实例</span>                <span class="token comment" spellcheck="true">//instanceof通过返回一个布尔值来指出，这个对象是否是这个特定类或者是它的子类的一个实例</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//直接递归调用方法来查找</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>                            nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> typeCheckOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果有参数，则委派父类容器根据指定名称和显示的参数查找</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No args -> delegate to standard getBean method.</span>                    <span class="token comment" spellcheck="true">//委派父级容器根据指定名称和类型查找</span>                    <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//委派父级容器根据指定名称查找</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//typeCheckOnly是用来判断调用getBean()是否仅仅是为了类型检查获取bean，而不是为了创建Bean</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果不是仅仅做类型检查则是创建bean</span>                <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将父类的BeanDefinition与子类的BeanDefinition进行合并覆盖</span>                <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//对合并的BeanDefinition做验证，主要看属性是否为abstract的</span>                <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Guarantee initialization of beans that the current bean depends on.</span>                <span class="token comment" spellcheck="true">//获取当前Bean所有依赖Bean的名称</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果当前Bean设置了dependsOn的属性</span>                <span class="token comment" spellcheck="true">//depends-on用来指定Bean初始化及销毁时的顺序</span>                <span class="token comment" spellcheck="true">//&lt;bean id="a" Class="com.imooc.A" depends-on="b" /></span>                <span class="token comment" spellcheck="true">//&lt;bean id="b" Class="com.imooc.B" /></span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//校验该依赖是否已经注册给当前bean，注意这里传入的key是当前的bean名称</span>                        <span class="token comment" spellcheck="true">//这里主要是判断是否有以下这种类型的依赖：</span>                        <span class="token comment" spellcheck="true">//&lt;bean id="beanA" Class="com.imooc.A" depends-on="beanB" /></span>                        <span class="token comment" spellcheck="true">//&lt;bean id="beanB" Class="com.imooc.B" depends-on="beanA" /></span>                        <span class="token comment" spellcheck="true">//如果有，直接抛出异常</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                    <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//缓存依赖调用，注意这里传入的key是被依赖的bean名称</span>                        <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//递归调用getBean方法，注册Bean之间的依赖(如C需要晚于B初始化，而B需要晚于A初始化)</span>                            <span class="token comment" spellcheck="true">//初始化依赖的bean</span>                            <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                    <span class="token string">"'"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' depends on missing bean '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Create bean instance.</span>                <span class="token comment" spellcheck="true">//如果BeanDefinition为单例</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span>                    sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Explicitly remove instance from singleton cache: It might have been put there</span>                            <span class="token comment" spellcheck="true">// eagerly by the creation process, to allow for circular reference resolution.</span>                            <span class="token comment" spellcheck="true">// Also remove any beans that received a temporary reference to the bean.</span>                            <span class="token comment" spellcheck="true">//显示从单例缓存中删除bean实例</span>                            <span class="token comment" spellcheck="true">//因为单例模式下为了解决循环依赖，可能它已经存在了，所以将其销毁</span>                            <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//只有在单例情况下才会尝试解决循环依赖</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果是普通bean，直接返回，如果是FactoryBean，则返回它的getObject</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// It's a prototype -> create a new instance.</span>                    Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//指定的scope上实例化bean</span>                    String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                                <span class="token string">"Scope '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"' is not active for the current thread; consider "</span> <span class="token operator">+</span>                                <span class="token string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span><span class="token punctuation">,</span>                                ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span>        <span class="token comment" spellcheck="true">//检查需要的类型是否符合bean的实际类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                T convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> convertedBean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                            ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/doGetBean-1.png" alt></p><h3 id="尝试从缓存中加载单例"><a href="#尝试从缓存中加载单例" class="headerlink" title="尝试从缓存中加载单例"></a>尝试从缓存中加载单例</h3><p>单例在spring容器内只会创建一次，后续获取都是从单例缓存中获取。如果获取不到则从singletonFactories中加载。因为在创建单例bean的时候会存在依赖注入的情况，而在创建的时候为了避免循环依赖，在Spring中创建bean的原则是不等bean创建完就会将创建bean的ObjectFactory提早曝光，也就是将ObjectFactory加入到缓存中，一旦下个bean创建时候需要依赖上个bean则直接使用ObjectFactory。</p><p>缓存池获取bean实例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一级缓存：存放的是已经完成实例化，属性填充和初始化步骤的单例bean实例</span>    Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//二级缓存：存放的是提前暴露的单例bean实例，可能是代理对象，也可能是未经代理的原对象，但都还没有完成初始化的步骤</span>            singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//三级缓存：存放的是ObjectFactory的匿名内部类实例</span>                ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ObjectFactory<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//回调ObjectFactory#getObject方法获取提前暴露的引用</span>                    singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//移入二级缓存</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//移除三级缓存</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> singletonObject <span class="token operator">!=</span> NULL_OBJECT <span class="token operator">?</span> singletonObject <span class="token operator">:</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代码解析&quot;&gt;&lt;a href=&quot;#代码解析&quot; class=&quot;headerlink&quot; title=&quot;代码解析&quot;&gt;&lt;/a&gt;代码解析&lt;/h2&gt;&lt;p&gt;org.springframework.beans.factory.support.AbstractBeanFactory#
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="spring" scheme="https://arthurjq.com/tags/spring/"/>
    
      <category term="bean" scheme="https://arthurjq.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载器classloader</title>
    <link href="https://arthurjq.com/2021/02/22/classloader/"/>
    <id>https://arthurjq.com/2021/02/22/classloader/</id>
    <published>2021-02-22T03:23:15.000Z</published>
    <updated>2021-02-24T04:10:01.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是classloader"><a href="#什么是classloader" class="headerlink" title="什么是classloader"></a>什么是classloader</h2><p>classloader顾名思义，即是类加载。虚拟机把描述类的数据从class字节码文件加载到内存，并对数据进行检验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p><h2 id="classloader的加载过程"><a href="#classloader的加载过程" class="headerlink" title="classloader的加载过程"></a>classloader的加载过程</h2><p>类从被加载到虚拟机内存到被卸载，整个完整的生命周期包括：<strong>类加载、验证、准备、解析、初始化</strong>、使用和卸载七个阶段。其中验证，准备，解析三个部分统称为连接。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-1.jpg" alt></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载指的是把class字节码文件从各个来源通过类加载器装<strong>载入内存</strong>中</p><p>主要任务：</p><ol><li>通过“类全名”来获取定义此类的二进制字节流</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口</li></ol><p>相对于类加载过程的其他阶段，加载阶段是通过类加载（ClassLoader）来完成的，而类加载器也可以由用户自定义完成，因此，开发人员可以通过定义类加载器去控制字节流的获取方式。加载之后，二进制文件会被读入到虚拟机所需的格式存储在<strong>方法区</strong>中，方法区中存储格式由虚拟机自行定义，然后在java堆中实例化一个java.lang.Class类对象，通过这个对象就可以访问方法区中的数据。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证阶段是链接阶段的第一步，目的就是确保class文件的字节流中包含的信息<strong>符合虚拟机的要求</strong>，不能危害虚拟机自身安全。验证阶段主要包括四个检验过程：文件格式验证、元数据验证、字节码验证和符号引用验证。</p><ol><li>文件格式的验证，文件中是否有不规范的或者附加的其他信息。例如常量中是否有不被支持的常量。</li><li>元数据的验证，保证其描述的信息复合Java语言规范的要求。例如类是否有父类，是否继承了不被允许的final类等</li><li>字节码的验证，保证程序语义的合理性，比如要保证类型转换的合理性。</li><li>符号引用的验证，比如校验符号引用中通过全限定名是否能够找到对应的类，校验符号引用中的访问性（private，public等）是否可被当前类访问等。</li></ol><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>这个阶段就是<strong>为类变量分配内存并设置类变量初始值</strong>的阶段，这些内存将在方法区中进行分配。</p><p>要注意的是，进行分配内存的<strong>只是包括类变量，而不包括实例变量</strong>，实例变量是在对象实例化时随着对象一起分配在java堆中的。</p><p>通常情况下，初始值为零值，假设public static int value = 2;那么value在准备阶段过后的初始值为0，不为2，这时候只是开辟了内存空间，并没有运行java代码，value赋值为2的指令是程序被编译后。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>将虚拟机常量池的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程。</p><p>比如，现在调用方法hello（），这个方法的地址是1234567，那么hello就是符号引用，1234567就是直接引用。</p><p>在解析阶段，虚拟机会把所有的类名，方法名，字段名这些符号引用替换成具体的内存地址或偏移量，也就是直接引用。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。在以下四种情况下初始化过程会被触发执行：</p><ol><li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需先触发其初始化。生成这4条指令的最常见的java代码场景是：使用new关键字实例化对象、读取或设置一个类的静态字段（被final修饰、已在编译器把结果放入常量池的静态字段除外）的时候，以及调用类的静态方法的时候。</li><li>使用java.lang.reflect包的方法对类进行反射调用的时候。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化、则需要先出发其父类的初始化。</li><li>jvm启动时，用户指定一个执行的主类（包含main方法的那个类），虚拟机会先初始化这个类。</li></ol><h4 id="lt-clinit-gt-和-lt-init-gt-的区别"><a href="#lt-clinit-gt-和-lt-init-gt-的区别" class="headerlink" title="&lt;clinit&gt;() 和 &lt;init&gt;() 的区别"></a><code>&lt;clinit&gt;()</code> 和 <code>&lt;init&gt;()</code> 的区别</h4><ul><li><code>&lt;clinit&gt;()</code> </li></ul><p>Java 类加载的初始化过程中，编译器<strong>按语句在源文件中出现的顺序</strong>，依次自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并产生 <code>&lt;clinit&gt;()</code> 方法。 如果类中没有静态语句和静态代码块，那可以不生成<code>&lt;clinit&gt;()</code>方法。</p><p>并且 <code>&lt;clinit&gt;()</code> 不需要显式调用父类（接口除外，接口不需要调用父接口的初始化方法，只有使用到父接口中的静态变量时才需要调用）的初始化方法 <code>&lt;clinit&gt;()</code>，虚拟机会保证在子类的 <code>&lt;clinit&gt;()</code> 方法执行之前，父类的 <code>&lt;clinit&gt;()</code> 方法已经执行完毕。</p><ul><li><code>&lt;init&gt;()</code></li></ul><p>对象构造时用以初始化对象的，构造器以及非静态初始化块中的代码。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Test instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下面这句编译器报错，非法向前引用</span>        <span class="token comment" spellcheck="true">// System.out.println("x=" + x);</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">";y="</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造器可以访问声明于他们后面的静态变量</span>        <span class="token comment" spellcheck="true">// 因为静态变量在类加载的准备阶段就已经分配内存并初始化0值了</span>        <span class="token comment" spellcheck="true">// 此时 x=0，y=0</span>        x<span class="token operator">++</span><span class="token punctuation">;</span>        y<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">";y="</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Test <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test obj <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y="</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出信息如下：</p><pre class="line-numbers language-shell"><code class="language-shell">static开始构造器开始x=0;y=0x=1;y=1构造器结束static结束x=6y=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚拟机首先执行的是类加载初始化过程中的 <code>&lt;clinit&gt;()</code> 方法，也就是静态变量赋值以及静态代码块中的代码，如果 <code>&lt;clinit&gt;()</code> 方法中触发了对象的初始化，也就是 <code>&lt;init&gt;()</code> 方法，那么会进入执行 <code>&lt;init&gt;()</code> 方法，执行 <code>&lt;init&gt;()</code> 方法完成之后，再回来继续执行 <code>&lt;clinit&gt;()</code> 方法。</strong></p><p>上面代码中，先执行 static 代码块，此时调用了构造器，构造器中对类变量 x 和 y 进行加 1 ，之后继续完 static 代码块，接着执行下面的 <code>public static int x = 6;</code> 来重新给类变量 x 赋值为 6，因此，最后输出的是 x=6， y=1。</p><p>如果希望输出的是 x=7，y=1，很简单，将语句 <code>public static int x = 6;</code> 移至 static 代码块之前就可以了。</p><blockquote><p>初始化顺序依次是：父类static方法 –&gt; 子类static方法 –&gt; 父类构造方法- -&gt; 子类构造方法 </p></blockquote><h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>为了方便记忆，我们可以使用一句话来表达其加载的整个过程，<strong>家宴准备了西式菜</strong>，即家（加载）宴（验证）准备（准备）了西（解析）式（初始化）菜。</p><h2 id="classloader双亲委托机制"><a href="#classloader双亲委托机制" class="headerlink" title="classloader双亲委托机制"></a>classloader双亲委托机制</h2><p>classloader的双亲委托机制是指多个类加载器之间存在父子关系的时候，某个class类具体由哪个加载器进行加载的问题。其具体的过程表现为：当一个类加载的过程中，它首先不会去加载，而是委托给自己的父类去加载，父类又委托给自己的父类。因此所有的类加载都会委托给顶层的父类，即Bootstrap Classloader进行加载，然后父类自己无法完成这个加载请求，子加载器才会尝试自己去加载。</p><p>使用双亲委派模型，Java类随着它的加载器一起具备了一种带有优先级的层次关系，通过这种层次模型，可以<strong>避免类的重复加载</strong>，也可以<strong>避免核心类被不同的类加载器加载到内存中造成冲突和混乱</strong>，从而保证了Java核心库的安全。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-2.jpg" alt></p><p>整个java虚拟机的类加载层次关系如上图所示，启动类加载器（Bootstrap Classloader）负责将<java_home>/lib 目录下并且被虚拟机识别的类库加载到虚拟机内存中。我们常用基础库，例如<code>java.util.**，java.io.**，java.lang.**</code>等等都是由根加载器加载。</java_home></p><p>扩展类加载器（Extention Classloader）负责加载JVM扩展类，比如swing系列、内置的js引擎、xml解析器等，这些类库以javax开头，它们的jar包位于 <java_home>/lib/ext 目录中。</java_home></p><p>应用程序加载器（Application Classloader）也叫系统类加载器，它负责加载用户路径（ClassPath）上所指定的类库。我们自己编写的代码以及使用的第三方的jar包都是由它来加载的。</p><p>自定义加载器（Custom Classloader）通常是我们为了某些特殊目的实现的自定义加载器，如tomcat、jboss都会根据j2ee规范自行实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>        <span class="token comment" spellcheck="true">//缓存中是否已经存在</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果parent classloader存在，则委托给父类进行加载</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>                <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                <span class="token comment" spellcheck="true">// to find the class.</span>                <span class="token comment" spellcheck="true">//自己加载</span>                <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//是否进行解析</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="classloader的应用场景"><a href="#classloader的应用场景" class="headerlink" title="classloader的应用场景"></a>classloader的应用场景</h2><p>类加载器是java语言的一项创新，也是java语言流行的重要原因这一。通过灵活定义classloader的加载机制，我们可以完成很多事情，例如解决类冲突问题，实现热加载以及热部署，甚至可以实现jar包的加密保护。</p><h3 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h3><p>做过多人协同开发的大型项目的同学可能深有感触。基于maven的pom进制可以方便的进行依赖管理，但是由于maven依赖的传递性，会导致我们的依赖错综复杂，这样就会导致引入类冲突的问题。最典型的就是NoSuchMethodException异常了。</p><p>例如阿里内部也很多成熟的中间件，由不同的中间件团队来负责。那么当一个项目引入不同的中间件的时候，该如何避免依赖冲突的问题呢？</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-3.jpg" alt></p><p>某个业务引用了消息中间件（例如metaq）和微服务中间件（例如dubbo），这两个中间件也同时引用了fastjson-2.0和fastjson-3.0版本，而业务自己本身也引用了fastjson-1.0版本。这三个版本表现不同之处在于classA类中方法数目不相同，我们根据maven依赖处理的机制，引用路径最短的fastjson-1.0会真正作为应用最终的依赖，其它两个版本的fastjson则会被忽略，那么中间件在调用method2方法的时候，则会抛出方法找不到异常。</p><p>或许你会说，将所有依赖fastjson的版本都升级到3.0不是就能解解决问题吗？确实这样能够解决问题，但是在实际操作中不太现实：</p><ol><li>首先，中间件团队和业务团队之间并不是一个团队，并不能做到高效协同</li><li>其次是中间件的稳定性是需要保障的，不可能因为包冲突问题，就升级版本</li><li>更何况一个中间件依赖的包可能有上百个，如果纯粹依赖包升级来解决，不仅稳定性难以保障，排包耗费的时间恐怕就让人窒息了</li></ol><p>那如何解决包冲突的问题呢？答案就是pandora（潘多拉），通过自定义类加载器，为每个中间件自定义一个加载器，这些加载器之间的关系是平行的，彼此没有依赖关系。这样每个中间件的classloader就可以加载各自版本的fastjson。因为<strong>一个类的全限定名以及加载该类的加载器两者共同形成了这个类在JVM中的惟一标识</strong>，这也是阿里pandora实现<strong>依赖隔离</strong>的基础。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-4.jpg" alt></p><p>可能到这里，你又会有新的疑惑，根据双亲委托模型，App Classloader分别继承了Custom Classloader，那么业务包中的fastjson的class在加载的时候，会先委托到Custom ClassLoader。这样不就会导致自身依赖的fastjson版本被忽略吗？</p><p>确实如此，所以潘多拉又是如何做的呢？</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-5.jpg" alt></p><p>首先每个中间件对应的ModuleClassLoader在加载中间对应的class文件的同时，根据中间件配置的export.index负责将要需要透出的<strong>class</strong>（主要是提供api接口的相关类）<strong>索引到exportedClassHashMap中</strong>。</p><p>然后应用程序的类加载器会持有这个exportedClassHashMap，因此应用程序代码在loadClass的时候，会优先判断exportedClassHashMap是否存在当前类，如果存在，则直接返回，如果不存在，则再使用传统的双亲委托机制来进行类加载。这样中间件MoudleClassloader不仅实现了中间件的加载，也实现了中间件关键服务类的透出。</p><p>我们可以大概看下应用程序类加载的过程</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-6.jpg" alt></p><h3 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h3><p>通过classloader我们可以完成对变更内容的加载，然后快速的启动。</p><p>常用的热加载方案有好几个，接下来我们介绍下spring官方推荐的热加载方案，即 spring boot devtools 。</p><p>首先我们需要思考下，为什么重新启动一个应用会比较慢，那是因为在启动应用的时候，JVM虚拟机需要将所有的应用程序重新装载到整个虚拟机。可想而知，一个复杂的应用程序所包含的jar包可能有上百兆，每次微小的改动都是全量加载，那自然是很慢了。</p><p>那么我们是否可以做到，当我们修改了某个文件后，在JVM中替换到这个文件相关的部分而不全量的重新加载呢？而spring boot devtools正是基于这个思路进行处理的。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-7.jpg" alt></p><p>如上图所示，通常一个项目的代码由以上四部分组成，即<strong>基础类、扩展类、二方包/三方包、以及我们自己编写的业务代码</strong>组成。上面的一排是我们通常的类加载结构，其中业务代码和二方包/三方包是由应用加载器加载的。</p><p>而实际开发和调试的过程中，<strong>主要变化的是业务代码</strong>，并且业务代码相对二方包/三方包的内容来说会更少一些。因此我们可以将业务代码单独通过一个自定义的加载器Custom Classloader来进行加载，当监控发现业务代码发生改变后，我们重新加载启动，老的业务代码的相关类则由虚拟机的垃圾回收机制来自动回收。其工程流程大概如下。有兴趣的同学可以去看下源码，会更加清楚。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-8.jpg" alt></p><p>RestartClassLoader为自定义的类加载器，其<strong>核心是loadClass的加载方式</strong>，我们发现其通过<strong>修改了双亲委托机制，默认优先从自己加载</strong>，如果自己没有加载到，从parent进行加载。这样保证了业务代码可以优先被RestartClassLoader加载。进而通过重新加载RestartClassLoader即可完成应用代码部分的重新加载。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-9.jpg" alt></p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>热部署本质其实与热加载并没有太大的区别，通常我们说热加载是指在开发环境中进行的classloader加载，而热部署则更多是指在线上环境使用classloader的加载机制完成业务的部署。所以这二者使用的技术并没有本质的区别。那热部署除了与热加载具有发布更快之外，还有更多的更大的优势就是<strong>具有更细的发布粒度</strong>。我们可以想像以下的一个业务场景。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-10.jpg" alt></p><p>假设某个营销投放平台涉及到4个业务方的开发，需要对会场业务进行投放。而这四个业务方的代码全部都在一个应用里面。因此某个业务方有代码变更则需要对整个应用进行发布，同时其它业务方也需要跟着回归。因此每个微小的发动，则需要走整个应用的全量发布。这种方式带来的稳定性风险估且不说，整个发布迭代的效率也可想而知了。这在整个互联网里，时间和效率就是金钱的理念下，显然是无法接受的。</p><p>那么我们完全可以通过类加载机制，<strong>将每个业务方通过一个classloader来加载</strong>。基于类的隔离机制，可以保障各个业务方的代码不会相互影响，同时也可以做到各个业务方进行独立的发布。其实在移动客户端，每个应用模块也可以基于类加载，实现插件化发布。本质上也是一个原理。</p><p>在阿里内部像阿拉丁投放平台，以及crossbow容器化平台，本质都是使用classloader的热加载技术，实现业务细粒度的开发部署以及多应用的合并部署。</p><h3 id="加密保护"><a href="#加密保护" class="headerlink" title="加密保护"></a>加密保护</h3><p>众所周期，基于java开发编译产生的jar包是由 .class 字节码组成，由于字节码的文件格式是有明确规范的。因此对于字节码进行反编译，就很容易知道其源码实现了。</p><p>因此大致会存在如下两个方面的诉求。</p><ol><li>在服务端，我们向别人提供三方包实现的时候，不希望别人知道核心代码实现，我们可以考虑对jar包进行加密</li><li>在客户端则会比较普遍，那就是我们打包好的apk的安装包，不希望被人家反编译而被人家翻个底朝天，我们也可以对apk进行加密。</li></ol><p>jar包加密的本质，还是对字节码文件进行操作。但是JVM虚拟机加载class的规范是统一的，因此我们在最终加载class文件的时候，还是需要满足其class文件的格式规范，否则虚拟机是不能正常加载的。因此我们可以在打包的时候对class进行正向的加密操作，然后，在加载class文件之前通过自定义classloader先进行反向的解密操作，然后再按照标准的class文件标准进行加载，这样就完成了class文件正常的加载。因此这个加密的jar包只有能够实现解密方法的classloader才能正常加载。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-11.jpg" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/classloader-12.jpg" alt></p><p>更高安全的保障则取决于加密算法的安全性了以及如何保障加密算法的密钥不被泄露的问题了。这有种套娃的感觉，所谓安全基本都是相对的。安全保障只要做到使对方破解的成本高于收益即是安全，所以一定程度的安全性，足以减少很多低成本的攻击了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是classloader&quot;&gt;&lt;a href=&quot;#什么是classloader&quot; class=&quot;headerlink&quot; title=&quot;什么是classloader&quot;&gt;&lt;/a&gt;什么是classloader&lt;/h2&gt;&lt;p&gt;classloader顾名思义，即是类加载。
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="classloader" scheme="https://arthurjq.com/tags/classloader/"/>
    
      <category term="jvm" scheme="https://arthurjq.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>mysql的锁</title>
    <link href="https://arthurjq.com/2021/02/19/database/mysql-lock/"/>
    <id>https://arthurjq.com/2021/02/19/database/mysql-lock/</id>
    <published>2021-02-19T04:21:53.000Z</published>
    <updated>2021-02-19T16:23:48.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>操作类型：</p><ol><li><p>读锁（共享锁，Shared Lock）：对同一个数据，多个读操作可以同时进行，互不干扰</p></li><li><p>写锁（互斥锁，Exclusive Lock）： 如果当前写操作没有完毕，则无法进行其他的读操作、写操作</p></li></ol><p>操作范围：</p><ol><li><p>表锁 ：一次性对一张表整体加锁。如MyISAM存储引擎使用表锁，开销小、加锁快；无死锁；但锁的范围大，容易发生锁冲突、并发度低。</p></li><li><p>行锁：一次性对一条数据加锁。如InnoDB存储引擎使用行锁，开销大，加锁慢；容易出现死锁；锁的范围较小，不易发生锁冲突，并发度高（很小概率 发生高并发问题：脏读、幻读、不可重复度、丢失更新等问题）。</p></li></ol><h2 id="基本的指令"><a href="#基本的指令" class="headerlink" title="基本的指令"></a>基本的指令</h2><h3 id="增加锁和释放锁"><a href="#增加锁和释放锁" class="headerlink" title="增加锁和释放锁"></a>增加锁和释放锁</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">table</span> 表<span class="token number">1</span>  <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span>  <span class="token punctuation">,</span>表<span class="token number">2</span>  <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>unlock <span class="token keyword">tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查看加锁的表"><a href="#查看加锁的表" class="headerlink" title="查看加锁的表"></a>查看加锁的表</h3><p>show open tables列举在表缓存中当前被打开的非TEMPORARY表。</p><p>如果您没有表的权限，则它不会显示在输出中</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token comment" spellcheck="true"># 返回结果</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span> <span class="token keyword">where</span> in_use <span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+--------+-------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span> <span class="token operator">|</span> <span class="token keyword">Table</span> <span class="token operator">|</span> In_use <span class="token operator">|</span> Name_locked <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+--------+-------------+</span><span class="token operator">|</span> MyDB     <span class="token operator">|</span> test  <span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>           <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------+--------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>Database</strong>：含有该表的数据库。</li><li><strong>Table</strong>：表名称。</li><li><strong>In_use</strong>：表当前被查询使用的次数。为1表示上锁了。</li><li><strong>Name_locked</strong>：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</li></ol><h3 id="分析表锁定的严重程度"><a href="#分析表锁定的严重程度" class="headerlink" title="分析表锁定的严重程度"></a>分析表锁定的严重程度</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'table%'</span><span class="token comment" spellcheck="true">--Table_locks_immediate :即可能获取到的锁数</span><span class="token comment" spellcheck="true">--Table_locks_waited：需要等待的表锁数(如果该值越大，说明存在越大的锁竞争)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><p>加读锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- tablelock引擎是myisam</span><span class="token keyword">create</span> <span class="token keyword">table</span> tablelock<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span> myisam<span class="token punctuation">;</span>        会话<span class="token number">0</span>：            <span class="token keyword">lock</span> <span class="token keyword">table</span>  tablelock <span class="token keyword">read</span> <span class="token punctuation">;</span>            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablelock<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--读（查），可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> tablelock <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写（增删改），不可以</span>            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--读，不可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> eid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写，不可以</span>            结论<span class="token number">1</span>：            <span class="token comment" spellcheck="true">--如果某一个会话 对A表加了read锁，则 该会话 可以对A表进行读操作、不能进行写操作； 且 该会话不能对其他表进行读、写操作。</span>            <span class="token comment" spellcheck="true">--即如果给A表加了读锁，则当前会话只能对A表进行读操作。</span>        会话<span class="token number">1</span>（其他会话）：            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablelock<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--读（查），可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> tablelock <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写，会“等待”会话0将锁释放</span>        会话<span class="token number">1</span>（其他会话）：            <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--读（查），可以</span>            <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> eno <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--写，可以</span>            结论<span class="token number">2</span>：            <span class="token comment" spellcheck="true">--总结：会话0给A表加了锁；其他会话的操作：a.可以对其他表（A表以外的表）进行读、写操作 b.对A表：读-可以；  写-需要等待释放锁。</span>        释放锁: unlock <span class="token keyword">tables</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加写锁"><a href="#加写锁" class="headerlink" title="加写锁"></a>加写锁</h3><pre class="line-numbers language-sql"><code class="language-sql">    会话<span class="token number">0</span>：        <span class="token keyword">lock</span> <span class="token keyword">table</span> tablelock <span class="token keyword">write</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">--当前会话（会话0） 可以对加了写锁的表  进行任何操作（增删改查）；但是不能 操作（增删改查）其他表</span>    其他会话：        对会话<span class="token number">0</span>中加写锁的表，可以进行增删改查的前提是：等待会话<span class="token number">0</span>释放写锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL表级锁的锁模式"><a href="#MySQL表级锁的锁模式" class="headerlink" title="MySQL表级锁的锁模式"></a>MySQL表级锁的锁模式</h3><p>MyISAM在执行查询语句（SELECT）前，会<strong>自动给涉及的所有表加读锁</strong>，在执行更新操作（DML）前，会<strong>自动给涉及的表加写锁</strong>。</p><p>所以对MyISAM表进行操作，会有以下情况：</p><ol><li>对MyISAM表的读操作（加读锁），不会阻塞其他进程（会话）对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</li><li>对MyISAM表的写操作（加写锁），会阻塞其他进程（会话）对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。</li></ol><h2 id="行锁（InnoDB）"><a href="#行锁（InnoDB）" class="headerlink" title="行锁（InnoDB）"></a>行锁（InnoDB）</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> linelock<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> linelock<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--mysql默认自动commit;    oracle默认不会自动commit ;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了研究行锁，暂时将自动commit关闭; </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> autocommit <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">start</span> <span class="token keyword">transaction</span> <span class="token punctuation">;</span><span class="token keyword">begin</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--上边三种都可以，关闭后需要手动通过commit提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>如果会话x对某条数据a进行 DML操作（研究时：关闭了自动commit的情况下），则其他会话必须等待会话x结束事务（commit/rollback）后  才能对数据a进行操作。</li><li>表锁 是通过unlock tables，也可以通过事务解锁 ; 行锁 是通过事务解锁。</li></ol><h3 id="行锁的注意事项"><a href="#行锁的注意事项" class="headerlink" title="行锁的注意事项"></a>行锁的注意事项</h3><p>如果没有索引，则行锁会转为表锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> linelock <span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> linelock <span class="token keyword">add</span> <span class="token keyword">index</span> idx_linelock_name<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    会话<span class="token number">0</span>： 写操作        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'ai'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'3'</span> <span class="token punctuation">;</span>    会话<span class="token number">1</span>： 写操作， 不同的数据        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'aX'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'4'</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--上边不会阻塞。    </span>    会话<span class="token number">0</span>： 写操作        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'ai'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span>    会话<span class="token number">1</span>： 写操作， 不同的数据        <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'aX'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">--可以发现，数据被阻塞了（加锁）</span><span class="token comment" spellcheck="true">-- 原因：如果索引类 发生了类型转换，则索引失效。 因此 此次操作，会从行锁 转为表锁。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>行锁的一种特殊情况：<strong>间隙锁</strong>（值在范围内，但却不存在）</p><pre class="line-numbers language-sql"><code class="language-sql">     <span class="token comment" spellcheck="true">--此时linelock表中 没有id=7的数据</span>     <span class="token keyword">update</span> linelock <span class="token keyword">set</span> name <span class="token operator">=</span><span class="token string">'x'</span> <span class="token keyword">where</span> id <span class="token operator">></span><span class="token number">1</span> <span class="token operator">and</span> id<span class="token operator">&lt;</span><span class="token number">9</span> <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--即在此where范围中，没有id=7的数据，则id=7的数据成为间隙。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>完全避过了主键记录, 锁住数据不存在的区间</strong></p><p><strong>间隙</strong>：Mysql会自动给 间隙 加锁 -&gt;间隙锁。即 本题 会自动给id=7的数据加 间隙锁（行锁）。如果有where，则<strong>实际加锁的范围就是where后面的范围</strong>（不是实际的值）</p><blockquote><p>锁其实是锁住了索引</p><ul><li><p>如果不使用索引<br>走表锁</p></li><li><p>使用了索引<br>走行锁, 锁住了是索引, 不是锁住了一行</p></li></ul></blockquote><h3 id="for-update"><a href="#for-update" class="headerlink" title="for update"></a>for update</h3><p>查询数据想加锁的话用for update</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> linelock <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">for</span> <span class="token keyword">update</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>行锁分析：</p><p>show status like ‘%innodb_row_lock%’ ;<br>         Innodb_row_lock_current_waits :当前正在等待锁的数量<br>         Innodb_row_lock_time：等待总时长。从系统启到现在 一共等待的时间<br>         Innodb_row_lock_time_avg  ：平均等待时长。从系统启到现在平均等待的时间<br>         Innodb_row_lock_time_max  ：最大等待时长。从系统启到现在最大一次等待的时间<br>         Innodb_row_lock_waits ：    等待次数。从系统启到现在一共等待的次数</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;操作类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;读锁（共享锁，Shared Lock）：对同一个数据，多个读操作可以同时进行，互不干扰&lt;/p&gt;

      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://arthurjq.com/tags/mysql/"/>
    
      <category term="lock" scheme="https://arthurjq.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>OLTP vs OLAP</title>
    <link href="https://arthurjq.com/2021/02/05/database/oltp-olap/"/>
    <id>https://arthurjq.com/2021/02/05/database/oltp-olap/</id>
    <published>2021-02-05T09:19:15.000Z</published>
    <updated>2021-02-05T09:52:53.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>OLTP（on-line transaction processing）翻译为联机事务处理， OLAP（On-Line Analytical Processing）翻译为联机分析处理，从字面上来看OLTP是做事务处理，OLAP是做分析处理。<strong>从对数据库操作来看，OLTP主要是对数据的增删改，OLAP是对数据的查询</strong>。</p><p><strong>OLTP方法的优点</strong>：<br>它管理组织的日常交易。 OLTP通过简化单个流程来扩大组织的客户基础。</p><p><strong>OLTP方法的缺点</strong>：<br>如果OLTP系统面临硬件故障，那么在线交易将受到严重影响。 OLTP系统允许多个用户同时访问和更改同一数据时，会造成混乱。</p><p><strong>使用OLAP服务的优点</strong>：<br>OLAP为所有类型的业务分析需求（包括计划，预算，预测和分析）创建一个平台。<br>OLAP的主要好处是信息和计算的一致性。 轻松对用户和对象施加安全限制，以符合法规并保护敏感数据。</p><p><strong>OLAP服务的缺点</strong>：<br>实施和维护依赖于IT专业人员，因为传统的OLAP工具需要复杂的建模过程。 OLAP工具需要各个部门人员之间的合作才能有，过程相对繁琐复杂。</p><h2 id="从应用上来看看OLTP与OLAP的区别"><a href="#从应用上来看看OLTP与OLAP的区别" class="headerlink" title="从应用上来看看OLTP与OLAP的区别"></a>从应用上来看看OLTP与OLAP的区别</h2><p>OLTP主要用来记录某类业务事件的发生，如购买行为，当行为产生后，系统会记录是谁在何时何地做了何事，这样的一行（或多行）数据会以增删改的方式在数据库中进行数据的更新处理操作，要求实时性高、稳定性强、确保数据及时更新成功，像公司常见的业务系统如ERP，CRM，OA等系统都属于OLTP。</p><p>当数据积累到一定的程度，我们需要对过去发生的事情做一个总结分析时，就需要把过去一段时间内产生的数据拿出来进行统计分析，从中获取我们想要的信息，为公司做决策提供支持，这时候就是在做OLAP了。</p><p>因为OLTP所产生的业务数据分散在不同的业务系统中，而OLAP往往需要将不同的业务数据集中到一起进行统一综合的分析，这时候就需要根据业务分析需求做对应的数据清洗后存储在数据仓库中，然后由数据仓库来统一提供OLAP分析。所以我们常说OLTP是数据库的应用，OLAP是数据仓库的应用，下面用一张图来简要对比。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/oltp-olap-1.jpg" alt></p><h2 id="使用图示"><a href="#使用图示" class="headerlink" title="使用图示"></a>使用图示</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/oltp-olap-2.jpg" alt></p><h3 id="操作型数据库（ODS）"><a href="#操作型数据库（ODS）" class="headerlink" title="操作型数据库（ODS）"></a>操作型数据库（ODS）</h3><p>操作型数据库（ODS），数据仓库（DW或EDW），数据集市（DM）是目前标准数仓结构的三个核心组件。</p><p>他们在数仓架构中差异点大致如下（以标准理论为准，实际设计中都会有越界和妥协现象）</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/oltp-olap-3.jpg" alt></p><h3 id="ODS和贴源层（缓冲区）"><a href="#ODS和贴源层（缓冲区）" class="headerlink" title="ODS和贴源层（缓冲区）"></a>ODS和贴源层（缓冲区）</h3><p><strong>贴源层</strong>的数据结构和数据内容是和源系统一模一样的，包括里面的垃圾数据，唯一不同的是，贴源层加了“时间戳”。</p><p><strong>ODS层</strong>，则要清洗掉垃圾数据，更改不能入库的格式为数仓支持的格式或优化后的格式，如nchar改为char或Varchar。</p><p>贴源层数据存放一般为一周左右，几乎不会超过一个月；而ODS则永久存放。</p><p>细节可以看：<a href="https://www.jianshu.com/p/72e395d8cb33" target="_blank" rel="noopener">https://www.jianshu.com/p/72e395d8cb33</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;OLTP（on-line transaction processing）翻译为联机事务处理， OLAP（On-Line Analytical
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据仓库" scheme="https://arthurjq.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Seata</title>
    <link href="https://arthurjq.com/2021/02/04/project/seata/"/>
    <id>https://arthurjq.com/2021/02/04/project/seata/</id>
    <published>2021-02-04T01:21:28.000Z</published>
    <updated>2021-02-07T14:56:49.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Seata-介绍"><a href="#Seata-介绍" class="headerlink" title="Seata 介绍"></a>Seata 介绍</h2><p>Seata 是从两段提交演变而来的一种分布式事务解决方案，提供了 <code>AT</code>、<code>TCC</code>、<code>SAGA</code> 和 <code>XA</code> 等事务模式，这里重点介绍 AT模式。</p><p>既然 Seata 是两段提交，那我们看看它在每个阶段都做了点啥？下边我们还以下单扣库存、扣余额举例。</p><p>部分介绍转载于seata官方文档等：<a href="http://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener">http://seata.io/zh-cn/docs/overview/what-is-seata.html</a>   |  <a href="https://zhuanlan.zhihu.com/p/344184343" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/344184343</a>   |    <a href="https://zhuanlan.zhihu.com/p/315164700" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/315164700</a></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-1.jpg" alt></p><p>先介绍Seata分布式事务的几种角色：</p><ol><li>Transaction Coordinator（TC）: 全局事务协调者，用来协调全局事务和各个分支事务（不同服务）的状态， 驱动全局事务和各个分支事务的回滚或提交。</li><li>Transaction Manager（TM）: 事务管理者，业务层中用来开启/提交/回滚一个整体事务（在调用服务的方法中用注解开启事务）。</li><li>Resource Manager（RM）: 资源管理者，一般指业务数据库代表了一个分支事务（Branch Transaction），管理分支事务与TC进行协调注册分支事务并且汇报分支事务的状态，驱动分支事务的提交或回滚。</li></ol><blockquote><p>Seata 实现分布式事务，设计了一个关键角色 <code>UNDO_LOG</code> （回滚日志记录表），我们在每个应用分布式事务的业务库中创建这张表，这个表的核心作用就是，将业务数据在更新前后的数据镜像组织成回滚日志，备份在 <code>UNDO_LOG</code> 表中，以便业务异常能随时回滚。</p></blockquote><h3 id="第一个阶段"><a href="#第一个阶段" class="headerlink" title="第一个阶段"></a>第一个阶段</h3><p>比如：下边我们更新 <code>user</code> 表的 <code>name</code> 字段。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'锦泉'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'ArthurJQ'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先 Seata 的 <code>JDBC</code> 数据源代理通过对业务 SQL 解析，提取 SQL 的元数据，也就是得到 SQL 的类型（UPDATE），表（user），条件（<code>where name = &#39;ArthurJQ&#39;</code>）等相关的信息。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-2.jpg" alt></p><p>先查询数据前镜像，根据解析得到的条件信息，生成查询语句，定位一条数据。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>  name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'ArthurJQ'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">ID</th><th align="center">NAME</th><th align="center">USER_ID</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">ArthurJQ</td><td align="center">9527</td></tr></tbody></table><p>紧接着执行业务 SQL，根据前镜像数据主键查询出后镜像数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">ID</th><th align="center">NAME</th><th align="center">USER_ID</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">锦泉</td><td align="center">9527</td></tr></tbody></table><p>把业务数据在更新前后的数据镜像组织成回滚日志，将业务数据的更新和回滚日志在同一个本地事务中提交，分别插入到业务表和 <code>UNDO_LOG</code> 表中。</p><p>回滚记录数据格式如下：包括 afterImage 前镜像、beforeImage 后镜像、 branchId 分支事务ID、xid 全局事务ID</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"branchId"</span><span class="token operator">:</span><span class="token number">641789253</span><span class="token punctuation">,</span>    <span class="token property">"xid"</span><span class="token operator">:</span><span class="token string">"xid:xxx"</span><span class="token punctuation">,</span>    <span class="token property">"undoItems"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"afterImage"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"rows"</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">{</span>                                <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>                                <span class="token property">"type"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>                                <span class="token property">"value"</span><span class="token operator">:</span><span class="token number">1</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"tableName"</span><span class="token operator">:</span><span class="token string">"product"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"beforeImage"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"rows"</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">{</span>                                <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"id"</span><span class="token punctuation">,</span>                                <span class="token property">"type"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>                                <span class="token property">"value"</span><span class="token operator">:</span><span class="token number">1</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"tableName"</span><span class="token operator">:</span><span class="token string">"product"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"sqlType"</span><span class="token operator">:</span><span class="token string">"UPDATE"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以保证，任何提交的业务数据的更新一定有相应的回滚日志。</p><blockquote><p>在本地事务提交前，各分支事务需向 <code>全局事务协调者</code> TC 注册分支 ( <code>Branch Id</code>) ，为要修改的记录申请 <strong>全局锁</strong> ，要为这条数据加锁，利用 <code>SELECT FOR UPDATE</code> 语句。而如果一直拿不到锁那就需要回滚本地事务。TM 开启事务后会生成全局唯一的 <code>XID</code>，会在各个调用的服务间进行传递。</p></blockquote><p>有了这样的机制，本地事务分支（Branch Transaction）便可以在全局事务的第一阶段提交，并马上释放本地事务锁定的资源。相比于传统的 XA 事务在第二阶段释放资源，Seata 降低了锁范围提高效率，即使第二阶段发生异常需要回滚，也可以快速 从<code>UNDO_LOG</code> 表中<strong>找到对应回滚数据并反解析成 SQL 来达到回滚补偿</strong>。</p><p>最后本地事务提交，业务数据的更新和前面生成的 UNDO LOG 数据一并提交，并将本地事务提交的结果上报给全局事务协调者 TC。</p><h3 id="第二个阶段"><a href="#第二个阶段" class="headerlink" title="第二个阶段"></a>第二个阶段</h3><p>第二阶段是根据各分支的决议做提交或回滚：</p><p>如果决议是全局提交，此时各分支事务已提交并成功，这时 全局事务协调者（TC） 会向分支发送第二阶段的请求。收到 TC 的分支提交请求，该<strong>请求会被放入一个异步任务队列</strong>中，并马上返回提交成功结果给 TC。异步队列中会异步和批量地根据 <code>Branch ID</code> 查找并删除相应 <code>UNDO LOG</code> 回滚记录。并把相关事务信息如：<strong>行锁删除</strong>，之后让因为在竞争锁被阻塞的事务顺利进行。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-3.jpg" alt></p><p>如果二阶段是回滚，过程比全局提交麻烦一点，</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-12.jpg" alt></p><p>首先在 Client 端收到 TC 告知的二阶段是回滚时，会去查到对应的事务的 undolog，取出后镜像，对比当前的数据（因为 SeataAT 是从业务应用层面进行保护分布式事务，如果此时在数据库层面直接修改了库内信息，这个时候 SeataAT 的行锁不起隔离性作用），如果出现了在全局事务以外的数据修改，此时判定为脏写，而 Seata 因为无法感知这个脏写如何发生，此时只能打印日志和触发异常通知，告知用户需要人工介入（规范修改数据入口可避免脏写）。</p><p>而如果没有发生脏写就比较简单了，拿出前镜像，众所皆知事务是需要有原子性的，要么一起发生，要么都不发生，此时前镜像记录了发生之前的数据，进行回滚后，就达到了类似本地事务那样的原子性效果。回滚后，再把事务相关信息，如 undolog，行锁进行删除。二阶段回滚算是告一段落了。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-4.jpg" alt></p><blockquote><p>注意：这里删除回滚日志记录操作，一定是在本地业务事务执行之后</p></blockquote><h3 id="AT-在-Seata-的分布式事务框架"><a href="#AT-在-Seata-的分布式事务框架" class="headerlink" title="AT 在 Seata 的分布式事务框架"></a>AT 在 Seata 的分布式事务框架</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-13.png" alt></p><p>可以看到，AT 与其它事务模式在 Seata 事务框架中，会多出一个 undolog 的表（相对其它模式的入侵点），但是除此之外，对业务来说，几乎是零入侵性，这也就是为什么 AT 模式在 Seata 中受众广泛的原因。</p><h3 id="写隔离"><a href="#写隔离" class="headerlink" title="写隔离"></a>写隔离</h3><ul><li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li><li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li></ul><p>以一个示例来说明：</p><p>两个全局事务 tx1 和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000。</p><p>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 <strong>全局锁</strong> ，本地提交释放本地锁。 tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 <strong>全局锁</strong> ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待 <strong>全局锁</strong> 。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-5.png" alt></p><p>tx1 二阶段全局提交，释放 <strong>全局锁</strong> 。tx2 拿到 <strong>全局锁</strong> 提交本地事务。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-6.png" alt></p><p>如果 tx1 的二阶段全局回滚，则 tx1 需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。</p><p>此时，如果 tx2 仍在等待该数据的 <strong>全局锁</strong>，同时持有本地锁，则 tx1 的分支回滚会失败。分支的回滚会一直重试，直到 tx2 的 <strong>全局锁</strong> 等锁超时，放弃 <strong>全局锁</strong> 并回滚本地事务释放本地锁，tx1 的分支回滚最终成功。</p><p>因为整个过程 <strong>全局锁</strong> 在 tx1 结束前一直是被 tx1 持有的，所以不会发生 <strong>脏写</strong> 的问题。</p><h3 id="读隔离"><a href="#读隔离" class="headerlink" title="读隔离"></a>读隔离</h3><p>在数据库本地事务隔离级别 <strong>读已提交（Read Committed）</strong> 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 <strong>读未提交（Read Uncommitted）</strong> 。</p><p>如果应用在特定场景下，必需要求全局的 <strong>读已提交</strong> ，目前 Seata 的方式是通过 SELECT FOR UPDATE 语句的代理。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-7.png" alt></p><p>SELECT FOR UPDATE 语句的执行会申请 <strong>全局锁</strong> ，如果 <strong>全局锁</strong> 被其他事务持有，则释放本地锁（回滚 SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到 <strong>全局锁</strong> 拿到，即读取的相关数据是 <strong>已提交</strong> 的，才返回。</p><p>出于总体性能上的考虑，Seata 目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。</p><h2 id="Seata-Server-搭建"><a href="#Seata-Server-搭建" class="headerlink" title="Seata Server 搭建"></a>Seata Server 搭建</h2><p>Seata 是一个需独立部署的中间件，所以先搭 Seata Server</p><p>seata下载：<a href="https://seata.io/zh-cn/blog/download.html" target="_blank" rel="noopener">https://seata.io/zh-cn/blog/download.html</a></p><p>seata源码和seata server两个都要下载，分别解压，如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-9.jpg" alt></p><h3 id="file-conf"><a href="#file-conf" class="headerlink" title="file.conf"></a>file.conf</h3><p><code>seata\conf\</code>目录下的file.conf 文件用于配置持久化事务日志的模式，目前提供 <code>file</code>、<code>db</code>、<code>redis</code> 三种方式。例如使用 db 方式修改file.conf如下：</p><pre class="line-numbers language-shell"><code class="language-shell">## transaction log store, only used in seata-serverstore {  ## store mode: file、db、redis  mode = "db"  ## database store property  db {    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.    datasource = "druid"    ## mysql/oracle/postgresql/h2/oceanbase etc.    dbType = "mysql"    driverClassName = "com.mysql.cj.jdbc.Driver"    url = "jdbc:mysql://10.0.1.110:3308/seata?serverTimezone=Asia/Shanghai"    user = "mysql"    password = "mysql"    minConn = 5    maxConn = 100    globalTable = "global_table"    branchTable = "branch_table"    lockTable = "lock_table"    queryLimit = 100    maxWait = 5000  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在选择 <code>db</code> 方式后，需要在对应数据库创建 globalTable（持久化全局事务）、branchTable（持久化各提交分支的事务）、 lockTable（持久化各分支锁定资源事务）三张表。</p><h3 id="seata-server数据库创建"><a href="#seata-server数据库创建" class="headerlink" title="seata server数据库创建"></a>seata server数据库创建</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-8.jpg" alt></p><p>里边有对应的 globalTable（持久化全局事务）、branchTable（持久化各提交分支的事务）、 lockTable（持久化各分支锁定资源事务）三张表，粘出来去对应的数据库创建就行了。比如mysql.sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- the table to store GlobalSession data</span><span class="token comment" spellcheck="true">-- 持久化全局事务</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>                       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>            <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>                    <span class="token keyword">TINYINT</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span>                   <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span>                <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>                <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>              <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- the table to store BranchSession data</span><span class="token comment" spellcheck="true">-- 持久化各提交分支的事务</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>         <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>               <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>    <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>            <span class="token keyword">TINYINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span>         <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>        <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>      <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- the table to store lock data</span><span class="token comment" spellcheck="true">-- 持久化每个分支锁表事务</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span>        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>      <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>pk<span class="token punctuation">`</span>             <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>     <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_branch_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="seata-server配置文件推送到nacos"><a href="#seata-server配置文件推送到nacos" class="headerlink" title="seata server配置文件推送到nacos"></a>seata server配置文件推送到nacos</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-10.jpg" alt></p><p>打开config.txt文件，因为要推送到nacos（方便统一配置），把需要配置的参数保留就好，修改配置如下：</p><pre class="line-numbers language-text"><code class="language-text">service.vgroupMapping.my_test_tx_group=defaultstore.mode=dbstore.db.datasource=druidstore.db.dbType=mysqlstore.db.driverClassName=com.mysql.cj.jdbc.Driverstore.db.url=jdbc:mysql://10.0.1.110:3308/seata?serverTimezone=Asia/Shanghaistore.db.user=#你创建表的数据库登录的用户名store.db.password=#数据库登录密码store.db.minConn=5store.db.maxConn=30store.db.globalTable=global_tablestore.db.branchTable=branch_tablestore.db.queryLimit=100store.db.lockTable=lock_tablestore.db.maxWait=5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入nacos目录，git执行命令</p><pre class="line-numbers language-shell"><code class="language-shell">sh nacos-config.sh -h 10.0.1.104 -p 8848 -g SEATA_GROUP -t 6e802a92-d7a4-498f-8f14-5625988e1608 -u nacos -w nacos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面指令执行成功后nacos配置中心能看到推送过去的配置，如下</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-11.jpg" alt></p><h3 id="registry-conf"><a href="#registry-conf" class="headerlink" title="registry.conf"></a>registry.conf</h3><p>registry.conf 文件设置 注册中心 和 配置中心：</p><p>目前注册中心支持 <code>nacos</code> 、<code>eureka</code>、<code>redis</code>、<code>zk</code>、<code>consul</code>、<code>etcd3</code>、<code>sofa</code> 七种，这里我使用的 <code>nacos</code>作为注册中心 ； 配置中心支持 <code>nacos</code> 、<code>apollo</code>、<code>zk</code>、<code>consul</code>、<code>etcd3</code> 五种方式。</p><p>将seata server注册到nacos，打开<code>\seata\conf</code>目录下的<strong>registry.conf</strong>，修改部分配置如下：</p><pre class="line-numbers language-shell"><code class="language-shell">registry {  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type = "nacos"  loadBalance = "RandomLoadBalance"  loadBalanceVirtualNodes = 10  nacos {    application = "seata-server"    serverAddr = "10.0.1.104:8848"    group = "SEATA_GROUP"    namespace = "" #nacos服务空间    cluster = "default"    username = "" #nacos用户名    password = "" #nacos密码  }}config {  # file、nacos 、apollo、zk、consul、etcd3  type = "nacos"  nacos {    serverAddr = "10.0.1.104:8848"    namespace = "" #nacos服务空间    group = "SEATA_GROUP"    username = "" #nacos用户名    password = "" #nacos密码  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完以后在 <code>\seata\bin</code> 目录下启动 <code>seata-server</code> 即可，到这 <code>Seata</code> 的服务端就搭建好了。</p><h2 id="Seata-Client"><a href="#Seata-Client" class="headerlink" title="Seata Client"></a>Seata Client</h2><p>Seata Server 环境搭建完，接下来我们新建三个服务 <code>order-server</code>（下单服务）、<code>storage-server</code>（扣减库存服务）、<code>account-server</code>（账户金额服务），分别服务注册到 nacos。</p><h3 id="应用接入Seata-Server"><a href="#应用接入Seata-Server" class="headerlink" title="应用接入Seata Server"></a>应用接入Seata Server</h3><p>添加seata依赖：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>framework-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- alibaba-seata --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring-boot-seata --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 指定项目编译时的java版本和编码方式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${maven-compiler-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>${encoding}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个服务创建application.yml文件：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Seata 配置项，对应 SeataProperties 类</span><span class="token key atrule">seata</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> my_test_tx_group <span class="token comment" spellcheck="true"># Seata 事务组编号，用于 TC 集群名</span>  <span class="token comment" spellcheck="true"># Seata 服务配置项，对应 ServiceProperties 类</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 09dd3d79<span class="token punctuation">-</span>92c0<span class="token punctuation">-</span>47fe<span class="token punctuation">-</span>bd1d<span class="token punctuation">-</span>0f1b7f8dc928      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 10.0.1.104<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true"># Seata 注册中心配置项，对应 RegistryProperties 类</span>  <span class="token key atrule">registry</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos <span class="token comment" spellcheck="true"># 注册中心类型，默认为 file</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server <span class="token comment" spellcheck="true"># Nacos 服务名</span>      <span class="token key atrule">cluster</span><span class="token punctuation">:</span> default <span class="token comment" spellcheck="true"># 使用的 Nacos 机器名</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP <span class="token comment" spellcheck="true"># Nacos 组</span>      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 09dd3d79<span class="token punctuation">-</span>92c0<span class="token punctuation">-</span>47fe<span class="token punctuation">-</span>bd1d<span class="token punctuation">-</span>0f1b7f8dc928 <span class="token comment" spellcheck="true"># Nacos 命名空间</span>      <span class="token key atrule">serverAddr</span><span class="token punctuation">:</span> 10.0.1.104<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># Nacos 服务地址</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>业务大致流程：用户发起下单请求，本地 order 订单服务创建订单记录，并通过 <code>RPC</code> 远程调用 <code>storage</code> 扣减库存服务和 <code>account</code> 扣账户余额服务，只有三个服务同时执行成功，才是一个完整的下单流程。如果某个服执行失败，则其他服务全部回滚。</p><p>Seata 对业务代码的侵入性非常小，<strong>代码中使用只需用 @GlobalTransactional 注解开启一个全局事务即可</strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create-order"</span><span class="token punctuation">,</span> rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String xid <span class="token operator">=</span> RootContext<span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->交易开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//本地方法</span>    orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//远程方法 扣减库存</span>    storageApi<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//远程方法 扣减账户余额</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->扣减账户开始order中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    accountApi<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->扣减账户结束order中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------->交易结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"全局事务 xid： {}"</span><span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="seata-client-表创建"><a href="#seata-client-表创建" class="headerlink" title="seata client 表创建"></a>seata client 表创建</h3><p>进入都seata源码里，选择客户端，再选择at模式：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/seata-12.jpg" alt></p><p>打开mysql.sql（选择自己对应的数据库，我是用的mysql），前边说过 Seata AT 模式实现分布式事务，<strong>必须在相关的业务库中创建 undo_log 表来存数据回滚日志</strong>，表结构如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>     <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'branch transaction id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'global transaction id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>context<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'undo_log context,such as serialization'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> <span class="token keyword">LONGBLOB</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'rollback info'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_status<span class="token punctuation">`</span>    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'0:normal status,1:defense status'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_created<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'create datetime'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'modify datetime'</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">'AT transaction mode undo table'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在每个应用分布式事务的业务库中创建这张表，这个表的核心作用就是，将业务数据在更新前后的数据镜像组织成回滚日志，备份在 <code>UNDO_LOG</code> 表中，以便业务异常能随时回滚。</p><h2 id="模块接入seata"><a href="#模块接入seata" class="headerlink" title="模块接入seata"></a>模块接入seata</h2><p>将上一步的操作，新建了一个模块framework-seata，所以其他业务模块想接入seata，只需要引入该模块即可（不要忘记每个client都需要新建undo_log表）。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.wisefly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>framework-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${wisefly.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>开启分布式事务需要在入口方法加上@GlobalTransactional注解</li><li>不建议方法有try-catch，如果有需要在catch里面加上<code>GlobalTransactionContext.reload(RootContext.getXID()).rollback()</code>;</li><li>由于seata在一阶段提交的时候就commit，所以<strong>存在脏读可能</strong>。强烈建议在涉及分布式事务的查询语句后面加上for update</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Seata-介绍&quot;&gt;&lt;a href=&quot;#Seata-介绍&quot; class=&quot;headerlink&quot; title=&quot;Seata 介绍&quot;&gt;&lt;/a&gt;Seata 介绍&lt;/h2&gt;&lt;p&gt;Seata 是从两段提交演变而来的一种分布式事务解决方案，提供了 &lt;code&gt;AT&lt;/cod
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="分布式事务" scheme="https://arthurjq.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="中间件" scheme="https://arthurjq.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="nacos" scheme="https://arthurjq.com/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库优化方法</title>
    <link href="https://arthurjq.com/2021/02/03/database/mysql-optimization/"/>
    <id>https://arthurjq.com/2021/02/03/database/mysql-optimization/</id>
    <published>2021-02-03T06:35:52.000Z</published>
    <updated>2021-02-07T15:48:32.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选取最适用的字段属性"><a href="#选取最适用的字段属性" class="headerlink" title="选取最适用的字段属性"></a>选取最适用的字段属性</h2><p>MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。</p><p>例如，在定义邮政编码这个字段时，如果将其设置为CHAR（255）,显然给数据库增加了不必要的空间，甚至使用VARCHAR这种类型也是多余的，因为CHAR（6）就可以很好的完成任务了。同样的，如果可以的话，我们应该使用MEDIUMINT而不是BIGIN来定义整型字段。</p><p><strong>另外一个提高效率的方法是在可能的情况下，应该尽量把字段设置为NOTNULL</strong>，这样在将来执行查询的时候，数据库不用去比较NULL值。</p><p>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，<strong>ENUM类型被当作数值型数据来处理</strong>，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p><h2 id="使用连接（JOIN）来代替子查询（Sub-Queries）"><a href="#使用连接（JOIN）来代替子查询（Sub-Queries）" class="headerlink" title="使用连接（JOIN）来代替子查询（Sub-Queries）"></a>使用连接（JOIN）来代替子查询（Sub-Queries）</h2><p>MySQL从4.1开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。</p><p>例如，我们要将客户基本信息表中没有任何订单的客户删除掉，就可以利用子查询先从销售信息表中将所有发出订单的客户ID取出来，然后将结果传递给主查询，如下所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> customerinfo<span class="token keyword">WHERE</span> CustomerID <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> CustomerID <span class="token keyword">FROM</span> salesinfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接（JOIN）替代。</p><p>例如，假设我们要将所有没有订单记录的用户取出来，可以用下面这个查询完成：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customerinfo<span class="token keyword">WHERE</span> CustomerID <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>SELECTC ustomerID <span class="token keyword">FROM</span> salesinfo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如果使用连接（JOIN）来完成这个查询工作，速度将会快很多</strong>。尤其是当salesinfo表中对CustomerID建有索引的话，性能将会更好，查询如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customerinfo<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> salesinfo <span class="token keyword">ON</span> customerinfo<span class="token punctuation">.</span>CustomerID<span class="token operator">=</span>salesinfo<span class="token punctuation">.</span>CustomerID<span class="token keyword">WHERE</span> salesinfo<span class="token punctuation">.</span>CustomerID ISNULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>连接（JOIN）之所以更有效率一些，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</p><h2 id="使用联合（UNION）来代替手动创建的临时表"><a href="#使用联合（UNION）来代替手动创建的临时表" class="headerlink" title="使用联合（UNION）来代替手动创建的临时表"></a>使用联合（UNION）来代替手动创建的临时表</h2><p>MySQL从4.0的版本开始支持union查询，它可以把需要使用临时表的两条或更多的select查询合并的一个查询中。在客户端的<strong>查询会话结束的时候，临时表会被自动删除</strong>，从而保证数据库整齐、高效。</p><p>使用union来创建查询的时候，我们只需要用UNION作为关键字把多个select语句连接起来就可以了，要<strong>注意的是所有select语句中的字段数目要相同</strong>。下面的例子就演示了一个使用UNION的查询。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span>Phone <span class="token keyword">FROM</span> client <span class="token keyword">UNION</span><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span>BirthDate <span class="token keyword">FROM</span> author <span class="token keyword">UNION</span><span class="token keyword">SELECT</span> Name<span class="token punctuation">,</span>Supplier <span class="token keyword">FROM</span> product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>尽管我们可以使用子查询（Sub-Queries）、连接（JOIN）和联合（UNION）来创建各种各样的查询，但不是所有的数据库操作都可以只用一条或少数几条SQL语句就可以完成的。更多的时候是需要用到一系列的语句来完成某种工作。但是在这种情况下，当这个语句块中的某一条语句运行出错的时候，整个语句块的操作就会变得不确定起来。</p><p>设想一下，要把某个数据同时插入两个相关联的表中，可能会出现这样的情况：第一个表中成功更新后，数据库突然出现意外状况，造成第二个表中的操作没有完成，这样，就会造成数据的不完整，甚至会破坏数据库中的数据。要避免这种情况，就应该使用事务，它的作用是：要么语句块中每条语句都操作成功，要么都失败。</p><p>换句话说，就是可以保持数据库中数据的一致性和完整性。事物以BEGIN关键字开始，COMMIT关键字结束。在这之间的一条SQL操作失败，那么，ROLLBACK命令就可以把数据库恢复到BEGIN开始之前的状态。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> salesinfo <span class="token keyword">SET</span> CustomerID<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span> <span class="token keyword">UPDATE</span> inventory <span class="token keyword">SET</span> Quantity<span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">WHERE</span> item<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">;</span> <span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>事务的另一个重要作用是当多个用户同时使用相同的数据源时，它可以利用锁定数据库的方法来为用户提供一种安全的访问方式，这样可以保证用户的操作不被其它的用户所干扰。</p><h2 id="锁定表"><a href="#锁定表" class="headerlink" title="锁定表"></a>锁定表</h2><p>尽管事务是维护数据库完整性的一个非常好的方法，但却因为它的独占性，有时会影响数据库的性能，尤其是在很大的应用系统中。由于在事务执行的过程中，数据库将会被锁定，因此其它的用户请求只能暂时等待直到该事务结束。如果一个数据库系统只有少数几个用户来使用，事务造成的影响不会成为一个太大的问题；但假设有成千上万的用户同时访问一个数据库系统，例如访问一个电子商务网站，就会产生比较严重的响应延迟。</p><p>其实，有些情况下我们可以通过锁定表的方法来获得更好的性能。下面的例子就用锁定表的方法来完成前面一个例子中事务的功能。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> inventory <span class="token keyword">WRITE</span> <span class="token keyword">SELECT</span> Quantity <span class="token keyword">FROM</span> inventory <span class="token keyword">WHERE</span> Item<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">UPDATE</span> inventory <span class="token keyword">SET</span> Quantity<span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">WHERE</span> Item<span class="token operator">=</span><span class="token string">'book'</span><span class="token punctuation">;</span> UNLOCKTABLES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里，我们用一个select语句取出初始数据，通过一些计算，用update语句将新值更新到表中。包含有WRITE关键字的LOCK TABLE语句可以保证在UNLOCK TABLES命令被执行之前，不会有其它的访问来对inventory进行插入、更新或者删除的操作。</p><h2 id="使用外键"><a href="#使用外键" class="headerlink" title="使用外键"></a>使用外键</h2><p><strong>锁定表的方法可以维护数据的完整性，但是它却不能保证数据的关联性。这个时候我们就可以使用外键。</strong></p><p>例如，外键可以保证每一条销售记录都指向某一个存在的客户。在这里，外键可以把customerinfo表中的CustomerID映射到salesinfo表中CustomerID，任何一条没有合法CustomerID的记录都不会被更新或插入到salesinfo中。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customerinfo<span class="token punctuation">(</span> CustomerID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> PRIMARYKEY<span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">TYPE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> salesinfo<span class="token punctuation">(</span> SalesID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> CustomerIDINT <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>PRIMARYKEY<span class="token punctuation">(</span>CustomerID<span class="token punctuation">,</span>SalesID<span class="token punctuation">)</span><span class="token punctuation">,</span>FOREIGNKEY<span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> customerinfo<span class="token punctuation">(</span>CustomerID<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token keyword">TYPE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意例子中的参数“ON DELETE CASCADE”。该参数保证当customerinfo表中的一条客户记录被删除的时候，salesinfo表中所有与该客户相关的记录也会被自动删除。</p><p>如果要在MySQL中使用外键，一定要记住在创建表的时候将表的类型定义为事务安全表InnoDB类型。该类型不是MySQL表的默认类型。定义的方法是在CREATETABLE语句中加上TYPE=INNODB。如例中所示。</p><h2 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h2><p>索引是提高数据库性能的常用方法，它可以令数据库服务器以比没有索引快得多的速度检索特定的行，尤其是在查询语句当中包含有MAX（）,MIN（）和ORDER BY这些命令的时候，性能提高更为明显。</p><p>加索引的注意事项：</p><ol><li><p>一般说来，索引应建立在那些将用于JOIN,WHERE判断和ORDER BY排序的字段上。尽量不要对数据库中某个含有大量重复的值的字段建立索引。如ENUM类型的字段会出现大量重复值</p></li><li><p>索引需要逐步优化</p></li><li><p>索引一旦进行 升级优化，需要将之前废弃的索引删掉，防止干扰。</p></li><li><p>根据SQL实际解析的顺序，调整索引的顺序（最左前缀，保持索引的定义和使用的顺序一致性）</p><blockquote><p>sql解析顺序：from … on… join …where …group by …having …select dinstinct …order by … limit …</p></blockquote></li><li><p>范围查询 in 有时不会实现，所以将含In的范围查询 放到where条件的最后，防止失效。</p></li><li><p>对于多表查询，小表驱动大表</p></li><li><p>对于复合索引，where 和 order by 拼起来，不要跨列使用</p></li><li><p>此外，MySQL从版本3.23.23开始支持全文索引和搜索。全文索引在MySQL中是一个FULLTEXT类型索引，但仅能用于MyISAM类型的表。如果将数据装载到一个已经有FULLTEXT索引的表中，执行过程将会非常慢。</p></li></ol><h2 id="优化的查询语句"><a href="#优化的查询语句" class="headerlink" title="优化的查询语句"></a>优化的查询语句</h2><p>绝大多数情况下，使用索引可以提高查询的速度，但如果SQL语句使用不恰当的话，索引将无法发挥它应有的作用。</p><p>下面是应该注意的几个方面。</p><ul><li><p>首先，最好是在相同类型的字段间进行比较的操作。</p></li><li><p>其次，在建有索引的字段上尽量不要<strong>计算、使用函数和类型转换</strong>进行操作。</p></li></ul><blockquote><p>例如，在一个DATE类型的字段上使用YEAE（）函数时，将会使索引不能发挥应有的作用。</p></blockquote><ul><li>第三，在搜索字符型字段时，我们有时会使用LIKE关键字和通配符，这种做法虽然简单，但却也是以牺牲系统性能为代价的。</li></ul><p>例如下面的查询将会比较表中的每一条记录。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span>  <span class="token keyword">FROM</span>  books  <span class="token keyword">WHERE</span>  name  <span class="token operator">like</span>  <span class="token string">"MySQL%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是如果换用下面的查询，返回的结果一样，但速度就要快上很多：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>   <span class="token operator">*</span>  <span class="token keyword">FROM</span>  books<span class="token keyword">WHERE</span>  name＞<span class="token operator">=</span><span class="token string">"MySQL"</span>  <span class="token operator">and</span>  name  ＜<span class="token string">"MySQM"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>SQL优化，是一种概率层面的优化，这是因为sql语句在执行前要经过服务层的sql优化器（MySQL Query Optimizer）进行优化。至于是否实际使用了我们的优化，需要通过explain进行推测。</p></blockquote><p>索引失效的十大情况：<a href="http://arthurjq.com/2020/12/26/index-missing/">http://arthurjq.com/2020/12/26/index-missing/</a></p><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>就是将数据库分为主从库，一个主库（<strong>Master</strong>）用于写数据，多个从库（<strong>Slaver</strong>）进行轮询读取数据的过程，主从库之间通过某种通讯机制进行数据的同步，是一种常见的数据库架构。下面这张图就展示了 “一主二从” 的结构：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-1.png" alt></p><h3 id="为什么要读写分离"><a href="#为什么要读写分离" class="headerlink" title="为什么要读写分离"></a>为什么要读写分离</h3><p>大多数互联网数据操作往往都是读多写少，随着数据的增长，数据库的“读”会首先成为瓶颈。如果我们希望能线性地提升数据库的读性能和写性能，就需要让读 写尽可能的不相互影响，各自为政。<strong>在使用读写分离之前我们应该考虑使用缓存能不能解决问题</strong>。然后再考虑对数据库按照 “读” 和 “写” 进行分组。读写分离意味着将一体的结构的进行分散，在数据量大、高并发的情景中要考虑以下这些问题：</p><ol><li>如何保证 <strong>Master</strong> 的高可用，故障转移，熔断限流等。</li><li>读写操作的区分规则，代码层面如何处理好读命令和写命令，尽量无感知无业务入侵。</li><li>数据一致性的容忍度。虽然是数据同步，但是由于网络的不确定性这仍然是一个不可忽视的问题。</li></ol><h2 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h2><p><strong>数据库垂直拆分、数据库水平拆分</strong> 统称 <strong>分库</strong>。是指按照特定的条条件和维度，将同一个数据库中的数据拆分到多个数据库（主机）上面以达到分散单库（主机）负载的效果。这样我们变相地降低了数据集的大小，以空间换时间来提升性能。</p><h3 id="数据库垂直拆分"><a href="#数据库垂直拆分" class="headerlink" title="数据库垂直拆分"></a>数据库垂直拆分</h3><p><strong>数据库垂直拆分</strong> 指的是按照业务对数据库中的表进行分组，同组的放到一个新的数据库（逻辑上，并非实例）中。需要从实际业务出发将大业务分割成小业务。</p><p>比如商城的整个业务中的 <strong>用户相关表，订单相关表，物流相关表</strong> 各自独立分类形成 <strong>用户系统数据库，订单系统数据库，物流系统数据库</strong> 如下图：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-2.png" alt></p><p><strong>垂直分库是指按照业务将表进行分类，分布到不同的数据库上面，每个库可以放在不同的服务器上，它的核心理念是专库专用。</strong></p><p>这样带来了一些好处： （a）业务清晰，职责单一 （b）易维护，易扩展 （c）数据服务化 </p><p>同时也有一些负面的作用：</p><p>（a）提高了整个应用的复杂度，而且会形成跨库事务 </p><p>（b）引发 “木桶效应”，任何一个短板有可能影响整个系统 </p><p>（c）部分表关系不能 join 只能通过服务相互调用来维系。甚至由于网络问题引发数据不一致。</p><p>在需要进行分库的情况下，通常可优先考虑垂直拆分。</p><h3 id="数据库水平拆分"><a href="#数据库水平拆分" class="headerlink" title="数据库水平拆分"></a>数据库水平拆分</h3><p>在数据库垂直拆分后遇到单机数据库性能瓶颈之后，就可以考虑数据库水平拆分了。 </p><p>之所以先垂直拆分才水平拆分，是因为垂直拆分后数据业务清晰而且单一，更加方便指定水平的标准。比如我们对商城业务垂直拆分后的 用户系统 进行水平拆分就比对整个商城业务进行水平拆分好找维度，我们可以根据用户注册时间的区间、用户的区域或者用户 ID 的范围、 hash 等条件，然后关联相关表的记录将数据进行拆分，如果放在整个商城业务上你是以用户为准还是以订单为准都不太好考虑。</p><p>我们按照每100万为区间对用户系统水平拆分如下（按照 id % 2 分也可以）：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-3.png" alt></p><p><strong>水平分库是把同一个表的数据按一定规则拆到不同的数据库中，每个库可以放在不同的服务器上。</strong></p><p>这种拆分的好处在于： （a）单个库的容量可控 （b）单条记录保证了数据完整性 （c）数据关系可以通过 join 维持 （d） 避免了跨库事务 （e）稳定性体现在IO冲突减少，锁定减少，可用性指某个库出问题，部分可用；</p><p>缺点同样存在：（a）拆分规则对编码有一定的影响 （b）不同业务的分区交互需要统筹设计</p><h2 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h2><p>分表也分为 <strong>数据表垂直拆分</strong> 和 <strong>数据表水平拆分</strong> 。</p><h3 id="数据表垂直拆分"><a href="#数据表垂直拆分" class="headerlink" title="数据表垂直拆分"></a>数据表垂直拆分</h3><p>数据表垂直拆分就是纵向地把表中的列分成多个表，把表从“ 宽 ”变“ 窄 ”。一般遵循以下几个点进行拆分：</p><ol><li>冷热分离，把常用的列放在一个表，不常用的放在一个表</li><li>大字段列独立存放</li><li>关联关系的列紧密的放在一起</li></ol><p>我们把用户表中常用的和不常用的而且大字段分离成两张表：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/mysql-optimization-4.png" alt></p><p><strong>垂直分表定义：将一个表按照字段分成多表，每个表存储其中一部分字段。</strong></p><p>它带来的提升是：</p><ol><li>为了避免IO争抢并减少锁表的几率，查看详情的用户与商品信息浏览互不影响</li><li>充分发挥热门数据的操作效率，商品信息的操作的高效率不会被商品描述的低效率所拖累。</li></ol><blockquote><p>为什么大字段IO效率低：第一是由于数据量本身大，需要更长的读取时间；第二是跨页，页是数据库存储单位，很多查找及定位操作都是以页为单位，单页内的数据行越多数据库整体性能越好，而大字段占用空间大，单页内存储行数少，因此IO效率较低。第三，数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率更高，减少了磁盘IO，从而提升了数据库性能。</p></blockquote><h3 id="数据表的水平拆分"><a href="#数据表的水平拆分" class="headerlink" title="数据表的水平拆分"></a>数据表的水平拆分</h3><p>表的水平拆分感觉跟库的水平拆分思想上都是一样的，只不过粒度不同。表结构维持不变。也就是说拆分后数据集的并集等于拆分前的数据集。理解了 数据库水平拆分 之后这个就没有什么可说的了。</p><p><strong>水平分表是在同一个数据库内，把同一个表的数据按一定规则拆到多个表中。</strong></p><p>这里简单阐述了几个数据库优化概念，在实际操作中往往会组合使用。我们在实际操作之前要做好数据量的预估，这样能够根据预测未来数据的增量来进行选型。业务数据增长较小，常用于表的拆分。增长特别大达到上万级别则可以选择分库，比如一些资金积分流水，历史记录之类的。有些时候并不是拆分完就万事大吉了，比如我们按照地区拆分后，A地区业务增长很快业绩很好，而B地区推广不力竞争激烈业绩萧条，造成了数据倾斜。也会影响分库分表的期望效果。这需要建立长效的监控预测机制来应对，甚至根据实际情况及时调整策略。数据拆分还面临分布式的很多问题，分布式事务，高可用，数据一致性，全局唯一性都是应该考虑的问题。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>分库分表神器 Sharding-JDBC，几千万的数据你不搞一下？：<a href="https://zhuanlan.zhihu.com/p/301031380" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/301031380</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选取最适用的字段属性&quot;&gt;&lt;a href=&quot;#选取最适用的字段属性&quot; class=&quot;headerlink&quot; title=&quot;选取最适用的字段属性&quot;&gt;&lt;/a&gt;选取最适用的字段属性&lt;/h2&gt;&lt;p&gt;MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://arthurjq.com/tags/mysql/"/>
    
      <category term="数据库优化" scheme="https://arthurjq.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="https://arthurjq.com/2021/02/03/database/jta/"/>
    <id>https://arthurjq.com/2021/02/03/database/jta/</id>
    <published>2021-02-03T03:20:28.000Z</published>
    <updated>2021-02-07T15:53:22.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>CAP理论</strong></p><ol><li>一致性（Consistency） ：在分布式系统中所有的数据备份，<strong>在同一时刻都保持一致状态</strong>，如无法保证状态一致，直接返回错误；</li><li>可用性（Availability）：在集群中一部分节点故障，也能保证客户端访问系统并得到正确响应，<strong>允许一定时间内数据状态不一致</strong>；</li><li>分区容错性（Partition tolerance）：分布式系统在遇到任何网络分区故障时，仍然能保证对外提供满足一致性和可用性的服务，除非整个网络环境都发生故障；</li></ol><p><strong>本地事务四大特性（ACID）</strong></p><ol><li>原子性（atomicity）：一个事务中的所有操作，不可分割，要么全部成功，要么全部失败；</li><li>一致性（consistency）：一个事务执行前与执行后数据的<strong>完整性</strong>必须保持一致，与cap的一致性是两个概念，详情请看：<a href="http://arthurjq.com/2020/12/25/consistency/">http://arthurjq.com/2020/12/25/consistency/</a></li><li>隔离性（isolation）：一个事务的执行，不能被其他事务干扰，多并发时事务之间要相互隔离，细节请看：<a href="http://arthurjq.com/2020/12/25/acid-isolation/">http://arthurjq.com/2020/12/25/acid-isolation/</a></li><li>持久性（durability）：一个事务一旦被提交，它对数据库中数据的改变是永久性的。</li></ol><p><strong>BASE理论</strong></p><p>基本可用（Basically Available）：分布式系统在出现故障时，保证核心可用，允许损失部分可用性。（响应时间上的损失、功能上的损失）<br>软状态（Soft State）：系统中的数据允许存在中间状态，中间状态不影响系统的整体可用性。（如：支付中、处理中）<br>最终一致性（Eventually Consistent）：系统中的数据不可一直处于软状态，必须在有时间期限，在期限过后应当保证数据的一致性。（<em>支付中</em> 变为 <em>支付成功</em>）</p><ul><li>相比于本地事务的ADIC强一致性模型，BASE理论提出<strong>通过牺牲一定的强一致性来获得可用性</strong>；</li><li>不同业务单元和业务组件对数据一致性的要求不一样，因此分布式系统中BASE理论和ACID特性会结合使用。</li></ul><p><strong>幂等性</strong></p><ol><li>幂等（Idempotent）是一个数学与计算机学中的概念：<code>f(n) = 1^n</code> // 无论n等于多少，f（n）永远值等于1；</li><li>在程序中，使用相同参数执行同一个方法，每一次执行结果都是相同的，即具有<code>幂等性</code>；</li><li>以订单状态处理为例的幂等性设计（举个栗子），不论执行多少次orderProcess（）方法，都只会扣减一次库存，并且返回true。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 订单处理 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">orderProcess</span><span class="token punctuation">(</span>OrderEntity orderEntity<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//查询原订单信息</span> OrderEntity oldOrderEntity <span class="token operator">=</span> <span class="token function">getOrderInfo</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断订单状态，如订单状态为 ok 则直接返回 true</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>oldOrderEntity<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//更新订单状态</span> <span class="token keyword">boolean</span> upBoolean <span class="token operator">=</span> <span class="token function">updateOrderInfo</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>upBoolean<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">.</span><span class="token function">getOrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//扣减库存</span>   <span class="token keyword">boolean</span> reduceBoolean <span class="token operator">=</span> <span class="token function">reduceInventories</span><span class="token punctuation">(</span>orderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reduceBoolean<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务的演进过程"><a href="#事务的演进过程" class="headerlink" title="事务的演进过程"></a>事务的演进过程</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>对于一些小型项目，使用单体架构可以快速的开发，并且很容易控制我们的业务逻辑和事务处理。通过本地事务的ACID特性，保证我们数据的一致性。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-1.png" alt></p><h3 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h3><p>实际项目中，我们可能会遇到一种情况就是，并发量不大，但常年累积下来数据量很大，这时候我们考虑到了<strong>分库策略</strong>。由于垮库情况下本地事务已经无法保证多库之间的数据一致性，<strong>这时我们就需要考虑分布式事务了</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-2.png" alt></p><h3 id="分布式架构（服务拆分）"><a href="#分布式架构（服务拆分）" class="headerlink" title="分布式架构（服务拆分）"></a>分布式架构（服务拆分）</h3><p>也有可能所使用的数据库性能比较好，但我们的单应用的性能无法满足业务需求，这时候我们可以选择对服务进行拆分的策略。此时虽然还是使用同一数据库，但我们多个服务之间互相调用来完成原有单体架构下的业务逻辑，这种情况下原有的本地事务也无法保证数据的一致性，这时我们也需要考虑分布式事务。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-3.png" alt></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>服务的拆分可以提高应用性能，让应用更专注于处理自己所负责的事情。数据库的拆分，一定程度上提升IO性能、数据库连接数、单机硬件资源的瓶颈。这时，服务间互相调用，每个服务都存在一个自己特定的业务数据库，所以我们需要考虑分布式事务。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-4.png" alt></p><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h2 id="XA规范（协议）"><a href="#XA规范（协议）" class="headerlink" title="XA规范（协议）"></a>XA规范（协议）</h2><p> X/Open组织（现在的Open Group）定义了一套DTP（Distributed Transaction Processing）分布式事务处理模型，主要包含以下四部分：</p><ol><li>AP（应用程序）</li><li>TM（事务管理器）：交易中间件</li><li>RM（资源管理器）：数据库</li><li>CRM（通信资源管理器）：消息中间件</li></ol><p><strong>XA规范</strong>则是DTP模型定义TM和RM之间通讯的接口规范。XA接口函数由数据库厂商提供。TM用它来通知数据库事务的开始、结束、提交、回滚。基于XA规范衍生出下面的二阶段提交（2PC）、三阶段提交（3PC）。</p><blockquote><p>XA规范包括两套函数，以<code>xa_</code>开头的及以<code>ax_</code>开头的。<br>以下的函数使事务管理器可以对资源管理器进行的操作：</p><ul><li>xa_open,xa_close：建立和关闭与资源管理器的连接。</li><li>xa_start,xa_end：开始和结束一个本地事务。</li><li>xa_prepare,xa_commit,xa_rollback：预提交、提交、回滚一个本地事务。</li><li>xa_recover：回滚一个已进行预提交的事务。</li><li>ax_开头的函数使资源管理器可以动态地在事务管理器中进行注册，并可以对XID（TRANSACTION IDS）进行操作。</li><li>ax_reg,ax_unreg；允许一个资源管理器在一个TMS（TRANSACTION MANAGER SERVER）中 动态注册 或 撤消注册 。</li></ul></blockquote><p>XA的一些问题：</p><ol><li><p>性能（阻塞、响应时间增加（一阶段不提交，且锁粒度更大）、死锁（收到 XA commit 或 XA rollback 前必须阻塞等待））；</p></li><li><p>XA 在整个事务处理过程结束前，涉及数据都被锁定，读写都按隔离级别的定义约束起来；</p></li><li><p>依赖于独立的J2EE中间件，<code>Weblogic</code>、<code>Jboss</code>，后期轻量级的<code>Atomikos</code>、<code>Narayana</code>、<code>Bitronix</code>；</p></li><li><p>不是所有资源（RM，数据库）都支持XA协议；</p><p>Seata 事务框架中的XA事务模式：</p></li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-11.png" alt></p><p>如图所示，XA 模式其实就是 Seata 底层利用了 XA 接口，在一阶段二阶段时自动处理。如一阶段时，XA 的 RM 通过代理用户数据源，创建 XAConnection，进行开启 XA 事务(XA start)和 XA-prepare（此时 XA 的任何操作都会被持久化，即便宕机也能恢复），在二阶段时，TC 通知 RM 进行 XA 分支的 Commit/Rollback 操作。</p><h2 id="JTA（Java-Transaction-API）"><a href="#JTA（Java-Transaction-API）" class="headerlink" title="JTA（Java Transaction API）"></a>JTA（Java Transaction API）</h2><p>即Java的事务API，基于XA实现，也就是RM需要支持XA，所以也有JTA（XA）的说法，JTA仅定义了接口。主要包括<code>javax.sql.XADataResource</code>、<code>javax.sql.XAConnection</code>、<code>javax.sql.XAException</code>、<code>javax.transaction.xa.XAResource</code>、<code>javax.transaction.Xid</code>。<br>JTA的实现有几种形式：</p><ol><li>J2EE容器提供的JTA实现（Weblogic、JBoss ）；</li><li>JOTM（Java Open Transaction Manager）、Atomikos，可独立于J2EE容器的环境下实现JTA；</li></ol><h2 id="二阶段提交（2PC）"><a href="#二阶段提交（2PC）" class="headerlink" title="二阶段提交（2PC）"></a>二阶段提交（2PC）</h2><p>2PC就是分布式事务中<strong>将事务分为两步进行提交</strong>。基于数据库的XA协议完成事务本质上就是二阶段提交（XA、JTA/JTS）。</p><ul><li>协调者（Coordinater）：事务管理器（TM）</li><li>参与者（participants）：资源管理器（RM）</li></ul><ol><li><p><strong>准备阶段：</strong><br>协调者向参与者发送prepare信息，以询问参与者是否能够提交事务；<br>参与者在收到prepare信息后，进行本地事务的<strong>预处理</strong>，<strong>但不提交</strong>。并根据处理结果返回，失败<code>not commit</code> or 成功<code>ready</code> ；</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-6.jpg" alt></p></li><li><p><strong>提交阶段：</strong><br>如协调者收到参与者的失败消息，则向每个参与者发送<code>rollback</code>消息进行回滚；<br>所有参与者都返回<code>ready</code>，则向每个参与者发送提交<code>commit</code>消息，通知参与者进行事务提交；</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-7.jpg" alt></p></li></ol><p>整理于：<a href="https://zhuanlan.zhihu.com/p/315164700" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/315164700</a></p><p>二阶段提交的一些问题：</p><ol><li><strong>同步阻塞</strong>，事务执行过程中所有参与者都是阻塞型的，第三方参与者访问参与者占有的资源时会被阻塞；</li><li><strong>单点故障</strong>，协调者一旦发生故障，参与者会被阻塞。尤其在提交阶段，所有参与者都处于锁定资源状态中，无法完成事务操作；（可以选择新的协调者，但无法解决参与者被阻塞的问题）；</li><li><strong>数据不一致</strong>，提交阶段协调者向参与者发送<code>commit</code>信息，发生局部网络故障，会导致存在参与者未收到<code>commit</code>信息无法提交事务情况，导致出现数据不一致现象；</li></ol><h2 id="三阶段提交（3PC）"><a href="#三阶段提交（3PC）" class="headerlink" title="三阶段提交（3PC）"></a>三阶段提交（3PC）</h2><p>相比于2PC，<strong>3PC把2PC的准备阶段再次进行拆分</strong>，并且3PC<strong>引入了参与者超时机制</strong>。</p><ol><li><p><strong>canCommit：</strong>协调者询问参与者，是否具备执行事务的条件，参与者进行自身事务必要条件的检查；</p></li><li><p><strong>preCommit：</strong>协调者通知参与者进行事务的预提交；</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-8.jpg" alt></p></li><li><p><strong>doCommit：</strong>协调者根据<code>preCommit</code>阶段参与者的反馈结果通知参与者是否进行事务提交或是进行事务回滚；</p></li></ol><p>虽然 3PC 用超时机制，解决了协调者故障后参与者的阻塞问题，但与此同时却多了一次网络通信，性能上反而变得更差，也不太推荐。</p><h2 id="事务补偿方案TCC"><a href="#事务补偿方案TCC" class="headerlink" title="事务补偿方案TCC"></a>事务补偿方案TCC</h2><p>TCC的核心思想就是校验、资源锁定、补偿，对每个操作（Try）都提供确认（Confirm）和取消（cancel）的操作，这样根据操作的结果，来确认是进行Confirm还是Cancel。<br>可以看出XA的两阶段提交是基于<strong>资源层面</strong>的，而TCC也是一种两阶段提交，但它是基于<strong>应用层面</strong>的。</p><ol><li><p><strong>Try</strong>：主要负责对业务进行数据检查和资源预留，例如：对资金进行<code>冻结</code>；对状态更改为<code>处理中</code>；</p></li><li><p><strong>Confirm</strong>：确认执行业务的操作，例如：进行实际<code>资金扣除</code>；更改状态为<code>最终结果</code>；</p></li><li><p><strong>Cancel</strong>：取消执行业务的操作，例如：<code>解冻资金</code>；更改状态为<code>未处理</code>；</p><p>Seata 事务框架中的TCC事务：</p></li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-10.png" alt></p><p>TCC存在的一些问题：</p><ol><li>业务操作的是不同服务的Try来进行资源预留，每个Try都是独立完成本地事务，因此不会对资源一直加锁。</li><li>业务服务需要提供try、confirm、cancel<strong>三种方法</strong>来支持，<strong>业务侵入性强</strong>，如不适用三方框架要做到对各阶段状态的感知，比较麻烦，而且这种模式并不能很好地复用，会导致并发量激增。</li><li>常用TCC框架：<code>tcc-transaction</code>、<code>ByteTCC</code>、<code>spring-cloud-rest-tcc</code>、<code>Himly</code></li><li><strong>Confirm/Cancel要做幂等性设计</strong>。</li></ol><p>常见的微服务系统大部分接口调用是同步的，这时候使用TCC来保证一致性是比较合适的。</p><h2 id="Saga（补偿）"><a href="#Saga（补偿）" class="headerlink" title="Saga（补偿）"></a>Saga（补偿）</h2><p>Saga的核心是补偿，与TCC不同的是<strong>Saga不需要Try</strong>，而是直接进行<code>confirm</code>、<code>cancel</code>操作。</p><ol><li>Confirm：依次按顺序依次执行资源操作，各个资源直接处理本地事务，如无问题，二阶段什么都不用做；</li><li>Cancel：异常情况下<strong>需要调用的补偿事务</strong>（逆操作）来保证数据的一致性。</li></ol><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-9.png" alt></p><p>可以看出，Saga和TCC有些类似，都是补偿型事务</p><p>适用场景：</p><ol><li>业务流程长、业务流程多</li><li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</li></ol><p><strong>优势：</strong></p><ol><li>一阶段提交本地事务，无锁，高性能；</li><li>事件驱动模式，参与者可异步执行，高吞吐；</li><li>应用成本低，补偿服务易于实现；</li></ol><p><strong>劣势：</strong>无法保证隔离性（脏写）</p><blockquote><p>脏写：先前的写入尚未提交，后面的写入又覆盖了这个尚未提交的值</p></blockquote><h2 id="可靠消息最终一致性（RocketMQ）"><a href="#可靠消息最终一致性（RocketMQ）" class="headerlink" title="可靠消息最终一致性（RocketMQ）"></a>可靠消息最终一致性（RocketMQ）</h2><p>有一些情况，服务间调用时异步的，服务A将消息发送到MQ，服务B进行消息的消费。这时我们就需要用到<code>可靠消息最终一致性</code>来解决分布式事务问题。首先字面理解</p><ul><li><strong>可靠消息：</strong>即这个消息一定是可靠的，并且最终一定需要被消费的。</li><li><strong>最终一致性：</strong>过程中数据存在一定时间内的不一致，但超过限定时间后，需要最终会保持一致。</li></ul><p>确保以上两点情况下，通过消息中间件（RocketMQ）来完成分布式事务处理，因为RocketMQ支持事务消息，可以方便的让我们进行分布式事务控制。</p><p>因此首先需要了解一下，RocketMQ的事务消息的原理。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-5.png" alt></p><blockquote><p><strong>half message：</strong>半消息，此时消息不能被consumer所发现和消费，需producer进行二次消息确认。</p></blockquote><ol><li><code>producer</code>发送<code>half message</code>给<code>MQ Server</code>；</li><li><code>producer</code>根据<code>MQ Server</code>应答结果判断<code>half message</code>是否发送成功；</li><li><code>producer</code>处理本地事务；</li><li><code>producer</code>发送最终确认消息<code>commit / rollback</code>；<br><code>commit</code>：<code>consumer</code>对消息可见并进行消费；<br><code>rollback</code>：<code>discard</code>抛弃消息，<code>consumer</code>无法进行消息消费；</li><li>如遇异常情况下<code>step4</code>最终确认消息未达到<code>MQ Server</code>，<code>MQ Server</code>会定期查询当前处于半消息状态下的消息，主动进行消息回查来询问<code>producer</code>该消息的最终状态；</li><li><code>producer</code>检查本地事务执行的最终结果；</li><li><code>producer</code>根据检查到的结果，再次提交确认消息，<code>MQ Server</code>仍然按照<code>step4</code>进行后续操作。</li></ol><p><strong>事务消息发送对应步骤1、2、3、4，事务消息回查对应步骤5、6、7。</strong></p><p>由以上步骤可以看出通过事务性消息的两步操作，避免了消息直接投递所产生一些问题。最终投递到MQ Server的消息，是真实可靠且必须被消费的。</p><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p>阿里开源的Seata 是一款分布式事务解决方案，提供了 AT、TCC、SAGA 和 XA 事务模式。</p><p>Seata架构的亮点主要有几个:</p><ol><li>应用层基于SQL解析实现了自动补偿，从而最大程度的降低业务侵入性；</li><li>将分布式事务中TC（事务协调者）独立部署，负责事务的注册、回滚（支持多种注册中心形式以及本地文件形式）；</li><li>通过全局锁实现了写隔离与读隔离。</li></ol><p>Seata的介绍、安装和使用在另一篇文章中。</p><p>在实际业务开发中，考虑设计一套好分布式事务框架，需要根据具体业务情况结合上述一些理论，进行权衡取舍。<br>需要考虑的特性：</p><blockquote><ul><li>实现复杂度：事务模式与当前业务结合，实施成本是否过高；</li><li>业务侵入性：基于注解、XML、补偿逻辑；</li><li>TC/TM部署：独立部署、与应用部署；</li><li>性能：回滚概率、回滚所付出的代价、响应时间、吞吐量；</li><li>高可用：数据库、注册中心、配置中心</li><li>持久化：文件、数据库；</li><li>同步/异步：分布式事务执行过程中是否阻塞，还是非阻塞；</li></ul></blockquote><p>具体的介绍和实践在：<a href="http://arthurjq.com/2021/02/04/seata/">http://arthurjq.com/2021/02/04/seata/</a></p><h2 id="总结-AT、TCC、Saga、XA-模式分析"><a href="#总结-AT、TCC、Saga、XA-模式分析" class="headerlink" title="总结 AT、TCC、Saga、XA 模式分析"></a>总结 AT、TCC、Saga、XA 模式分析</h2><table><thead><tr><th>分布式事务模式</th><th>介绍</th><th>技术栈</th></tr></thead><tbody><tr><td><strong>AT 模式</strong></td><td>无侵入的分布式事务解决方案，适用于不希望对业务进行改造的场景，几乎0学习成本（sql都由框架托管统一执行，会存在<strong>脏写</strong>问题）</td><td>seata、shardingsphere</td></tr><tr><td><strong>TCC 模式</strong></td><td>高性能分布式事务解决方案，适用于核心系统等对性能有很高要求的场景（第一阶段会产生行锁，事务执行太久会<strong>锁行很久</strong>）</td><td>seata、service-comb</td></tr><tr><td><strong>Saga 模式</strong></td><td>长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统（第一阶段就操作DB，会存在<strong>脏读</strong>问题）</td><td>seata、shardingsphere、service-comb</td></tr><tr><td><strong>XA模式</strong></td><td>分布式强一致性的解决方案，但<strong>性能低</strong>而使用较少。</td><td>seata、shardingsphere</td></tr></tbody></table><p>Saga和TCC模式区别不大，TCC就是多了个锁行的步骤（避免了脏读，但事务执行太久会导致锁行很久，不适用于长事务）</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/jta-14.png" alt></p><p>注：</p><ol><li>shardingsphere的<strong>Saga 模式</strong> 引擎使用的是service-comb（较comb实现了解析sql自动回滚）</li><li>shardingsphere的<strong>AT模式</strong>引擎是用的Seata引擎</li><li>shardingsphere是从Sharding-JDBC进化而来，分库分表使用很火</li></ol><p>（当当开源）shardingsphere开源地址：<a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener">https://github.com/apache/shardingsphere</a></p><p>（阿里2019年开源）seata开源地址：<a href="https://github.com/seata/seata" target="_blank" rel="noopener">https://github.com/seata/seata</a></p><p>（华为2017年开源）service-comb开源地址：<a href="https://github.com/apache/servicecomb-pack" target="_blank" rel="noopener">https://github.com/apache/servicecomb-pack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;CAP理论&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一致性（Consistency） ：在分布式系统中所
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="事务" scheme="https://arthurjq.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="分布式事务" scheme="https://arthurjq.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="springcloud" scheme="https://arthurjq.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射机制</title>
    <link href="https://arthurjq.com/2021/02/02/java/reflection/"/>
    <id>https://arthurjq.com/2021/02/02/java/reflection/</id>
    <published>2021-02-02T04:22:22.000Z</published>
    <updated>2021-02-07T15:58:51.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>转载：<a href="https://zhuanlan.zhihu.com/p/86293659" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/86293659</a></p><p>反射的概念是由 Smith 在 1982 年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。通俗地讲，一提到反射，我们就可以想到镜子。镜子可以明明白白地照出我是谁，还可以照出别人是谁。反映到程序中，反射就是用来让开发者知道这个类中有什么成员，以及别的类中有什么成员。</p><p>反射主要应用在以下几方面：</p><ol><li>反射让开发人员可以通过外部类的全路径名创建对象，并使用这些类，实现一些扩展的功能。</li><li>反射让开发人员可以枚举出类的全部成员，包括构造函数、属性、方法。以帮助开发者写出正确的代码。</li><li>测试时可以利用反射 API 访问类的私有成员，以保证测试代码覆盖率。</li></ol><h2 id="反射-API"><a href="#反射-API" class="headerlink" title="反射 API"></a>反射 API</h2><p>Java 类的成员包括以下三类：属性字段、构造函数、方法。反射的 API 也是与这几个成员相关：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/reflection-1.jpg" alt></p><ol><li>Field 类：提供有关类的属性信息，以及对它的动态访问权限。它是一个封装反射类的属性的类。</li><li>Constructor 类：提供有关类的构造方法的信息，以及对它的动态访问权限。它是一个封装反射类的构造方法的类。</li><li>Method 类：提供关于类的方法的信息，包括抽象方法。它是用来封装反射类方法的一个类。</li><li>Class 类：表示正在运行的 Java 应用程序中的类的实例。</li><li>Object 类：Object 是所有 Java 类的父类。所有对象都默认实现了 Object 类的方法。</li></ol><p>接下来，我们通过一个典型的例子来学习反射。先做准备工作，新建 com.test.reflection 包，在此包中新建一个 Student 类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>reflection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String studentName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> studentAge<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Student</span><span class="token punctuation">(</span>String studentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>studentName <span class="token operator">=</span> studentName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStudentAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> studentAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>studentAge <span class="token operator">=</span> studentAge<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">show</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show: "</span> <span class="token operator">+</span> studentName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> studentAge <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"testReturnValue"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Student 类中有两个<strong>字段</strong>、两个<strong>构造方法</strong>、两个<strong>函数</strong>，且都是一个私有，一个公有。由此可知，这个测试类基本涵盖了我们平时常用的所有类成员。</p><h3 id="获取-Class-对象的三种方式"><a href="#获取-Class-对象的三种方式" class="headerlink" title="获取 Class 对象的三种方式"></a>获取 Class 对象的三种方式</h3><p>获取 Class 对象有三种方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span>Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.通过类的class属性</span>Class <span class="token class-name">studentClass2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.通过对象的getClass()函数</span>Student studentObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">studentClass3</span> <span class="token operator">=</span> studentObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>第一种方法是通过类的全路径字符串获取 Class 对象，这也是我们平时最常用的反射获取 Class 对象的方法；</li><li>第二种方法有限制条件：需要导入类的包；</li><li>第三种方法已经有了 Student 对象，不再需要反射。</li></ol><p>通过这<strong>三种方式获取到的 Class 对象是同一个</strong>，也就是说 Java 运行时，每一个类只会生成一个 Class 对象。</p><p>我们将其打印出来测试一下：</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class1 = "</span> <span class="token operator">+</span> studentClass <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class2 = "</span> <span class="token operator">+</span> studentClass2 <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class3 = "</span> <span class="token operator">+</span> studentClass3 <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class1 == class2 ? "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass <span class="token operator">==</span> studentClass2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span>        <span class="token string">"class2 == class3 ? "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>studentClass2 <span class="token operator">==</span> studentClass3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">class1 = class com.test.reflection.Studentclass2 = class com.test.reflection.Studentclass3 = class com.test.reflection.Studentclass1 == class2 ? trueclass2 == class3 ? true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h3><p>获取字段有两个 API：<code>getDeclaredFields</code>和<code>getFields</code>。他们的区别是:<code>getDeclaredFields</code>用于获取所有声明的字段，包括公有字段和私有字段，<code>getFields</code>仅用来获取公有字段：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的字段</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Field: "</span> <span class="token operator">+</span> declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的字段</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fieldList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fieldList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"field: "</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">declared Field: private java.lang.String com.test.reflection.Student.studentNamedeclared Field: public int com.test.reflection.Student.studentAgefield: public int com.test.reflection.Student.studentAge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h3><p>获取构造方法同样包含了两个 API：用于获取所有构造方法的 <code>getDeclaredConstructors</code>和用于获取公有构造方法的<code>getConstructors</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的构造方法</span>Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor declaredConstructor <span class="token operator">:</span> declaredConstructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Constructor: "</span> <span class="token operator">+</span> declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的构造方法</span>Constructor<span class="token punctuation">[</span><span class="token punctuation">]</span> constructorList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor constructor <span class="token operator">:</span> constructorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"constructor: "</span> <span class="token operator">+</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">declared Constructor: public com.test.reflection.Student()declared Constructor: private com.test.reflection.Student(java.lang.String)constructor: public com.test.reflection.Student()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取非构造方法"><a href="#获取非构造方法" class="headerlink" title="获取非构造方法"></a>获取非构造方法</h3><p>同样地，获取非构造方法的两个 API 是：获取所有声明的非构造函数的 <code>getDeclaredMethods</code> 和仅获取公有非构造函数的 <code>getMethods</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.获取所有声明的函数</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Method declaredMethod <span class="token operator">:</span> declaredMethodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declared Method: "</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2.获取所有公有的函数</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methodList <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methodList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">declared Method: public void com.test.reflection.Student.setStudentAge(int)declared Method: private java.lang.String com.test.reflection.Student.show(java.lang.String)method: public void com.test.reflection.Student.setStudentAge(int)method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedExceptionmethod: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedExceptionmethod: public final void java.lang.Object.wait() throws java.lang.InterruptedExceptionmethod: public boolean java.lang.Object.equals(java.lang.Object)method: public java.lang.String java.lang.Object.toString()method: public native int java.lang.Object.hashCode()method: public final native java.lang.Class java.lang.Object.getClass()method: public final native void java.lang.Object.notify()method: public final native void java.lang.Object.notifyAll()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出中我们看到，<code>getMethods</code> 方法不仅获取到了我们声明的公有方法<code>setStudentAge</code>，还获取到了很多 Object 类中的公有方法。这是因为我们前文已说到：Object 是所有 Java 类的父类。所有对象都默认实现了 Object 类的方法。 而<code>getDeclaredMethods</code>是无法获取到父类中的方法的。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>学以致用，让我们来一个实际的应用感受一下。还是以 Student 类为例，如果此类在其他的包中，并且我们的需求是要在程序中通过反射获取他的构造方法，构造出 Student 对象，并且通过反射访问他的私有字段和私有方法。那么我们可以这样做：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.通过字符串获取Class对象，这个字符串必须带上完整路径名</span>Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.获取声明的构造方法，传入所需参数的类名，如果有多个参数，用','连接即可</span>Constructor studentConstructor <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的构造方法，需要调用下面这一行代码使其可使用，公有的构造方法则不需要下面这一行代码</span>studentConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用构造方法的newInstance方法创建对象，传入构造方法所需参数，如果有多个参数，用','连接即可</span>Object student <span class="token operator">=</span> studentConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"NameA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.获取声明的字段，传入字段名</span>Field studentAgeField <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"studentAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的字段，需要调用下面这一行代码使其可使用，公有的字段则不需要下面这一行代码</span><span class="token comment" spellcheck="true">// studentAgeField.setAccessible(true);</span><span class="token comment" spellcheck="true">// 使用字段的set方法设置字段值，传入此对象以及参数值</span>studentAgeField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.获取声明的函数，传入所需参数的类名，如果有多个参数，用','连接即可</span>Method studentShowMethod <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果是私有的函数，需要调用下面这一行代码使其可使用，公有的函数则不需要下面这一行代码</span>studentShowMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用函数的invoke方法调用此函数，传入此对象以及函数所需参数，如果有多个参数，用','连接即可。函数会返回一个Object对象，使用强制类型转换转成实际类型即可</span>Object result <span class="token operator">=</span> studentShowMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的逻辑注释已经写得很清晰了，我们再梳理一下：</p><ol><li>先用第一种全路径获取 Class 的方法获取到了 Student 的 Class 对象</li><li>然后反射调用它的私有构造方法 <code>private Student(String studentName)</code>，构建出 newInstance</li><li>再将其公有字段 studentAge 设置为 10</li><li>最后反射调用其私有方法 <code>show</code>，传入参数 “message”，并打印出这个方法的返回值。</li></ol><p>其中，<code>setAccessible</code> 函数用于动态获取访问权限，Constructor、Field、Method 都提供了此方法，让我们得以访问类中的私有成员。</p><p>运行程序，输出如下：</p><pre class="line-numbers language-text"><code class="language-text">show: NameA,10,messageresult: testReturnValue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;p&gt;转载：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/86293659&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>结构型模式</title>
    <link href="https://arthurjq.com/2021/02/01/java/design-pattern-structure-pattern/"/>
    <id>https://arthurjq.com/2021/02/01/java/design-pattern-structure-pattern/</id>
    <published>2021-02-01T07:25:37.000Z</published>
    <updated>2021-02-08T03:05:16.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-种结构型模式"><a href="#7-种结构型模式" class="headerlink" title="7 种结构型模式"></a>7 种结构型模式</h2><p><strong>结构型模式是用来设计程序的结构的</strong>。结构型模式就像搭积木，将不同的类结合在一起形成契合的结构。包括以下几种：</p><ul><li>适配器模式</li><li>桥接模式</li><li>组合模式</li><li>装饰模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><p>转载：<a href="https://www.zhihu.com/question/308850392/answer/1324509357" target="_blank" rel="noopener">https://www.zhihu.com/question/308850392/answer/1324509357</a></p><h2 id="一、适配器模式"><a href="#一、适配器模式" class="headerlink" title="一、适配器模式"></a>一、适配器模式</h2><p>适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p><p>适配的意思是适应、匹配。通俗地讲，适配器模式适用于 <strong>有相关性但不兼容的结构</strong>，源接口通过一个中间件转换后才可以适用于目标接口，这个转换过程就是适配，这个中间件就称之为适配器。</p><p>比如电源适配器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">int</span> homeVolt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 适配过程：使用电阻、电容等器件将其降低为输出 5V</span>        <span class="token keyword">int</span> chargeVolt <span class="token operator">=</span> homeVolt <span class="token operator">-</span> <span class="token number">215</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chargeVolt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但适配器模式<strong>并不推荐多用</strong>。因为未雨绸缪好过亡羊补牢，如果事先能预防接口不同的问题，不匹配问题就不会发生，只有遇到源接口无法改变时，才应该考虑使用适配器。</p><h2 id="二、桥接模式"><a href="#二、桥接模式" class="headerlink" title="二、桥接模式"></a>二、桥接模式</h2><p>桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体模式或<strong>接口模式</strong>。</p><p>考虑这样一个需求：绘制矩形、圆形、三角形这三种图案。按照面向对象的理念，我们至少需要三个具体类，对应三种不同的图形。</p><p>接下来我们有了新的需求，每种形状都需要有四种不同的颜色：红、蓝、黄、绿。</p><p>这时我们很容易想到两种设计方案：</p><ol><li><p>为了复用形状类，将每种形状定义为父类，每种不同颜色的图形继承自其形状父类。此时一共有 12 个类。</p></li><li><p>为了复用颜色类，将每种颜色定义为父类，每种不同颜色的图形继承自其颜色父类。此时一共有 12 个类。</p></li></ol><p>乍一看没什么问题，我们使用了面向对象的继承特性，复用了父类的代码并扩展了新的功能。</p><p>但仔细想一想，不同的排列组合将会使工作量变得无比的庞大。</p><p>说到这里，不得不提一个设计原则：合成 / 聚合复用原则。虽然它没有被划分到六大设计原则中，但它在面向对象的设计中也非常的重要。</p><blockquote><p>合成 / 聚合复用原则：优先使用合成 / 聚合，而不是类继承。</p></blockquote><p>继承虽然是面向对象的三大特性之一，但<strong>继承会导致子类与父类有非常紧密的依赖关系，它会限制子类的灵活性和子类的复用性</strong>。而使用合成 / 聚合，也就是使用接口实现的方式，就不存在依赖问题，一个类可以实现多个接口，可以很方便地拓展功能。</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p>新建接口类 IColor，仅包含一个获取颜色的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每种颜色都实现此接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Red</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"红"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blue</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"蓝"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Yellow</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"黄"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Green</span> <span class="token keyword">implements</span> <span class="token class-name">IColor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"绿"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>每个形状类中，桥接 IColor 接口</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">IShape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IColor color<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>IColor color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制"</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"矩形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Round</span> <span class="token keyword">implements</span> <span class="token class-name">IShape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IColor color<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>IColor color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制"</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"圆形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">implements</span> <span class="token class-name">IShape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IColor color<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>IColor color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制"</span> <span class="token operator">+</span> color<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来回顾一下官方定义：将抽象部分与它的实现部分分离，使它们都可以独立地变化。抽象部分指的是父类，对应本例中的形状类，实现部分指的是不同子类的区别之处。将子类的区别方式 —— 也就是本例中的颜色 —— 分离成接口，通过组合的方式桥接颜色和形状，这就是桥接模式，它主要用于 <strong>两个或多个同等级的接口</strong>。</p><h2 id="三、组合模式"><a href="#三、组合模式" class="headerlink" title="三、组合模式"></a>三、组合模式</h2><p>上文说到，桥接模式用于将同等级的接口互相组合，那么组合模式和桥接模式有什么共同点吗？</p><p>事实上组合模式和桥接模式的组合完全不一样。组合模式用于 <strong>整体与部分的结构</strong>，当整体与部分有相似的结构，在操作时可以被一致对待时，就可以使用组合模式。例如：</p><ol><li><p>文件夹和子文件夹的关系：文件夹中可以存放文件，也可以新建文件夹，子文件夹也一样。</p></li><li><p>总公司子公司的关系：总公司可以设立部门，也可以设立分公司，子公司也一样。</p></li><li><p>树枝和分树枝的关系：树枝可以长出叶子，也可以长出树枝，分树枝也一样。</p></li></ol><p>在这些关系中，虽然整体包含了部分，但无论整体或部分，<strong>都具有一致的行为</strong>。</p><p>组合模式：又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>考虑这样一个实际应用：设计一个公司的人员分布结构，结构如下图所示。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-composite-pattern.png" alt></p><p>我们注意到人员结构中有两种结构，一是管理者，如老板，PM，CFO，CTO，二是职员。其中有的管理者不仅仅要管理职员，还会管理其他的管理者。这就是一个典型的整体与部分的结构。</p><h3 id="一般的思路"><a href="#一般的思路" class="headerlink" title="一般的思路"></a>一般的思路</h3><p>新建管理者类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">private</span> String position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工作内容</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 管理的管理者</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Manager<span class="token operator">></span> managers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 管理的职员</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addManager</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        managers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeManager</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        managers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEmployee</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEmployee</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        employees<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 做自己的本职工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token string">"，我正在"</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查下属</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee employee <span class="token operator">:</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>            employee<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Manager manager <span class="token operator">:</span> managers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            manager<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建职员类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">private</span> String position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工作内容</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 做自己的本职工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token string">"，我正在"</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就设计出了公司的结构，但是这样的设计有两个弊端：</p><ol><li><p>name 字段，job 字段，work 方法重复了。</p></li><li><p>管理者对其管理的管理者和职员需要区别对待。</p></li></ol><p>关于第一个弊端，虽然这里为了讲解，只有两个字段和一个方法重复，实际工作中这样的整体部分结构会有相当多的重复。比如此例中还可能有工号、年龄等字段，领取工资、上下班打卡、开各种无聊的会等方法。</p><p>大量的重复显然是很丑陋的代码，分析一下可以发现， Manager 类只比 Employee 类多一个管理人员的列表字段，多几个增加 / 移除人员的方法，其他的字段和方法全都是一样的。</p><p>有读者应该会想到：我们可以将重复的字段和方法提取到一个工具类中，让 Employee 和 Manager 都去调用此工具类，就可以消除重复了。</p><p>这样固然可行，但属于 Employee 和 Manager 类自己的东西却要通过其他类调用，并不利于程序的高内聚。</p><p>关于第二个弊端，此方案无法解决，此方案中 Employee 和 Manager 类完全是两个不同的对象，两者的相似性被忽略了。</p><p>所以我们有更好的设计方案，那就是组合模式！</p><h3 id="使用组合模式的设计方案"><a href="#使用组合模式的设计方案" class="headerlink" title="使用组合模式的设计方案"></a>使用组合模式的设计方案</h3><p>组合模式最主要的功能就是让用户可以一致对待整体和部分结构，将两者都作为一个相同的组件，所以我们先新建一个抽象的组件类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">private</span> String position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工作内容</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Component</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 做自己的本职工作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token string">"，我正在"</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">removeComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>管理者继承自此抽象类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 管理的组件</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Component<span class="token operator">></span> components <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        components<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">removeComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        components<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查下属</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Component component <span class="token operator">:</span> components<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>职员同样继承自此抽象类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String position<span class="token punctuation">,</span> String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"职员没有管理权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">removeComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"职员没有管理权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用组合模式后，我们解决了之前的两个弊端。一是将共有的字段与方法移到了父类中，消除了重复，并且在客户端中，可以一致对待 Manager 和 Employee 类：</p><ul><li>Manager 类和 Employee 类统一声明为 Component 对象</li><li>统一调用 Component 对象的 addComponent 方法添加子对象即可。</li></ul><h2 id="四、装饰模式"><a href="#四、装饰模式" class="headerlink" title="四、装饰模式"></a>四、装饰模式</h2><p>装饰品并不会改变物品本身，只是起到一个锦上添花的作用。装饰模式也一样，它的主要作用就是：</p><ol><li><p><strong>增强一个类原有的功能</strong></p></li><li><p><strong>为一个类添加新的功能</strong></p></li></ol><p>并且 <strong>装饰模式也不会改变原有的类</strong>。</p><p>装饰模式：动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。</p><p>其别名也可以称为包装器，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”。</p><h3 id="用于增强功能的装饰模式"><a href="#用于增强功能的装饰模式" class="headerlink" title="用于增强功能的装饰模式"></a>用于增强功能的装饰模式</h3><p>我们用程序来模拟一下戴上装饰品提高我们颜值的过程：</p><p>新建颜值接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBeauty</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建 Me 类，实现颜值接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Me</span> <span class="token keyword">implements</span> <span class="token class-name">IBeauty</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>戒指装饰类，将 Me 包装起来：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RingDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">IBeauty</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IBeauty me<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RingDecorator</span><span class="token punctuation">(</span>IBeauty me<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>me <span class="token operator">=</span> me<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> me<span class="token punctuation">.</span><span class="token function">getBeautyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，装饰器也实现了 IBeauty 接口，并且没有添加新的方法，也就是说这里的装饰器<strong>仅用于增强功能</strong>，<strong>并不会改变 Me 原有的功能</strong>，这种装饰模式称之为 <strong>透明装饰模式</strong>，由于没有改变接口，也没有新增方法，所以<strong>透明装饰模式可以无限装饰</strong>。</p><p>装饰模式是 <strong>继承</strong> 的一种替代方案。本例如果不使用装饰模式，而是改用继承实现的话，戴着戒指的 Me 需要派生一个子类、戴着项链的 Me 需要派生一个子类、戴着耳环的 Me 需要派生一个子类、戴着戒指 + 项链的需要派生一个子类……各种各样的排列组合会造成类爆炸。而采用了装饰模式就只需要为每个装饰品生成一个装饰类即可，所以说就 <strong>增加对象功能</strong> 来说，<strong>装饰模式比生成子类实现更为灵活</strong>。</p><h3 id="用于添加功能的装饰模式"><a href="#用于添加功能的装饰模式" class="headerlink" title="用于添加功能的装饰模式"></a>用于添加功能的装饰模式</h3><p>我们用程序来模拟一下房屋装饰粘钩后，新增了挂东西功能的过程：</p><p>新建房屋接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHouse</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>房屋类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token keyword">implements</span> <span class="token class-name">IHouse</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房屋原有的功能：居住功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建粘钩装饰器接口，继承自房屋接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStickyHookHouse</span> <span class="token keyword">extends</span> <span class="token class-name">IHouse</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">hangThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>粘钩装饰类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StickyHookDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">IStickyHookHouse</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> IHouse house<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StickyHookDecorator</span><span class="token punctuation">(</span>IHouse house<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>house <span class="token operator">=</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        house<span class="token punctuation">.</span><span class="token function">live</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hangThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有了粘钩后，新增了挂东西功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是用于 <strong>新增功能</strong> 的装饰模式。我们在接口中新增了方法：hangThings，然后在装饰器中将 House 类包装起来，之前 House 中的方法仍然调用 house 去执行，也就是说我们并没有修改原有的功能，只是扩展了新的功能，这种模式在装饰模式中称之为 <strong>半透明装饰模式</strong>。</p><p>为什么叫半透明呢？由于新的接口 IStickyHookHouse 拥有之前 IHouse 不具有的方法，所以我们如果要使用装饰器中添加的功能，就不得不区别对待 <strong>装饰前的对象和装饰后的对象</strong>。也就是说客户端要使用新方法，必须知道具体的装饰类 StickyHookDecorator，所以这个装饰类对客户端来说是可见的、不透明的。而被装饰者不一定要是 House，它可以是实现了 IHouse 接口的任意对象，所以被装饰者对客户端是不可见的、透明的。由于一半透明，一半不透明，所以称之为半透明装饰模式。</p><h3 id="I-O-中的装饰模式"><a href="#I-O-中的装饰模式" class="headerlink" title="I/O 中的装饰模式"></a>I/O 中的装饰模式</h3><p>Java 7 中引入了try（resource）语法糖，IO 的代码就可以简化如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察获取 InputStream 这句代码：</p><pre class="line-numbers language-java"><code class="language-java">InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是不是和我们之前多次装饰的代码非常相似：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 多次装饰</span>IBeauty meWithManyDecorators <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NecklaceDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RingDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EarringDecorator</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>事实上，查看 I/O 的源码可知，Java I/O 的设计框架便是使用的 <strong>装饰者模式</strong>，InputStream 的继承关系如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-decorator.png" alt></p><p>其中，InputStream 是一个抽象类，对应上文例子中的 IHouse，其中最重要的方法是 read 方法，这是一个抽象方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法会读取输入流的下一个字节，并返回字节表示的 int 值（0~255），返回 -1 表示已读到末尾。由于它是抽象方法，所以具体的逻辑交由子类实现。</p><p>上图中，左边的三个类 FileInputStream、ByteArrayInputStream、ServletInputStream 是 InputStream 的三个子类，对应上文例子中实现了 IHouse 接口的 House。</p><p>右下角的三个类 BufferedInputStream、DataInputStream、CheckedInputStream 是三个具体的装饰者类，他们都为 InputStream 增强了原有功能或添加了新功能。</p><p>FilterInputStream 是<strong>所有装饰类的父类</strong>，它<strong>没有实现具体的功能</strong>，仅用来<strong>包装</strong>了一下 InputStream：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">InputStream</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> InputStream in<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">FilterInputStream</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们以 BufferedInputStream 为例。原有的 InputStream 读取文件时，是一个字节一个字节读取的，这种方式的执行效率并不高，所以我们可以设立一个缓冲区，先将内容读取到缓冲区中，缓冲区读满后，将内容从缓冲区中取出来，这样就变成了一段一段读取，用内存换取效率。BufferedInputStream 就是用来做这个的。它继承自 FilterInputStream：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_BUFFER_SIZE <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">byte</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BufferedInputStream</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> DEFAULT_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BufferedInputStream</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Buffer size &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先来看它的构造方法，在构造方法中，新建了一个 byte[] 作为缓冲区，从源码中我们看到，Java 默认设置的缓冲区大小为 8192 byte，也就是 8 KB。</p><p>然后我们来查看 read 方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> count<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">getBufIfOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 往缓冲区内填充读取内容的过程</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 read 方法中，调用了 fill 方法，fill 方法的作用就是往缓冲区中填充读取的内容。这样就实现了增强原有的功能。</p><p>在源码中我们发现，BufferedInputStream 没有添加 InputStream 中没有的方法，所以 BufferedInputStream 使用的是 <strong>透明的装饰模式</strong>。</p><p>DataInputStream 用于更加方便地读取 int、double 等内容，观察 DataInputStream 的源码可以发现，DataInputStream 中新增了 readInt、readLong 等方法，所以 DataInputStream 使用的是 <strong>半透明装饰模式</strong>。</p><p>这就是装饰模式，注意不要和适配器模式混淆了。两者在使用时都是包装一个类，但两者的区别其实也很明显：</p><ol><li><p>纯粹的适配器模式 <strong>仅用于改变接口</strong>，不改变其功能，部分情况下我们需要改变一点功能以适配新接口。但使用适配器模式时，接口一定会有一个 <strong>回炉重造</strong> 的过程。</p></li><li><p>装饰模式 <strong>不改变原有的接口</strong>，仅用于增强原有功能或添加新功能，强调的是 <strong>锦上添花</strong>。</p></li></ol><p>掌握了装饰者模式之后，理解 Java I/O 的框架设计就非常容易了。但对于不理解装饰模式的人来说，各种各样相似的 InputStream 非常容易让开发者感到困惑。这一点正是装饰模式的缺点：<strong>容易造成程序中有大量相似的类</strong>。虽然这更像是开发者的缺点，我们应该做的是提高自己的技术，掌握了这个设计模式之后它就是我们的一把利器。现在我们再看到 I/O 不同的 InputStream 装饰类，只需要关注它增强了什么功能或添加了什么功能即可。</p><h2 id="五、外观模式"><a href="#五、外观模式" class="headerlink" title="五、外观模式"></a>五、外观模式</h2><p><strong>外观模式</strong>：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为<strong>门面模式</strong>。</p><p>外观模式非常简单，体现的就是 Java 中封装的思想。将多个子系统封装起来，提供一个更简洁的接口供外部调用。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-facade.png" alt></p><p>由于我们每天都要做这几件事，所以我们可以使用<strong>外观模式</strong>，将这几个子系统封装起来，提供更简洁的接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Browser<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IDE<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Wechat<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IDE<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Wechat<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它使得两种不同的类不用直接交互，而是通过一个中间件——也就是外观类——间接交互。外观类中只需要暴露简洁的接口，隐藏内部的细节，所以说白了就是封装的思想。</p><p>外观模式非常常用，（当然了！写代码哪有不封装的！）尤其是在第三方库的设计中，我们应该提供尽量简洁的接口供别人调用。另外，在 MVC 架构中，C 层（Controller）就可以看作是外观类，Model 和 View 层通过 Controller 交互，减少了耦合。</p><h2 id="六、享元模式"><a href="#六、享元模式" class="headerlink" title="六、享元模式"></a>六、享元模式</h2><p>享元模式体现的是 <strong>程序可复用</strong> 的特点，为了节约宝贵的内存，程序应该尽可能地复用，简单来说 <strong>享元模式就是共享对象</strong>。</p><p><strong>享元模式</strong>：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式。</p><p>有个细节值得注意：有些对象本身不一样，但通过一点点变化后就可以复用，我们编程时可能稍不注意就会忘记复用这些对象。</p><h2 id="七、代理模式"><a href="#七、代理模式" class="headerlink" title="七、代理模式"></a>七、代理模式</h2><p>代理（Proxy）提供了对目标对象另外的访问方式；即通过代理对象访问目标对象.这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。<br>这里使用到编程中的一个思想：不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/design-pattern-proxy.png" alt></p><p>举个例子来说明代理的作用：假设我们想邀请一位明星,那么并不是直接连接明星,而是联系明星的经纪人,来达到同样的目的.明星就是一个目标对象,他只要负责活动中的节目,而其他琐碎的事情就交给他的代理人（经纪人）来解决</p><p>代理模式的关键点是：<strong>代理对象与目标对象</strong>。<strong>代理对象是对目标对象的扩展，并会调用目标对象</strong>。</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类.</p><p>在实际工作中，我们可能会遇到这样的需求：在网络请求前后，分别打印将要发送的数据和接收到数据作为日志信息。此时我们就可以新建一个网络请求的代理类，让它代为处理网络请求，并在代理类中打印这些日志信息。</p><p>新建网络请求接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 Http 请求工具类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpUtil</span> <span class="token keyword">implements</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网络请求中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网络请求完成。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 Http 代理类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HttpUtil httpUtil<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HttpProxy</span><span class="token punctuation">(</span>HttpUtil httpUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpUtil <span class="token operator">=</span> httpUtil<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpUtil<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpUtil<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们在 HttpProxy 中<strong>新增打印日志信息</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HttpUtil httpUtil<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HttpProxy</span><span class="token punctuation">(</span>HttpUtil httpUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpUtil <span class="token operator">=</span> httpUtil<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span>String sendData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送数据:"</span> <span class="token operator">+</span> sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpUtil<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>sendData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>String receivedData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到数据:"</span> <span class="token operator">+</span> receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpUtil<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>receivedData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端验证：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpUtil httpUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpProxy</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"request data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token string">"received result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，输出如下：</p><pre><code>发送数据:request data网络请求中...收到数据:received result网络请求完成。</code></pre><p>这就是代理模式的一个应用，除了 <strong>打印日志</strong>，它还可以用来做<strong>权限管理</strong>。代理类看起来和装饰模式的 FilterInputStream 一模一样，但两者的目的不同，装饰模式是为了 <strong>增强功能或添加功能</strong>，代理模式主要是为了<strong>加以控制</strong>。</p><p><strong>静态代理总结:</strong></p><ol><li>可以做到在不修改目标对象的功能前提下,对目标功能扩展</li><li><strong>缺点</strong>：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多。同时,一旦接口增加方法,目标对象与代理对象都要维护</li></ol><p>如何解决静态代理中的缺点呢?答案是可以使用动态代理方式</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p><strong>动态代理有以下特点:</strong></p><ol><li>代理对象,<strong>不需要实现接口</strong></li><li>代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象（需要我们指定创建代理对象/目标对象实现的接口的类型）</li><li>动态代理也叫做:JDK代理,接口代理</li></ol><p><strong>JDK中生成代理对象的API</strong></p><p>代理类所在包:java.lang.reflect.Proxy</p><p>JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>InvocationHandler h <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:</p><ol><li><strong>ClassLoader loader</strong>：指定当前目标对象使用类加载器,即<strong>被代理的类的 ClassLoader</strong>，获取加载器的方法是固定的。</li><li><strong>Class&lt;?&gt;[ ] interfaces</strong>：目标对象实现的接口的类型，即被代理类的 Interfaces，1和2中两个参数都是 目标对象 中的，每个类都有，固定写法。</li><li><strong>InvocationHandler h</strong>：实现<strong>调用被代理类的任意方法时</strong>，<strong>都通过一个方法间接调用</strong>。会把当前执行目标对象的方法作为参数传入</li></ol><p>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建动态代理对象 * 动态代理不需要实现接口,但是需要指定接口类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HttpUtil httpUtil<span class="token punctuation">;</span>    <span class="token keyword">public</span> IHttp <span class="token function">getInstance</span><span class="token punctuation">(</span>HttpUtil httpUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 维护一个目标对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>httpUtil <span class="token operator">=</span> httpUtil<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给目标对象生成代理对象</span>        <span class="token comment" spellcheck="true">// newProxyInstance(ClassLoader loader, Class&lt;?>[] interfaces,InvocationHandler h)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>IHttp<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> httpUtil<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// InvocationHandler()中的invoke方法</span>    <span class="token comment" spellcheck="true">// 调用 httpUtil 的任意方法时，都要通过这个方法调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果方法名是 request，打印日志，并调用 request 方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送数据:"</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 反射调用函数</span>            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"onSuccess"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果方法名是 onSuccess，打印日志，并调用 onSuccess 方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到数据:"</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 反射调用函数</span>            result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改客户端验证一下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpUtil httpUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IHttp proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>httpUtil<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"request data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token string">"received result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果跟之前一样的就不贴了。</p><p><strong>总结:</strong><br><strong>代理对象不需要实现接口,但是目标对象一定要实现接口,因为代理对象要拿到目标对象的类加载器和接口类型</strong>！否则不能用动态代理。</p><h3 id="Cglib代理（Code-Generation-Library）"><a href="#Cglib代理（Code-Generation-Library）" class="headerlink" title="Cglib代理（Code Generation Library）"></a>Cglib代理（Code Generation Library）</h3><p>上面的静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以使用<strong>以目标对象子类的方式类实现代理</strong>,这种方法就叫做：Cglib代理</p><p>Cglib代理,也叫作<strong>子类代理</strong>,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展</p><ol><li>JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现</li><li>Cglib是一个强大的高性能的代码生成包,它可以<strong>在运行期扩展java类与实现java接口</strong>。它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception（拦截）</li><li>Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类。不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉</li></ol><p>Cglib子类代理实现方法:</p><ol><li>需要引入cglib的jar文件,但是Spring的核心包中已经包括了Cglib功能,所以直接引入<code>pring-core-3.2.5.jar</code>即可</li><li>引入功能包后,就可以在内存中动态构建子类</li><li>代理的类不能为final,否则报错</li><li>目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法</li></ol><p>代码示例:<br>目标对象类:UserDao.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 目标对象,没有实现任何接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----已经保存数据!----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cglib代理工厂:ProxyFactory.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Cglib子类代理工厂 * 对UserDao在内存中动态构建一个子类对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//维护目标对象</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyFactory</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//给目标对象创建一个代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.工具类</span>        Enhancer en <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.设置父类</span>        en<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.设置回调函数</span>        en<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建子类(代理对象)，以目标对象子类的方式类实现代理</span>        <span class="token keyword">return</span> en<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行目标对象的方法</span>        Object returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Spring的AOP编程中：如果加入容器的目标对象<strong>有实现接口</strong>,用JDK代理，如果目标对象<strong>没有实现接口</strong>,用Cglib代理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;7-种结构型模式&quot;&gt;&lt;a href=&quot;#7-种结构型模式&quot; class=&quot;headerlink&quot; title=&quot;7 种结构型模式&quot;&gt;&lt;/a&gt;7 种结构型模式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;结构型模式是用来设计程序的结构的&lt;/strong&gt;。结构型模式就像搭积木，将
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="设计模式" scheme="https://arthurjq.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Autowired注入的细节和Resource的功能对比</title>
    <link href="https://arthurjq.com/2021/01/23/java/autowired-resource/"/>
    <id>https://arthurjq.com/2021/01/23/java/autowired-resource/</id>
    <published>2021-01-23T07:23:12.000Z</published>
    <updated>2021-02-07T15:56:08.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>@Autowired和@Resource都可以用于来实现依赖注入，但前者是Spring提供的，后者为JDK（JSR-250标准）自带的。阿里Java开发规范中推荐使用@Resource。但大多数人往往并没有留意为何如此，甚至代码中的提示信息可能都没留意去看。</p><p>本文就带大家彻底了解一下这两个注解的功能、运用场景及区别。</p><p>参考整理于：<a href="https://zhuanlan.zhihu.com/p/337498135" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/337498135</a></p><h2 id="IDE的提示"><a href="#IDE的提示" class="headerlink" title="IDE的提示"></a>IDE的提示</h2><p>如果在项目中使用@Autowired进行注入，如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InjectController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ConnectService connectService<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会有这样的提示信息：</p><pre class="line-numbers language-java"><code class="language-java">Field injection is not recommended Inspection info<span class="token operator">:</span> Spring Team recommends<span class="token operator">:</span> <span class="token string">"Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>翻译过来就是：<strong>字段注入是不推荐的</strong>，Spring团队建议：“始终在bean中使用基于构造函数的依赖项注入。始终对强制性依赖项使用断言”。</p><p>根据提示，我们来重新写一种注入方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InjectController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ConnectService connectService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConnectService</span><span class="token punctuation">(</span>ConnectService connectService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>connectService <span class="token operator">=</span> connectService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面将@Autowired的注解使用在了setter方法上，此时提示消失了。再看另外一种注入方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InjectController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ConnectService connectService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">InjectController</span><span class="token punctuation">(</span>ConnectService connectService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>connectService <span class="token operator">=</span> connectService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此种方式<strong>将@Autowired的注解使用在了构造方法上</strong>，与Spring团队的建议一致。此时，也不会再出现警告信息。</p><p>也就是说IDE提示的信息并不是说不建议大家使用@Autowired注解，而且不要直接使用在字段（Field）上。</p><h2 id="Spring注入的方式及场景"><a href="#Spring注入的方式及场景" class="headerlink" title="Spring注入的方式及场景"></a>Spring注入的方式及场景</h2><p>Spring常见的DI方式：<strong>构造器注入、Setter注入、字段注入</strong>。显然，我们经常使用的方式并不是官方最推荐的。</p><p>而上面三种注入方式所适用的场景也是有所区别的：</p><ol><li><p>构造器注入适用具有强依赖和不变性的依赖；</p></li><li><p>Setter注入适用于具有可选性和可变性的依赖注入；</p></li><li><p>Field注入，尽量少使用，如果需要则使用@Resource进行替代，以降低耦合性。</p></li></ol><h2 id="Field注入的缺点"><a href="#Field注入的缺点" class="headerlink" title="Field注入的缺点"></a>Field注入的缺点</h2><p>Field注入的缺点很明显，比如不能像构造器注入那样注入不可变的对象，依赖对外部不可见（构造器和Setter可见，而private的属性不可见），会导致组件与IoC容器（比如Spring）紧密耦合，单元测试也需要使用IoC容器，依赖过多时相对构造器注入不能够明显的看出依赖过多（违反单一职责原则）。</p><p>既然Field注入这么多缺点，但为什么大家还是习惯使用呢？主要原因：太方便了，极大的缩减了代码。而且大多数业务并不需要用构造器强绑定，同时换IoC容器的可能性也极低。所以，虽然官方及IDE一直强调和提醒，但貌似并没有阻止程序员的使用。</p><h2 id="为什么只对-Autowired警告"><a href="#为什么只对-Autowired警告" class="headerlink" title="为什么只对@Autowired警告"></a>为什么只对@Autowired警告</h2><p>最主要的原因是：<strong>@Autowired是Spring提供的</strong>，是特定IoC提供的特定注解，与框架形成了强绑定，一旦换用其他IoC框架，是无法支持注入的。而@Resource是JSR-250提供的，IoC容器应当去兼容它，即使更换容器，也可以正常工作。</p><p>另外可能还跟这两种注解的工作机制有关。默认情况下@Autowired是以类型（ByType）进行匹配的，@Resource是以名字（ByName）进行匹配的。也就是说当容器中存在两个相同类型的Bean时，使用@Autowired注入会报错，而使用@Resource会更精准。当然@Autowired也可以指定名称（还需配合@Qualifier注解）。</p><h2 id="Autowired和-Resource区别"><a href="#Autowired和-Resource区别" class="headerlink" title="@Autowired和@Resource区别"></a>@Autowired和@Resource区别</h2><p>（1）处理这2个注解的BeanPostProcessor不一样</p><p>CommonAnnotationBeanPostProcessor是处理@Resource注解的</p><p>AutoWiredAnnotationBeanPostProcessor是处理@Autowired注解的</p><p>（2）@Autowired只按照byType 注入；@Resource默认按byName自动注入，也提供按照byType 注入；</p><p>（3）属性：@Autowired按类型装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它required属性为false。</p><p>如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。</p><p>@Resource有两个中重要的属性：name和type。name属性指定byName，如果没有指定name属性，当注解标注在字段上，即默认取字段的名称作为bean名称寻找依赖对象，当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象。需要注意的是，@Resource如果没有指定name属性，并且按照默认的名称仍然找不到依赖对象时， @Resource注解会回退到按类型装配。但一旦指定了name属性，就只能按名称装配了。</p><p>@Resource装配顺序</p><p>　　1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常</p><p>　　2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常</p><p>　　3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常</p><p>　　4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>推荐使用@Resource注解在字段上，这样就不用写setter方法了.并且这个注解是属于J2EE的，减少了与Spring的耦合,这样代码看起就比较优雅 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;@Autowired和@Resource都可以用于来实现依赖注入，但前者是Spring提供的，后者为JDK（JSR-250标准）自带的。阿里
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="spring" scheme="https://arthurjq.com/tags/spring/"/>
    
      <category term="annotation" scheme="https://arthurjq.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud的gateway网关配置</title>
    <link href="https://arthurjq.com/2021/01/22/project/cloud-gateway/"/>
    <id>https://arthurjq.com/2021/01/22/project/cloud-gateway/</id>
    <published>2021-01-22T07:37:26.000Z</published>
    <updated>2021-02-08T03:09:10.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、网关作用"><a href="#一、网关作用" class="headerlink" title="一、网关作用"></a>一、网关作用</h2><p>​    1. 统一服务的对外入口，鉴权，跨域，日志；</p><p>​    2. 统一过滤与拦截；</p><p>​    3. 动态路由；</p><p>​    4. 限流熔断。</p><h2 id="二、网关原理"><a href="#二、网关原理" class="headerlink" title="二、网关原理"></a>二、网关原理</h2><ol><li>网关的核心概念<ul><li>Route：网关的基础元素，由 ID、目标 URI、断言、过滤器组成。</li><li>Predicate：匹配条件。</li><li>Filter：过滤器</li></ul></li></ol><ol start="2"><li><p>网关请求链路</p><p>当网关接受到请求后，会在<strong>Gateway Handler Mapping</strong>中找到与请求相匹配的路径，将请求转发到<strong>Gateway Web Handler</strong>中，Handler在通过路由指定的<strong>Filter过滤器</strong>，判断过滤器的类型，如果是<strong>pre过滤器</strong>，则执行完过滤器在执行代理请求，如果是<strong>post过滤器</strong>，则先执行代理请求在执行过滤器。</p></li></ol><h2 id="三、网关接入"><a href="#三、网关接入" class="headerlink" title="三、网关接入"></a>三、网关接入</h2><h3 id="pom-xml加入依赖"><a href="#pom-xml加入依赖" class="headerlink" title="pom.xml加入依赖"></a>pom.xml加入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- spring cloud gateway 网关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring cloud alibaba sentinel 网关整合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-sentinel-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个要注意的点是gateway是依赖spring-boot-starter-webflux实现的，与spring-boot-starter-web会有冲突。所以在网关项目中不要引用spring-boot-starter-web，或者排除它。</p><p>全部pom配置：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.wisefly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>business-wcenter-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入配置中心阿里巴巴--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入注册中心阿里巴巴--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--sentinel 熔断--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- sentinel nacos 数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring cloud gateway 网关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring cloud alibaba sentinel 网关整合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-sentinel-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring boot actuator--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--SpringBoot 监控客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--验证码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.penggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Swagger --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger.fox.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger.fox.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- SpringCloud Zipkin --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--kafka --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-stream-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- kafka client--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 指定项目编译时的java版本和编码方式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>build-info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--新增的docker maven插件--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${docker-maven-plugin.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--docker镜像相关的配置信息--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--镜像名，要带上私有服务器IP和端口--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">></span></span>${docker-registryUrl}/${project.artifactId}:${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--TAG,这里用工程版本号--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTags</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTag</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTag</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageTag</span><span class="token punctuation">></span></span>latest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTag</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageTags</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--Dockerfile文件地址--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerDirectory</span><span class="token punctuation">></span></span>${project.basedir}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerDirectory</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--构建镜像的配置信息--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>                            <span class="token comment" spellcheck="true">&lt;!--指定复制jar包的根目录--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                            <span class="token comment" spellcheck="true">&lt;!--指定复制的文件--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--指定推送的仓库--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>registryUrl</span><span class="token punctuation">></span></span>${docker-registryUrl}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>registryUrl</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 开启远程API --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dockerHost</span><span class="token punctuation">></span></span>${docker-dockerHost}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dockerHost</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 是否有push功能 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pushImage</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pushImage</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!--push后是否覆盖存在的标签镜像--></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forceTags</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forceTags</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件加入"><a href="#配置文件加入" class="headerlink" title="配置文件加入"></a>配置文件加入</h3><pre class="line-numbers language-yaml"><code class="language-yaml">           <span class="token key atrule">Spring</span><span class="token punctuation">:</span>               <span class="token key atrule">cloud</span><span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># 路由网关配置</span>                    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># 设置与服务注册发现组件结合，这样可以采用服务名的路由策略</span>                        <span class="token key atrule">discovery</span><span class="token punctuation">:</span>                           <span class="token key atrule">locator</span><span class="token punctuation">:</span>                              <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                              <span class="token comment" spellcheck="true"># 配置之后访问时无需大写</span>                              <span class="token key atrule">lower-case-service-id</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                        <span class="token comment" spellcheck="true">#路由配置</span>                         <span class="token key atrule">routes</span><span class="token punctuation">:</span>                             <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>route                                <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//wisefly<span class="token punctuation">-</span>file                                <span class="token key atrule">predicates</span><span class="token punctuation">:</span>                                   <span class="token punctuation">-</span> Path=/file/v1.0/**                        <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>                            <span class="token punctuation">-</span> StripPrefix=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nacos上的全部配置：</p><details>  <summary>展开查看</summary>  <pre><code> spring:  cloud:    # 使用 Naoos 作为服务注册发现    nacos:      discovery:        server-addr: 10.0.1.104:8848        namespace: 09dd3d79-92c0-47fe-bd1d-0f1b7f8dc928        metadata:          management:            context-path: ${server.servlet.context-path}/actuator    sentinel:      transport:        port: 8730        dashboard: 10.0.1.104:8080        # 服务启动直接建立心跳连接      eager: true      # Sentinel Nacos 数据源      datasource:        ds:          nacos:            server-addr: 10.0.1.104:8848            groupId: DEFAULT_GROUP            dataId: gateway-sentinel            namespace: 09dd3d79-92c0-47fe-bd1d-0f1b7f8dc928            rule-type: flow    # 路由网关配置    gateway:      # 设置与服务注册发现组件结合，这样可以采用服务名的路由策略      discovery:        locator:          enabled: true          # 配置之后访问时无需大写          lower-case-service-id: true      routes:        - id: file-route          uri: lb://wisefly-file          predicates:            - Path=/file/v1.0/**        - id: workflow-route          uri: lb://wisefly-workflow          predicates:            - Path=/workflow/v1.0/**        - id: wcenter-route          uri: lb://wisefly-wcenter          predicates:            - Path=/wcenter/v1.0/**        - id: resource-route          uri: lb://wisefly-resource          predicates:            - Path=/resource/v1.0/**        - id: inspection-route          uri: lb://wisefly-inspection          predicates:            - Path=/inspection/v1.0/**        - id: criterion-route          uri: lb://wisefly-criterion          predicates:            - Path=/criterion/v1.0/**        - id: hbase-route          uri: lb://wisefly-hbase          predicates:            - Path=/hbase/v1.0/**        - id: turnhospital-route          uri: lb://wisefly-turnhospital          predicates:            - Path=/turnhospital/v1.0/**        - id: cms-route          uri: lb://business-cms          predicates:            - Path=/cms/v1.0/**      default-filters:        - StripPrefix=0    #自定义过滤的地址    filter:      url:        whites:           - /wcenter/v1.0/authentication/login          - /v2/api-docs  # redis 配置  redis:    # 地址    host: 10.0.1.104    # 端口，默认为6379    port: 6379    # 密码    password: 123456    # 连接超时时间    timeout: 10s    lettuce:      pool:        # 连接池中的最小空闲连接        min-idle: 0        # 连接池中的最大空闲连接        max-idle: 8        # 连接池的最大数据库连接数        max-active: 8        # #连接池最大阻塞等待时间（使用负值表示没有限制）        max-wait: -1ms  </code></pre></details><h2 id="四、动态网关实现"><a href="#四、动态网关实现" class="headerlink" title="四、动态网关实现"></a>四、动态网关实现</h2><p>framework2.0动态路由是基础nacos配置中心实现动态路由配置以及存储。具体实现在cn.wisefly.gateway.route包下面，主要有三个要点，大概说下：</p><h3 id="动态路由nacos配置类"><a href="#动态路由nacos配置类" class="headerlink" title="动态路由nacos配置类"></a>动态路由nacos配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>SentinelFallbackHandler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>sc<span class="token punctuation">.</span>SentinelGatewayFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>GlobalFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Ordered<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> DEFAULT_TIMEOUT <span class="token operator">=</span> <span class="token number">30000</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.cloud.nacos.config.server-addr}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String address<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.cloud.nacos.config.namespace}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String namespace<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${nacos.gateway.route.config.data-id}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String dataId<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${nacos.gateway.route.config.group}"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String groupId<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span>  <span class="token keyword">public</span> SentinelFallbackHandler <span class="token function">sentinelGatewayExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelFallbackHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> GlobalFilter <span class="token function">sentinelGatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelGatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> namespace<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNamespace</span><span class="token punctuation">(</span>String namespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> address<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> dataId<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDataId</span><span class="token punctuation">(</span>String dataId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataId <span class="token operator">=</span> dataId<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> groupId<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGroupId</span><span class="token punctuation">(</span>String groupId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>groupId <span class="token operator">=</span> groupId<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化路由，监听nacos配置变化"><a href="#初始化路由，监听nacos配置变化" class="headerlink" title="初始化路由，监听nacos配置变化"></a>初始化路由，监听nacos配置变化</h3><p>监听是利用了nacos-api提供的ConfigService.addListener来实现的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>nacos<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GatewayConfig<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>service<span class="token punctuation">.</span>DynamicRouteServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>NacosFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>config<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>Listener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>NacosException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicRouteServiceImplByNacos</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//定义全局静态MAP</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> DynamicRouteServiceImpl dynamicRouteService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> GatewayConfig gatewayConfig<span class="token punctuation">;</span>  <span class="token keyword">private</span> ConfigService configService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"gateway route init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      configService <span class="token operator">=</span> <span class="token function">initConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>configService <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"initConfigService fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      String configInfo <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>gatewayConfig<span class="token punctuation">.</span><span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GatewayConfig<span class="token punctuation">.</span>DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取网关当前配置:\r\n{}"</span><span class="token punctuation">,</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">></span> definitionList <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> RouteDefinition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition definition <span class="token operator">:</span> definitionList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update route : {}"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dynamicRouteService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//放入全局MAP中</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>gatewayConfig<span class="token punctuation">.</span><span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> definitionList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"初始化网关路由时发生错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dynamicRouteByNacosListener</span><span class="token punctuation">(</span>gatewayConfig<span class="token punctuation">.</span><span class="token function">getDataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 监听Nacos下发的动态路由配置   *   * @param dataId   * @param group   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dynamicRouteByNacosListener</span><span class="token punctuation">(</span>String dataId<span class="token punctuation">,</span> String group<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span>String configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进行网关更新:\n\r{}"</span><span class="token punctuation">,</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">></span> definitionList <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> RouteDefinition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition definition <span class="token operator">:</span> definitionList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update route : {}"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dynamicRouteService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//更具dataId获取map里面存在的route</span>          List<span class="token operator">&lt;</span>RouteDefinition<span class="token operator">></span> staticRouteMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dataId<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>staticRouteMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//比较与监听到的路由配置是否一致（只比较ID）</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition mapRoute <span class="token operator">:</span> staticRouteMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>              Boolean bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>RouteDefinition definition <span class="token operator">:</span> definitionList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果MAP的数据在动态获取的数据中不存在，则表示此次动态删除了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mapRoute<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果为false则主动触发删除操作</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  dynamicRouteService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mapRoute<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//将最新的动态数据放入map</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> definitionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Executor <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"getExecutor\n\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"从nacos接收动态路由配置出错!!!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 初始化网关路由 nacos config   *   * @return   */</span>  <span class="token keyword">private</span> ConfigService <span class="token function">initConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"serverAddr"</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">,</span> gatewayConfig<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> configService <span class="token operator">=</span> NacosFactory<span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"初始化网关路由时发生错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态更新路由网关"><a href="#动态更新路由网关" class="headerlink" title="动态更新路由网关"></a>动态更新路由网关</h3><p>这里的核心是实现Spring提供的事件推送接口ApplicationEventPublisherAware。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>wisefly<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>event<span class="token punctuation">.</span>RefreshRoutesEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>route<span class="token punctuation">.</span>RouteDefinitionWriter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEventPublisher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEventPublisherAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span>Mono<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicRouteServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> RouteDefinitionWriter routeDefinitionWriter<span class="token punctuation">;</span>  <span class="token keyword">private</span> ApplicationEventPublisher publisher<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 增加路由   *   * @param definition   * @return   */</span>  <span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span>RouteDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshRoutesEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 更新路由   *   * @param definition   * @return   */</span>  <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>RouteDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"update fail,not find route routeId: "</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshRoutesEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"update route fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 删除路由   *   * @param id   * @return   */</span>  <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>routeDefinitionWriter<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"delete success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"delete fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span>ApplicationEventPublisher applicationEventPublisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>publisher <span class="token operator">=</span> applicationEventPublisher<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、网关路由配置"><a href="#五、网关路由配置" class="headerlink" title="五、网关路由配置"></a>五、网关路由配置</h2><p>网关模块搭建完成后，改动最频繁的就是路由配置了，目前我们的路由配置在配置中心的wisefly-gateway-dev.yaml文件中。配置规则如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml">      <span class="token comment" spellcheck="true">#路由配置</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> file<span class="token punctuation">-</span>route <span class="token comment" spellcheck="true">#路由ID，不能重复</span>           <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//wisefly<span class="token punctuation">-</span>file <span class="token comment" spellcheck="true">#请求转发的路径，一般配置成服务名称即可。</span>           <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#断言</span>               <span class="token punctuation">-</span> Path=/file/v1.0/** <span class="token comment" spellcheck="true">#拦截的请求方法的路径，一般配置与context-path相同，如果不相同的话swagger无法接入网关中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上路由规则配置完成后，访问file模块的请求路径只需要为<code>http://网关ip:网关port/file/v1.0/**</code>就能通过网关转发到业务请求（当然不做以上配置的话也是能通过<code>http://网关ip:网关port/服务名称/context-path/**</code>通过网关转发业务请求）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、网关作用&quot;&gt;&lt;a href=&quot;#一、网关作用&quot; class=&quot;headerlink&quot; title=&quot;一、网关作用&quot;&gt;&lt;/a&gt;一、网关作用&lt;/h2&gt;&lt;p&gt;​    1. 统一服务的对外入口，鉴权，跨域，日志；&lt;/p&gt;
&lt;p&gt;​    2. 统一过滤与拦截；&lt;/p
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="springcloud" scheme="https://arthurjq.com/tags/springcloud/"/>
    
      <category term="gateway" scheme="https://arthurjq.com/tags/gateway/"/>
    
  </entry>
  
  <entry>
    <title>Netty的Pipeline之源码分析</title>
    <link href="https://arthurjq.com/2021/01/21/project/netty-pipeline/"/>
    <id>https://arthurjq.com/2021/01/21/project/netty-pipeline/</id>
    <published>2021-01-21T06:26:24.000Z</published>
    <updated>2021-02-08T03:19:29.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h2><p><strong>架构设计</strong>：</p><p>Channel都<strong>有且仅有一个</strong>ChannelPipeline与之对应，Channel包含了ChannelPipeline，ChannelPipeline内部<strong>包含了N个handler</strong>，每一个handler都是由一个线程去执行；</p><p>ChannelPipeline内部维护了一个由ChannelHandlerContext组成的<strong>双向链表</strong>，<strong>头为HeadContext，尾为TailHandler</strong>（双向链表为自己写的，而<strong>不是使用JDK的</strong>链表，为了轻量级），并且每个ChannelHandlerContext中又关联着一个ChannelHandler，下图提供参考：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/netty-pipeline-1.png" alt></p><h2 id="传播inbound事件"><a href="#传播inbound事件" class="headerlink" title="传播inbound事件"></a>传播inbound事件</h2><p>在业务代码中, 我们自己的handler往往会通过重写channelRead方法来处理对方发来的数据, 那么对方发来的数据是如何走到channelRead方法中了呢？</p><p>在业务代码中, 传递channelRead事件方式是通过fireChannelRead方法进行传播的</p><p><strong>两种写法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写法1:</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写法2</span>    ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里重写了channelRead方法, 并且方法体内继续通过fireChannelRead方法进行传播channelRead事件, 那么这两种写法有什么异同?</p><p>我们先以 <strong>写法2</strong> 为例, 将这种写法进行剖析</p><p>这里首先获取当前context的pipeline对象, 然后通过pipeline对象调用自身的<strong>fireChannelRead方法</strong>进行传播, 因为默认创建的 DefaultChannelpipeline</p><p><strong>我们跟到DefaultChannelpipeline的fireChannelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AbstractChannelHandlerContext<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里首先调用的是AbstractChannelHandlerContext类的静态方法invokeChannelRead, 参数<strong>传入head节点</strong>和事件的消息</p><p><strong>我们跟进invokeChannelRead方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext next<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object m <span class="token operator">=</span> next<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventExecutor executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的Object m 中msg通常就是我们传入的msg, 而next, 目前是head节点, 然后<strong>再判断是否为当前eventLoop线程, 如果不是则将方法包装成task交给eventLoop线程处理</strong></p><p><strong>我们跟到invokeChannelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>ChannelInboundHandler<span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">notifyHandlerException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先通过invokeHandler（）判断当前handler是否已添加, 如果添加, 则执行当前handler的chanelRead方法, 其实这里我们基本上就明白了, 通过fireChannelRead方法传递事件的过程中, 其实就是找到相关handler执行其channelRead方法, 由于我们在<strong>这里的handler就是head节点</strong>, 所以我们跟到HeadContext的channelRead方法中:</p><p><strong>HeadContext的channelRead方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//向下传递channelRead事件</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们看到, 这里通过fireChannelRead方法继续往下传递channelRead事件, 而这种调用方式, 就是我们刚才分析用户代码的第一种调用方式,回头看一开始的channelRead:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写法1:</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写法2</span>    ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里直接通过context对象调用fireChannelRead方法, 那么和使用pipeline调用有什么区别呢</p><p>我们回到HeadContext的channelRead方法, 我们来剖析ctx.fireChannelRead（msg）这句, 大家就会对这个问题有答案了, 跟到ctx的fireChannelRead方法中, 这里会走到AbstractChannelHandlerContext类中的fireChannelRead方法中</p><p><strong>跟到AbstractChannelHandlerContext类中的fireChannelRead方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ChannelHandlerContext <span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们看到, invokeChannelRead方法中传入了一个findContextInbound（）参数, 而这findContextInbound方法<strong>其实就是找到当前Context的下一个节点</strong></p><p><strong>跟到findContextInbound方法:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    AbstractChannelHandlerContext ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span>inbound<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的逻辑也比较简单, 是通过一个doWhile循环, 找到当前handlerContext的下一个节点, 这里要注意循环的终止条件, while （!ctx.inbound）表示下一个context标志的事件不是inbound的事件, 则循环继续往下找, 言外之意就是<strong>要找到下一个标注inbound事件的节点</strong></p><p>有关事件的标注,  如果是用户定义的handler, 是通过handler继承的接口而定的, 如果tail或者head, 那么是在初始化的时候就已经定义好</p><p><strong>回到AbstractChannelHandlerContext类的fireChannelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ChannelHandlerContext <span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token function">findContextInbound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>找到下一个节点后, 继续调用invokeChannelRead方法, 传入下一个和消息对象:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext next<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object m <span class="token operator">=</span> next<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一次执行next其实就是head</span>    EventExecutor executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的逻辑我们又不陌生了, 因为我们<strong>传入的是当前context的下一个节点</strong>, 所以这里会调用下一个节点invokeChannelRead方法, 因我们刚才剖析的是head节点, 所以下一个节点有可能是用户添加的handler的包装类HandlerConext的对象</p><p><strong>这里我们跟进invokeChannelRead方法中去:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">invokeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token punctuation">(</span><span class="token punctuation">(</span>ChannelInboundHandler<span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//发生异常的时候在这里捕获异常</span>            <span class="token function">notifyHandlerException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又是我们熟悉的逻辑, <strong>调用了自身handler的channelRead方法</strong>, <strong>如果是用户自定义的handler, 则会走到用户定义的channelRead（）方法中</strong>去, 所以这里就解释了为什么通过传递channelRead事件, 最终会走到用户重写的channelRead方法中去</p><p>同样, 也解释了最初提到过的两种写法的区别:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写法1:</span>    ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//写法2</span>    ctx<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>写法1是<strong>通过当前节点往下传播事件</strong></p></li><li><p>写法2是<strong>通过head头节点往下传递事件</strong></p></li></ul><p>所以, 在handler中如果如果要在channelRead方法中传递channelRead事件, 一定要采用写法2的方式向下传递, 或者交给其父类处理, 如果采用1的写法则每次事件传输到这里都会继续从head节点传输, 从而陷入死循环或者发生异常。</p><blockquote><p>这里有一点需要注意, 如果用户代码中channelRead方法, 如果没有显示的调用ctx.fireChannelRead（msg）那么事件则不会再往下传播, 则事件会在这里终止, 所以如果我们写业务代码的时候要考虑有关资源释放的相关操作。</p></blockquote><p>如果ctx.fireChannelRead（msg）则事件会继续往下传播, 如果每一个handler都向下传播事件, 当然, 根据我们之前的分析channelRead事件只会在标识为inbound事件的HandlerConetext中传播, 传播到最后, 则<strong>最终会调用到tail节点的channelRead方法</strong></p><p><strong>我们跟到tailConext的channelRead方法中:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token function">onUnhandledInboundMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们跟进到onUnhandledInboundMessage方法中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onUnhandledInboundMessage</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>                <span class="token string">"Discarded inbound message {} that reached at the tail of the pipeline. "</span> <span class="token operator">+</span>                        <span class="token string">"Please check your pipeline configuration."</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>        ReferenceCountUtil<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里做了释放资源的相关的操作</p><p>至此, channelRead事件传输相关罗辑剖析完整, 对于inbound事件的传输流程都会遵循这一逻辑。</p><h2 id="pipeline的addLast方法"><a href="#pipeline的addLast方法" class="headerlink" title="pipeline的addLast方法"></a>pipeline的addLast方法</h2><p>简单来说，pipeline.addLast（）添加handler节点后，回调callHandlerAdded（）方法，最终调用ChannelInitializer的initChannel方法。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/netty-pipeline-addLast1.jpg" alt></p><p>细节部分转载于：<a href="https://blog.csdn.net/qq_16192007/article/details/92752048" target="_blank" rel="noopener">https://blog.csdn.net/qq_16192007/article/details/92752048</a></p><p>跟踪到DefaultChannelPipeline # ChannelPipeline addLast（EventExecutorGroup group, String name, ChannelHandler handler）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">addLast</span><span class="token punctuation">(</span>EventExecutorGroup group<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> AbstractChannelHandlerContext newCtx<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//(1)判断handler是否被重复添加</span>        <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(2)创建一个HandlerContext并添加到列表</span>        newCtx <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">filterName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(3)添加HandlerContext</span>        <span class="token function">addLast0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否已注册</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EventExecutor executor <span class="token operator">=</span> newCtx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newCtx<span class="token punctuation">.</span><span class="token function">setAddPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//回调用户事件</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//(4)回调添加事件</span>    <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重复添加验证"><a href="#重复添加验证" class="headerlink" title="重复添加验证"></a>重复添加验证</h3><p>我们跟到checkMultiplicity（handler）中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">ChannelHandlerAdapter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChannelHandlerAdapter h <span class="token operator">=</span> <span class="token punctuation">(</span>ChannelHandlerAdapter<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">isSharable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>added<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ChannelPipelineException</span><span class="token punctuation">(</span>                    h<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" is not a @Sharable handler, so can't be added or removed multiple times."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//满足条件设置为true, 代表已添加</span>        h<span class="token punctuation">.</span>added <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先判断是不是ChannelHandlerAdapter类型, 因为我们自定义的handler通常会直接或者间接的继承该接口, 所以这里为true<br>拿到handler之后转换成ChannelHandlerAdapter类型, 然后进行条件判断<br><code>if (!h.isSharable() &amp;&amp; h.added)</code>代表如果不是共享的handler, 并且是未添加状态, 则抛出异常:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSharable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Boolean<span class="token operator">></span> cache <span class="token operator">=</span> InternalThreadLocalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handlerSharableCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Boolean sharable <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharable <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//如果这个类注解了Sharable.class, 说明这个类会被多个channel共享</span>        sharable <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Sharable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> sharable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sharable<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先拿到当前handler的class对象然后再从netty自定义的一个ThreadLocalMap对象中获取一个盛放handler的class对象的map, 并获取其value。如果value值为空, 则会判断是否被Sharable注解, 并将自身 handler class 对象和判断结果存入map对象中, 最后返回判断结果</p><p>这说明了被Sharable注解的handler是一个共享handler，从这个逻辑我们可以判断, <strong>共享对象是可以重复添加的</strong>。</p><h3 id="创建HandlerContext并添加到列表"><a href="#创建HandlerContext并添加到列表" class="headerlink" title="创建HandlerContext并添加到列表"></a>创建HandlerContext并添加到列表</h3><p>如果是共享对象或者没有被添加, 则将ChannelHandlerAdapter的added设置为true, 代表已添加。剖析完了重复添加验证, 回到addLast方法中, 我们看第二步, 创建一个HandlerContext并添加到列表:</p><pre class="line-numbers language-java"><code class="language-java">newCtx <span class="token operator">=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token function">filterName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先看filterName（name, handler）方法, 这个方法是<strong>判断添加handler的name是否重复</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> String <span class="token function">filterName</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//没有名字创建默认名字</span>        <span class="token keyword">return</span> <span class="token function">generateName</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//检查名字是否重复</span>    <span class="token function">checkDuplicateName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们添加handler时候, 不一定会会给handler命名, 所以这一步name有可能是null, 如果是null, 则创建一个默认的名字，generateName（handler）类似Spring的beanFactory给每个bean起名字，为类名首字母小写，这里同样会起名字，名字我们看源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> String <span class="token function">generateName</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span> cache <span class="token operator">=</span> nameCaches<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会有一个缓存</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> handlerType <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return StringUtil.simpleClassName(handlerType) + "#0";</span>        <span class="token comment" spellcheck="true">//假设handler名字为PdcHandler，则name为PdcHandler#0</span>        name <span class="token operator">=</span> <span class="token function">generateName0</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再检查名字是否重复checkDuplicateName（name）这个方法中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkDuplicateName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">context0</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Duplicate handler name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">context0</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历pipeline</span>    AbstractChannelHandlerContext context <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发现name相同, 说明存在handler</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//返回</span>            <span class="token keyword">return</span> context<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context <span class="token operator">=</span> context<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里做的操作非常简单, 就是将pipeline中, 从head节点往下遍历HandlerContext, 一直遍历到tail, 如果发现名字相同则会认为重复并返回HandlerContext对象。</p><p>我们回到addLast（）方法中并继续看添加创建相关的逻辑：newCtx = newContext（group, filterName（name, handler）, handler）<br>中 filterName（name, handler）这步如果并没有重复则会返回handler的name。</p><p>跟到newContext（group, filterName（name, handler）, handler）方法中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">newContext</span><span class="token punctuation">(</span>EventExecutorGroup group<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultChannelHandlerContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">childExecutor</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里我们看到创建了一个DefaultChannelHandlerContext对象, 构造方法的参数中, 第一个this代表当前的pipeline对象, group为null, 所以childExecutor（group）也会返回null, name为handler的名字, handler为新添加的handler对象。</p><p>继续跟到DefaultChannelHandlerContext的构造方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">DefaultChannelHandlerContext</span><span class="token punctuation">(</span>        DefaultChannelPipeline pipeline<span class="token punctuation">,</span> EventExecutor executor<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">isInbound</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isOutbound</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到首先调用了父类的构造方法, 之后将handler赋值为自身handler的成员变量, HandlerContext和handler关系在此也展现了出来, 是一种组合关系。</p><p>我们首先看父类的构造方法,有这么两个参数:<code>isInbound(handler)</code>, <code>isOutbound(handler)</code>,这两个参数意思是<strong>判断需要添加的handler是inboundHandler还是outBoundHandler</strong></p><p>同样我们看isOutbound（handler）方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isOutbound</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> handler <span class="token keyword">instanceof</span> <span class="token class-name">ChannelOutboundHandler</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过判断是否实现 ChannelOutboundHandler 接口，判断是否为 outboundhandler</p><p>跟到其父类AbstractChannelHandlerContext的构造方法中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">AbstractChannelHandlerContext</span><span class="token punctuation">(</span>DefaultChannelPipeline pipeline<span class="token punctuation">,</span> EventExecutor executor<span class="token punctuation">,</span> String name<span class="token punctuation">,</span>                               <span class="token keyword">boolean</span> inbound<span class="token punctuation">,</span> <span class="token keyword">boolean</span> outbound<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> ObjectUtil<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pipeline <span class="token operator">=</span> pipeline<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inbound <span class="token operator">=</span> inbound<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outbound <span class="token operator">=</span> outbound<span class="token punctuation">;</span>    ordered <span class="token operator">=</span> executor <span class="token operator">==</span> null <span class="token operator">||</span> executor <span class="token keyword">instanceof</span> <span class="token class-name">OrderedEventExecutor</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一切都不陌生了, 因为tail节点和head节点创建的时候同样走到了这里。这里初始化了name, pipeline, 以及标识添加的handler是inboundhanlder还是outboundhandler</p><h3 id="添加HandlerContext"><a href="#添加HandlerContext" class="headerlink" title="添加HandlerContext"></a>添加HandlerContext</h3><p>回到最初的addLast（）方法中:跟完了创建HandlerContext的相关逻辑, 我们继续跟第三步, 添加HandlerContext</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addLast0</span><span class="token punctuation">(</span>AbstractChannelHandlerContext newCtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//拿到tail节点的前置节点</span>    AbstractChannelHandlerContext prev <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前节点的前置节点赋值为tail节点的前置节点</span>    newCtx<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前节点的下一个节点赋值为tail节点</span>    newCtx<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//tail前置节点的下一个节点赋值为当前节点</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newCtx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//tail节点的前一个节点赋值为当前节点</span>    tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> newCtx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后会判断当前线程线程是否为eventLoop线程, 如果不是eventLoop线程, 就将添加回调事件封装成task交给eventLoop线程执行, 否则, 直接执行添加回调事件<strong>callHandlerAdded0（newCtx）</strong></p><h3 id="回调添加事件（callHandlerAdded0方法）"><a href="#回调添加事件（callHandlerAdded0方法）" class="headerlink" title="回调添加事件（callHandlerAdded0方法）"></a>回调添加事件（callHandlerAdded0方法）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callHandlerAdded0</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handlerAdded</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">setAddComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//忽略代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们重点关注这句<strong>ctx.handler（）.handlerAdded（ctx）</strong><br>其中ctx是<strong>我们新创建的HandlerContext</strong>, 通过handler（）方法<strong>拿到绑定的handler</strong>, 也就是新添加的handler, 然后执行handlerAdded（ctx）方法, 如果我们没有重写这个方法, 则会执行父类的该方法</p><p>在ChannelHandlerAdapter类中定义了该方法的实现:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们看到没做任何操作, 也就是如果我们没有重写该方法时, 如果添加handler之后将不会做任何操作, 这里如果我们需要做一些业务逻辑, 可以通过重写该方法进行实现。<br>以上就是添加handler的有关的业务逻辑。</p><h3 id="handler的删除"><a href="#handler的删除" class="headerlink" title="handler的删除"></a>handler的删除</h3><p>如果用户在业务逻辑中进行<code>ctx.pipeline().remove(this)</code>这样的写法, 或者<code>ch.pipeline().remove(new SimpleHandler())</code>这样的写法, 则就是对handler进行删除, 我们学习过添加handler的逻辑, 所以对handler删除操作理解起来也会比较容易</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">remove</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getContextOrDie</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法体里有个remove（）方法, 传入一个 getContextOrDie（handler）参数,这个 getContextOrDie（handler）, 其实就是<strong>根据handler拿到其包装类HandlerContext对象</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">getContextOrDie</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AbstractChannelHandlerContext ctx <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractChannelHandlerContext<span class="token punctuation">)</span> <span class="token function">context</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//代码省略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里仍然会通过context（handler）方法去寻找, 再跟进去</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelHandlerContext <span class="token function">context</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从头遍历节点</span>    AbstractChannelHandlerContext ctx <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到handler</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们看到寻找的方法也非常的简单, 就是从头结点开始遍历, 遍历到如果其包装的handler对象是传入的handler对象, 则返回找到的handlerContext</p><p>回到remove（handler）方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> ChannelPipeline <span class="token function">remove</span><span class="token punctuation">(</span>ChannelHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getContextOrDie</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> AbstractChannelHandlerContext <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前删除的节点不能是head, 也不能是tail</span>    <span class="token keyword">assert</span> ctx <span class="token operator">!=</span> head <span class="token operator">&amp;&amp;</span> ctx <span class="token operator">!=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行删除操作</span>        <span class="token function">remove0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registered<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callHandlerCallbackLater</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//回调删除handler事件</span>        EventExecutor executor <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">callHandlerRemoved0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ctx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">callHandlerRemoved0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先要断言删除的节点不能是tail和head，然后通过remove0（ctx）进行实际的删除操作, 跟到remove0（ctx）中:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove0</span><span class="token punctuation">(</span>AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前节点的前置节点</span>    AbstractChannelHandlerContext prev <span class="token operator">=</span> ctx<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前节点的后置节点</span>    AbstractChannelHandlerContext next <span class="token operator">=</span> ctx<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//前置节点的下一个节点设置为后置节点</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后置节点的上一个节点设置为前置节点</span>    next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的操作也非常简单, 做了一个指针移动的操作, 熟悉双向链表的小伙伴应该不会陌生。</p><p>回到<code>remove(ctx)</code>方法:我们继续往下看, <strong>如果当前线程不是eventLoop线程则将回调删除事件封装成task放在taskQueue中让eventLoop线程进行执行</strong>，这跟inbound事件的invokeChannelRead方法一个处理方式, 否则, 则直接执行回调删除事件。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callHandlerRemoved0</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用handler的handlerRemoved方法</span>            ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将当前节点状态设置为已移除</span>            ctx<span class="token punctuation">.</span><span class="token function">setRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fireExceptionCaught</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelPipelineException</span><span class="token punctuation">(</span>                ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".handlerRemoved() has thrown an exception."</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与添加handler的逻辑一样, 这里会调用当前handler的handlerRemoved方法, 如果用户没有重写该方法, 则会调用其父类的方法, 方法体在ChannelHandlerAdapter类中有定义, 我们跟进去</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同添加handler一样, 也是一个空实现, 这里用户可以通过重写来添加自己需要的逻辑。</p><p>以上就是删除handler的相关操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ChannelPipeline&quot;&gt;&lt;a href=&quot;#ChannelPipeline&quot; class=&quot;headerlink&quot; title=&quot;ChannelPipeline&quot;&gt;&lt;/a&gt;ChannelPipeline&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;架构设计&lt;/stro
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="netty" scheme="https://arthurjq.com/tags/netty/"/>
    
      <category term="网络通信框架" scheme="https://arthurjq.com/tags/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/"/>
    
      <category term="pipeline" scheme="https://arthurjq.com/tags/pipeline/"/>
    
  </entry>
  
  <entry>
    <title>2021年的学习目标</title>
    <link href="https://arthurjq.com/2021/01/19/java/keep-learning/"/>
    <id>https://arthurjq.com/2021/01/19/java/keep-learning/</id>
    <published>2021-01-19T09:32:33.000Z</published>
    <updated>2021-02-07T15:57:06.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年就是我找工作的一年了，看<a href="https://home.cnblogs.com/u/xrq730/" target="_blank" rel="noopener">五月的仓颉</a>大佬的文章有感而发，记录一下我2021年的Java学习目标。</p><p>转载：<a href="http://www.cnblogs.com/xrq730/p/5260294.html" target="_blank" rel="noopener">http://www.cnblogs.com/xrq730/p/5260294.html</a>  |  <a href="https://www.cnblogs.com/xrq730/p/9159586.html" target="_blank" rel="noopener">https://www.cnblogs.com/xrq730/p/9159586.html</a></p><h2 id="关于项目经验"><a href="#关于项目经验" class="headerlink" title="关于项目经验"></a><strong>关于项目经验</strong></h2><p>LZ在网上经常看到一些别的朋友有提出项目经验的问题，依照LZ面试的感觉来说，面试主要看几点：<strong>项目经验+基本技术+个人潜力</strong>（也就是值不值得培养）。</p><p>关于项目经验，我认为并发编程网的创始人方腾飞老师讲的一段话非常好：</p><blockquote><p>介绍产品时面试官会考察应聘者的沟通能力和思考能力，我们大部分情况都是做产品的一个功能或一个模块，但是即使是这样，自己有没有把整个系统架构或产品搞清楚，并能介绍清楚，为什么做这个系统？这个系统的价值是什么？这个系统有哪些功能？优缺点有哪些？如果让你重新设计这个系统你会如何设计？</p></blockquote><p>我觉得这就已经足以概括了。也许你仅仅工作一年，也许你做的是项目中微不足道的模块，当然这些一定是你的劣势且无法改变，但是如何弥补这个劣势，从方老师的话中我总结几点：</p><ol><li>明确你的项目到底是做什么的，有哪些功能</li><li>明确你的项目的整体架构，在面试的时候能够清楚地画给面试官看并且清楚地指出从哪里调用到哪里、使用什么方式调用</li><li>明确你的模块在整个项目中所处的位置及作用</li><li>明确你的模块用到了哪些技术，更好一些的可以再了解一下整个项目用到了哪些技术</li></ol><p>在你无法改变自己的工作年限、自己的不那么有说服力的项目经验的情况下（这一定是扣分项），可以通过这种方式来一定程度上地弥补并且增进面试官对你的好感度。</p><p>补充一点，在面试中聊你的项目的时候，有一个问题90%是绕不过的：<strong>谈一下你在项目中解决过的比较复杂的问题</strong>。这需要在工作中不断去发现和探索，不需要多，在你自己目前的项目中只要你找到一两个能说的问题就行。一个小技巧是，即使问题不是你解决的而是别人解决的，但是你把这个问题弄懂、搞透了，在面试的时候你一样可以把这个问题当作是你自己解决的来说—-毕竟，谁来管这个问题当时到底是不是你解决的呢？</p><h2 id="关于专业技能"><a href="#关于专业技能" class="headerlink" title="关于专业技能"></a><strong>关于专业技能</strong></h2><p>写完项目接着写写一名3年工作经验的Java程序员应该具备的技能，这可能是Java程序员们比较关心的内容。我这里要说明一下，以下列举的内容不是都要会的东西—-但是如果你掌握得越多，最终能得到的评价、拿到的薪水势必也越高。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>这包括static、final、transient等关键字的作用，foreach循环的原理等等。今天面试我问你static关键字有哪些作用，如果你答出static修饰变量、修饰方法我会认为你合格，答出静态块，我会认为你不错，答出静态内部类我会认为你很好，答出静态导包我会对你很满意，因为能看出你非常热衷研究技术。</p><p>最深入的一次，LZ记得面试官直接问到了我volatile关键字的底层实现原理（顺便插一句，面试和被面试本身就是相对的，面试官能问这个问题同时也让面试者感觉到面试官也是一个喜爱研究技术的人，增加了面试者对公司的好感，LZ最终选择的就是问了这个问题的公司），不要觉得这太吹毛求疵了—-越简单的问题越能看出一个人的水平，别人对你技术的考量绝大多数都是以<strong>深度优先、广度次之</strong>为标准的，切记。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>非常重要，也是必问的内容。基本上就是List、Map、Set，问的是各种实现类的底层实现原理，实现类的优缺点。</p><p>集合要掌握的是ArrayList、LinkedList、Hashtable、HashMap、ConcurrentHashMap、HashSet的实现原理，能流利作答，当然能掌握CopyOnWrite容器和Queue是再好不过的了。另外多说一句，ConcurrentHashMap的问题在面试中问得特别多，大概是因为这个类可以衍生出非常多的问题，关于ConcurrentHashMap，我给网友朋友们提供三点回答或者是研究方向：</p><p>（1）ConcurrentHashMap的锁分段技术</p><p>（2）ConcurrentHashMap的读是否要加锁，为什么</p><p>（3）ConcurrentHashMap的迭代器是强一致性的迭代器还是弱一致性的迭代器</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>本来以为蛮重要的一块内容，结果只在阿里巴巴B2B事业部面试的时候被问了一次，当时问的是装饰器模式。</p><p>当然咱们不能这么功利，为了面试而学习，设计模式在工作中还是非常重要、非常有用的，23种设计模式中重点研究常用的十来种就可以了，面试中关于设计模式的问答主要是三个方向：</p><p>（1）你的项目中用到了哪些设计模式，如何使用</p><p>（2）知道常用设计模式的优缺点</p><p>（3）能画出常用设计模式的UML图</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>这也是必问的一块了。因为三年工作经验，所以基本上不会再问你怎么实现多线程了，会问得深入一些比如说Thread和Runnable的区别和联系、多次start一个线程会怎么样、线程有哪些状态。当然这只是最基本的，出乎意料地，几次面试几乎都被同时问到了一个问题，问法不尽相同，总结起来是这么一个意思：</p><pre><code>假如有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？</code></pre><p>聪明的网友们对这个问题是否有答案呢？不难，java.util.concurrent下就有现成的类可以使用。</p><p>另外，线程池也是比较常问的一块，常用的线程池有几种？这几种线程池之间有什么区别和联系？线程池的实现原理是怎么样的？实际一些的，会给你一些具体的场景，让你回答这种场景该使用什么样的线程池比较合适。</p><p>最后，虽然这次面试问得不多，但是多线程同步、锁这块也是重点。synchronized和ReentrantLock的区别、synchronized锁普通方法和锁静态方法、死锁的原理及排查方法等等，关于多线程，我在之前有些过文章总结过多线程的40个问题，可以参看<a href="http://www.cnblogs.com/xrq730/p/5060921.html" target="_blank" rel="noopener">40个Java多线程问题总结</a>。</p><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>再次补充IO的内容，之前忘了写了。</p><p>IO分为File IO和Socket IO，File IO基本上是不会问的，问也问不出什么来，平时会用就好了，另外记得File IO都是阻塞IO。</p><p>Socket IO是比较重要的一块，要搞懂的是阻塞/非阻塞的区别、同步/异步的区别，借此理解阻塞IO、非阻塞IO、多路复用IO、异步IO这四种IO模型，Socket IO如何和这四种模型相关联。这是基本一些的，深入一些的话，就会问NIO的原理、NIO属于哪种IO模型、NIO的三大组成等等，这有些难，当时我也是研究了很久才搞懂NIO。提一句，<strong>NIO并不是严格意义上的非阻塞IO而应该属于多路复用IO</strong>，面试回答的时候要注意这个细节，讲到NIO会阻塞在Selector的select方法上会增加面试官对你的好感。</p><p>如果用过Netty，可能会问一些Netty的东西，毕竟这个框架基本属于当前最好的NIO框架了（Mina其实也不错，不过总体来说还是比不上Netty的），大多数互联网公司也都在用Netty。</p><h3 id="JDK源码"><a href="#JDK源码" class="headerlink" title="JDK源码"></a>JDK源码</h3><p>要想拿高工资，JDK源码不可不读。上面的内容可能还和具体场景联系起来，JDK源码就是实打实地看你平时是不是爱钻研了。LZ面试过程中被问了不少JDK源码的问题，其中最刁钻的一个问了LZ，String的hashCode()方法是怎么实现的，幸好LZ平时String源代码看得多，答了个大概。JDK源码其实没什么好总结的，纯粹看个人，总结一下比较重要的源码：</p><p>（1）List、Map、Set实现类的源代码</p><p>（2）ReentrantLock、AQS的源代码</p><p>（3）AtomicInteger的实现原理，主要能说清楚CAS机制并且AtomicInteger是如何利用CAS机制实现的</p><p>（4）线程池的实现原理</p><p>（5）Object类中的方法以及每个方法的作用</p><p>这些其实要求蛮高的，LZ去年一整年基本把JDK中重要类的源代码研究了个遍，真的花费时间、花费精力，当然回头看，是值得的—-不仅仅是为了应付面试。</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>老生常谈，面试必问的东西。一般来说会问你一下你们项目中使用的框架，然后给你一些场景问你用框架怎么做，比如我想要在Spring初始化bean的时候做一些事情该怎么做、想要在bean销毁的时候做一些事情该怎么做、MyBatis中$和#的区别等等，这些都比较实际了，平时积累得好、有多学习框架的使用细节自然都不成问题。</p><p>如果上面你的问题答得好，面试官往往会深入地问一些框架的实现原理。问得最多的就是Spring AOP的实现原理，当然这个很简单啦，两句话就搞定的的事儿，即使你不会准备一下就好了。LZ遇到的最变态的是让LZ画一下Spring的Bean工厂实现的UML图，当然面对这样一个有深度的问题，LZ是绝对答不出来的/(ㄒoㄒ)/~~</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库十有八九也都会问到。一些基本的像union和union all的区别、left join、几种索引及其区别就不谈了，比较重要的就是数据库性能的优化，如果对于数据库的性能优化一窍不通，那么有时间，还是建议你在面试前花一两天专门把SQL基础和SQL优化的内容准备一下。</p><p>不过数据库倒是不用担心，一家公司往往有很多部门，如果你对数据库不熟悉而基本技术又非常好，九成都是会要你的，估计会先把你放到对数据库使用不是要求非常高的部门锻炼一下。</p><h3 id="数据结构和算法分析"><a href="#数据结构和算法分析" class="headerlink" title="数据结构和算法分析"></a>数据结构和算法分析</h3><p>数据结构和算法分析，对于一名程序员来说，会比不会好而且在工作中绝对能派上用场。数组、链表是基础，栈和队列深入一些但也不难，树挺重要的，比较重要的树AVL树、红黑树，可以不了解它们的具体实现，但是要知道什么是二叉查找树、什么是平衡树，AVL树和红黑树的区别。记得某次面试，某个面试官和我聊到了数据库的索引，他问我：</p><pre><code>你知道索引使用的是哪种数据结构实现吗？</code></pre><p>LZ答到用的Hash表吧，答错。他又问，你知道为什么要使用树吗？LZ答到因为Hash表可能会出现比较多的冲突，在千万甚至是上亿级别的数据面前，会大大增加查找的时间复杂度。而树比较稳定，基本保证最多二三十次就能找到想要的数据，对方说不完全对，最后我们还是交流了一下这个问题，我也明白了为什么要使用树，这里不说，网友朋友们觉得索引为什么要使用树来实现呢？</p><p>至于算法分析，不会、不想研究就算了，记得某次面试对方问我，Collections.sort方法使用的是哪种排序方法，额，吐血三升。当然为了显示LZ的博学，对算法分析也有一定的研究(⊙﹏⊙)b，LZ还是硬着头皮说了一句可能是冒泡排序吧。当然答案肯定不是，有兴趣的网友朋友们可以去看一下Collections.sort方法的源代码，用的是一种叫做TimSort的排序法，也就是增强型的归并排序法。</p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>出乎LZ的意料，Java虚拟机应该是很重要的一块内容，结果在这几家公司中被问到的概率几乎为0。要知道，LZ去年可是花了大量的时间去研究Java虚拟机的，光周志明老师的《深入理解Java虚拟机：JVM高级特性与最佳实践》，LZ就读了不下五遍。</p><p>言归正传，虽然Java虚拟机没问到，但我觉得还是有必要研究的，LZ就简单地列一个提纲吧，谈谈Java虚拟机中比较重要的内容：</p><ol><li>Java虚拟机的内存布局</li><li>GC算法及几种垃圾收集器</li><li>类加载机制，也就是双亲委派模型</li><li>Java内存模型</li><li>happens-before规则</li><li>volatile关键字使用规则</li></ol><p>也许面试无用，但在走向大牛的路上，不可不会。</p><h3 id="Web方面的一些问题"><a href="#Web方面的一些问题" class="headerlink" title="Web方面的一些问题"></a>Web方面的一些问题</h3><p>Java主要面向Web端，因此Web的一些问题也是必问的。LZ碰到过问得最多的两个问题是：</p><pre><code>谈谈分布式Session的几种实现方式</code></pre><p>常用的四种能答出来自然是让面试官非常满意的，另外一个常问的问题是：</p><pre><code>讲一下Session和Cookie的区别和联系以及Session的实现原理</code></pre><p>这两个问题之外，web.xml里面的内容是重点，Filter、Servlet、Listener，不说对它们的实现原理一清二楚吧，至少能对它们的使用知根知底。另外，一些细节的方面比如get/post的区别、forward/重定向的区别、HTTPS的实现原理也都可能会被考察到。</p><p>噢，想起来了，一致性Hash算法貌似也被问到了几次，这个LZ以前专门深入研究过并且写了两篇博文，因此问到这个问题LZ自然是答得毫不费力。文章是<a href="http://www.cnblogs.com/xrq730/p/4948707.html" target="_blank" rel="noopener">MemCache详细解读</a>和对<a href="http://www.cnblogs.com/xrq730/p/5186728.html" target="_blank" rel="noopener">一致性Hash算法，Java代码实现的深入研究</a>，特别说明，LZ真的不是在为自已以前写的文章打广告啊啊啊啊啊啊。</p><p>最后，如果有兴趣有时间，建议学习、研究一下SOA和RPC，面向服务体系，大型分布式架构必备，救命良方、包治百病、屡试不爽。</p><h2 id="程序员技能目标"><a href="#程序员技能目标" class="headerlink" title="程序员技能目标"></a>程序员技能目标</h2><p>首先，前五年，如果一个程序员大致能做到一下几点（后面还会详谈）：</p><ul><li>具有扎实的基本功</li><li>能快速完成领导交给你的代码开发任务</li><li>能在遇到问题的时候有正确的解决思路</li><li>能对公司的新人进行一定辅导，包括但不限于技术点分享、代码评审、需求分析、表结构设计等</li></ul><p>那么，从第五年开始，我认为可以、也应当朝更高的层次进行迈进，前一个层次如果更多是偏重个人，那么这个层次我认为更多应该偏重团队，简单罗列一下大致上应该有：</p><ul><li>系统设计能力，或许在之前给一个功能，能从DB设计–&gt;服务端开发–&gt;前端开发一栈把事情都做好，那么之后，在领导给出具体一块大业务，比如想做一个淘宝商场的会员模块，能充分分析出整个功能并把功能拆分成一个一个的点、能对每一个点之间的交互画出交互图、能梳理清楚数据库的ER关系图、能把工作合理分配给同事进行开发</li><li>带领团队能力，大致就是把控整体开发节奏，保证在约定时间点前进行交付，不出现延期的情况</li><li>大而博不如小而美，会10门技术、每门技术掌握到6分，不如会5门技术、2门技术掌握到8分，我感觉整个行业什么都会一点的人比较多，把一门技术进行深入研究的比较少，毕竟掌握也许只需要1星期，深耕或许需要1个月甚至更久。在五年这个节点，我认为选择一到两个自己感兴趣的方向进行深入研究会是一个比较好的选择</li></ul><h2 id="2021年学习目标"><a href="#2021年学习目标" class="headerlink" title="2021年学习目标"></a>2021年学习目标</h2><p>为什么之前说针对面试题进行学习和准备作用不大，因为我认为我们关注的不应当是题，而是题背后的一个一个的方向，这也就是我认为的基本功。那从基本功的角度来说，罗列一下我能想到的，包括但不限于以下内容：</p><ul><li>工作相关使用到的JDK类及其相关源码、机制</li><li>设计模式，设计模式在工作中用到了哪些，具体使用场景</li><li>并发类的相关知识，线程安全、锁机制、信号量、闭锁、栅栏、线程池等</li><li>框架相关，Spring相关机制、Spring MVC相关机制、MyBatis相关机制、使用的细节点、框架实现原理等</li><li>JVM，内存布局、垃圾识别算法、垃圾回收算法、垃圾收集器、类加载机制、内存模型、出现内存问题时定位问题的方法等</li><li>数据库的基本数据类型、索引机制、各引擎区别、锁机制、慢SQL定位及优化等</li><li>缓存机制，这里的机制指的是缓存加载、缓存击穿、缓存雪崩这些机制及其相关应对方案，用过Redis、MemCache的最好理解一下它们的原理或者缓存提供的一些高级功能，集群如何实现</li><li>分布式的一些知识，比如CAP理论、数据一致性的几种解决方案、分布式事务如何处理、分库分表怎么做、现有的相关解决方案等</li><li>NIO的作用，epoll模型是否知道一些，Netty的相关机制、Netty相比原生NIO的优点、半包拆包、断线重连解决方案等</li><li>Web相关，Get与Post的区别、转发与重定向的区别、跨域问题如何解决、如何保证接口幂等性等</li><li>网络层相关，三次握手和四次握手、全连接队列和半连接队列、负载均衡算法等</li><li>其他中间件，MQ作用和使用场景、服务化治理框架的作用和使用场景、配置中心的作用和使用场景等</li><li>数据结构，数组、链表、栈、队列、树等优缺点，在什么场景下使用什么数据结构</li><li>Linux相关知识，基本命令的使用，排查日志、定位问题，项目或者第三方组件的基本运维等</li></ul><p>坦白讲，以上的这些东西全都掌握也不可能，哪怕面试官肯定也有很多不会的，但这就是基本功，能多掌握一点多掌握一点，技多不压身，至于别人如何评价你，就留给别人去评价吧，做好自己能做好的就行了。我在之前写过的文章中反复强调深度+广度，<strong>深度优先、广度次之</strong>，有了深度+广度，在开发过程中我们可以尽快完成需求，在遇到问题情况下我们可以第一时间找到应对方案。</p><p>在三年的时间点，能掌握上述的知识点我认为已经是非常非常优秀的了，但这两年的经历让我意识到的是，到了五年的时间点，如果只是具备这些硬性技能，还是不够，这两年更多的应当是在项目上进行积累，也就是前面说的<strong>项目</strong>，大致上应该有：</p><ul><li>独立完成复杂业务，或者完成一个已有项目中的大功能点，这就需要有根据业务对功能进行分解、分析的能力</li><li>独立排查复杂问题，在项目运行过程中，一定不可能安然无事，除开业务性的问题，CPU 100%是否能独立排查、内存溢出是否能独立排查、应用死锁或者DB死锁能否独立排查、API调用时间长能否独立排查，以上问题排查完毕能否及时解决</li><li>带领团队的能力，可能这时候带领的是1~2个人的小团队，即使一个小团队，也能考验带团队、任务合理分配的能力</li></ul><p>可能上面的要求有点高，可能工作中未必有这样的机会，但是不要抱怨，机会永远留给有能力、有准备的人，我们首先想的不应该是等待别人交给你一件有挑战性的事情，你在做这件事情的情况下去提升自己，而应当是先提升自己的素质，然后让别人放心把有挑战性的事情交给你来做。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今年就是我找工作的一年了，看&lt;a href=&quot;https://home.cnblogs.com/u/xrq730/&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="Java" scheme="https://arthurjq.com/categories/Java/"/>
    
    
      <category term="java" scheme="https://arthurjq.com/tags/java/"/>
    
      <category term="学习计划" scheme="https://arthurjq.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="https://arthurjq.com/2021/01/19/database/redis/"/>
    <id>https://arthurjq.com/2021/01/19/database/redis/</id>
    <published>2021-01-19T04:27:35.000Z</published>
    <updated>2021-02-07T15:53:59.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis-key-键名称中的冒号"><a href="#redis-key-键名称中的冒号" class="headerlink" title="redis key 键名称中的冒号"></a>redis key 键名称中的冒号</h2><p>redis中key的命名，用:分隔不同的层次|命名空间，如：<code>user:id12345:contact</code><br>如果某个对象有<code>字段的字段</code>，用 . 连接。如<code>user:id12345:contact.mail</code></p><h3 id="其他分隔符"><a href="#其他分隔符" class="headerlink" title="其他分隔符"></a>其他分隔符</h3><p>读过文首三个链接会发现以下格式的ID：<br><code>user:id12345:contact</code> 表示user表的ID为id12345的记录的字段contact。（那这个key的值就是对应的字段的值了）<br><code>user::id12345::contact</code>或<code>user:::id12345:::contact</code>，即多层冒号分隔。<br>user/id12345/contact<br>使用多层冒号分隔、使用/分隔，我测试过后，都可以正常获取key的值。</p><p>但是，在RedisDesktopManager这款Redis可视化管理工具中，只有使用<code>单个:分隔</code>的key名称，层次看起来最舒服。</p><p>另外redis官网也是介绍的冒号:，所以<strong>key名称的层次分隔符就推荐单个冒号:</strong></p><p>最后一个字段contact，如果联系方式包含三种：tel, mail, qq，怎么命名？<br>官网说可以使用<code>.</code>或<code>-</code>连接，如：<code>user:id12345:contact.mail</code>或<code>user.id12345.contact-mail</code>表示用户表中ID为id12345的记录的contact属性中的mail属性值。</p><h2 id="redis安装和配置文件redis-conf"><a href="#redis安装和配置文件redis-conf" class="headerlink" title="redis安装和配置文件redis.conf"></a>redis安装和配置文件redis.conf</h2><p><a href="https://www.cnblogs.com/xrq730/p/8890896.html" target="_blank" rel="noopener">https://www.cnblogs.com/xrq730/p/8890896.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redis-key-键名称中的冒号&quot;&gt;&lt;a href=&quot;#redis-key-键名称中的冒号&quot; class=&quot;headerlink&quot; title=&quot;redis key 键名称中的冒号&quot;&gt;&lt;/a&gt;redis key 键名称中的冒号&lt;/h2&gt;&lt;p&gt;redis中key的
      
    
    </summary>
    
      <category term="数据库" scheme="https://arthurjq.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="https://arthurjq.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>互联网医院bug反馈</title>
    <link href="https://arthurjq.com/2021/01/19/project/ihis-bug/"/>
    <id>https://arthurjq.com/2021/01/19/project/ihis-bug/</id>
    <published>2021-01-19T03:01:11.000Z</published>
    <updated>2021-01-22T15:56:12.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-1-19"><a href="#2021-1-19" class="headerlink" title="2021/1/19"></a>2021/1/19</h2><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-1.png" alt></p><p>类似这些工具类，<strong>优先采用hutool、guava、framework里面已经定义的</strong>。绝大部分不建议自己新建</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-2.png" alt></p><p><strong>属性必须要用名称</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-3.png" alt></p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/ihis-bug-4.png" alt></p><p>service的方法尽量的去调mapper方法。否则事务隔离会出现一些很奇怪的现象出来的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2021-1-19&quot;&gt;&lt;a href=&quot;#2021-1-19&quot; class=&quot;headerlink&quot; title=&quot;2021/1/19&quot;&gt;&lt;/a&gt;2021/1/19&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/arthurjq/blogi
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="bug" scheme="https://arthurjq.com/tags/bug/"/>
    
      <category term="互联网医院" scheme="https://arthurjq.com/tags/%E4%BA%92%E8%81%94%E7%BD%91%E5%8C%BB%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用kubectl的Deployment实践练习创建App</title>
    <link href="https://arthurjq.com/2021/01/15/project/kubernetes-kubectl/"/>
    <id>https://arthurjq.com/2021/01/15/project/kubernetes-kubectl/</id>
    <published>2021-01-15T08:57:18.000Z</published>
    <updated>2021-02-20T08:25:51.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes-Deployments"><a href="#Kubernetes-Deployments" class="headerlink" title="Kubernetes Deployments"></a>Kubernetes Deployments</h2><p>kubectl 的Deployment 功能可以指令Kubernetes 如何创建和更新应用实例。通过kubectl 命令创建一个deployment后，Kubernetes master 会调度deployment配置好的应用实例到集群特定的节点运行。</p><p>一旦应用实例被创建好之后，Kubernetes Deployment Controller 会 <strong>持续监控</strong> 这些实例。如果运行这些实例的节点down机或被删除，Deployment controller 会替换掉它。所以Kubernetes 提供了一种自修复机制来处理机器故障或维护。</p><p>进入下面的链接进行部署应用练习。</p><p>练习环境：<a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-interactive/" target="_blank" rel="noopener">https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-interactive/</a></p><h3 id="kubectl-get-nodes"><a href="#kubectl-get-nodes" class="headerlink" title="kubectl get nodes"></a>kubectl get nodes</h3><p>终端输入 kubectl get nodes 命令可以来查看当前集群</p><h3 id="kubectl-run命令"><a href="#kubectl-run命令" class="headerlink" title="kubectl run命令"></a>kubectl run命令</h3><p>run命令创建一个新的部署。 我们需要提供部署名称和应用程序镜像位置 。 如果希望在特定端口上运行应用程序，需要添加port参数 :</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令通过创建deployment部署了一个应用程序，命令完成了几件事:</p><ul><li>搜索可以运行应用程序实例的适当节点（目前只有一个）。</li><li>调度应用程序在该节点上运行。</li><li>配置集群，以便在需要时重新调度新节点上的实例。</li></ul><h3 id="kubectl-get-deployments"><a href="#kubectl-get-deployments" class="headerlink" title="kubectl get deployments"></a>kubectl get deployments</h3><p>此命令可以查看刚才新创建的部署</p><h3 id="查看-app"><a href="#查看-app" class="headerlink" title="查看 app"></a>查看 app</h3><p>在Kubernetes内部运行的Pods运行在一个私有的、隔离的网络上。默认情况下，它们可以从同一个kubernetes集群内的其他pod和服务中看到，但不能从 集群 网络之外看到。 当我们使用kubectl时，我们通过API端点与应用程序进行交互。</p><p>kubectl命令可以创建一个代理，将通信转发到集群范围的私有网络。按control-C可以终止代理，运行时不会显示任何输出。</p><p>打开第二个终端窗口来运行代理。 <code>kubectl proxy</code></p><p>现在我们在主机（在线终端）和Kubernetes集群之间建立了连接。代理允许从这些终端直接访问API。您可以看到通过代理端点托管的所有这些api，现在可以通过<code>http://localhost:8001</code>获得这些api。例如，我们可以使用curl命令直接通过API查询版本: <code>curl http://localhost:8001/version</code></p><p>API服务器将根据pod名称为每个pod自动创建端点，这些端点也可以通过代理访问。</p><p>首先我们需要获得Pod名称，我们将存储在环境变量POD_NAME中: </p><pre class="line-numbers language-shell"><code class="language-shell">export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}') echo "Name of the Pod: $POD_NAME"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，我们可以向在该pod中运行的应用程序发出HTTP请求: </p><pre class="line-numbers language-shell"><code class="language-shell">curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如图: <img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-6.jpg" alt></p><h2 id="Kubernetes-Pods"><a href="#Kubernetes-Pods" class="headerlink" title="Kubernetes Pods"></a>Kubernetes Pods</h2><p>创建部署时，Kubernetes<strong>创建了一个Pod来托管应用程序实例</strong>。 Pod是一个Kubernetes抽象概念，它表示<strong>一个或多个应用程序容器的组合</strong>（如Docker或rkt），以及这些容器的一些共享资源。 这些资源包括:</p><ul><li>共享存储，如卷</li><li>网络，作为唯一的集群IP地址</li><li>关于如何运行每个容器的信息，例如容器镜像版本或要使用的特定端口</li></ul><p>Pod为特定于应用程序的“逻辑主机”建模，可以包含相对紧密耦合的不同应用程序容器。 例如，Pod可能既包括带有Nodejs应用程序的容器， 也包括由Nodejs web服务器发布的提供数据的容器。 Pod中的容器共享一个IP地址和端口空间，它们总是位于同一个节点上，并在同一个上下文中运行。</p><p>Pods在Kubernetes 平台上是<strong>原子单位</strong>。 当我们在Kubernetes上创建部署时，该部署将创建包含容器的Pods（而不是直接创建容器）。 每个Pod被绑定到调试执行它的节点上，并一直保持到终止（根据重启策略）或删除。 在节点失败的情况下，相同的pod会在集群中的其他可用节点上被调度。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-7.jpg" alt></p><h2 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h2><p><strong>Pod总是在节点上运行</strong>。 节点是Kubernetes中的工作机器，根据集群的不同，它可以是虚拟机器，也可以是物理机器。 每个节点都由主节点管理。 一个节点可以有多个pod, Kubernetes master自动处理集群中节点之间的pod调度。 主节点的自动调度考虑到每个节点上的可用资源。</p><p>每个Kubernetes节点都至少运行的服务:</p><p>Kubelet, 负责Kubernetes Master 和 Node 之间通信的进程; 它管理在机器上运行的pod和容器。</p><p>容器运行时（如Docker、rkt）负责从registry中提取容器镜像、解压缩容器并运行应用程序。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-8.jpg" alt></p><h2 id="kubectl概述"><a href="#kubectl概述" class="headerlink" title="kubectl概述"></a>kubectl概述</h2><p>kubectl是Kubernetes集群的命令行工具，通过kubectl能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。运行kubectl命令的语法如下所示</p><pre class="line-numbers language-shell"><code class="language-shell">$ kubectl [command] [TYPE] [NAME] [flags]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>comand</strong>：指定要对资源执行的操作，例如create、get、describe和delete</p><p><strong>TYPE</strong>：指定资源类型，资源类型是<strong>大小写敏感</strong>的，开发者能够以单数、复数和缩略的形式。例如：</p><pre class="line-numbers language-shell"><code class="language-shell">$ kubectl get pod pod1 $ kubectl get pods pod1 $ kubectl get po pod1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>NAME</strong>：指定资源的名称，名称也<strong>大小写敏感</strong>的。如果省略名称，则会显示所有的资源。</p><p><strong>flags</strong>：指定可选的参数。例如，可以使用-s或者–server参数指定Kubernetes API server的地址和端口。</p><p>另外，可以通过<code>kubectl help</code>或<code>kubectl -h</code>命令获取更多的信息。</p><p><strong>资源对象</strong></p><p>kubectl大部分子命令后都可以指定要操作的资源对象，可以用<em>kubectl api-resources</em>命令参考</p><p><strong>全局参数</strong></p><p><em>kubectl options</em>命令可以列出可以全局使用的命令参数，比较重要的有：</p><pre class="line-numbers language-shell"><code class="language-shell">--cluster='': 指定命令操作对象的集群--context='':  指定命令操作对象的上下文-n, --namespace='': 指定命令操作对象的Namespace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>资源字段</strong></p><p><em>kubectl explain</em>命令可以输出资源对应的属性字段及定义,在定义资源配置文件时候非常有用。</p><pre><code># Usage:  kubectl explain RESOURCE [options]# Examples: $ kubectl  explain deployment.spec.selectorKIND:     DeploymentVERSION:  extensions/v1beta1RESOURCE: selector &lt;Object&gt;DESCRIPTION:     Label selector for pods. Existing ReplicaSets whose pods are selected by     this will be the ones affected by this deployment.     A label selector is a label query over a set of resources. The result of     matchLabels and matchExpressions are ANDed. An empty label selector matches     all objects. A null label selector matches no objects.FIELDS:   matchExpressions     &lt;[]Object&gt;     matchExpressions is a list of label selector requirements. The requirements     are ANDed.   matchLabels  &lt;map[string]string&gt;     matchLabels is a map of {key,value} pairs. A single {key,value} in the     matchLabels map is equivalent to an element of matchExpressions, whose key     field is &quot;key&quot;, the operator is &quot;In&quot;, and the values array contains only     &quot;value&quot;. The requirements are ANDed.</code></pre><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>kubectl安装后，默认是没有比如自动补全等功能的，频繁使用比较不方便。目前已经有各类kubectl小工具可以提高效率，还有kubectl专用的shell了。个人感觉比较好用有以下这些：</p><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>kubectl 命令在bash中默认是没有自动补全的，需要安装bash_completion，添加自动补全脚本。这里以CentOS为例，其他操作系统配置可以参看<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl" target="_blank" rel="noopener">Install and Set Up kubectl</a></p><pre class="line-numbers language-shell"><code class="language-shell"># 安装bash-completionyum install -y epel-release.noarchyum install -y bash_completion# 添加补全脚本kubectl completion bash >/etc/bash_completion.d/kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新登录shell，可以发现kubectl的子命令，包括资源名称都可以用Tab键自动补全了。</p><h3 id="快速切换集群和Namespace"><a href="#快速切换集群和Namespace" class="headerlink" title="快速切换集群和Namespace"></a>快速切换集群和Namespace</h3><p>生产环境一般是多集群，至少也是多NS的环境，免不了经常在不同集群和不同NS间切换。切换集群要修改环境变量、切换NS要在命令跟上 -n namespace，都不是太方便。而用kubectx和kubens两个小工具可以实现快速切换。这俩在同一项目里：<a href="https://github.com/ahmetb/kubectx" target="_blank" rel="noopener">ahmetb/kubectx</a></p><pre class="line-numbers language-shell"><code class="language-shell"># 安装sudo git clone https://github.com/ahmetb/kubectx /opt/kubectxsudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectxsudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens# 使用kubectx# kubectx  : 列出所有上下文# kubectx <NAME> : 切换到某个上下文$ kubectx minikubeSwitched to context "minikube".# kubectx -   : 切换回上一个上下文$ kubectx -Switched to context "oregon".# kubectx <NEW_NAME>=<NAME> : 重命名一个集群上下文$ kubectx dublin=gke_ahmetb_europe-west1-b_dublinContext "dublin" set.Aliased "gke_ahmetb_europe-west1-b_dublin" as "dublin".# kubectx <NEW_NAME>=. : 重命名当前上下文# kubectx -d <NAME>  : 删除上下文# 使用kubens# kubens : 列出所有的NS# kubens <NS-NAME>  : 切换当前NS$ kubens kube-systemContext "test" set.Active namespace is "kube-system".# kubens - : 切换回上一个NS$ kubens -Context "test" set.Active namespace is "default".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于多集群切换的配置和上下文的概念可以参看<a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/" target="_blank" rel="noopener">官方文档</a>，有中文。</p><h3 id="kubectl-shell"><a href="#kubectl-shell" class="headerlink" title="kubectl shell"></a>kubectl shell</h3><p>kubectl已经有比较成熟的专用shell了，优化了自动补全，模糊匹配等功能：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-11.png" alt></p><p>但实际使用过程中，偶尔还是会各种小问题。推荐两个比较热门的，有需要可以尝试一下：<br><a href="https://github.com/cloudnativelabs/kube-shell" target="_blank" rel="noopener">kube-shell</a><br><a href="https://github.com/c-bata/kube-prompt" target="_blank" rel="noopener">kube-prompt</a></p><h2 id="kubectl命令"><a href="#kubectl命令" class="headerlink" title="kubectl命令"></a>kubectl命令</h2><p>Kubectl 命令工具可以获取关于已部署应用程序及其环境的信息。 最常见的操作可以使用以下kubectl命令完成:</p><ul><li><strong>kubectl get –</strong> 列资源</li><li><strong>kubectl describe</strong> – 显示有关资源的详细信息</li><li><strong>kubectl logs</strong> – 从一个pod的容器打印日志</li><li><strong>kubectl exec</strong> – 在pod中的容器上执行命令</li></ul><p>您可以使用这些命令查看应用程序的部署时间、当前状态、运行位置和配置。</p><p>练习环境: <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-interactive/" target="_blank" rel="noopener">https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-interactive/</a></p><p>Kubectl常用子命令大概分为以下几类：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-12.png" alt></p><h3 id="声明式资源对象管理"><a href="#声明式资源对象管理" class="headerlink" title="声明式资源对象管理"></a>声明式资源对象管理</h3><p>对集群资源的声明式管理，是Kubernetes最主要的特性之一，而kubectl apply命令是最能体现这个特性的命令。apply命令最主要的参数有两个:</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:  kubectl apply (-f FILENAME | -k DIRECTORY) [options]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-f 参数后 <strong>跟yaml或json格式</strong> 的资源配置文件，-k 参数后跟 kustomization.yaml 配置文件的位置。</p><p>为什么说apply是声明式管理呢，因为<strong>所有对集群的增改操作，都能用apply命令完成</strong>，一切取决于后面的配置文件：</p><ul><li>如果配置文件中的资源找集群中不存在，则创建这个资源。</li><li>如果配置文件中的资源在集群中已存在，则根据配置对资源字段进行更新</li></ul><p>举个例子：</p><pre class="line-numbers language-shell"><code class="language-shell"># 部署一个goweb应用，配置pod数为4个：[root@master-1 ~]# grep replicas deployment-goweb.yaml   replicas: 4# 使用 apply 创建资源[root@master-1 ~]# kubectl apply -f deployment-goweb.yaml deployment.apps/goweb created[root@master-1 ~]# kubectl get poNAME                     READY   STATUS    RESTARTS   AGEgoweb-6b5d559869-4x5mb   1/1     Running   0          14sgoweb-6b5d559869-77lbz   1/1     Running   0          14sgoweb-6b5d559869-9ztkh   1/1     Running   0          14sgoweb-6b5d559869-ccjtp   1/1     Running   0          14s# 修改pod数量为2个：[root@master-1 ~]# sed -ri 's/4$/2/g' deployment-goweb.yaml[root@master-1 ~]# grep replicas deployment-goweb.yaml         replicas: 2# 使用apply更新资源[root@master-1 ~]# kubectl  apply  -f deployment-goweb.yaml deployment.apps/goweb configured[root@master-1 ~]# kubectl get poNAME                     READY   STATUS    RESTARTS   AGEgoweb-6b5d559869-4x5mb   1/1     Running   0          8m21sgoweb-6b5d559869-77lbz   1/1     Running   0          8m21s# pod数已更新为2个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，同一个<em>kubectl apply -f deployment-goweb.yaml</em>命令，可以用来创建资源也可以更新资源。<br>简单来说，apply命令的作用就是一个：使集群的实际状态朝用户声明的期望状态变化，而用户不用关心具体要进行怎样的增删改操作才能呢达到这个期望状态，也即Kubernetes的声明式资源管理。</p><h4 id="kubectl-apply"><a href="#kubectl-apply" class="headerlink" title="kubectl apply"></a>kubectl apply</h4><p>通过文件名或控制台输入，对资源进行配置。接受JSON和YAML格式的描述文件。</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl apply -f FILENAME# 将pod.json中的配置应用到pod$ kubectl apply -f ./pod.json# 将控制台输入的JSON配置应用到Pod$ cat pod.json | kubectl apply -f -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令式资源对象管理"><a href="#命令式资源对象管理" class="headerlink" title="命令式资源对象管理"></a>命令式资源对象管理</h3><p>命令式管理类就是直接通过命令执行增删改的操作，除了删除资源外，下面的命令能用apply代替，kubernetes也建议尽量使用apply命令。</p><ul><li>创建资源</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubectl create deployment my-dep --image=busybox        # 创建一个deplpymekubectl expose rc nginx --port=80 --target-port=8000    # 创建一个svc，暴露nginx这个rc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更新资源</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubectl scale --replicas=3 -f foo.yaml                     # 将foo.yaml中描述的对象扩展为3个kubectl annotate pods foo description='my frontend'        # 增加description='my frontend'备注,已有保留不覆盖kubectl label --overwrite pods foo status=unhealthy        # 增加status=unhealthy 标签，已有则覆盖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>删除资源</li></ul><pre class="line-numbers language-shell"><code class="language-shell">kubectl delete -f xxx.yaml                      # 删除一个配置文件对应的资源对象  kubectl delete pod,service baz foo              # 删除名字为baz或foo的pod和service  kubectl delete pods,services -l name=myLabel    # -l 参数可以删除包含指定label的资源对象                            kubectl delete pod foo --grace-period=0 --force # 强制删除一个pod，在各种原因pod一直terminate不掉的时候很有用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a>查看资源状态</h3><ul><li>get</li></ul><p>最常用的查看命令，显示一个或多个资源的详细信息</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:  kubectl get[(-o|--output=)](TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags] [options]# Examples: kubectl get services                          # 列出当前NS中所有service资源kubectl get pods --all-namespaces             # 列出集群所有NS中所有的Podkubectl get pods -o wide                      # -o wide也比较常用，可以显示更多资源信息，比如pod的IP等kubectl get deployment my-dep                 # 可以直接指定资源名查看kubectl get deployment my-dep --watch         # --watch 参数可以监控资源的状态，在状态变换时输出。在跟踪服务部署情况时很有用kubectl get pod my-pod -o yaml                # 查看yaml格式的资源配置，这里包括资实际的status，可以用--export排除kubectl get pod my-pod -l app=nginx           # 查看所有带有标签app: nginx的pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kubectl 可用JSONPATH来过滤字段，JSON Path的语法可参考<a href="https://kubectl.docs.kubernetes.io/pages/resource_printing/fields.html" target="_blank" rel="noopener">这里</a></p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get pods --selector=app=cassandra rc -o jsonpath='{.items[*].metadata.labels.version}' # 获取所有具有 app=cassandra 的 pod 中的 version 标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>describe</li></ul><p>describe命令同样用于查看资源信息，但相比与get只输出资源本身的信息，describe聚合了相关资源的信息并输出。比如，在describe node信息时，同时会输出该node下的pod的资源利用情况。所以describe命令在排错和调试时非常有用。</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME) [options]# Examples: kubectl describe nodes my-node    # 查看节点my-node的详细信息kubectl describe pods my-pod      # 查看pod my-pod的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><p>虽然逻辑上，Kubernetes的最小管理单位是Pod，但是实际上还是免不了与容器直接交互，特别是对于多容器的Pod，任意容器有问题，都会导致Pod不可用。</p><ul><li>日志查看</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Usage:  kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [options]# Examples: kubectl logs my-pod                              # 输出一个单容器pod my-pod的日志到标准输出kubectl logs nginx-78f5d695bd-czm8z -c nginx     # 输出多容器pod中的某个nginx容器的日志kubectl logs -l app=nginx                        # 输出所有包含app-nginx标签的pod日志kubectl logs -f my-pod                           # 加上-f参数跟踪日志，类似tail -fkubectl logs my-pod  -p                          # 输出该pod的上一个退出的容器实例日志。在pod容器异常退出时很有用kubectl logs my-pod  --since-time=2018-11-01T15:00:00Z# 指定时间戳输出日志            kubectl logs my-pod  --since=1h # 指定时间段输出日志，单位s/m/h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行命令</li></ul><p>命令作用和参数基本与 docker exec 一致</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:kubectl exec POD [-c CONTAINER] -- COMMAND [args...] [options]# Examples:kubectl exec my-pod ls                         # 对my-pod执行ls命令kubectl exec -t -i nginx-78f5d695bd-czm8z bash # 进入pod的shell，并打开伪终端和标准输入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件传输</li></ul><p>在排错和测试服务的时候，时不时需要和容器互相交互文件，比如传输容器内存的dump到宿主机，或从宿主机临时拷贝个新配置文件做调试，这时就可以用 <em>kubectl cp</em> 命令。要注意的是，cp命令需要容器里已安装有tar程序</p><pre class="line-numbers language-shell"><code class="language-shell"># Usage:kubectl cp <file-spec-src> <file-spec-dest> [options]# Examples:  kubectl cp /tmp/foo_dir <some-pod>:/tmp/bar_dir                 # 拷贝宿主机本地文件夹到podkubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar        # 指定namespace的拷贝pod文件到宿主机本地目录kubectl cp /tmp/foo <some-pod>:/tmp/bar -c <specific-container> # 对于多容器pod，用-c指定容器名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><p>除了和具体的资源打交道，在对集群进行维护时，也经常需要查看集群信息和对节点进行管理，集群管理有以下这些常用的命令：</p><ul><li>集群信息查看</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> kubectl cluster-info      # 查看master和集群服务的地址 kubectl cluster-info dump # 查看集群详细日志 kubectl version           # 查看Kubernetes集群和客户端版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>节点管理</li></ul><p>在集群节点出问题时，可能希望把一个节点不再被调度pod，或把节点目前的pod都驱逐出去</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl cordon my-node       # 标记 my-node 为 unschedulable,禁止pod被调度过来。注意这时现有的pod还会继续运行，不会被驱逐。kubectl uncordon my-node # 与cordon相反，标记 my-node 为 允许调度。kubectl drain  my-node# drain字面意思为排水，实际就是把my-node的pod平滑切换到其他node，同时标记pod为unschedulable，也就是包含了cordon命令。# 但是直接使用命令一般不会成功，建议在要维护节点时，加上以下参数：kubectl drain my-node  --ignore-daemonsets  --force  --delete-local-data  # --ignore-daemonsets 忽略daemonset部署的pod# --force 直接删除不由workload对象（Deployment、Job等）管理的pod# --delete-local-data  直接删除挂载有本地目录(empty-dir方式）的pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DaemonSet确保集群中每个（部分）node运行一份pod副本，当node加入集群时创建pod，当node离开集群时回收pod。如果删除DaemonSet，其创建的所有pod也被删除，DaemonSet中的pod覆盖整个集群。</p></blockquote><h2 id="使用kubectl故障排除"><a href="#使用kubectl故障排除" class="headerlink" title="使用kubectl故障排除"></a>使用kubectl故障排除</h2><h3 id="检查应用程序配置"><a href="#检查应用程序配置" class="headerlink" title="检查应用程序配置"></a>检查应用程序配置</h3><p>我们将使用kubectl get命令并查找现有的Pods： <code>kubectl get pods</code></p><p>会看到如图的结果:</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-9.jpg" alt></p><p>接下来，为了查看Pod中的容器以及用于构建这些容器的图像，我们运行describe pods命令: <code>kubectl describe pods</code></p><p>会看到如图的结果：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/k8s-10.jpg" alt></p><h3 id="在终端显示app"><a href="#在终端显示app" class="headerlink" title="在终端显示app"></a>在终端显示app</h3><p>Pods是在一个隔离的私有网络中运行的——因此我们需要代理访问它们，以便调试和与它们交互。为此，我们将使用kubectl proxy命令在第二个终端窗口中运行代理: <code>kubectl proxy</code></p><p>现在，我们将再次获得Pod名称，并通过代理直接查询该Pod。获取Pod名称并将其存储在POD_NAME环境变量中： </p><pre class="line-numbers language-shell"><code class="language-shell">export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}');echo "Name of the Pod: $POD_NAME"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要查看应用程序的输出，请运行curl请求: <code>curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/</code></p><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>应用程序通常发送到STDOUT的任何内容都会成为Pod中容器的日志。我们可以使用kubectl logs命令检索这些日志: <code>kubectl logs $POD_NAME</code></p><h2 id="继续学习"><a href="#继续学习" class="headerlink" title="继续学习"></a>继续学习</h2><p><a href="https://jimmysong.io/kubernetes-handbook/guide/using-kubectl.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/guide/using-kubectl.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kubernetes-Deployments&quot;&gt;&lt;a href=&quot;#Kubernetes-Deployments&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes Deployments&quot;&gt;&lt;/a&gt;Kubernetes Deploymen
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="kubernetes" scheme="https://arthurjq.com/tags/kubernetes/"/>
    
      <category term="kubectl" scheme="https://arthurjq.com/tags/kubectl/"/>
    
      <category term="pod" scheme="https://arthurjq.com/tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>Skywalking初涉猎</title>
    <link href="https://arthurjq.com/2021/01/14/project/skywalking/"/>
    <id>https://arthurjq.com/2021/01/14/project/skywalking/</id>
    <published>2021-01-14T03:42:21.000Z</published>
    <updated>2021-02-07T16:06:09.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://zhuanlan.zhihu.com/p/260428816" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/260428816</a></p><p><a href="https://www.jianshu.com/p/2fd56627a3cf" target="_blank" rel="noopener">https://www.jianshu.com/p/2fd56627a3cf</a></p><p><a href="https://zhuanlan.zhihu.com/p/41252484" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/41252484</a></p><p><a href="https://www.cnblogs.com/javastack/p/14349662.html" target="_blank" rel="noopener">https://www.cnblogs.com/javastack/p/14349662.html</a></p><h2 id="什么是APM系统"><a href="#什么是APM系统" class="headerlink" title="什么是APM系统"></a><strong>什么是APM系统</strong></h2><p>APM（Application Performance Management）即<strong>应用性能管理系统</strong>，是对企业系统即时监控以实现对应用程序性能管理和故障管理的系统化的解决方案。应用性能管理，主要指对企业的<strong>关键业务应用进行监测、优化</strong>，提高企业应用的可靠性和质量，保证用户得到良好的服务，降低IT总拥有成本。<br>APM系统是可以<strong>帮助理解系统行为、用于分析性能问题</strong>的工具，以便发生故障的时候，能够<strong>快速定位和解决问题</strong>。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-1.png" alt></p><p>说白了就是随着微服务的的兴起，传统的单体应用拆分为不同功能的小应用，用户的一次请求会经过多个系统，不同服务之间的调用非常复杂，其中任何一个系统出错都可能影响整个请求的处理结果。为了解决这个问题，Google 推出了一个分布式链路跟踪系统 Dapper ，之后各个互联网公司都参照Dapper 的思想推出了自己的分布式链路跟踪系统，而这些系统就是分布式系统下的APM系统。</p><p>目前市面上的APM系统有很多，比如skywalking、pinpoint、zipkin等。其中</p><ul><li><strong><a href="https://link.zhihu.com/?target=http%3A//zipkin.io/" target="_blank" rel="noopener">Zipkin</a></strong>：由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微服务架构中的延迟问题，包括：数据的收集、存储、查找和展现。</li><li><strong><a href="https://link.zhihu.com/?target=https%3A//github.com/naver/pinpoint" target="_blank" rel="noopener">Pinpoint</a></strong>：一款对Java编写的大规模分布式系统的APM工具，由韩国人开源的分布式跟踪组件。</li><li><strong><a href="https://link.zhihu.com/?target=http%3A//skywalking.org/" target="_blank" rel="noopener">Skywalking</a></strong>：国产的优秀APM组件，是一个对JAVA分布式应用程序集群的业务运行情况进行追踪、告警和分析的系统。</li></ul><h2 id="什么是skywalking"><a href="#什么是skywalking" class="headerlink" title="什么是skywalking"></a><strong>什么是skywalking</strong></h2><p>Skywalking是由国内开源爱好者吴晟（原OneAPM工程师，目前在华为）开源并提交到Apache孵化器的产品，它同时吸收了Zipkin/Pinpoint/CAT的设计思路，支持非侵入式埋点。是一款基于分布式跟踪的应用程序性能监控系统。</p><p>Skywalking的具有以下几个特点：</p><ol><li>多语言自动探针，Java，.NET Core和Node.JS。</li><li>多种监控手段，语言探针和service mesh。</li><li>轻量高效。不需要额外搭建大数据平台。</li><li>模块化架构。UI、存储、集群管理多种机制可选。</li><li>支持告警。</li><li>优秀的可视化效果。</li></ol><p>Skywalking整体架构如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-2.jpg" alt></p><p>整体架构包含如下三个组成部分：</p><ol><li><p>探针（agent）负责进行<strong>数据的收集</strong>，包含了Tracing和Metrics的数据，agent会被安装到服务所在的服务器上，以方便数据的获取。</p></li><li><p>可观测性分析平台OAP（Observability Analysis Platform），接收探针发送的数据，并在内存中使用分析引擎（Analysis Core）进行数据的整合运算，然后将数据存储到对应的存储介质上，比如Elasticsearch、MySQL数据库、H2数据库等。同时OAP还使用查询引擎（Query Core）提供HTTP查询接口。</p></li><li><p>Skywalking提供单独的UI进行数据的查看，此时UI会调用OAP提供的接口，获取对应的数据然后进行展示。</p></li></ol><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>上文提到skywalking的后端数据存储的介质可以是Elasticsearch、MySQL数据库、H2数据库等，我这里使用Elasticsearch作为数据存储，而且为了便与扩展和收集其他应用日志，我将单独搭建Elasticsearch。</p><h2 id="搭建Elasticsearch"><a href="#搭建Elasticsearch" class="headerlink" title="搭建Elasticsearch"></a><strong>搭建Elasticsearch</strong></h2><p><strong>前置条件：安装kubernetes</strong>，因为要部署集群，如果不部署集群的话不需要安装k8s，可以参考：<a href="http://arthurjq.com/2021/01/13/elk/">http://arthurjq.com/2021/01/13/elk/</a></p><p>为了增加es的扩展性，按<strong>角色功能</strong>分为master节点、data数据节点、client客户端节点。其整体架构如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-3.jpg" alt></p><p>其中：</p><ul><li>Elasticsearch数据节点Pods被部署为一个有状态集（StatefulSet）</li><li>Elasticsearch master节点Pods被部署为一个Deployment</li><li>Elasticsearch客户端节点Pods是以Deployment的形式部署的，其内部服务将允许访问R/W请求的数据节点</li><li>Kibana部署为Deployment，其服务可在Kubernetes集群外部访问</li></ul><h3 id="先创建estatic的命名空间（es-ns-yaml）"><a href="#先创建estatic的命名空间（es-ns-yaml）" class="headerlink" title="先创建estatic的命名空间（es-ns.yaml）"></a>先创建estatic的命名空间（es-ns.yaml）</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> elastic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>kubectl apply -f es-ns.yaml</code></p><h3 id="部署es-master"><a href="#部署es-master" class="headerlink" title="部署es master"></a>部署es master</h3><p>配置清单如下（es-master.yaml）：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CLUSTER_NAME<span class="token punctuation">}</span>    <span class="token key atrule">node.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_NAME<span class="token punctuation">}</span>    <span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_LIST<span class="token punctuation">}</span>    <span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>MASTER_NODES<span class="token punctuation">}</span>    <span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">node</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">ingest</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.monitoring.collection.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9300</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> transport  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> master<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch      <span class="token key atrule">role</span><span class="token punctuation">:</span> master  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch        <span class="token key atrule">role</span><span class="token punctuation">:</span> master    <span class="token key atrule">spec</span><span class="token punctuation">:</span>     <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>sysctl        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.27.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sysctl        <span class="token punctuation">-</span> <span class="token punctuation">-</span>w        <span class="token punctuation">-</span> vm.max_map_count=262144        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_LIST          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MASTER_NODES          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ES_JAVA_OPTS"</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"-Xms512m -Xmx512m"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9300</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> transport        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/elasticsearch/config/elasticsearch.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> elasticsearch.yml        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">-</span>config      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"storage"</span>        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span>          <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行<code>kubectl apply -f ``es-master.yaml</code>创建配置清单，然后pod变为 running 状态即为部署成功，比如：</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get pod -n elasticNAME                                    READY   STATUS    RESTARTS   AGEelasticsearch-master-77d5d6c9db-xt5kq   1/1     Running   0          67s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="部署es-data"><a href="#部署es-data" class="headerlink" title="部署es data"></a>部署es data</h3><p>配置清单如下（es-data.yaml）：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CLUSTER_NAME<span class="token punctuation">}</span>    <span class="token key atrule">node.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_NAME<span class="token punctuation">}</span>    <span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_LIST<span class="token punctuation">}</span>    <span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>MASTER_NODES<span class="token punctuation">}</span>    <span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">node</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">ingest</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.monitoring.collection.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9300</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> transport  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> data<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> <span class="token string">"elasticsearch-data"</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch      <span class="token key atrule">role</span><span class="token punctuation">:</span> data  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch        <span class="token key atrule">role</span><span class="token punctuation">:</span> data    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>sysctl        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.27.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sysctl        <span class="token punctuation">-</span> <span class="token punctuation">-</span>w        <span class="token punctuation">-</span> vm.max_map_count=262144        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_LIST          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MASTER_NODES          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ES_JAVA_OPTS"</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"-Xms1024m -Xmx1024m"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9300</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> transport        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/elasticsearch/config/elasticsearch.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> elasticsearch.yml        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>persistent<span class="token punctuation">-</span>storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data/db      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>config  <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">-</span>persistent<span class="token punctuation">-</span>storage    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">accessModes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"ReadWriteOnce"</span> <span class="token punctuation">]</span>      <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> managed<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>storage      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span>          <span class="token key atrule">storage</span><span class="token punctuation">:</span> 20Gi<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>kubectl apply -f es-data.yaml</code>创建配置清单，其状态变为running即为部署成功。</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get pod -n elasticNAME                                    READY   STATUS    RESTARTS   AGEelasticsearch-data-0                    1/1     Running   0          4selasticsearch-master-77d5d6c9db-gklgd   1/1     Running   0          2m35selasticsearch-master-77d5d6c9db-gvhcb   1/1     Running   0          2m35selasticsearch-master-77d5d6c9db-pflz6   1/1     Running   0          2m35s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署es-client"><a href="#部署es-client" class="headerlink" title="部署es client"></a>部署es client</h3><p>配置清单如下（es-client.yaml）：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>CLUSTER_NAME<span class="token punctuation">}</span>    <span class="token key atrule">node.name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_NAME<span class="token punctuation">}</span>    <span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NODE_LIST<span class="token punctuation">}</span>    <span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>MASTER_NODES<span class="token punctuation">}</span>    <span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">node</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">data</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">ingest</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.security.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xpack.monitoring.collection.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9200</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> client  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9300</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> transport  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">role</span><span class="token punctuation">:</span> client<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch      <span class="token key atrule">role</span><span class="token punctuation">:</span> client  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> elasticsearch        <span class="token key atrule">role</span><span class="token punctuation">:</span> client    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>sysctl        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.27.2        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sysctl        <span class="token punctuation">-</span> <span class="token punctuation">-</span>w        <span class="token punctuation">-</span> vm.max_map_count=262144        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NODE_LIST          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>data<span class="token punctuation">,</span>elasticsearch<span class="token punctuation">-</span>client        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MASTER_NODES          <span class="token key atrule">value</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>master        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ES_JAVA_OPTS"</span>          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"-Xms256m -Xmx256m"</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9200</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> client        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9300</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> transport        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/elasticsearch/config/elasticsearch.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> elasticsearch.yml        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>client<span class="token punctuation">-</span>config      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"storage"</span>        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span>          <span class="token key atrule">medium</span><span class="token punctuation">:</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一样执行<code>kubectl apply -f es-client.yaml</code>创建配置清单，其状态变为running即为部署成功。</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get pod -n elasticNAME                                    READY   STATUS    RESTARTS   AGEelasticsearch-client-f79cf4f7b-pbz9d    1/1     Running   0          5selasticsearch-data-0                    1/1     Running   0          3m11selasticsearch-master-77d5d6c9db-gklgd   1/1     Running   0          5m42selasticsearch-master-77d5d6c9db-gvhcb   1/1     Running   0          5m42selasticsearch-master-77d5d6c9db-pflz6   1/1     Running   0          5m42s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h3><p>我们启用了 xpack 安全模块来保护我们的集群，所以我们需要一个初始化的密码。我们可以执行如下所示的命令，在客户端节点容器内运行 <code>bin/elasticsearch-setup-passwords</code> 命令来生成默认的用户名和密码：</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl exec $(kubectl get pods -n elastic | grep elasticsearch-client | sed -n 1p | awk '{print $1}') \     -n elastic \     -- bin/elasticsearch-setup-passwords auto -bChanged password for user apm_systemPASSWORD apm_system = QNSdaanAQ5fvGMrjgYnMChanged password for user kibana_systemPASSWORD kibana_system = UFPiUj0PhFMCmFKvuJucChanged password for user kibanaPASSWORD kibana = UFPiUj0PhFMCmFKvuJucChanged password for user logstash_systemPASSWORD logstash_system = Nqes3CCxYFPRLlNsuffEChanged password for user beats_systemPASSWORD beats_system = Eyssj5NHevFjycfUsPnTChanged password for user remote_monitoring_userPASSWORD remote_monitoring_user = 7Po4RLQQZ94fp7F31ioRChanged password for user elasticPASSWORD elastic = n816QscHORFQMQWQfs4U<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意需要将 elastic 用户名和密码也添加到 Kubernetes 的 Secret 对象中：</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl create secret generic elasticsearch-pw-elastic \     -n elastic \     --from-literal password=n816QscHORFQMQWQfs4U<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="验证集群状态"><a href="#验证集群状态" class="headerlink" title="验证集群状态"></a>验证集群状态</h3><pre class="line-numbers language-shell"><code class="language-shell">kubectl exec -n elastic  \        $(kubectl get pods -n elastic | grep elasticsearch-client | sed -n 1p | awk '{print $1}') \        -- curl -u elastic:n816QscHORFQMQWQfs4U http://elasticsearch-client.elastic:9200/_cluster/health?pretty{  "cluster_name" : "elasticsearch",  "status" : "green",  "timed_out" : false,  "number_of_nodes" : 3,  "number_of_data_nodes" : 1,  "active_primary_shards" : 2,  "active_shards" : 2,  "relocating_shards" : 0,  "initializing_shards" : 0,  "unassigned_shards" : 0,  "delayed_unassigned_shards" : 0,  "number_of_pending_tasks" : 0,  "number_of_in_flight_fetch" : 0,  "task_max_waiting_in_queue_millis" : 0,  "active_shards_percent_as_number" : 100.0}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面<code>status</code>的状态为 green ，表示集群正常。到这里ES集群就搭建完了。为了方便操作可以再部署一个kibana服务</p><h3 id="kibana服务"><a href="#kibana服务" class="headerlink" title="kibana服务"></a>kibana服务</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana<span class="token punctuation">-</span>config  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">kibana.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token key atrule">server.host</span><span class="token punctuation">:</span> 0.0.0.0    <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>      <span class="token key atrule">hosts</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>ELASTICSEARCH_HOSTS<span class="token punctuation">}</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>ELASTICSEARCH_USER<span class="token punctuation">}</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>ELASTICSEARCH_PASSWORD<span class="token punctuation">}</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5601</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> webinterface  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">prometheus.io/http-probe</span><span class="token punctuation">:</span> <span class="token string">'true'</span>    <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">'true'</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> kibana.coolops.cn      <span class="token key atrule">http</span><span class="token punctuation">:</span>        <span class="token key atrule">paths</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>              <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> kibana              <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">5601 </span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> elastic  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> kibana    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/kibana/kibana<span class="token punctuation">:</span>7.8.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5601</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> webinterface        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ELASTICSEARCH_HOSTS          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"http://elasticsearch-client.elastic.svc.cluster.local:9200"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ELASTICSEARCH_USER          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"elastic"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ELASTICSEARCH_PASSWORD          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>              <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>pw<span class="token punctuation">-</span>elastic              <span class="token key atrule">key</span><span class="token punctuation">:</span> password        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/kibana/config/kibana.yml          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> kibana.yml      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana<span class="token punctuation">-</span>config<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行<code>kubectl apply -f kibana.yaml</code>创建kibana，查看pod的状态是否为running。</p><p>使用上面我们创建的 Secret 对象的 elastic 用户和生成的密码即可登录。</p><p>登录后界面如下：</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/skywalking-4.jpg" alt></p><h2 id="搭建Skywalking-Server"><a href="#搭建Skywalking-Server" class="headerlink" title="搭建Skywalking Server"></a><strong>搭建Skywalking Server</strong></h2><p>使用helm安装</p><h3 id="安装helm，这里是使用的helm3"><a href="#安装helm，这里是使用的helm3" class="headerlink" title="安装helm，这里是使用的helm3"></a>安装helm，这里是使用的helm3</h3><pre class="line-numbers language-shell"><code class="language-shell">wget https://get.helm.sh/helm-v3.0.0-linux-amd64.tar.gztar zxvf helm-v3.0.0-linux-amd64.tar.gzmv linux-amd64/helm /usr/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：helm3没有tiller这个服务端了，直接用kubeconfig进行验证通信，所以建议部署在master节点</p></blockquote><h3 id="下载skywalking的代码"><a href="#下载skywalking的代码" class="headerlink" title="下载skywalking的代码"></a>下载skywalking的代码</h3><pre class="line-numbers language-shell"><code class="language-shell">mkdir /home/install/package -pcd /home/install/packagegit clone https://github.com/apache/skywalking-kubernetes.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="进入chart目录进行安装"><a href="#进入chart目录进行安装" class="headerlink" title="进入chart目录进行安装"></a>进入chart目录进行安装</h3><pre class="line-numbers language-shell"><code class="language-shell">cd skywalking-kubernetes/charthelm repo add elastic https://helm.elastic.cohelm dep up skywalkinghelm install my-skywalking skywalking -n skywalking \        --set elasticsearch.enabled=false \        --set elasticsearch.config.host=elasticsearch-client.elastic.svc.cluster.local \        --set elasticsearch.config.port.http=9200 \        --set elasticsearch.config.user=elastic \        --set elasticsearch.config.password=n816QscHORFQMQWQfs4U<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>先要创建一个skywalking的namespace： kubectl create ns skywalking</p></blockquote><h3 id="查看所有pod是否处于running"><a href="#查看所有pod是否处于running" class="headerlink" title="查看所有pod是否处于running"></a>查看所有pod是否处于running</h3><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get podNAME                                     READY   STATUS       RESTARTS   AGEmy-skywalking-es-init-x89pr                 0/1     Completed    0          15hmy-skywalking-oap-694fc79d55-2dmgr          1/1     Running      0          16hmy-skywalking-oap-694fc79d55-bl5hk          1/1     Running      4          16hmy-skywalking-ui-6bccffddbd-d2xhs           1/1     Running      0          16h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过以下命令来查看chart。</p><pre class="line-numbers language-shell"><code class="language-shell"># helm list --all-namespacesNAME                NAMESPACE   REVISION UPDATED                                 STATUS   CHART                     APP VERSIONmy-skywalking       skywalking  1        2020-09-29 14:42:10.952238898 +0800 CST deployed skywalking-3.1.0          8.1.0      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要修改配置，则直接修改value.yaml，如下我们修改my-skywalking-ui的service为NodePort，则如下修改：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>..<span class="token key atrule">ui</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ui  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">image</span><span class="token punctuation">:</span>    <span class="token key atrule">repository</span><span class="token punctuation">:</span> apache/skywalking<span class="token punctuation">-</span>ui    <span class="token key atrule">tag</span><span class="token punctuation">:</span> 8.1.0    <span class="token key atrule">pullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span class="token punctuation">...</span>.  <span class="token key atrule">service</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort     <span class="token comment" spellcheck="true"># clusterIP: None</span>    <span class="token key atrule">externalPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">internalPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">...</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用以下命名升级即可。</p><pre class="line-numbers language-shell"><code class="language-shell">helm upgrade sky-server ../skywalking -n skywalking<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们可以查看service是否变为NodePort了。</p><pre class="line-numbers language-shell"><code class="language-shell"># kubectl get svc -n skywalking NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)               AGEmy-skywalking-oap   ClusterIP   10.109.109.131   <none>        12800/TCP,11800/TCP   88smy-skywalking-ui    NodePort    10.102.247.110   <none>        80:32563/TCP          88s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在就可以通过UI界面查看skywalking了。</p><h2 id="应用接入skywalking-agent"><a href="#应用接入skywalking-agent" class="headerlink" title="应用接入skywalking agent"></a>应用接入skywalking agent</h2><p>现在skywalking的服务端已经安装好了，接下来就是应用接入了，所谓的应用接入就是应用在启动的时候加入skywalking agent，在容器中接入agent的方式我这里介绍两种。</p><ul><li>在制作应用镜像的时候把agent所需的文件和包一起打进去</li><li>以sidecar的形式给应用容器接入agent</li></ul><p>首先我们应该下载对应的agent软件包：</p><pre class="line-numbers language-shell"><code class="language-shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/skywalking/8.1.0/apache-skywalking-apm-8.1.0.tar.gztar xf apache-skywalking-apm-8.1.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在制作应用镜像的时候把agent所需的文件和包一起打进去</p><p>开发类似下面的Dockerfile，然后直接build镜像即可，这种方法比较简单</p><pre class="line-numbers language-shell"><code class="language-shell">FROM harbor-test.coolops.com/coolops/jdk:8u144_testRUN mkdir -p /usr/skywalking/agent/ADD apache-skywalking-apm-bin/agent/ /usr/skywalking/agent/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：这个Dockerfile是咱们应用打包的基础镜像，不是应用的Dockerfile</p><p>以sidecar的形式添加agent包，首先制作一个只有agent的镜像，如下：</p><pre class="line-numbers language-shell"><code class="language-shell">FROM busybox:latest ENV LANG=C.UTF-8RUN set -eux && mkdir -p /usr/skywalking/agent/ADD apache-skywalking-apm-bin/agent/ /usr/skywalking/agent/WORKDIR /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们像下面这样开发deployment的yaml清单。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>sw    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> innerpeacez/sw<span class="token punctuation">-</span>agent<span class="token punctuation">-</span>sidecar<span class="token punctuation">:</span>latest        <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent<span class="token punctuation">-</span>sidecar        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">]</span>        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'-c'</span><span class="token punctuation">,</span><span class="token string">'mkdir -p /skywalking/agent &amp;&amp; cp -r /usr/skywalking/agent/* /skywalking/agent'</span><span class="token punctuation">]</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /skywalking/agent          <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.coolops.cn/skywalking<span class="token punctuation">-</span>java<span class="token punctuation">:</span>1.7.9        <span class="token key atrule">name</span><span class="token punctuation">:</span> demo        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> java <span class="token punctuation">-</span>javaagent<span class="token punctuation">:</span>/usr/skywalking/agent/skywalking<span class="token punctuation">-</span>agent.jar <span class="token punctuation">-</span>Dskywalking.agent.service_name=$<span class="token punctuation">{</span>SW_AGENT_NAME<span class="token punctuation">}</span> <span class="token punctuation">-</span>jar demo.jar        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/skywalking/agent          <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SW_AGENT_COLLECTOR_BACKEND_SERVICES            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">'my-skywalking-oap.skywalking.svc.cluster.local:11800'</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SW_AGENT_NAME            <span class="token key atrule">value</span><span class="token punctuation">:</span> cartechfin<span class="token punctuation">-</span>open<span class="token punctuation">-</span>platform<span class="token punctuation">-</span>skywalking      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sw<span class="token punctuation">-</span>agent        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在启动应用的时候只要引入skywalking的javaagent即可，如下：</p><pre class="line-numbers language-shell"><code class="language-shell">java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -Dskywalking.agent.service_name=${SW_AGENT_NAME} -jar yourApp.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/260428816&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="elasticsearch" scheme="https://arthurjq.com/tags/elasticsearch/"/>
    
      <category term="APM系统" scheme="https://arthurjq.com/tags/APM%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="链路追踪" scheme="https://arthurjq.com/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>ELK</title>
    <link href="https://arthurjq.com/2021/01/13/project/elk/"/>
    <id>https://arthurjq.com/2021/01/13/project/elk/</id>
    <published>2021-01-13T02:37:14.000Z</published>
    <updated>2021-02-22T06:45:35.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么用到ELK"><a href="#为什么用到ELK" class="headerlink" title="为什么用到ELK"></a>为什么用到ELK</h2><p>参考整理：<a href="https://www.cnblogs.com/aresxin/p/8035137.html" target="_blank" rel="noopener">https://www.cnblogs.com/aresxin/p/8035137.html</a></p><p>一般我们通过日志排除，发现问题根源解决问题：如果1台或者几台服务器，我们可以通过 linux命令，<code>tail、cat</code>，通过grep、awk等过滤去查询定位日志查问题。但在规模较大的场景中，此方法效率低下，面临问题包括日志量太大如何归档、文本搜索太慢怎么办、如何多维度查询。需要集中化的日志管理，所有服务器上的日志收集汇总。常见解决思路是<strong>建立集中式日志收集系统</strong>，将所有节点上的日志统一收集，管理，访问。</p><p>一般大型系统是一个分布式部署的架构，不同的服务模块部署在不同的服务器上，问题出现时，大部分情况需要根据问题暴露的关键信息，定位到具体的服务器和服务模块，构建一套集中式日志系统，可以提高定位问题的效率。</p><p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p><ul><li><strong>收集</strong>－能够采集多种来源的日志数据</li><li><strong>传输</strong>－能够稳定的把日志数据传输到中央系统</li><li><strong>存储</strong>－如何存储日志数据</li><li><strong>分析</strong>－可以支持 UI 分析</li><li><strong>警告</strong>－能够提供错误报告，监控机制</li></ul><p>ELK提供了一整套解决方案，并且都是开源软件，之间互相配合使用，完美衔接，高效的满足了很多场合的应用。目前主流的一种日志系统。</p><h2 id="ELK简介"><a href="#ELK简介" class="headerlink" title="ELK简介"></a>ELK简介</h2><p>ELK是三个开源软件的缩写，分别表示：<strong>Elasticsearch , Logstash, Kibana</strong> , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具（Agent），Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p><p>Elasticsearch是个<strong>开源分布式搜索引擎</strong>，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p>Logstash 主要是用来<strong>日志的搜集、分析、过滤日志</strong>的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p><p>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 <strong>Web 界面</strong>，可以帮助汇总、分析和搜索重要数据日志。</p><p>Filebeat隶属于Beats。目前Beats包含四种工具：</p><ol><li><ol><li>Packetbeat（搜集网络流量数据）</li><li>Topbeat（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</li><li>Filebeat（搜集文件数据）</li><li>Winlogbeat（搜集 Windows 事件日志数据）</li></ol></li></ol><p>官网地址:<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a></p><p>官网权威指南:<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><p>Elasticsearch：<br><a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/products/elasticsearch</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/index.html</a></p><p>elasticsearch中文社区：<br><a href="https://elasticsearch.cn/" target="_blank" rel="noopener">https://elasticsearch.cn/</a></p><p>Logstash：<br><a href="https://www.elastic.co/cn/products/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/products/logstash</a><br><a href="https://www.elastic.co/guide/en/logstash/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/5.6/index.html</a></p><p>Kibana:</p><p><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/products/kibana</a></p><p><a href="https://www.elastic.co/guide/en/kibana/5.5/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/5.5/index.html</a></p><p>Filebeat：</p><p><a href="https://www.elastic.co/cn/products/beats/filebeat" target="_blank" rel="noopener">https://www.elastic.co/cn/products/beats/filebeat</a><br><a href="https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/5.6/index.html</a></p><h2 id="ELK架构图"><a href="#ELK架构图" class="headerlink" title="ELK架构图"></a>ELK架构图</h2><h3 id="架构图一"><a href="#架构图一" class="headerlink" title="架构图一"></a>架构图一</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-1.png" alt></p><p>这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是<strong>Logstash耗资源较大</strong>，运行占用CPU和内存高。另外<strong>没有消息队列缓存，存在数据丢失隐患</strong>。</p><p>此架构由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web方便的对日志查询，并根据数据生成报表。</p><h3 id="架构图二"><a href="#架构图二" class="headerlink" title="架构图二"></a>架构图二</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-2.png" alt></p><p>此种架构引入了消息队列机制，位于各个节点上的Logstash Agent先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。<strong>因为引入了Kafka（或者Redis）,所以即使远端Logstash server因故障停止运行，数据将会先被存储下来</strong>，从而避免数据丢失。</p><h3 id="架构图三"><a href="#架构图三" class="headerlink" title="架构图三"></a>架构图三</h3><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-3.png" alt></p><p>此种架构将收集端logstash替换为beats，更灵活，消耗资源更少，扩展性更强。同时可配置Logstash 和Elasticsearch 集群用于支持大集群系统的运维日志数据监控和查询。</p><h2 id="Filebeat工作原理"><a href="#Filebeat工作原理" class="headerlink" title="Filebeat工作原理"></a>Filebeat工作原理</h2><p>Filebeat由两个主要组件组成：prospectors 和 harvesters。这两个组件协同工作将文件变动发送到指定的输出中。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-4.png" alt></p><p><strong>Harvester（收割机）：</strong>负责<strong>读取单个文件内容</strong>。每个文件会启动一个Harvester，每个Harvester会逐行读取各个文件，并将文件内容发送到制定输出中。</p><p>Harvester负责打开和关闭文件，意味在Harvester运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat会继续读取此文件。所以在Harvester关闭之前，磁盘不会被释放。默认情况filebeat会保持文件打开的状态，直到达到<a href="https://www.elastic.co/guide/en/beats/filebeat/5.5/configuration-filebeat-options.html#close-inactive" target="_blank" rel="noopener"><code>close_inactive</code></a>（如果此选项开启，filebeat会在指定时间内将不再更新的文件句柄关闭，时间从harvester读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由scan_frequency参数决定，默认10s。Harvester使用内部时间戳来记录文件最后被收集的时间。例如：设置5m，则在Harvester读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄。默认5m）。</p><p><strong>Prospector（勘测者）：</strong>负责<strong>管理Harvester并找到所有读取源</strong>。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">filebeat.prospectors</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">input_type</span><span class="token punctuation">:</span> log  <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /apps/logs/*/info.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Prospector会找到/apps/logs/*目录下的所有info.log文件，并为每个文件启动一个Harvester。Prospector会检查每个文件，看Harvester是否已经启动，是否需要启动，或者文件是否可以忽略。若Harvester关闭，只有在文件大小发生变化的时候Prospector才会执行检查。只能检测本地的文件。</p><p><strong>Filebeat如何记录文件状态：</strong></p><p>将文件状态记录在文件中（默认在/var/lib/filebeat/registry）。此状态可以记住Harvester收集文件的偏移量。若连接不上输出设备，如ES等，filebeat会记录发送前的最后一行，并再可以连接的时候继续发送。Filebeat在运行的时候，Prospector状态会被记录在内存中。Filebeat重启的时候，利用registry记录的状态来进行重建，用来还原到重启之前的状态。每个Prospector会为每个找到的文件记录一个状态，对于每个文件，Filebeat存储唯一标识符以检测文件是否先前被收集。</p><p><strong>Filebeat如何保证事件至少被输出一次：</strong></p><p>Filebeat之所以能保证事件至少被传递到配置的输出一次，没有数据丢失，是因为filebeat将每个事件的传递状态保存在文件中。在未得到输出方确认时，filebeat会尝试一直发送，直到得到回应。若filebeat在传输过程中被关闭，则不会再关闭之前确认所有时事件。任何在filebeat关闭之前为确认的时间，都会在filebeat重启之后重新发送。这可确保至少发送一次，但有可能会重复。可通过设置<a href="https://www.elastic.co/guide/en/beats/filebeat/5.5/configuration-global-options.html#shutdown-timeout" target="_blank" rel="noopener"><code>shutdown_timeout</code></a> 参数来设置关闭之前的等待事件回应的时间（默认禁用）。</p><h2 id="Logstash工作原理"><a href="#Logstash工作原理" class="headerlink" title="Logstash工作原理"></a>Logstash工作原理</h2><p>Logstash事件处理有三个阶段：inputs → filters → outputs。是一个接收，处理，转发日志的工具。支持系统日志，webserver日志，错误日志，应用日志，总之包括所有可以抛出来的日志类型。</p><p><img src="https://gitee.com/arthurjq/blogimage/raw/master/img/pic/elk-5.png" alt></p><p><strong>Input：输入数据到logstash。</strong></p><p>一些常用的输入为：</p><p>file：从文件系统的文件中读取，类似于tail -f命令</p><p>syslog：在514端口上监听系统日志消息，并根据RFC3164标准进行解析</p><p>redis：从redis service中读取</p><p>beats：从filebeat中读取</p><p><strong>Filters：数据中间处理，对数据进行操作。</strong></p><p>一些常用的过滤器为：</p><p>grok：解析任意文本数据，Grok 是 Logstash 最重要的插件。它的主要作用就是将文本格式的字符串，转换成为具体的结构化的数据，配合正则表达式使用。内置120多个解析语法。</p><p>官方提供的grok表达式：<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="noopener">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a><br>grok在线调试：<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="noopener">https://grokdebug.herokuapp.com/</a></p><p>mutate：对字段进行转换。例如对字段进行删除、替换、修改、重命名等。</p><p>drop：丢弃一部分events不进行处理。</p><p>clone：拷贝 event，这个过程中也可以添加或移除字段。</p><p>geoip：添加地理信息(为前台kibana图形化展示使用)</p><p><strong>Outputs：outputs是logstash处理管道的最末端组件。</strong>一个event可以在处理过程中经过多重输出，但是一旦所有的outputs都执行结束，这个event也就完成生命周期。</p><p>一些常见的outputs为：</p><p>elasticsearch：可以高效的保存数据，并且能够方便和简单的进行查询。</p><p>file：将event数据保存到文件中。</p><p>graphite：将event数据发送到图形化组件中，一个很流行的开源存储图形化展示的组件。</p><p><strong>Codecs：codecs 是基于数据流的过滤器，它可以作为input，output的一部分配置</strong>。Codecs可以帮助你轻松的分割发送过来已经被序列化的数据。</p><p>一些常见的codecs：</p><p>json：使用json格式对数据进行编码/解码。</p><p>multiline：将汇多个事件中数据汇总为一个单一的行。比如：java异常信息和堆栈信息。</p><h2 id="Elasticsearch部署"><a href="#Elasticsearch部署" class="headerlink" title="Elasticsearch部署"></a>Elasticsearch部署</h2><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>es版本：7.8.1</p><p>安装路径：/home/rndii/projects/es/elasticsearch-7.8.1</p><p>服务器：10.0.1.104，10.0.1.117，10.0.1.127</p><p>jdk ：/home/rndii/projects/es/elasticsearch-7.8.1/jdk</p><p>jdk-version:14.0.1（需要java-jdk，前置条件）</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>现阶段基本为默认配置，注意新建index时的分片与备份</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 找到配置文件中的cluster.name，打开该配置并设置集群名称</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> wisefly<span class="token punctuation">-</span>test<span class="token punctuation">-</span>es<span class="token comment" spellcheck="true"># 找到配置文件中的node.name，打开该配置并设置节点名称</span><span class="token key atrule">node.name</span><span class="token punctuation">:</span> es<span class="token punctuation">-</span><span class="token number">104</span><span class="token comment" spellcheck="true"># 修改data存放的路径</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /home/rndii/projects/es/elasticsearch<span class="token punctuation">-</span>7.8.1/data<span class="token comment" spellcheck="true"># 修改logs日志的路径</span><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /home/rndii/projects/es/elasticsearch<span class="token punctuation">-</span>7.8.1/logs<span class="token comment" spellcheck="true"># 监听的网络地址</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 10.0.1.104<span class="token comment" spellcheck="true"># 开启监听的端口</span><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token comment" spellcheck="true"># 注册到注册中心</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"10.0.1.104"</span><span class="token punctuation">,</span> <span class="token string">"10.0.1.117"</span><span class="token punctuation">,</span> <span class="token string">"10.0.1.127"</span><span class="token punctuation">]</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es-104"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 开启跨域，增加新的参数，这样head插件可以访问es</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有配置java的全局环境变量，需要在bin/elasticsearch 增加JAVA_HOME=/home/rndii/projects/es/elasticsearch-7.8.1/jdk</p><h3 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h3><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a><br><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>在以上路径中找到对应版本的ik分词器，解压到 /home/rndii/projects/es/elasticsearch-7.8.1/plugins/ik/下</p><h4 id="IK分词器动态扩容"><a href="#IK分词器动态扩容" class="headerlink" title="IK分词器动态扩容"></a>IK分词器动态扩容</h4><p>修改 /home/rndii/projects/es/elasticsearch-7.8.1/plugins/ik/config/IKAnalyzer.cfg.xml  文件</p><p>把自己需要的词加到字典中，再在下边提娜佳自己的拓展词典和停用词词典：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remote_ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://10.0.1.117:19200/dynamic.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remote_ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://10.0.1.117:19200/stop.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果配置完重启es报错的话，重启Kibana</p></blockquote><h3 id="启动命令-d表示后台运行"><a href="#启动命令-d表示后台运行" class="headerlink" title="启动命令,-d表示后台运行"></a>启动命令,-d表示后台运行</h3><pre class="line-numbers language-bash"><code class="language-bash">bin/elasticsearch -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看es集群相关信息"><a href="#查看es集群相关信息" class="headerlink" title="查看es集群相关信息"></a>查看es集群相关信息</h3><p>查看集群健康状态<br><a href="http://10.0.1.104:9200/_cluster/health?pretty=true" target="_blank" rel="noopener">http://10.0.1.104:9200/_cluster/health?pretty=true</a></p><p>查看集群状态<br><a href="http://10.0.1.104:9200/_cluster/stats?pretty" target="_blank" rel="noopener">http://10.0.1.104:9200/_cluster/stats?pretty</a></p><p>查看节点总体情况<br><a href="http://10.0.1.104:9200/_nodes/process?pretty" target="_blank" rel="noopener">http://10.0.1.104:9200/_nodes/process?pretty</a></p><p>查看某个节点的情况<br><a href="http://10.0.1.104:9200/_nodes/es-104/process?pretty" target="_blank" rel="noopener">http://10.0.1.104:9200/_nodes/es-104/process?pretty</a></p><p>ElasticSearch-Head<br><a href="http://10.0.1.104:9100/" target="_blank" rel="noopener">http://10.0.1.104:9100/</a></p><h2 id="Kibana部署"><a href="#Kibana部署" class="headerlink" title="Kibana部署"></a>Kibana部署</h2><p>1.下载：到elasticsearch官网下载7.8.1版本</p><p>2.解压后进入config目录</p><p>3.编辑kibana.yml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#外网访问</span><span class="token key atrule">server.host</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span><span class="token comment" spellcheck="true">#配置es集群地址</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://10.0.1.104:9200"</span><span class="token punctuation">,</span> <span class="token string">"http://10.0.1.117:9200"</span><span class="token punctuation">,</span> <span class="token string">"http://10.0.1.127:9200"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#7.x后自带中文包，使用中文包</span><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.进入bin，后台启动nohup </p><pre class="line-numbers language-shell"><code class="language-shell">./kibana > runlog.log 2> & 1&<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2&gt;&amp;1 &amp; 中，最后一个&amp;表示把条命令放到后台执行，含义：将标准错误输出重定向到标准输出</p><p>整句语句的意思就是将标准错误输出和标准输出都定向到runlog.log中。</p></blockquote><p>5.kibana访问界面：<a href="http://10.0.1.127:5601/app/kibana" target="_blank" rel="noopener">http://10.0.1.127:5601/app/kibana</a></p><blockquote><p>公司内网，外边进不去</p></blockquote><p><strong>6.索引模板</strong></p><p>由于每天生成索引日志，并且日志索引分片为1，副本分片也为1，logstash在向es中添加数据时会自动创建索引，所以我们可以在es中创建索引模板，规范以logstash开头的索引名的数据类型，索引等生成规则。而不是默认生成！！！！</p><p><strong>下列为索引生成规则及请求参数：</strong></p><p>1）template指定的”searchlog-*”表示该template将应用于searchlog-开头的索引的创建，并与order参数一起决定哪个模板生效（同名称规则的order更大的模板生效）；</p><p>2）setting节点下refresh_interval参数表示数据自动刷新的频率（默认1s），由于日志文件实时性要求并不是特别高，因此这里可以酌情降低频率以提高索引的写入性能；</p><pre class="line-numbers language-json"><code class="language-json">#查询索引GET /_cat/indices?v#模糊查询索引GET _cat/indices/log*DELETE loginfo<span class="token number">-2021</span>-<span class="token number">01</span>-<span class="token number">07</span>#查询索引下所有数据GET loginfo<span class="token number">-2021</span>-<span class="token number">01</span>-<span class="token number">07</span>/_search?pretty<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#获取文档GET loginfo<span class="token number">-2021</span>-<span class="token number">01</span>-<span class="token number">04</span>/_doc/b18izXYBqI-k2LwG7vaq?pretty#获取模板GET _template/loginfo#删除模板DELETE _template/loginfo#添加模板PUT _template/loginfo<span class="token punctuation">{</span>  <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"index_patterns"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"loginfo*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>      <span class="token property">"max_result_window"</span><span class="token operator">:</span> <span class="token number">2147483647</span><span class="token punctuation">,</span>      <span class="token property">"refresh_interval"</span><span class="token operator">:</span> <span class="token string">"10s"</span><span class="token punctuation">,</span>      <span class="token property">"store"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"fs"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"@timestamp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"@version"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"dateTime"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"level"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"thread"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"class"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"port"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"applicationName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"traceId"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"spanId"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"method"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"message"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                            <span class="token property">"ignore_above"</span><span class="token operator">:</span> <span class="token number">256</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"dynamic_templates"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token property">"longs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"match_mapping_type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token string">"l_*"</span><span class="token punctuation">,</span>                    <span class="token property">"unmatch"</span><span class="token operator">:</span> <span class="token string">"*_text"</span><span class="token punctuation">,</span>                    <span class="token property">"mapping"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token property">"shorts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"match_mapping_type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>                    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token string">"s_*"</span><span class="token punctuation">,</span>                    <span class="token property">"unmatch"</span><span class="token operator">:</span> <span class="token string">"*_text"</span><span class="token punctuation">,</span>                    <span class="token property">"mapping"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"short"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"display_es"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Logstash部署"><a href="#Logstash部署" class="headerlink" title="Logstash部署"></a>Logstash部署</h2><p>1.elasticsearch官网下载7.8.1logstash</p><p>2.解压后进入config</p><p>3.增加配置文件logstash-es.conf</p><p>4.增加内容</p><pre class="line-numbers language-json"><code class="language-json">input <span class="token punctuation">{</span>    kafka <span class="token punctuation">{</span>        type => <span class="token string">"loginfo"</span>        bootstrap_servers => <span class="token punctuation">[</span><span class="token string">"10.0.1.104:9092,10.0.1.117:9092,10.0.1.127:9092"</span><span class="token punctuation">]</span>        group_id => <span class="token string">"loginfo"</span>        topics => <span class="token punctuation">[</span><span class="token string">"loginfo"</span><span class="token punctuation">]</span>        consumer_threads => <span class="token number">1</span>        decorate_events => <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>#过滤器，去除换行符，将消息以json格式解析filter <span class="token punctuation">{</span>   multiline <span class="token punctuation">{</span>        pattern => <span class="token string">"^\d{4}-\d{1,2}-\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}"</span>        negate => <span class="token boolean">true</span>          what => <span class="token string">"previous"</span>     <span class="token punctuation">}</span>       mutate <span class="token punctuation">{</span>        gsub => <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"    "</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>        gsub => <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"[\u0000-\u000A]"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>         gsub => <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"\r"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    json<span class="token punctuation">{</span>        source => <span class="token string">"message"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#消息输出到es集群，根据时间建立不同索引loginfo-%<span class="token punctuation">{</span>+yyyy-MM-dd<span class="token punctuation">}</span>output <span class="token punctuation">{</span>        if<span class="token punctuation">[</span>type<span class="token punctuation">]</span> == <span class="token string">"loginfo"</span> <span class="token punctuation">{</span>                elasticsearch <span class="token punctuation">{</span>                        hosts => <span class="token punctuation">[</span><span class="token string">"10.0.1.104:9200"</span><span class="token punctuation">,</span><span class="token string">"10.0.1.117:9200"</span><span class="token punctuation">,</span><span class="token string">"10.0.1.127:9200"</span><span class="token punctuation">]</span>                        #index => <span class="token string">"log-service"</span>                         #codec => <span class="token string">"json"</span> 这里写好像没用，还没测试，暂时注释                        index => <span class="token string">"loginfo-%{+yyyy-MM-dd}"</span>  #使用自定义名称                                       <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       stdout <span class="token punctuation">{</span>         codec => json           <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还不清晰的可以参考：<a href="https://www.cnblogs.com/yuhuLin/p/7018858.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuhuLin/p/7018858.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么用到ELK&quot;&gt;&lt;a href=&quot;#为什么用到ELK&quot; class=&quot;headerlink&quot; title=&quot;为什么用到ELK&quot;&gt;&lt;/a&gt;为什么用到ELK&lt;/h2&gt;&lt;p&gt;参考整理：&lt;a href=&quot;https://www.cnblogs.com/aresxin/
      
    
    </summary>
    
      <category term="项目" scheme="https://arthurjq.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="elasticsearch" scheme="https://arthurjq.com/tags/elasticsearch/"/>
    
      <category term="工具" scheme="https://arthurjq.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="日志系统" scheme="https://arthurjq.com/tags/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
